{"cat": "animals", "slot": "product", "value": "honey", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be used to make honey. \n        Output: ", "result": "\n            ant, bee, comb, honey, hive, nectar, pollen, propolis, royal jelly\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Create an empty list to store the words\n    words = []\n    \n    # Use a for loop to iterate through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if word.category == category and word.satisfies(condition):\n            # If the word satisfies"}
{"cat": "animals", "slot": "product", "value": "mucus", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be used to make mucus. \n        Output: ", "result": "\n        dog, cat, snot, phlegm, mucus, slime, goo, gunk, booger, mucous\n\"\"\"\n\nprint(dog, cat, snot, phlegm, mucus, slime, goo, gunk, booger, mucous)"}
{"cat": "animals", "slot": "product", "value": "wax", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be used to make wax. \n        Output: ", "result": "\n        dog, cat, bee, spider, honey, candle, wax, hive, silk, worm. \n        \"\"\"\n        category = 'animals'\n        condition = 'can be used to make wax'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('animals', 'can be used to make wax'))\n```\nOutput:\n```\ndog, cat, bee, spider, honey, candle, wax, hive, sil"}
{"cat": "animals", "slot": "product", "value": "propolis", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be used to make propolis. \n        Output: ", "result": "\n```\ncat, bee, honey, propolis, wax, pollen, royal jelly, venom, hive, honeycomb\n```\nExplanation: The words that can be used to make propolis are `cat`, `bee`, `honey`, `propolis`, `wax`, `pollen`, `royal jelly`, `venom`, `hive`, and `honeycomb`.\n```"}
{"cat": "animals", "slot": "time", "value": "summer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: live during summer. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "time", "value": "night", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: live during night. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "sound", "value": "growl", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can growl. \n        Output: ", "result": "\n          dog, cat, lion, tiger, bear, wolf, snake, crocodile, elephant, hippo\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"growl\" in word:\n            words.append(word)\n    return words\n\ndef get_anagrams(word_list):\n    anagrams = []\n    for word in word_list:\n        anagrams.extend(word_list.count(word) > 0)\n    return anagrams\n\ndef"}
{"cat": "animals", "slot": "sound", "value": "trumpeting", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can trumpeting. \n        Output: ", "result": " elephant, giraffe, rhinoceros, hippopotamus, zebra, lion, tiger, panther, leopard, cheetah. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        condition = Condition.objects.get(name='can trumpeting')\n        words = Word.objects.filter(category=category, condition=condition)\n        return ', '.join(words)\n"}
{"cat": "animals", "slot": "sound", "value": "croaking", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can croaking. \n        Output: ", "result": "\n```\nfrog, croak, croaking, croaker, croaks, croakingly, croakerish, croaksy, croaky, croakiness\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: edible. \n        Output: \n```\napple, banana, cherry, date, fig, grape, kiwi, mango, orange, pear\n"}
{"cat": "animals", "slot": "sound", "value": "bark", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can bark. \n        Output: ", "result": "\n            dog, \n            cat, \n            elephant, \n            giraffe, \n            hippopotamus, \n            lion, \n            monkey, \n            seal, \n            walrus, \n            zebra\n        \"\"\"\n        category = \"animals\"\n        words = [\n            \"dog\",\n            \"cat\",\n            \"elephant\",\n            \"giraffe\",\n            \"hippopotamus\",\n            \"lion\",\n            \"monkey\",\n            \""}
{"cat": "animals", "slot": "sound", "value": "cry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can cry. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "shape", "value": "long", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be long. \n        Output: ", "result": "\n        elephant, giraffe, hippopotamus, kangaroo, koala, llama, \n        meerkat, opossum, penguin, rhinoceros, sloth, \n        tiger, warthog, wombat, zebra. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, length__gte=5)\n        return [word.name for word in words]\n\n    def long_anim"}
{"cat": "animals", "slot": "shape", "value": "elongated", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be elongated. \n        Output: ", "result": "\n        elephant, giraffe, snake, crocodile, whale, alligator, \n        hippopotamus, rhinoceros, lizard, turtle.\n    \"\"\"\n    words = []\n    for word in animal_words:\n        if len(word) > 4:\n            words.append(word)\n    return words\n\ndef get_animals_with_length_4(animal_words):\n    \"\"\"\n    Given a list of words, return a list of words that have exactly 4 letters."}
{"cat": "animals", "slot": "accessory", "value": "leash", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: may have to do with leash. \n        Output: ", "result": " dog, cat, bird, fish, horse, cow, sheep, pig, chicken, turtle\n    \"\"\"\n    print(\"Category:\", category)\n    print(\"Condition:\", condition)\n    words = []\n    for word in all_words:\n        if word.lower().startswith(category.lower()):\n            if condition.lower() in word.lower():\n                words.append(word)\n    if words:\n        print(\"Words:\", \", \".join(words))\n    else:\n        print(\"No words found.\")\n```\nExample"}
{"cat": "animals", "slot": "accessory", "value": "muzzle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: may have to do with muzzle. \n        Output: ", "result": "\n            1. Elephant\n            2. Giraffe\n            3. Hippopotamus\n            4. Kangaroo\n            5. Koala\n            6. Panda\n            7. Rhinoceros\n            8. Tiger\n            9. Zebra\n            10. Chimpanzee\n        \"\"\"\n        animal_words = [\"elephant\", \"giraffe\", \"hippopotamus\", \"kangaroo\", \"koala\", \"panda\", \"rhinoceros\", \"tiger\", \"zeb"}
{"cat": "animals", "slot": "shape", "value": "circular", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be circular. \n        Output: ", "result": "\n        elephant, giraffe, hippopotamus, jellyfish, kangaroo, octopus, penguin, snake, spider, zebra\n    \"\"\"\n    animal_words = [\n        \"elephant\",\n        \"giraffe\",\n        \"hippopotamus\",\n        \"jellyfish\",\n        \"kangaroo\",\n        \"octopus\",\n        \"penguin\",\n        \"snake\",\n        \"spider\",\n        \"zebra\"\n    ]\n   "}
{"cat": "animals", "slot": "shape", "value": "round", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be round. \n        Output: ", "result": "\n            dog, cat, horse, cow, sheep, pig, giraffe, elephant, rhinoceros, hippopotamus\n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category)\n        round_words = []\n        for word in words:\n            if 'round' in word.text.lower():\n                round_words.append(word)\n        if round_words:\n            result = ', '.join(round_words)\n        else:\n           "}
{"cat": "animals", "slot": "shape", "value": "pear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be pear. \n        Output: ", "result": "\n          dog, cat, bird, fish, pear, elephant, giraffe, lion, tiger, zebra\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    words = Word.objects.filter(category=category)\n    filtered_words = []\n    for word in words:\n        if word.word.endswith('pear'):\n            filtered_words.append(word)\n    filtered_words = sorted(filtered_words, key=lambda x: x.word.lower())\n    return filtered_"}
{"cat": "animals", "slot": "accessory", "value": "dog", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: may have to do with dog. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "group", "value": "herd", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: belong to herd. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "group", "value": "swarm", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: belong to swarm. \n        Output: ", "result": "\n          dog, bee, ant, flock, swarm, hive, colony, horde, school, swarm\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    condition = Condition.objects.get(name='belong to swarm')\n    words = Word.objects.filter(category=category, condition=condition)\n    return words.distinct().order_by('name')\n\ndef get_random_word_from_category(category):\n    \"\"\"\n    Retrieve a random word from the given category."}
{"cat": "animals", "slot": "group", "value": "infestation", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: belong to infestation. \n        Output: ", "result": "\n        dog, ant, cockroach, termite, flea, tick, mosquito, bedbug, lice, mite\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Create an empty list to store the words\n    words = []\n    \n    # Use a for loop to iterate through all the words in the vocabulary\n    for word in vocabulary:\n        # Use the str.startswith() method to check if the word starts with the category\n        if word.startswith(category):\n"}
{"cat": "animals", "slot": "sound", "value": "yelp", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can yelp. \n        Output: ", "result": "\n          dog, cat, bird, fish, snake, monkey, lion, tiger, bear, wolf\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"yelp\" in word:\n            words.append(word)\n    return words\n\ndef get_anagrams(word_list):\n    \"\"\"\n    Given a list of words, return a list of anagrams of the words. \n        Desired output: a list of words. \n        Example: \n            word_list = [\"cat\","}
{"cat": "animals", "slot": "group", "value": "hive", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: belong to hive. \n        Output: ", "result": "\n```\nbee, honey, hive, honeycomb, drone, worker, queen, pollen, wax, honeybee\n```\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: belong to citrus family. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine, mandarin, clementine, pomelo,"}
{"cat": "animals", "slot": "sound", "value": "howl", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can howl. \n        Output: ", "result": "\n            1. wolf\n            2. coyote\n            3. dog\n            4. fox\n            5. owl\n            6. seal\n            7. whale\n            8. elephant\n            9. walrus\n            10. hyena\n        \"\"\"\n        words = [\n            'wolf',\n            'coyote',\n            'dog',\n            'fox',\n            'owl',\n            'seal',\n            'whale',\n            'elephant',\n            'walrus',\n            'hy"}
{"cat": "animals", "slot": "accessory", "value": "collar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: may have to do with collar. \n        Output: ", "result": "\n        dog, cat, collar, leash, neck, tag, chain, collarbone, collar-and-tie, collar-and-leash \n    \"\"\"\n    category = \"animals\"\n    condition = \"may have to do with collar\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_with_numbers(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of 10 words that belong to the category and satisfy the condition."}
{"cat": "animals", "slot": "user", "value": "cook", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used by cooks. \n        Output: ", "result": "\n        dog, chicken, beef, lamb, pork, duck, goose, turkey, fish, shrimp\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    condition = 'are used by cooks'\n    words = Word.objects.filter(category=category, condition=condition).values_list('word', flat=True).distinct()\n    return ', '.join(words)\n\ndef get_random_word_from_category(category):\n    \"\"\"\n    Returns a random word from the given category."}
{"cat": "animals", "slot": "user", "value": "lover", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used by lovers. \n        Output: ", "result": "\n            1. Penguin\n            2. Seagull\n            3. Butterfly\n            4. Dolphin\n            5. Elephant\n            6. Kangaroo\n            7. Giraffe\n            8. Tiger\n            9. Lion\n            10. Zebra\n        \"\"\"\n        words = [\n            \"Penguin\",\n            \"Seagull\",\n            \"Butterfly\",\n            \"Dolphin\",\n            \"Elephant\",\n            \"Kangaroo\",\n            \"Giraffe\","}
{"cat": "animals", "slot": "user", "value": "hunter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used by hunters. \n        Output: ", "result": "\n            1. Bow\n            2. Arrows\n            3. Rifle\n            4. Bullets\n            5. Shotgun\n            6. Sniper\n            7. Rifle scope\n            8. Hunting knife\n            9. Camouflage\n            10. Binoculars\n        \"\"\"\n        words = [\n            \"Bow\",\n            \"Arrows\",\n            \"Rifle\",\n            \"Bullets\",\n            \"Shotgun\",\n            \"Sniper\",\n            \"Rifle scope\",\n"}
{"cat": "animals", "slot": "user", "value": "poacher", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used by poachers. \n        Output: ", "result": "\n            1. rifle\n            2. poacher\n            3. snare\n            4. tranquilizer\n            5. spotlight\n            6. camera\n            7. binoculars\n            8. night-vision\n            9. GPS\n            10. satellite phone\n        \"\"\"\n        words = [\n            \"rifle\",\n            \"poacher\",\n            \"snare\",\n            \"tranquilizer\",\n            \"spotlight\",\n            \"camera\",\n            \"binoculars\",\n            \"night-vision\",\n           "}
{"cat": "animals", "slot": "user", "value": "policeman", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used by policemen. \n        Output: ", "result": "\n            1. K-9\n            2. Canine\n            3. Dog\n            4. Police dog\n            5. Patrol dog\n            6. K-9 unit\n            7. Canine unit\n            8. Dog handler\n            9. Police dog trainer\n            10. Canine trainer\n        \"\"\"\n        words = [\n            \"K-9\",\n            \"Canine\",\n            \"Dog\",\n            \"Police dog\",\n            \"Patrol dog\",\n            \"K-9 unit\",\n            \"Canine unit\",\n            \""}
{"cat": "animals", "slot": "user", "value": "blind", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used by blinds. \n        Output: ", "result": "\n        dog, cat, horse, sheep, goat, cow, pig, chicken, lion, tiger\n    \"\"\"\n    print(\"Comma separated list of 10 words that belong to the category and satisfy the condition: \", end=\"\")\n    for word in words:\n        print(word, end=\", \")\n    print(\"\")\n```\nExample:\n```\nEnter the category: \nEnter the condition: \n\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated"}
{"cat": "animals", "slot": "user", "value": "beekeeper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used by beekeepers. \n        Output: ", "result": "\n        bee, hive, swarm, colony, queen, worker, drone, honey, apiary, frame\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split(\" \")\n    condition_words = condition.split(\" \")\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Iterate over the words in the condition\n    for word in condition_words:\n        # Check if the word is in"}
{"cat": "animals", "slot": "user", "value": "shepherd", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used by shepherds. \n        Output: ", "result": "\n            1. sheep\n            2. dog\n            3. goat\n            4. cow\n            5. horse\n            6. pig\n            7. llama\n            8. camel\n            9. cat\n            10. chicken\n        \"\"\"\n        shepherd_words = [\"sheep\", \"dog\", \"goat\", \"cow\", \"horse\", \"pig\", \"llama\", \"camel\", \"cat\", \"chicken\"]\n        shepherd_words = [word for word in shepherd_words if \"shepherd\""}
{"cat": "animals", "slot": "user", "value": "owner", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used by owners. \n        Output: ", "result": "\n        dog, cat, bird, fish, horse, cow, sheep, pig, chicken, turtle\n    \"\"\"\n    category = \"animals\"\n    condition = \"are used by owners\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"animals\", \"are used by owners\"))\n```\nOutput:\n```\ndog, cat, bird, fish, horse, cow, sheep, pig, chicken, turtle\n```"}
{"cat": "animals", "slot": "accessory", "value": "kennel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: may have to do with kennel. \n        Output: ", "result": "\n            1. Dog\n            2. Kennel\n            3. Bark\n            4. Collar\n            5. Leash\n            6. Food\n            7. Water\n            8. Exercise\n            9. Vet\n            10. Grooming\n        \"\"\"\n        animal_words = [\"Dog\", \"Kennel\", \"Bark\", \"Collar\", \"Leash\", \"Food\", \"Water\", \"Exercise\", \"Vet\", \"Grooming\"]\n        kennel_words = [word for word in animal_words if"}
{"cat": "animals", "slot": "accessory", "value": "trainer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: may have to do with trainer. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "accessory", "value": "handler", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: may have to do with handler. \n        Output: ", "result": "\n        dog, cat, bird, horse, fish, snake, lion, tiger, bear, monkey\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() == condition.lower():\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n# Example usage\nsolve(\"animals, may have to do with handler"}
{"cat": "animals", "slot": "purpose", "value": "food", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used for food. \n        Output: ", "result": "\n        dog, cat, chicken, beef, pork, lamb, fish, shrimp, lobster, crab\n```\n\n```\nDescribe a scenario where the category is \"vehicles\" and the condition is \"have more than 4 wheels\". \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: have more than 4 wheels. \n        Output: \n        car,"}
{"cat": "animals", "slot": "purpose", "value": "attraction", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used for attraction. \n        Output: ", "result": "\n            dog, cat, bird, butterfly, fish, snake, elephant, giraffe, monkey, lion\n\"\"\"\n\n# Define the function\ndef get_words_from_category(category, condition):\n    # Create an empty list to store the words\n    words = []\n    \n    # Use a for loop to iterate through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if word.category == category and word.satisfies(condition):\n"}
{"cat": "animals", "slot": "purpose", "value": "research", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used for research. \n        Output: ", "result": "\n        dog, cat, mouse, rat, hamster, guinea pig, rabbit, chicken, cow, pig\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    words = Word.objects.filter(category=category, used_for_research=True)\n    return [word.name for word in words]\n\n@app_command\ndef list_animals_by_research_category(request):\n    \"\"\"\n    List all animals that are used for research. \n    \"\"\"\n    category = Category.objects"}
{"cat": "animals", "slot": "purpose", "value": "guard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used for guard. \n        Output: ", "result": "\n          dog, \n          cat, \n          eagle, \n          lion, \n          tiger, \n          bear, \n          wolf, \n          hawk, \n          owl, \n          falcon\n    \"\"\"\n    category = \"animals\"\n    condition = \"are used for guard\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_by_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to"}
{"cat": "animals", "slot": "purpose", "value": "guard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used to guard. \n        Output: ", "result": "\n            1. guard\n            2. guard\n            3. guard\n            4. guard\n            5. guard\n            6. guard\n            7. guard\n            8. guard\n            9. guard\n            10. guard\n    \"\"\"\n    words = [\n        \"guard\",\n        \"guard\",\n        \"guard\",\n        \"guard\",\n        \"guard\",\n        \"guard\",\n        \"guard\",\n        \"guard\",\n        \"guard\",\n        \"guard\"\n    ]\n    return \", \".join(sorted(words))\n\ndef get_"}
{"cat": "animals", "slot": "purpose", "value": "hunting", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used for hunting. \n        Output: ", "result": "\n            1. Bow\n            2. Arrows\n            3. Quiver\n            4. Hunting\n            5. Rifle\n            6. Bullets\n            7. Shotgun\n            8. Sniper\n            9. Traps\n            10. Camouflage\n        \"\"\"\n        words = [\n            \"Bow\",\n            \"Arrows\",\n            \"Quiver\",\n            \"Hunting\",\n            \"Rifle\",\n            \"Bullets\",\n            \"Shotgun\",\n            \"Sniper\",\n"}
{"cat": "animals", "slot": "purpose", "value": "wild", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: None wild. \n        Output: ", "result": "\n```\ncat, dog, elephant, giraffe, horse, kangaroo, koala, lion, tiger, zebra\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: edible. \n        Output: \n```\napple, banana, cherry, date, fig, grape, lemon, orange, peach, plum\n"}
{"cat": "animals", "slot": "purpose", "value": "haulage", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used for haulage. \n        Output: ", "result": "\n        dog, elephant, giraffe, hippopotamus, jaguar, kangaroo, llama, ostrich, rhinoceros, tiger\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split(' ')\n    condition_words = condition.split(' ')\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Iterate over the condition words\n    for word in condition"}
{"cat": "animals", "slot": "purpose", "value": "stray", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: None stray. \n        Output: ", "result": "\n            dog, cat, horse, cow, sheep, pig, chicken, goat, lion, tiger\n        \"\"\"\n        category = 'animals'\n        condition = 'None stray'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_none_stray_animals(self):\n        result = self.get_words('animals', 'None stray')\n        self.assertEqual(result, 'dog, cat, horse, cow, sheep, pig,"}
{"cat": "animals", "slot": "purpose", "value": "beast of burden", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used for beast of burden. \n        Output: ", "result": "\n            1. Elephant\n            2. Camel\n            3. Donkey\n            4. Horse\n            5. Mule\n            6. Ox\n            7. Pony\n            8. Zebra\n            9. Giraffe\n            10. Rhinoceros\n        \"\"\"\n        animal_words = [\"elephant\", \"camel\", \"donkey\", \"horse\", \"mule\", \"ox\", \"pony\", \"zebra\", \"giraffe\", \"rhinoceros\"]\n        beast_of_burden_"}
{"cat": "animals", "slot": "purpose", "value": "transport", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used for transport. \n        Output: ", "result": " dog, cat, car, bus, train, airplane, boat, bike, taxi, subway\n    \"\"\"\n    category = 'animals'\n    condition = 'are used for transport'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: animals. \n        Output: dog, cat, bird,"}
{"cat": "animals", "slot": "behavior", "value": "playful", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be playful. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "behavior", "value": "obedient", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be obedient. \n        Output: ", "result": "\n            dog, cat, horse, sheep, goat, pig, chicken, cow, elephant, giraffe\n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category)\n        obedient_words = []\n        for word in words:\n            if word.text.lower().startswith(\"can\"):\n                obedient_words.append(word.text)\n        obedient_words = sorted(obedient_words)\n        return obedient_"}
{"cat": "animals", "slot": "behavior", "value": "cute", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be cute. \n        Output: ", "result": "\n          dog, cat, kitten, puppy, bunny, panda, koala, sloth, otter, hedgehog\n        \"\"\"\n        category = Category.objects.get(name='animals')\n        cute_words = Word.objects.filter(category=category).filter(satisfies_cuteness_condition())\n        return ', '.join(cute_words.values_list('name', flat=True))\n\n    def get_top_rated_movies(self):\n        \"\"\"\n        Retrieve the top r"}
{"cat": "animals", "slot": "behavior", "value": "faithful", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be faithful. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "behavior", "value": "loyal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be loyal. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "behavior", "value": "affectionate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be affectionate. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "behavior", "value": "healthy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be healthy. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "behavior", "value": "friendly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be friendly. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "behavior", "value": "feral", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be feral. \n        Output: ", "result": "\n          dog, cat, fox, wolf, lion, tiger, bear, raccoon, skunk, coyote\n    \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"feral\" in word:\n            words.append(word)\n    return words\n\ndef get_anagrams(word_list):\n    \"\"\"\n    Given a list of words, return a list of all anagrams of the words in the list. \n        Desired output: a list of words. \n        Example: \n"}
{"cat": "animals", "slot": "behavior", "value": "aggressive", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be aggressive. \n        Output: ", "result": "\n            1. Lion\n            2. Tiger\n            3. Shark\n            4. Bear\n            5. Wolf\n            6. Elephant\n            7. Grizzly\n            8. Crocodile\n            9. Snake\n            10. Alligator\n        \"\"\"\n        words = []\n        for word in animal_words:\n            if word.lower() in animal_aggressive:\n                words.append(word)\n        return words\n\ndef get_anagrams(word):\n    \"\"\"\n    Provide a function to get"}
{"cat": "animals", "slot": "behavior", "value": "rabid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be rabid. \n        Output: ", "result": "\n            dog, \n            cat, \n            bat, \n            fox, \n            wolf, \n            raccoon, \n            skunk, \n            squirrel, \n            snake, \n            bat. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category)\n        rabid_words = []\n        for word in words:\n            if word.is_rabid:\n                rabid_words.append(word)\n        ra"}
{"cat": "animals", "slot": "behavior", "value": "happy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be happy. \n        Output: ", "result": "\n          dog, cat, bird, fish, elephant, giraffe, monkey, lion, tiger, zebra\n    \"\"\"\n    happy_animals = []\n    for animal in animals:\n        if animal.can_be_happy():\n            happy_animals.append(animal)\n    return happy_animals\n\ndef print_animals(animals):\n    for animal in animals:\n        print(animal)\n\nanimals = [\n    \"dog\",\n    \"cat\",\n    \"bird\",\n    \""}
{"cat": "animals", "slot": "behavior", "value": "cunning", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be cunning. \n        Output: ", "result": "\n          dog, cat, fox, snake, chameleon, owl, bat, raccoon, octopus, shark\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    cunning_words = Word.objects.filter(category=category, definition__contains='cunning')\n    cunning_words = [word.name for word in cunning_words]\n    return cunning_words\n\ndef get_cunning_animals(category=None):\n    \"\"\"\n    Retrieve a list of 10 animals"}
{"cat": "animals", "slot": "behavior", "value": "submissive", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be submissive. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "group", "value": "colony", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: belong to colony. \n        Output: ", "result": "\n```\ncat, ant, bee, colony, hive, swarm, horde, flock, school, troop\n```\nExplanation: \n```\nThe words that belong to the category \"animals\" and satisfy the condition \"belong to colony\" are: \ncat, ant, bee, colony, hive, swarm, horde, flock, school, troop.\n```"}
{"cat": "animals", "slot": "movement", "value": "slow", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are slow. \n        Output: ", "result": "\n          dog, \n          turtle, \n          sloth, \n          snail, \n          crab, \n          snail, \n          tortoise, \n          sloth, \n          turtle.\n    \"\"\"\n    slow_animals = [\n        \"sloth\",\n        \"turtle\",\n        \"snail\",\n        \"crab\",\n        \"snail\",\n        \"tortoise\",\n        \"sloth\",\n        \"dog\"\n    ]\n    slow_animals_list ="}
{"cat": "animals", "slot": "movement", "value": "attack", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can attack. \n        Output: ", "result": " dog, cat, snake, lion, tiger, shark, bear, wolf, crocodile, scorpion. \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    words = []\n    if category == \"animals\":"}
{"cat": "animals", "slot": "movement", "value": "chase", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can chase. \n        Output: ", "result": "\n            dog, cat, cheetah, lion, tiger, fox, wolf, bear, leopard, panther\n        \"\"\"\n        category = Category.objects.get(name='animals')\n        condition = Condition.objects.get(name='can chase')\n        words = Word.objects.filter(category=category, condition=condition)\n        return [word.name for word in words]\n\n    def load_data(self):\n        self.categories = Category.objects.all()\n        self.conditions = Condition.objects"}
{"cat": "animals", "slot": "movement", "value": "attack", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can attack. \n        Output: ", "result": " dog, cat, snake, lion, tiger, shark, bear, wolf, crocodile, scorpion. \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    words = []\n    if category == \"animals\":"}
{"cat": "animals", "slot": "size", "value": "small", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be small. \n        Output: ", "result": "\n          dog, cat, hamster, gerbil, mouse, parakeet, canary, finch, goldfish, guinea pig \n    \"\"\"\n    category = \"animals\"\n    condition = \"can be small\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"animals\", \"can be big\"))\nprint(get_words(\"animals\", \"can be small\"))\nprint(get_words(\"animals\", \"can be medium\"))\n"}
{"cat": "animals", "slot": "size", "value": "large", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be large. \n        Output: ", "result": "\n            elephant, giraffe, hippopotamus, kangaroo, llama, moose, \n            rhinoceros, sloth, walrus, zebra\n    \"\"\"\n    category = 'animals'\n    condition = 'can be large'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Test the function\nprint(get_words('animals', 'can be large'))  # Output: elephant, giraffe, hippopotamus, kang"}
{"cat": "animals", "slot": "size", "value": "big", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be big. \n        Output: ", "result": "\n            dog, elephant, giraffe, hippopotamus, kangaroo, lion, rhinoceros, tiger, whale, zebra\n        \"\"\"\n        category = Category.objects.get(name='animals')\n        results = []\n        for word in Word.objects.all():\n            if word.category == category and word.satisfies_condition():\n                results.append(word.name)\n        return results\n\n    def get_random_word(self):\n        category = Category.objects.get("}
{"cat": "animals", "slot": "size", "value": "medium", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be medium. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "group", "value": "larva", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: belong to larva. \n        Output: ", "result": "\n          ant, butterfly, caterpillar, fly, grub, larva, maggot, mosquito, pupa, worm\n    \"\"\"\n    category = \"animals\"\n    condition = \"belong to larva\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n"}
{"cat": "animals", "slot": "user", "value": "handler", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used by handlers. \n        Output: ", "result": "\n        dog, \n        cat, \n        bird, \n        fish, \n        hamster, \n        rabbit, \n        snake, \n        turtle, \n        lizard, \n        gerbil.\n    \"\"\"\n    animal_words = [\"dog\", \"cat\", \"bird\", \"fish\", \"hamster\", \"rabbit\", \"snake\", \"turtle\", \"lizard\", \"gerbil\"]\n    handler_words = [word for word in animal_words if \"handler\" in word]\n    return handler"}
{"cat": "animals", "slot": "user", "value": "trainer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used by trainers. \n        Output: ", "result": "\n        dog, \n        cat, \n        horse, \n        elephant, \n        giraffe, \n        lion, \n        tiger, \n        bear, \n        monkey, \n        chimpanzee. \n        \"\"\"\n        category = 'animals'\n        condition = 'are used by trainers'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('animals', 'are used by trainers'))\n```\nOutput:\n"}
{"cat": "animals", "slot": "purpose", "value": "pet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used for pet. \n        Output: ", "result": "\n          dog, cat, bird, fish, hamster, rabbit, guinea pig, turtle, snake, lizard\n\"\"\"\n\n# Define the function\ndef get_pet_words(category, condition):\n    # Create an empty list to store the words\n    pet_words = []\n    # Use a for loop to iterate through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if word.category == category and word.satisfies(condition):\n            #"}
{"cat": "animals", "slot": "sound", "value": "pet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can pet. \n        Output: ", "result": "\n            dog, cat, fish, bird, hamster, rabbit, snake, lizard, turtle, iguana\n\"\"\"\n\n# Define the function\ndef get_pet_words(category, condition):\n    # Create an empty list to store the words\n    pet_words = []\n    \n    # Loop through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if word.category == category and word.satisfies(condition):\n            # Add the word to"}
{"cat": "animals", "slot": "group", "value": "nest", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: belong to nest. \n        Output: ", "result": "\n          dog, cat, bird, spider, ant, bee, worm, snake, elephant, giraffe\n    \"\"\"\n    category = \"animals\"\n    condition = \"belong to nest\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "animals", "slot": "purpose", "value": "prey", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used for prey. \n        Output: ", "result": "\n          dog, cat, mouse, rabbit, bird, fish, frog, snake, lion, cheetah\n    \"\"\"\n    category = \"animals\"\n    condition = \"are used for prey\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"animals\", \"are used for prey\"))\n```\nOutput:\n```\ndog, cat, mouse, rabbit, bird, fish, frog, snake, lion, cheetah\n```"}
{"cat": "animals", "slot": "part", "value": "eye", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  eye. \n        Output: ", "result": " elephant, giraffe, horse, kangaroo, lion, monkey, octopus, penguin, shark, zebra. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, has_eye__exact=True)\n        return [word.name for word in words]\n\n    def get_animals_with_eye_category(self):\n        category = Category.objects.get(name='animals')\n        words = Word"}
{"cat": "animals", "slot": "part", "value": "head", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  head. \n        Output: ", "result": " elephant, giraffe, hippopotamus, kangaroo, lion, monkey, rhinoceros, tiger, zebra, \n```"}
{"cat": "animals", "slot": "part", "value": "skin", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  skin. \n        Output: ", "result": " cat, dog, elephant, giraffe, horse, lion, monkey, pig, snake, zebra. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category)\n        filtered_words = []\n        for word in words:\n            if 'skin' in word.text:\n                filtered_words.append(word)\n        result = ', '.join(filtered_words)\n        return result\n\n    def get_random_word(self):"}
{"cat": "animals", "slot": "part", "value": "leg", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  leg. \n        Output: ", "result": " elephant, giraffe, kangaroo, lion, monkey, octopus, penguin, snake, spider, zebra. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category)\n        filtered_words = []\n        for word in words:\n            if 'leg' in word.text:\n                filtered_words.append(word)\n        filtered_words_list = ', '.join(filtered_words)\n        print(filtered_"}
{"cat": "animals", "slot": "part", "value": "mouth", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  mouth. \n        Output: ", "result": " dog, cat, bird, fish, snake, elephant, giraffe, monkey, lion, zebra. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, can_have_mouth=True)\n        return [word.name for word in words]\n\n    def get_random_word_from_category(self, category):\n        \"\"\"\n        Retrieve a random word from the given category.\n        \"\"\"\n        words = Word.objects.filter"}
{"cat": "animals", "slot": "part", "value": "fur", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  fur. \n        Output: ", "result": " dog, cat, rabbit, fox, bear, raccoon, lynx, mink, otter, wolf. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, has_fur=True)\n        return words.distinct().values_list('word', flat=True).filter(count__gt=1).annotate(count=Count('word')).order_by('count', 'word')[:10]\n\n    def get_animals_with_no"}
{"cat": "animals", "slot": "part", "value": "paw", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  paw. \n        Output: ", "result": " cat, dog, lion, tiger, panther, cheetah, leopard, bear, wolf, fox. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category)\n        word_list = [word.name for word in words if 'paw' in word.name and 'can' in word.name and 'have' in word.name]\n        return ', '.join(word_list)\n\n    def get_anagrams(self, word):\n"}
{"cat": "animals", "slot": "part", "value": "coat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  coat. \n        Output: ", "result": " cat, coat, dog, coat, horse, coat, cow, coat, sheep, coat. \n    \"\"\"\n    cats = [\"cat\"]\n    dogs = [\"dog\"]\n    horses = [\"horse\"]\n    cows = [\"cow\"]\n    sheep = [\"sheep\"]\n\n    words = []\n    for animal in cats + dogs + horses + cows + sheep:\n        if animal.endswith(\"coat\"):\n            words.append(animal)\n\n    output = \", \".join(words)\n    print(output)\n```\nThis"}
{"cat": "animals", "slot": "part", "value": "ear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  ear. \n        Output: ", "result": " cat, dog, elephant, giraffe, horse, kangaroo, koala, lion, monkey, zebra. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category)\n        filtered_words = []\n        for word in words:\n            if 'ear' in word.text:\n                filtered_words.append(word)\n        filtered_words_list = ', '.join(filtered_words)\n        print(filtered_words_list)"}
{"cat": "animals", "slot": "part", "value": "tongue", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  tongue. \n        Output: ", "result": " cat, dog, elephant, giraffe, hippopotamus, kangaroo, lion, monkey, snake, zebra. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, has_tongue=True)\n        return [word.name for word in words]\n\n    def get_animals_with_tongue_and_claws(self):\n        \"\"\"\n        Provide a list of 10 words that belong"}
{"cat": "animals", "slot": "part", "value": "hair", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  hair. \n        Output: ", "result": " dog, cat, elephant, giraffe, horse, lion, monkey, rabbit, sheep, zebra. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, has_hair__exact=True)\n        return [word.name for word in words]\n\n    def get_hairy_animals(self):\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired"}
{"cat": "animals", "slot": "part", "value": "tail", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  tail. \n        Output: ", "result": " dog, cat, elephant, giraffe, horse, kangaroo, lion, monkey, snake, zebra. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category)\n        filtered_words = []\n        for word in words:\n            if 'tail' in word.text:\n                filtered_words.append(word)\n        filtered_words = sorted(filtered_words, key=lambda x: x.text.lower())\n        return filtered"}
{"cat": "animals", "slot": "part", "value": "abdomen", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  abdomen. \n        Output: ", "result": " elephant, giraffe, kangaroo, lion, monkey, octopus, pig, snake, spider, zebra. \n        \"\"\"\n        category = 'animals'\n        condition = 'can have abdomen'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words"}
{"cat": "animals", "slot": "part", "value": "bone", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  bone. \n        Output: ", "result": " dog, elephant, giraffe, hippopotamus, \n        kangaroo, lion, rhinoceros, tiger, zebra. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, text__contains='bone')\n        return [word.text for word in words]\n\n    def get_random_word_from_category(self, category):\n        \"\"\"\n        Retrieve a random word from the given category. \n       "}
{"cat": "animals", "slot": "part", "value": "foot", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  foot. \n        Output: ", "result": " elephant, giraffe, hippopotamus, kangaroo, lion, monkey, octopus, penguin, snake, zebra. \n        \"\"\"\n        category = 'animals'\n        condition = 'can have foot'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated"}
{"cat": "animals", "slot": "part", "value": "toe", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  toe. \n        Output: ", "result": " dog, cat, horse, cow, sheep, pig, elephant, giraffe, zebra, hippopotamus. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, text__contains='toe')\n        return [word.text for word in words]\n\n    def get_animals_with_num_legs(self, *args, **kwargs):\n        \"\"\"\n        Retrieve a list of words from the 'animals' category that"}
{"cat": "animals", "slot": "part", "value": "tooth", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  tooth. \n        Output: ", "result": " elephant, giraffe, hippopotamus, kangaroo, lion, monkey, panda, shark, tiger, zebra. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category)\n        filtered_words = []\n        for word in words:\n            if 'tooth' in word.text:\n                filtered_words.append(word)\n        result = ', '.join(filtered_words)\n        print(result)\n"}
{"cat": "animals", "slot": "part", "value": "neck", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  neck. \n        Output: ", "result": " elephant, giraffe, camel, llama, \n```"}
{"cat": "animals", "slot": "part", "value": "stinger", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  stinger. \n        Output: ", "result": " bee, wasp, hornet, bumblebee, yellowjacket, honeybee,\n```"}
{"cat": "animals", "slot": "part", "value": "flesh", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  flesh. \n        Output: ", "result": " elephant, giraffe, hippopotamus, kangaroo, lion, monkey, panda, raccoon, tiger, zebra. \n    \"\"\"\n    animal_words = [\n        \"elephant\",\n        \"giraffe\",\n        \"hippopotamus\",\n        \"kangaroo\",\n        \"lion\",\n        \"monkey\",\n        \"panda\",\n        \"raccoon\",\n        \"tiger\",\n        \"zebra\"\n    ]\n    flesh_words"}
{"cat": "animals", "slot": "part", "value": "antenna", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  antenna. \n        Output: ", "result": " dog, elephant, giraffe, octopus, squid, spider, starfish, whale, wolf, zebra\n    \"\"\"\n    category = \"animals\"\n    condition = \"can have antenna\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"animals\", \"can have legs\"))\n# Output:  cat, chicken, cow, deer, donkey, elephant, giraffe, horse, kangaroo, lion"}
{"cat": "animals", "slot": "part", "value": "tusk", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  tusk. \n        Output: ", "result": " elephant, walrus, narwhal, \n```"}
{"cat": "animals", "slot": "part", "value": "flag", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  flag. \n        Output: ", "result": " dog, cat, bird, fish, frog, snake, lion, tiger, elephant, zebra\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    words = Word.objects.filter(category=category, flag='can')\n    return ', '.join(words.values_list('word', flat=True))\n\n# Create some words and categories\ncategory1 = Category.objects.create(name='animals')\nword1 = Word.objects.create(word='cat', category=category1)\nword2 ="}
{"cat": "animals", "slot": "part", "value": "beak", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  beak. \n        Output: ", "result": " bird, chicken, duck, goose, gander, swan, quail, penguin, flamingo, crane. \n        \"\"\"\n        category = 'animals'\n        condition = 'can have beak'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category"}
{"cat": "animals", "slot": "part", "value": "shell", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  shell. \n        Output: ", "result": " dog, cat, snail, turtle, whale, oyster, crab, lobster, shrimp, octopus \n    \"\"\"\n    category = \"animals\"\n    condition = \"can have shell\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "animals", "slot": "part", "value": "nail", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  nail. \n        Output: ", "result": " cat, dog, horse, cow, sheep, pig, chicken, elephant, giraffe, zebra. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category)\n        filtered_words = []\n        for word in words:\n            if 'nail' in word.text:\n                filtered_words.append(word)\n        filtered_words_list = ', '.join(filtered_words)\n        print(filtered_words_list)\n```\n"}
{"cat": "animals", "slot": "part", "value": "tentacle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  tentacle. \n        Output: ", "result": " dog, octopus, squid, jellyfish, cuttlefish, nautilus, squid, octopus, jellyfish, cuttlefish \n    \"\"\"\n    animal_words = [\"dog\", \"octopus\", \"squid\", \"jellyfish\", \"cuttlefish\", \"nautilus\", \"squid\", \"octopus\", \"jellyfish\", \"cuttlefish\"]\n    tentacle_words = [word for word in animal_words if \"tentacle\" in word]\n    print(\", \".join(tentacle_words))"}
{"cat": "animals", "slot": "part", "value": "claw", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  claw. \n        Output: ", "result": " cat, lion, tiger, panther, leopard, jaguar, cheetah, cougar, puma, snow leopard. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, has_claw=True)\n        return [word.name for word in words]\n\n    def get_animals_with_claws_and_other_features(self, **kwargs):\n        \"\"\"\n        Retrieve a list of words that belong to the"}
{"cat": "animals", "slot": "part", "value": "belly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  belly. \n        Output: ", "result": " dog, elephant, giraffe, hippopotamus, kangaroo, llama, pig, rhinoceros, tiger, zebra. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category)\n        filtered_words = []\n        for word in words:\n            if 'belly' in word.text:\n                filtered_words.append(word)\n        result = ', '.join(filtered_words)\n        print(result)"}
{"cat": "animals", "slot": "part", "value": "horn", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  horn. \n        Output: ", "result": " Elephant, Giraffe, Rhinoceros, Buffalo, Moose, Deer, Antelope, Sheep, Goat, Cow. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, has_horn=True)\n        return [word.name for word in words]\n\n    def get_animals_with_claws(self):\n        \"\"\"\n        Retrieve a list of 10 words that belong to the category and satisfy the condition. \n"}
{"cat": "animals", "slot": "part", "value": "wing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  wing. \n        Output: ", "result": " elephant, giraffe, bird, bat, butterfly, mosquito, dragonfly, bee, spider, ant. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category)\n        filtered_words = []\n        for word in words:\n            if 'wing' in word.text:\n                filtered_words.append(word)\n        filtered_words = sorted(filtered_words, key=lambda x: x.text.lower())\n        return filtered"}
{"cat": "animals", "slot": "part", "value": "trunk", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  trunk. \n        Output: ", "result": " Elephant, Giraffe, Rhinoceros, Hippopotamus, Camel, Cheetah, Zebra, Tapir, Deer, Antelope. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, has_trunk=True)\n        return [word.name for word in words]\n\n    def get_animals_without_trunk(self):\n        \"\"\"\n        Provide a list of 10 words that belong to the"}
{"cat": "animals", "slot": "part", "value": "nose", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  nose. \n        Output: ", "result": " cat, dog, elephant, giraffe, horse, kangaroo, lion, monkey, rhinoceros, zebra. \n    \"\"\"\n    animal_words = [\"cat\", \"dog\", \"elephant\", \"giraffe\", \"horse\", \"kangaroo\", \"lion\", \"monkey\", \"rhinoceros\", \"zebra\"]\n    animal_words = [word for word in animal_words if \"nose\" in word and \"can\" in word]\n    print(\", \".join(animal_words"}
{"cat": "animals", "slot": "part", "value": "whisker", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  whisker. \n        Output: ", "result": " dog, cat, rabbit, whale, elephant, mouse, fox, bear, raccoon, skunk. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, text__contains='whisker')\n        return [word.text for word in words]\n\n    def get_animals_with_claws(self):\n        \"\"\"\n        Retrieve a list of animals that have claws.\n        \"\"\"\n        category = Category.objects.get(name='"}
{"cat": "animals", "slot": "part", "value": "feeler", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  feeler. \n        Output: ", "result": " elephant, giraffe, octopus, squid, jellyfish, starfish, crab, lobster, shrimp, snail \n    \"\"\"\n    animal_words = [\"elephant\", \"giraffe\", \"octopus\", \"squid\", \"jellyfish\", \"starfish\", \"crab\", \"lobster\", \"shrimp\", \"snail\"]\n    feeler_animal_words = [word for word in animal_words if \"feeler\" in word]\n    print(\", \".join(feeler_animal_words"}
{"cat": "animals", "slot": "part", "value": "sac", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  sac. \n        Output: ", "result": " dog, cat, sac, fish, bird, horse, cow, sheep, pig, elephant. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, text__contains='sac')\n        return [word.text for word in words]\n\n    def get_animals_with_sac(self):\n        \"\"\"\n        Retrieve a list of animals that can have sac. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n"}
{"cat": "animals", "slot": "part", "value": "sting", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  sting. \n        Output: ", "result": " dog, cat, bee, wasp, hornet, spider, scorpion, snake, tarantula, ant. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, ends_with='ing')\n        filtered_words = []\n        for word in words:\n            if 'sting' in word.word:\n                filtered_words.append(word.word)\n        result = ', '.join(filtered_words)\n        print(result)\n```\n"}
{"cat": "animals", "slot": "part", "value": "fang", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  fang. \n        Output: ", "result": " dog, cat, fox, wolf, bat, snake, crocodile, shark, alligator, lizard. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category)\n        fang_words = words.filter(text__contains='fang')\n        return fang_words.distinct().order_by('text')\n\n    def get_most_common_tags(self):\n        tags = Tag.objects.values_list('name', flat=True)"}
{"cat": "animals", "slot": "part", "value": "egg", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  egg. \n        Output: ", "result": " dog, cat, chicken, duck, goose, quail, pigeon, turkey, ostrich, emu. \n    \"\"\"\n    animal_words = [\"dog\", \"cat\", \"chicken\", \"duck\", \"goose\", \"quail\", \"pigeon\", \"turkey\", \"ostrich\", \"emu\"]\n    egg_animal_words = [word for word in animal_words if \"egg\" in word]\n    print(\", \".join(egg_animal_words))\n```\nExplanation:\n\n"}
{"cat": "animals", "slot": "part", "value": "pad", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  pad. \n        Output: ", "result": " dog, cat, pad, \n```"}
{"cat": "animals", "slot": "part", "value": "legs", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  legs. \n        Output: ", "result": " dog, cat, elephant, giraffe, lion, zebra, horse, chicken, cow, pig. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category)\n        filtered_words = []\n        for word in words:\n            if word.word.can_have_legs():\n                filtered_words.append(word.word)\n        filtered_words_list = ', '.join(filtered_words)\n        print(filtered_words_"}
{"cat": "animals", "slot": "part", "value": "body", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  body. \n        Output: ", "result": " elephant, giraffe, hippopotamus, kangaroo, lion, monkey, panda, rhinoceros, tiger, zebra. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, text__contains='body')\n        return [word.text for word in words]\n\n    def get_animals_with_legs(self):\n        \"\"\"\n        Provide a list of 10 words that belong to the category and"}
{"cat": "animals", "slot": "part", "value": "jaw", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  jaw. \n        Output: ", "result": " elephant, giraffe, hippopotamus, jaguar, kangaroo, lion, monkey, shark, tiger, zebra. \n        \"\"\"\n        category = 'animals'\n        condition = 'can have jaw'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma"}
{"cat": "animals", "slot": "movement", "value": "run", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can run. \n        Output: ", "result": "\n          dog, cat, horse, zebra, deer, antelope, giraffe, lion, cheetah, wildebeest\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    if category == \"animals\":\n        if condition == \"can fly\":\n            words.extend(get_birds())\n        elif condition =="}
{"cat": "animals", "slot": "movement", "value": "fly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can fly. \n        Output: ", "result": "\n          dog, cat, bird, bat, butterfly, bee, mosquito, dragonfly, hummingbird, sparrow\n    \"\"\"\n    words = []\n    for word in animal_words:\n        if \"can fly\" in word:\n            words.append(word)\n    return words\n\ndef get_animal_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category"}
{"cat": "animals", "slot": "movement", "value": "swim", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can swim. \n        Output: ", "result": " fish, dolphin, whale, shark, turtle, jellyfish, octopus, crab, lobster, clam. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, can_swim=True)\n        return [word.name for word in words]\n\n    def get_animals_that_cant_swim(self):\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter"}
{"cat": "animals", "slot": "movement", "value": "creep", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can creep. \n        Output: ", "result": "\n          dog, snake, spider, lizard, \n```"}
{"cat": "animals", "slot": "movement", "value": "leap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can leap. \n        Output: ", "result": "\n```\ncat, frog, kangaroo, rabbit, deer, giraffe, antelope, salmon, jaguar, leopard\n```\n\nExample 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: edible. \n        Output: \n```\napple, banana, cherry, date, fig, grape, kiwi, mango,"}
{"cat": "animals", "slot": "movement", "value": "fly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can fly. \n        Output: ", "result": "\n          dog, cat, bird, bat, butterfly, bee, mosquito, dragonfly, hummingbird, sparrow\n    \"\"\"\n    words = []\n    for word in animal_words:\n        if \"can fly\" in word:\n            words.append(word)\n    return words\n\ndef get_animal_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category"}
{"cat": "animals", "slot": "movement", "value": "hop", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can hop. \n        Output: ", "result": "\n```\ncat, frog, rabbit, kangaroo, grasshopper, hedgehog, squirrel, chipmunk, mouse, hamster\n```\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: edible. \n        Output: \n```\napple, banana, cherry, date, fig, grape, kiwi, mango, orange, pear\n```"}
{"cat": "animals", "slot": "movement", "value": "leap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can leap. \n        Output: ", "result": "\n```\ncat, frog, kangaroo, rabbit, deer, giraffe, antelope, salmon, jaguar, leopard\n```\n\nExample 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: edible. \n        Output: \n```\napple, banana, cherry, date, fig, grape, kiwi, mango,"}
{"cat": "animals", "slot": "movement", "value": "jump", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can jump. \n        Output: ", "result": "\n          dog, cat, bird, frog, squirrel, kangaroo, rabbit, giraffe, antelope, elephant\n    \"\"\"\n    category = \"animals\"\n    condition = \"can jump\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "animals", "slot": "movement", "value": "crawl", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can crawl. \n        Output: ", "result": "\n            dog, cat, snake, lizard, spider, scorpion, crab, lobster, crayfish, shrimp\n        \"\"\"\n        category = \"animals\"\n        condition = \"can crawl\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category"}
{"cat": "animals", "slot": "place", "value": "land", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in lands. \n        Output: ", "result": "\n        dog, cat, horse, cow, sheep, pig, chicken, elephant, giraffe, zebra\n\nExample 2: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: can be found or used in drinks. \n        Output: \n        apple, orange, lemon, lime, grape, pear, berry, melon, coconut, c"}
{"cat": "animals", "slot": "place", "value": "garden", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in gardens. \n        Output: ", "result": "\n            1. Squirrel\n            2. Bee\n            3. Butterfly\n            4. Ladybug\n            5. Frog\n            6. Dragonfly\n            7. Hummingbird\n            8. Snake\n            9. Lizard\n            10. Ant\n        \"\"\"\n        words = [\n            \"Squirrel\",\n            \"Bee\",\n            \"Butterfly\",\n            \"Ladybug\",\n            \"Frog\",\n            \"Dragonfly\",\n            \"Hummingbird\",\n            \"Snake\",\n"}
{"cat": "animals", "slot": "place", "value": "ditch", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in ditches. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "place", "value": "Asia", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in Asias. \n        Output: ", "result": "\n            1. Elephant\n            2. Tiger\n            3. Giraffe\n            4. Panda\n            5. Leopard\n            6. Monkey\n            7. Snake\n            8. Crane\n            9. Crocodile\n            10. Turtle\n        \"\"\"\n        words = []\n        for word in animal_words:\n            if \"Asia\" in word and \"found\" in word or \"used\" in word and \"Asia\" in word:\n                words.append(word)\n        print(\", \".join(words))"}
{"cat": "animals", "slot": "place", "value": "underwater", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in underwaters. \n        Output: ", "result": "\n        dolphin, fish, jellyfish, lobster, octopus, pearl, shark, starfish, turtle, whale\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() in [word.lower() for word in condition.split(',')]:\n            words.append(word)\n    print(\", \".join(words))\n\n# Example usage\ntest_case1()\ntest_"}
{"cat": "animals", "slot": "place", "value": "sea", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in seas. \n        Output: ", "result": "\n        dolphin, fish, jellyfish, lobster, octopus, penguin, seal, shark, turtle, whale\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() == condition.lower():\n            words.append(word.strip())\n    print(\", \".join(words))\n\n# Test the function\ntest_function(\"animals\", \"can be found or used in seas"}
{"cat": "animals", "slot": "place", "value": "Tanzania", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in Tanzanias. \n        Output: ", "result": "\n        elephant, giraffe, lion, zebra, leopard, cheetah, rhinoceros, buffalo, hippopotamus, crocodile\n```\n\n```"}
{"cat": "animals", "slot": "place", "value": "Namibia", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in Namibias. \n        Output: ", "result": "\n            1. Elephant\n            2. Lion\n            3. Giraffe\n            4. Zebra\n            5. Cheetah\n            6. Rhinoceros\n            7. Hippopotamus\n            8. Leopard\n            9. Hyena\n            10. Warthog\n        \"\"\"\n        words = [\n            \"Elephant\",\n            \"Lion\",\n            \"Giraffe\",\n            \"Zebra\",\n            \"Cheetah\",\n            \"Rhinoceros\",\n            \"Hippop"}
{"cat": "animals", "slot": "place", "value": "terrarium", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in terrariums. \n        Output: ", "result": "\n```\nparakeet, hermit, crab, \n```"}
{"cat": "animals", "slot": "place", "value": "India", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in Indias. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "place", "value": "Kenia", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in Kenias. \n        Output: ", "result": "\n        lion, elephant, giraffe, rhinoceros, zebra, cheetah, wildebeest, buffalo, hyena, leopard\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in text:\n        if word.lower() in category.lower() and word.lower() in condition.lower():\n            words.append(word.lower())\n    print(\", \".join(words))\n```\nExample:\n```\nEnter category: animals"}
{"cat": "animals", "slot": "place", "value": "Sri Lanka", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in Sri Lankas. \n        Output: ", "result": " elephant, leopard, crocodile, snake, lion, buffalo, monkey, peacock, turtle, deer\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in text.split():\n        if word.lower() in category.lower() and word.lower() in condition.lower():\n            words.append(word.lower())\n    print(\", \".join(words))\n```\nExample:\n```\nEnter category: animals\nEnter condition:"}
{"cat": "animals", "slot": "place", "value": "Africa", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in Africas. \n        Output: ", "result": "\n            1. Lion\n            2. Elephant\n            3. Giraffe\n            4. Zebra\n            5. Cheetah\n            6. Rhinoceros\n            7. Hippopotamus\n            8. Leopard\n            9. Crocodile\n            10. Hyena\n        \"\"\"\n        words = [\n            'lion',\n            'elephant',\n            'giraffe',\n            'zebra',\n            'cheetah',\n            'rhinoceros',\n            'hippopot"}
{"cat": "animals", "slot": "place", "value": "zoo", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in zoos. \n        Output: ", "result": "\n            1. Elephant\n            2. Giraffe\n            3. Lion\n            4. Zebra\n            5. Monkey\n            6. Tiger\n            7. Bear\n            8. Cheetah\n            9. Rhinoceros\n            10. Hippopotamus\n        \"\"\"\n        animal_words = [\"Elephant\", \"Giraffe\", \"Lion\", \"Zebra\", \"Monkey\", \"Tiger\", \"Bear\", \"Cheetah\", \"Rhinoceros\", \"Hippopotamus"}
{"cat": "animals", "slot": "place", "value": "Thailand", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in Thailands. \n        Output: ", "result": "\n        dog, cat, elephant, tiger, snake, monkey, buffalo, chicken, fish, shrimp\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    condition = 'can be found or used in Thailands'\n    words = Word.objects.filter(category=category, condition=condition).values_list('word', flat=True).distinct()\n    return ', '.join(words)\n\ndef get_random_word_thai(category=None, condition=None):\n    \"\"\"\n   "}
{"cat": "animals", "slot": "place", "value": "water", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in water. \n        Output: ", "result": "\n        dolphin, fish, jellyfish, killer whale, lobster, octopus, seahorse, shark, turtle, whale \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() == condition.lower():\n            words.append(word)\n    print(\", \".join(words))\n\n# Example usage\nsolve(\"animals\", \"can be found or used in water\")"}
{"cat": "animals", "slot": "place", "value": "pond", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in ponds. \n        Output: ", "result": "\n```\ncat, fish, turtle, frog, duck, swan, bird, alligator, crocodile, snail\n```\nExplanation:\n\n1. The category is animals.\n2. The condition is that the words can be found or used in ponds.\n3. The words that satisfy the condition are: cat, fish, turtle, frog, duck, swan, bird, alligator, crocodile, snail.\n4. The words are separated by commas.\n```python\ndef find_words(category"}
{"cat": "animals", "slot": "place", "value": "tropic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in tropics. \n        Output: ", "result": "\n          dog, cat, monkey, parrot, snake, lizard, butterfly, fish, \n          crocodile, turtle\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    words = Word.objects.filter(category=category, used_in_tropics=True)\n    return ', '.join(word.name for word in words)\n\n# Create some test data\nword1 = Word.objects.create(name='apple', definition='A red or green fruit that grows on trees')\nword2 ="}
{"cat": "animals", "slot": "place", "value": "sanctuary", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in sanctuaries. \n        Output: ", "result": "\n            1. Elephant\n            2. Giraffe\n            3. Lion\n            4. Zebra\n            5. Monkey\n            6. Tiger\n            7. Bear\n            8. Cheetah\n            9. Rhinoceros\n            10. Hippopotamus\n        \"\"\"\n        sanctuary_words = [\"elephant\", \"giraffe\", \"lion\", \"zebra\", \"monkey\", \"tiger\", \"bear\", \"cheetah\", \"rhinoceros\", \"hippopotam"}
{"cat": "animals", "slot": "place", "value": "circus", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in circuss. \n        Output: ", "result": " elephant, lion, tiger, trapeze, tightrope, clown, acrobat, juggler, animal trainer, big top.\n```\n\n```"}
{"cat": "animals", "slot": "movement", "value": "walk", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can walk. \n        Output: ", "result": "\n          dog, cat, elephant, giraffe, lion, zebra, horse, cow, chicken, pig\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    if category == \"animals\" and condition == \"can walk\":\n        return [\"dog\", \"cat\", \"elephant\", \"giraffe\", \"lion\", \"zebra"}
{"cat": "animals", "slot": "user", "value": "circus", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used by circuss. \n        Output: ", "result": "\n        elephant, lion, tiger, giraffe, zebra, clown, acrobat, trapeze, tightrope, animal trainer.\n    \"\"\"\n    category = 'animals'\n    condition = 'are used by circuss'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\nprint(get_words('animals', 'are used by circuss'))\n```\nOutput:\nelephant, lion, tiger, giraffe, zebra, clown"}
{"cat": "animals", "slot": "place", "value": "colony", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in colonies. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "place", "value": "kennel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in kennels. \n        Output: ", "result": "\n            1. Dog\n            2. Kennel\n            3. Collar\n            4. Leash\n            5. Food\n            6. Water\n            7. Bedding\n            8. Toys\n            9. Grooming\n            10. Training\n        \"\"\"\n        animal_words = [\n            \"Dog\",\n            \"Kennel\",\n            \"Collar\",\n            \"Leash\",\n            \"Food\",\n            \"Water\",\n            \"Bedding\",\n            \"Toys\",\n            \"Grooming\",\n            \"Tra"}
{"cat": "animals", "slot": "colorPattern", "value": "black", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be black. \n        Output: ", "result": "\n          dog, cat, elephant, giraffe, zebra, blackbird, blackcat, blackelephant, blackgiraffe, blackzebra\n    \"\"\"\n    black_animals = []\n    for word in animal_words:\n        if \"black\" in word:\n            black_animals.append(word)\n    return \", \".join(black_animals)\n\ndef get_anagrams(word):\n    anagrams = []\n    for char in word:\n        if len(word) > 1:\n           "}
{"cat": "animals", "slot": "colorPattern", "value": "black", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be black. \n        Output: ", "result": "\n          dog, cat, elephant, giraffe, zebra, blackbird, blackcat, blackelephant, blackgiraffe, blackzebra\n    \"\"\"\n    black_animals = []\n    for word in animal_words:\n        if \"black\" in word:\n            black_animals.append(word)\n    return \", \".join(black_animals)\n\ndef get_anagrams(word):\n    anagrams = []\n    for char in word:\n        if len(word) > 1:\n           "}
{"cat": "animals", "slot": "colorPattern", "value": "brown", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be brown. \n        Output: ", "result": "\n          dog, cat, horse, cow, sheep, pig, elephant, giraffe, zebra, \n          lion, tiger, bear. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category)\n        filtered_words = []\n        for word in words:\n            if word.word.lower() in ['brown']:\n                filtered_words.append(word)\n        filtered_words = sorted(filtered_words, key=lambda x:"}
{"cat": "animals", "slot": "colorPattern", "value": "brown", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be brown. \n        Output: ", "result": "\n          dog, cat, horse, cow, sheep, pig, elephant, giraffe, zebra, \n          lion, tiger, bear. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category)\n        filtered_words = []\n        for word in words:\n            if word.word.lower() in ['brown']:\n                filtered_words.append(word)\n        filtered_words = sorted(filtered_words, key=lambda x:"}
{"cat": "animals", "slot": "colorPattern", "value": "spotted", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be spotted. \n        Output: ", "result": "\n            dog, cat, elephant, giraffe, zebra, tiger, lion, cheetah, leopard, panther\n        Explanation: dog, cat, elephant, giraffe, zebra, tiger, lion, cheetah, leopard, panther are all animals that can be spotted. \n        \"\"\"\n        category = input(\"Enter category: \")\n        condition = input(\"Enter condition: \")\n        words = []\n        for word in category.split(\",\"):\n            if word.lower()"}
{"cat": "animals", "slot": "colorPattern", "value": "yellow", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be yellow. \n        Output: ", "result": "\n          dog, cat, chicken, duck, cow, pig, sheep, goat, giraffe, elephant\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    words = Word.objects.filter(category=category)\n    yellow_words = []\n    for word in words:\n        if word.color == 'yellow':\n            yellow_words.append(word)\n    if yellow_words:\n        print(', '.join(yellow_words.values_list('name', flat=True)))\n    else:\n"}
{"cat": "animals", "slot": "colorPattern", "value": "yellow", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be yellow. \n        Output: ", "result": "\n          dog, cat, chicken, duck, cow, pig, sheep, goat, giraffe, elephant\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    words = Word.objects.filter(category=category)\n    yellow_words = []\n    for word in words:\n        if word.color == 'yellow':\n            yellow_words.append(word)\n    if yellow_words:\n        print(', '.join(yellow_words.values_list('name', flat=True)))\n    else:\n"}
{"cat": "animals", "slot": "colorPattern", "value": "grey", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be grey. \n        Output: ", "result": "\n          dog, greyhound, greycat, greybird, greyrabbit, greygoose, greyhorse, greyowl, greyparrot, greyshark\n    \"\"\"\n    animal_words = [\"dog\", \"cat\", \"bird\", \"rabbit\", \"goose\", \"horse\", \"owl\", \"parrot\", \"shark\"]\n    grey_animal_words = [word for word in animal_words if word.lower() == \"grey\" or \"grey\" in word]\n    return \", \".join(grey_animal"}
{"cat": "animals", "slot": "colorPattern", "value": "grey", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be grey. \n        Output: ", "result": "\n          dog, greyhound, greycat, greybird, greyrabbit, greygoose, greyhorse, greyowl, greyparrot, greyshark\n    \"\"\"\n    animal_words = [\"dog\", \"cat\", \"bird\", \"rabbit\", \"goose\", \"horse\", \"owl\", \"parrot\", \"shark\"]\n    grey_animal_words = [word for word in animal_words if word.lower() == \"grey\" or \"grey\" in word]\n    return \", \".join(grey_animal"}
{"cat": "animals", "slot": "colorPattern", "value": "white", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be white. \n        Output: ", "result": "\n          dog, \n          polar bear, \n          white tiger, \n          white lion, \n          white elephant, \n          white rhinoceros, \n          white buffalo, \n          white giraffe, \n          white koala, \n          white kangaroo\n```\n\n```\nExample:\nInput: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Cond"}
{"cat": "animals", "slot": "colorPattern", "value": "white", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be white. \n        Output: ", "result": "\n          dog, \n          polar bear, \n          white tiger, \n          white lion, \n          white elephant, \n          white rhinoceros, \n          white buffalo, \n          white giraffe, \n          white koala, \n          white kangaroo\n```\n\n```\nExample:\nInput: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Cond"}
{"cat": "animals", "slot": "colorPattern", "value": "orange", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be orange. \n        Output: ", "result": "\n          dog, cat, bird, fish, snake, turtle, lion, giraffe, elephant, zebra\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Create an empty list to store the words\n    words = []\n    \n    # Loop through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if word.category == category and word.satisfies(condition):\n            # Add the word to the list"}
{"cat": "animals", "slot": "colorPattern", "value": "green", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be green. \n        Output: ", "result": "\n          dog, cat, fish, bird, snake, lizard, frog, cow, sheep, chicken\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Create an empty list to store the words\n    words = []\n    \n    # Loop through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if condition(word):\n            # If it does, add it to the list of words\n            words.append(word)\n    \n"}
{"cat": "animals", "slot": "colorPattern", "value": "green", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be green. \n        Output: ", "result": "\n          dog, cat, fish, bird, snake, lizard, frog, cow, sheep, chicken\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Create an empty list to store the words\n    words = []\n    \n    # Loop through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if condition(word):\n            # If it does, add it to the list of words\n            words.append(word)\n    \n"}
{"cat": "animals", "slot": "colorPattern", "value": "orange", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be orange. \n        Output: ", "result": "\n          dog, cat, bird, fish, snake, turtle, lion, giraffe, elephant, zebra\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Create an empty list to store the words\n    words = []\n    \n    # Loop through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if word.category == category and word.satisfies(condition):\n            # Add the word to the list"}
{"cat": "animals", "slot": "colorPattern", "value": "red", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be red. \n        Output: ", "result": "\n          dog, elephant, giraffe, horse, kangaroo, lion, monkey, parrot, tiger, zebra\n    \"\"\"\n    category = \"animals\"\n    condition = \"can be red\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"animals\", \"can be red\"))  # Output: dog, elephant, giraffe, horse, kangaroo, lion, monkey, parrot, tiger"}
{"cat": "animals", "slot": "colorPattern", "value": "red", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be red. \n        Output: ", "result": "\n          dog, elephant, giraffe, horse, kangaroo, lion, monkey, parrot, tiger, zebra\n    \"\"\"\n    category = \"animals\"\n    condition = \"can be red\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"animals\", \"can be red\"))  # Output: dog, elephant, giraffe, horse, kangaroo, lion, monkey, parrot, tiger"}
{"cat": "animals", "slot": "colorPattern", "value": "solid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be solid. \n        Output: ", "result": "\n```\ncat, dog, elephant, giraffe, horse, kangaroo, lion, monkey, tiger, zebra\n```\nExplanation: The words that belong to the category animals and can be solid are cat, dog, elephant, giraffe, horse, kangaroo, lion, monkey, tiger, and zebra.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category:"}
{"cat": "animals", "slot": "colorPattern", "value": "beige", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be beige. \n        Output: ", "result": "\n          dog, cat, elephant, giraffe, zebra, horse, cow, chicken, pig, bee\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Create an empty list to store the words\n    words = []\n    \n    # Loop through all the words in the vocabulary\n    for word in vocabulary:\n        # If the word satisfies the condition, add it to the list\n        if word.satisfies(condition):\n            words.append(word)\n    \n"}
{"cat": "animals", "slot": "colorPattern", "value": "beige", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be beige. \n        Output: ", "result": "\n          dog, cat, elephant, giraffe, zebra, horse, cow, chicken, pig, bee\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Create an empty list to store the words\n    words = []\n    \n    # Loop through all the words in the vocabulary\n    for word in vocabulary:\n        # If the word satisfies the condition, add it to the list\n        if word.satisfies(condition):\n            words.append(word)\n    \n"}
{"cat": "animals", "slot": "colorPattern", "value": "striped", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be striped. \n        Output: ", "result": " tiger, zebra, leopard, cheetah, snake, crocodile, lion, elephant, giraffe, rhinoceros. \n        \"\"\"\n        category = \"animals\"\n        condition = \"can be striped\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list"}
{"cat": "animals", "slot": "colorPattern", "value": "blue", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be blue. \n        Output: ", "result": "\n          dog, cat, fish, bird, elephant, whale, dolphin, butterfly, jellyfish, octopus\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    words = Word.objects.filter(category=category)\n    filtered_words = []\n    for word in words:\n        if word.color == 'blue':\n            filtered_words.append(word)\n    result = ', '.join(filtered_words.values_list('name', flat=True))\n    print(result)\n```"}
{"cat": "animals", "slot": "colorPattern", "value": "blue", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be blue. \n        Output: ", "result": "\n          dog, cat, fish, bird, elephant, whale, dolphin, butterfly, jellyfish, octopus\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    words = Word.objects.filter(category=category)\n    filtered_words = []\n    for word in words:\n        if word.color == 'blue':\n            filtered_words.append(word)\n    result = ', '.join(filtered_words.values_list('name', flat=True))\n    print(result)\n```"}
{"cat": "animals", "slot": "colorPattern", "value": "leopard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be leopard. \n        Output: ", "result": "\n```\nleopard,cheetah,tiger,lion,panther,cougar,jaguar,snow leopard,leopard cat,cheetah cat\n```\nExplanation:\n\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Desired output: comma separated list of words.\n3. Category: animals.\n4. Condition: can be leopard.\n5. Output: `leopard,cheetah,tiger,lion,panther,"}
{"cat": "animals", "slot": "activity", "value": "breathe", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be breathe. \n        Output: ", "result": "\n          dog, cat, bird, fish, snake, lion, elephant, giraffe, whale, dolphin\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    for word in dir(category):\n        if callable(getattr(category, word)) and getattr(category, word).__name__ == condition:\n           "}
{"cat": "animals", "slot": "activity", "value": "drink", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be drink. \n        Output: ", "result": "\n          dog, cat, bird, fish, cow, pig, sheep, goat, horse, elephant\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    words = Word.objects.filter(category=category)\n    filtered_words = []\n    for word in words:\n        if 'can be drink' in word.text.lower():\n            filtered_words.append(word)\n    filtered_words = list(filtered_words)\n    return filtered_words\n\n@app.route('/word/<int:pk"}
{"cat": "animals", "slot": "activity", "value": "chew", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be chew. \n        Output: ", "result": "\n          dog, cat, giraffe, elephant, alligator, crocodile, hippopotamus, \n          rhinoceros, lion, tiger\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    condition = 'can be chew'\n    words = Word.objects.filter(category=category, condition=condition)\n    return words.distinct().order_by('name')\n\ndef get_random_word_from_category(category):\n    \"\"\"\n    Retrieve a random word"}
{"cat": "animals", "slot": "activity", "value": "play", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be play. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "activity", "value": "chase", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be chase. \n        Output: ", "result": "\n          dog, cat, rabbit, mouse, bird, snake, lion, tiger, cheetah, leopard\n    \"\"\"\n    category = \"animals\"\n    condition = \"can be chase\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "animals", "slot": "activity", "value": "fetch", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be fetch. \n        Output: ", "result": "\n        dog, cat, fish, bird, turtle, snake, lion, elephant, giraffe, zebra\n    \"\"\"\n    category = \"animals\"\n    condition = \"can be fetch\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n```\n```\nExample:\n```\nInput:\n    Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n       "}
{"cat": "animals", "slot": "activity", "value": "bury", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be bury. \n        Output: ", "result": "\n          dog, cat, bird, snake, turtle, hamster, mouse, spider, ant, bee\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Create an empty list to store the words\n    words = []\n    \n    # Use a for loop to iterate through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if word.satisfies(condition):\n            # If the word satisfies the condition, add it to the"}
{"cat": "animals", "slot": "activity", "value": "bath", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be bath. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "activity", "value": "roam", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be roam. \n        Output: ", "result": "\n          dog, cat, elephant, giraffe, lion, monkey, zebra, tiger, cheetah, rhinoceros\n    \"\"\"\n    category = \"animals\"\n    condition = \"can be roam\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "animals", "slot": "activity", "value": "live", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be live. \n        Output: ", "result": "\n          dog, cat, bird, fish, snake, lion, tiger, elephant, giraffe, zebra\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() == condition.lower():\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n# Example usage\nsolve(\"animals, can"}
{"cat": "animals", "slot": "activity", "value": "growl", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be growl. \n        Output: ", "result": "\n          dog, cat, lion, tiger, bear, wolf, panther, leopard, jaguar, cougar\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"growl\" in word:\n            words.append(word)\n    return words\n\ndef get_anagrams(word_list):\n    anagrams = []\n    for word in word_list:\n        anagrams.extend(word_list.count(word) > 0)\n    return anagrams\n\n"}
{"cat": "animals", "slot": "activity", "value": "kill", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be kill. \n        Output: ", "result": "\n            dog, cat, snake, lion, shark, bear, wolf, tiger, crocodile, lizard\n        \"\"\"\n        category = Category.objects.get(name='animals')\n        condition = Condition.objects.get(name='can be kill')\n        words = Word.objects.filter(category=category, condition=condition)\n        return [word.name for word in words]\n\n    def get_random_word(self):\n        \"\"\"\n        Retrieve a random word from the database. \n        \"\"\"\n        word"}
{"cat": "animals", "slot": "activity", "value": "forage", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be forage. \n        Output: ", "result": "\n            dog, cat, bird, fish, cow, sheep, deer, bear, fox, wolf\n    \"\"\"\n    words = []\n    for word in animal_words:\n        if \"forage\" in word:\n            words.append(word)\n    return words\n\ndef get_animal_words_with_category(category):\n    \"\"\"\n    Given a category, provide a list of 10 words that belong to the category. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Output: "}
{"cat": "animals", "slot": "activity", "value": "suffer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be suffer. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "activity", "value": "bite", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be bite. \n        Output: ", "result": "\n          dog, cat, snake, lion, crocodile, shark, spider, scorpion, ant, bee\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Create an empty list to store the words\n    words = []\n    \n    # Use a for loop to iterate through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if condition(word):\n            # If the word satisfies the condition, add it to the list"}
{"cat": "animals", "slot": "activity", "value": "browse", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be browse. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "activity", "value": "feed", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be feed. \n        Output: ", "result": "\n          dog, cat, bird, fish, cow, sheep, pig, chicken, horse, elephant\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    words = Word.objects.filter(category=category)\n    feedable_words = []\n    for word in words:\n        if word.feedable:\n            feedable_words.append(word)\n    if feedable_words:\n        output = ', '.join(feedable_words.values_list('name', flat=True))\n    else:\n       "}
{"cat": "animals", "slot": "activity", "value": "die", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be die. \n        Output: ", "result": "\n        dog, cat, bird, fish, snake, lion, elephant, giraffe, zebra, crocodile\n\nExample 2:\nInput: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: starts with f. \n        Output: \n        apple, banana, cherry, date, fig, grape, lemon, orange, peach, plum\n\n"}
{"cat": "animals", "slot": "activity", "value": "trot", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be trot. \n        Output: ", "result": "\n          dog, cat, horse, pony, zebra, giraffe, lion, tiger, elephant, rhinoceros\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"trot\" in word:\n            words.append(word)\n    return words\n\ndef get_anagrams(word_list):\n    anagrams = []\n    for word in word_list:\n        anagrams.extend(word_list.count(word) > 0)\n    return anagrams\n"}
{"cat": "animals", "slot": "activity", "value": "hunt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be hunt. \n        Output: ", "result": "\n          dog, cat, fox, bear, deer, wolf, lion, tiger, leopard, \n          panther, cheetah, cougar, jaguar, lynx, bobcat, coyote, \n          wolf, hyena, jackal, dingo, chimpanzee, gorilla, \n          orangutan, elephant, rhinoceros, hippopotamus, \n          crocodile, alligator, snake, lizard, turtle, \n"}
{"cat": "animals", "slot": "activity", "value": "bite", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be bite. \n        Output: ", "result": "\n          dog, cat, snake, lion, crocodile, shark, spider, scorpion, ant, bee\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Create an empty list to store the words\n    words = []\n    \n    # Use a for loop to iterate through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if condition(word):\n            # If the word satisfies the condition, add it to the list"}
{"cat": "animals", "slot": "activity", "value": "migrate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be migrate. \n        Output: ", "result": "\n        elephant, giraffe, hippopotamus, kangaroo, lion, meerkat, ostrich, penguin, rhinoceros, zebra\n    \"\"\"\n    animal_words = [\n        \"elephant\",\n        \"giraffe\",\n        \"hippopotamus\",\n        \"kangaroo\",\n        \"lion\",\n        \"meerkat\",\n        \"ostrich\",\n        \"penguin\",\n        \"rhinoceros\",\n        \"zebra\""}
{"cat": "animals", "slot": "activity", "value": "roar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be roar. \n        Output: ", "result": "\n          dog, cat, lion, tiger, bear, panther, leopard, jaguar, cheetah, cougar\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"roar\" in word:\n            words.append(word)\n    return words\n\ndef get_anagrams(word_list):\n    anagrams = []\n    for word in word_list:\n        anagrams.extend(word_list.count(word) > 0)\n    return anagrams\n\n"}
{"cat": "animals", "slot": "activity", "value": "graze", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be graze. \n        Output: ", "result": "\n            dog, cow, sheep, goat, horse, deer, antelope, buffalo, giraffe, zebra\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Create an empty list to store the words\n    words = []\n    \n    # Use a for loop to iterate through all the words in the vocabulary\n    for word in vocabulary:\n        # Use the str.startswith() method to check if the word starts with the category\n        if word.startswith(category):\n           "}
{"cat": "animals", "slot": "activity", "value": "sing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be sing. \n        Output: ", "result": "\n          dog, cat, bird, fish, snake, sheep, cow, horse, deer, elephant\n    \"\"\"\n    words = []\n    for word in animal_words:\n        if len(word) == 1:\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n# Test the function\ntest_case1()\ntest_case2()\ntest_case3()\ntest_case4()\ntest_case5()\ntest_case6"}
{"cat": "animals", "slot": "activity", "value": "kill", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be kill. \n        Output: ", "result": "\n            dog, cat, snake, lion, shark, bear, wolf, tiger, crocodile, lizard\n        \"\"\"\n        category = Category.objects.get(name='animals')\n        condition = Condition.objects.get(name='can be kill')\n        words = Word.objects.filter(category=category, condition=condition)\n        return [word.name for word in words]\n\n    def get_random_word(self):\n        \"\"\"\n        Retrieve a random word from the database. \n        \"\"\"\n        word"}
{"cat": "animals", "slot": "activity", "value": "slither", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be slither. \n        Output: ", "result": "\n```\nsnake, viper, serpent, adder, python, rattlesnake, cobra, viperine, asp, horned viper\n```"}
{"cat": "animals", "slot": "activity", "value": "love", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be love. \n        Output: ", "result": "\n          dog, cat, bird, fish, snake, lion, tiger, bear, monkey, elephant\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    words = Word.objects.filter(category=category)\n    filtered_words = []\n    for word in words:\n        if 'love' in word.text:\n            filtered_words.append(word)\n    filtered_words = sorted(filtered_words, key=lambda x: x.text.lower())\n    result = ', '.join(filter"}
{"cat": "animals", "slot": "activity", "value": "sting", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be sting. \n        Output: ", "result": "\n          dog, cat, bird, snake, spider, ant, bee, butterfly, fly, mosquito\n    \"\"\"\n    category = \"animals\"\n    condition = \"can be sting\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "animals", "slot": "activity", "value": "trumpet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be trumpet. \n        Output: ", "result": "\n          dog, elephant, giraffe, hippopotamus, kangaroo, lion, rhinoceros, tiger, zebra, trumpet\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() == condition.lower():\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n"}
{"cat": "animals", "slot": "activity", "value": "sleep", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be sleep. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "activity", "value": "forage", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be forage. \n        Output: ", "result": "\n            dog, cat, bird, fish, cow, sheep, deer, bear, fox, wolf\n    \"\"\"\n    words = []\n    for word in animal_words:\n        if \"forage\" in word:\n            words.append(word)\n    return words\n\ndef get_animal_words_with_category(category):\n    \"\"\"\n    Given a category, provide a list of 10 words that belong to the category. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Output: "}
{"cat": "animals", "slot": "activity", "value": "bark", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be bark. \n        Output: ", "result": "\n            dog, cat, bird, fish, cow, sheep, pig, horse, elephant, monkey\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Create an empty list to store the words\n    words = []\n    \n    # Loop through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if condition(word):\n            # If it does, add it to the list of words\n            words.append(word)\n    \n"}
{"cat": "animals", "slot": "activity", "value": "watch", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be watch. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "activity", "value": "overwinter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be overwinter. \n        Output: ", "result": "\n          dog, cat, bear, wolf, fox, rabbit, squirrel, bird, duck, goose\n    \"\"\"\n    category = \"animals\"\n    condition = \"can be overwinter\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "animals", "slot": "activity", "value": "funnel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be funnel. \n        Output: ", "result": "\n        elephant, giraffe, hippopotamus, jellyfish, kangaroo, octopus, penguin, seahorse, shark, whale\n    \"\"\"\n    animal_words = [\n        \"elephant\",\n        \"giraffe\",\n        \"hippopotamus\",\n        \"kangaroo\",\n        \"octopus\",\n        \"penguin\",\n        \"seahorse\",\n        \"shark\",\n        \"whale\"\n    ]\n    funnel_words ="}
{"cat": "animals", "slot": "activity", "value": "bait", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be bait. \n        Output: ", "result": "\n            dog, cat, mouse, rat, bird, fish, snake, lion, tiger, bear\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Create an empty list to store the words\n    words = []\n    \n    # Use a for loop to iterate through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if word.category == category and word.satisfies(condition):\n            # If the word satisfies the condition, add"}
{"cat": "animals", "slot": "activity", "value": "live", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be live. \n        Output: ", "result": "\n          dog, cat, bird, fish, snake, lion, tiger, elephant, giraffe, zebra\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() == condition.lower():\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n# Example usage\nsolve(\"animals, can"}
{"cat": "animals", "slot": "activity", "value": "lick", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be lick. \n        Output: ", "result": "\n          dog, cat, lion, tiger, elephant, giraffe, monkey, lizard, snake, crocodile\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() == condition.lower():\n            words.append(word.strip())\n    print(\", \".join(words))\n\n# Example usage\nsolve(\"animals, can be lick\", \"dog\")\nsolve(\"animals"}
{"cat": "animals", "slot": "activity", "value": "feed", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be feed. \n        Output: ", "result": "\n          dog, cat, bird, fish, cow, sheep, pig, chicken, horse, elephant\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    words = Word.objects.filter(category=category)\n    feedable_words = []\n    for word in words:\n        if word.feedable:\n            feedable_words.append(word)\n    if feedable_words:\n        output = ', '.join(feedable_words.values_list('name', flat=True))\n    else:\n       "}
{"cat": "animals", "slot": "activity", "value": "watch", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be watch. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "activity", "value": "pollinate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be pollinate. \n        Output: ", "result": "\n          dog, cat, bee, butterfly, bird, flower, mosquito, moth, hummingbird, bumblebee\n    \"\"\"\n    pollinate_words = []\n    for word in animal_words:\n        if 'pollinate' in word:\n            pollinate_words.append(word)\n    return ', '.join(pollinate_words)\n\ndef get_animals_pollinate(animal_words):\n    pollinate_animals = []\n    for word in animal_words:\n        if '"}
{"cat": "animals", "slot": "activity", "value": "croak", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be croak. \n        Output: ", "result": "\n          dog, cat, bird, fish, frog, snake, lizard, crocodile, alligator, turtle\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"can\" in word and \"be\" in word and \"croak\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n    \"\"\"\n    vowels = \"aei"}
{"cat": "animals", "slot": "activity", "value": "fuck", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be fuck. \n        Output: ", "result": "\n            dog, cat, bird, fish, frog, snake, monkey, lion, tiger, bear\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"can\" in word and \"be\" in word and \"fuck\" in word:\n            words.append(word)\n    return words\n\nif __name__ == '__main__':\n    word_list = ['dog', 'cat', 'bird', 'fish', 'frog', 'snake', 'monkey', 'lion', 'tiger', '"}
{"cat": "animals", "slot": "activity", "value": "eat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be eat. \n        Output: ", "result": "\n          dog, cat, chicken, fish, pizza, hamburger, ice cream, cake, cookie, pudding\n```\n\nExample 2: \nInput: \n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: can be eaten. \n        Output: \n          apple, banana, orange, pear, grapes, strawberry, blueberry, cher"}
{"cat": "animals", "slot": "part", "value": "collar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have  collar. \n        Output: ", "result": " dog, cat, elephant, giraffe, lion, tiger, zebra, horse, rhinoceros, \n        hippopotamus, alligator, crocodile, snake, \n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: can be eaten. \n        Output: apple, banana, orange, pear, \n```"}
{"cat": "animals", "slot": "generalization", "value": "mammal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammal. \n        Output: ", "result": " dog, cat, cow, pig, elephant, giraffe, whale, dolphin, seal, hippopotamus\n```\n```"}
{"cat": "animals", "slot": "generalization", "value": "placental", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are placental. \n        Output: ", "result": "\n        dog, cat, horse, cow, pig, human, elephant, giraffe, zebra, \n        lion, tiger, leopard, cheetah, monkey, chimpanzee, gorilla, \n        rhinoceros, hippopotamus, whale, dolphin, seal, walrus, \n        kangaroo, koala, platypus, opossum, raccoon, skunk, \n        bear, lizard, snake, crocodile, alligator,"}
{"cat": "animals", "slot": "generalization", "value": "eutherian", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are eutherian. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "generalization", "value": "eutherian mammal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are eutherian mammal. \n        Output: ", "result": "\n        dog, cat, horse, cow, pig, elephant, giraffe, zebra, lion, tiger\n\nExample 2: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n        orange, lemon, lime, grapefruit, mandarin, tangerine, clementine, pomegranate,"}
{"cat": "animals", "slot": "generalization", "value": "placental mammal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are placental mammal. \n        Output: ", "result": "\n        dog, cat, horse, cow, pig, human, mouse, rat, elephant, giraffe\n    \"\"\"\n    category = \"animals\"\n    condition = \"are placental mammal\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "animals", "slot": "generalization", "value": "carnivore", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are carnivore. \n        Output: ", "result": "\n            1. tiger\n            2. lion\n            3. shark\n            4. alligator\n            5. crocodile\n            6. wolf\n            7. bear\n            8. leopard\n            9. jaguar\n            10. snake\n        \"\"\"\n        words = [\n            'tiger',\n            'lion',\n            'shark',\n            'alligator',\n            'crocodile',\n            'wolf',\n            'bear',\n            'leopard',\n            'j"}
{"cat": "animals", "slot": "generalization", "value": "gastropod", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are gastropod. \n        Output: ", "result": "\n        dog, cat, cow, pig, sheep, goat, snail, slug, oyster, octopus\n    \"\"\"\n    category = \"animals\"\n    condition = \"are gastropod\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "animals", "slot": "generalization", "value": "insect", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are insect. \n        Output: ", "result": "\n```\nant,\nbee,\nbutterfly,\ngrasshopper,\nladybug,\nlocust,\nmosquito,\nspider,\ntick,\nwasp\n```\nExplanation:\nThe words that belong to the category \"animals\" and satisfy the condition \"are insect\" are: ant, bee, butterfly, grasshopper, ladybug, locust, mosquito, spider, tick, wasp.\n```"}
{"cat": "animals", "slot": "generalization", "value": "craniate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are craniate. \n        Output: ", "result": "\n        dog, cat, bird, fish, turtle, whale, dolphin, shark, alligator, crocodile\n\nExample 2: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n        apple, cherry, strawberry, raspberry, plum, watermelon, pineapple, orange, lemon, gra"}
{"cat": "animals", "slot": "generalization", "value": "vertebrate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are vertebrate. \n        Output: ", "result": " dog, cat, bird, fish, snake, lion, tiger, elephant, giraffe, zebra. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, is_vertebrate=True)\n        return words.distinct().values_list('name', flat=True).filter(name__in=['dog', 'cat', 'bird', 'fish', 'snake', 'lion', 'tiger', 'elephant', 'giraffe',"}
{"cat": "animals", "slot": "generalization", "value": "reptilian", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are reptilian. \n        Output: ", "result": "\n        snake, lizard, crocodile, turtle, alligator, \n        monitor, iguana, tortoise, terrapin,\n```"}
{"cat": "animals", "slot": "generalization", "value": "felid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are felid. \n        Output: ", "result": "\n```\nlion, tiger, leopard, jaguar, cheetah, puma, cougar, lynx, leopard, snow leopard\n```\n\nExample 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine"}
{"cat": "animals", "slot": "generalization", "value": "oviparous", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are oviparous. \n        Output: ", "result": "\n        dog, cat, chicken, duck, goose, fish, turtle, snake, lizard, crocodile.\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    words = Word.objects.filter(category=category)\n    oviparous_words = []\n    for word in words:\n        if word.meaning.startswith('Are'):\n            if word.meaning.lower() == 'Are oviparous':\n                oviparous_words.append(word.word)\n   "}
{"cat": "animals", "slot": "generalization", "value": "amphibian", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are amphibian. \n        Output: ", "result": "\n            frog, toad, newt, salamander, axolotl,\n```"}
{"cat": "animals", "slot": "generalization", "value": "feline", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are feline. \n        Output: ", "result": "\n```\ncat, kitten, pussycat, lion, tiger, leopard, jaguar, panther, cheetah, cougar\n```\n\n### Example 2:\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine, clement"}
{"cat": "animals", "slot": "generalization", "value": "canid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are canid. \n        Output: ", "result": "\n            dog, wolf, fox, coyote, jackal, dingo,\n```"}
{"cat": "animals", "slot": "generalization", "value": "reptile", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are reptile. \n        Output: ", "result": "\n        snake, lizard, crocodile, turtle, alligator, \n        gecko, iguana, tortoise, monitor lizard, \n        python, \n```"}
{"cat": "animals", "slot": "generalization", "value": "organism", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are organism. \n        Output: ", "result": "\n        dog, cat, bird, fish, cow, sheep, pig, horse, elephant, giraffe\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    words = Word.objects.filter(category=category, is_organism=True)\n    return [word.name for word in words]\n\n\n@pytest.mark.django_db\ndef test_get_words_by_category_and_condition():\n    assert get_words_by_category_and_condition('animals', 'are organism')"}
{"cat": "animals", "slot": "generalization", "value": "being", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are being. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "generalization", "value": "canine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are canine. \n        Output: ", "result": "\n            dog, cat, horse, cow, sheep, pig, chicken, goat, lion, tiger\n        \"\"\"\n        category = Category.objects.get(name='animals')\n        canine_animals = Animal.objects.filter(species__in=['dog', 'cat', 'horse', 'cow', 'sheep', 'pig', 'chicken', 'goat', 'lion', 'tiger']).values_list('name', flat=True).distinct()\n        return ', '.join(canine_animals)\n\n"}
{"cat": "animals", "slot": "generalization", "value": "big cat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are big cat. \n        Output: ", "result": "\n```\nlion, tiger, leopard, jaguar, cheetah, cougar, lynx, puma, jaguarundi, leopard cat\n```\nExplanation:\n\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Desired output: comma separated list of words.\n3. Category: animals.\n4. Condition: are big cat.\n5. Output: lion, tiger, leopard, jaguar, cheetah, cougar"}
{"cat": "animals", "slot": "generalization", "value": "diapsid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are diapsid. \n        Output: ", "result": "\n        lizard, \n        crocodile, \n        alligator, \n        snake, \n        turtle, \n        dinosaur, \n        pterodactyl, \n        plesiosaur, \n        mosasaur, \n        varanid\n```\n\n```\nDesired output: \nComma separated list of words: lizard, crocodile, alligator, snake, turtle, dinosaur, pterodactyl, plesiosaur, mosasaur, varanid"}
{"cat": "animals", "slot": "generalization", "value": "diapsid reptile", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are diapsid reptile. \n        Output: ", "result": "\n        lizard, crocodile, alligator, turtle, snake, monitor, \n        tuatara, terrapin, tortoise, \n```"}
{"cat": "animals", "slot": "generalization", "value": "animate thing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are animate thing. \n        Output: ", "result": "\n        dog, cat, bird, fish, snake, elephant, giraffe, monkey, lion, zebra\n```\n\n```\nDescribe a scenario where the input is a list of 10 words, where each word belongs to a different category and satisfies a certain condition. \n        Provide a list of 10 words that belong to the categories and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are animate thing. \n        Output: \n        dog,"}
{"cat": "animals", "slot": "generalization", "value": "living thing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are living thing. \n        Output: ", "result": "\n        dog, cat, bird, fish, snake, elephant, giraffe, monkey, lion, zebra\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    words = Word.objects.filter(category=category, is_living=True)\n    return [word.name for word in words]\n\ndef get_animals_with_image(request):\n    \"\"\"\n    Retrieve a list of animals and their images from the database.\n    \"\"\"\n    animals = Animal.objects.all()\n"}
{"cat": "animals", "slot": "generalization", "value": "cat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are cat. \n        Output: ", "result": "\n```\ncat, kitten, whiskers, fur, purr, meow, claws, eyes, tail\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, raspberry, watermelon, pear, plum, red delicious, orange, banana\n```"}
{"cat": "animals", "slot": "generalization", "value": "artiodactyl", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are artiodactyl. \n        Output: ", "result": "4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37"}
{"cat": "animals", "slot": "generalization", "value": "mytilid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mytilid. \n        Output: ", "result": "\n```\ncat, mussel, oyster, scallop, clam, snail, squid, cuttlefish, octopus, nautilus\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine, clement"}
{"cat": "animals", "slot": "generalization", "value": "marine mussel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are marine mussel. \n        Output: ", "result": "\n        dolphin, jellyfish, lobster, octopus, oyster, pearl, scallop, shrimp, squid, whelk\n    \"\"\"\n    category = \"animals\"\n    condition = \"are marine mussel\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n```\n```\nExample:\n```\nInput:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words."}
{"cat": "animals", "slot": "generalization", "value": "chelonian reptile", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are chelonian reptile. \n        Output: ", "result": "\n            1. Turtle\n            2. Tortoise\n            3. Terrapin\n            4. Alligator\n            5. Crocodile\n            6. Iguana\n            7. Lizard\n            8. Snake\n            9. Turtle\n            10. Tortoise\n        \"\"\"\n        words = [\n            \"Turtle\",\n            \"Tortoise\",\n            \"Terrapin\",\n            \"Alligator\",\n            \"Crocodile\",\n            \"Iguana\",\n            \"L"}
{"cat": "animals", "slot": "generalization", "value": "mussel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mussel. \n        Output: ", "result": "\n```\ncat, mussel\n```\n1. \n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, cherry, strawberry\n```\n2. \n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n       "}
{"cat": "animals", "slot": "generalization", "value": "lamellibranch", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are lamellibranch. \n        Output: ", "result": "\n        dog, cat, seal, walrus, sea lion, dolphin, whale, fish, shark, jellyfish\n    \"\"\"\n    category = \"animals\"\n    condition = \"are lamellibranch\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "animals", "slot": "generalization", "value": "herbivorous", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are herbivorous. \n        Output: ", "result": "\n        elephant, giraffe, hippopotamus, kangaroo, llama,\n```"}
{"cat": "animals", "slot": "generalization", "value": "gnawing mammal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are gnawing mammal. \n        Output: ", "result": "\n        dog, elephant, giraffe, hippopotamus, jaguar, kangaroo, koala, llama, panda, sloth\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    if category == \"animals\" and condition == \"are gnawing mammal\":\n        words = [word for word"}
{"cat": "animals", "slot": "generalization", "value": "leporid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are leporid. \n        Output: ", "result": "\n        dog, cat, rabbit, hare, squirrel, rat, mouse, hamster, guinea pig, elephant\n    \"\"\"\n    category = \"animals\"\n    condition = \"are leporid\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "animals", "slot": "generalization", "value": "hermaphrodite", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are hermaphrodite. \n        Output: ", "result": "\n        dog, cat, salamander, seahorse, snail, jellyfish, lobster, crayfish, shrimp, oyster\n    \"\"\"\n    category = \"animals\"\n    hermaphrodite_words = [\n        \"dog\", \"cat\", \"salamander\", \"seahorse\", \"snail\", \"jellyfish\", \"lobster\", \"crayfish\", \"shrimp\", \"oyster\"\n    ]\n\n    if category == \"animals\" and hermaphrodite_words:\n       "}
{"cat": "animals", "slot": "generalization", "value": "proboscidean", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are proboscidean. \n        Output: ", "result": "\n        elephant, mammoth, mastodon,\n```"}
{"cat": "animals", "slot": "generalization", "value": "ungulate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are ungulate. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "generalization", "value": "whole", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are whole. \n        Output: ", "result": "\n        elephant, giraffe, hippopotamus, kangaroo, koala, llama, \n        meerkat, octopus, penguin, rhinoceros, sloth, \n        turtle, \n```"}
{"cat": "animals", "slot": "generalization", "value": "lagomorph", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are lagomorph. \n        Output: ", "result": "\n            rabbit, hare, cottontail, jackrabbit, pika, marmot, mole, vole, groundhog, porcupine\n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, is_lagomorph=True)\n        return [word.name for word in words]\n\n    def get_animals_with_category(self):\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category"}
{"cat": "animals", "slot": "generalization", "value": "even-toed ungulate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are even-toed ungulate. \n        Output: ", "result": "\n        deer, antelope, giraffe, okapi, eland, wildebeest,\n```"}
{"cat": "animals", "slot": "generalization", "value": "anapsid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are anapsid. \n        Output: ", "result": "\n        snake, lizard, turtle, crocodile, alligator, tortoise, terrapin, te\n```"}
{"cat": "animals", "slot": "generalization", "value": "crustacean", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are crustacean. \n        Output: ", "result": "\n```\ncrab, lobster, shrimp, prawn, lobster, crab, shrimp, lobster, crab, lobster\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n```\norange, lemon, lime, grapefruit, t"}
{"cat": "animals", "slot": "generalization", "value": "hoofed mammal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are hoofed mammal. \n        Output: ", "result": "\n        buffalo, deer, elk, giraffe, hippopotamus, \n        kangaroo, moose, okapi, rhinoceros, \n        tapir, zebra. \n        \"\"\"\n        category = 'animals'\n        condition = 'are hoofed mammal'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('animals', 'are hoofed mammal'))\n```\n\u8f93\u51fa\uff1a\n```\nbuffalo,"}
{"cat": "animals", "slot": "generalization", "value": "bivalve", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are bivalve. \n        Output: ", "result": "\n          dog, fish, oyster, clam, mussel, scallop, shrimp, crab, lobster, snail\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    if category == \"animals\":\n        for word in animal_words:\n            if condition.lower() in word.lower():\n                words.append("}
{"cat": "animals", "slot": "generalization", "value": "unit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are unit. \n        Output: ", "result": "\n        dog, elephant, giraffe, hippopotamus, kangaroo, lion, octopus, penguin, seahorse, zebra\n    \"\"\"\n    category = \"animals\"\n    condition = \"are unit\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "animals", "slot": "generalization", "value": "pelecypod", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are pelecypod. \n        Output: ", "result": "\n```\noctopus, squid, cuttlefish, nautilus, clam, oyster, mussel, snail, scallop, abalone\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\nlemon, lime, orange, grapefruit, tangerine, mandarin, clementine, pomelo"}
{"cat": "animals", "slot": "generalization", "value": "primate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are primate. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "generalization", "value": "saurian", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are saurian. \n        Output: ", "result": "\n        lizard, crocodile, alligator, \n        dinosaur, pterodactyl, \n        velociraptor, stegosaurus, \n        brontosaurus, plesiosaur, \n        tyrannosaurus rex\n```\n\n```\nDescribe a scenario where the input is a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: a description of the scenario. \n        Category: animals. \n        Condition: are saurian. \n       "}
{"cat": "animals", "slot": "generalization", "value": "anapsid reptile", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are anapsid reptile. \n        Output: ", "result": "\n        snake, turtle, terrapin, tortoise, alligator, crocodile, lizard, \n        monitor, \n```"}
{"cat": "animals", "slot": "generalization", "value": "artiodactyl mammal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are artiodactyl mammal. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "generalization", "value": "pachyderm", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are pachyderm. \n        Output: ", "result": " elephant, giraffe, hippopotamus, rhinoceros, \n        camel, dugong, manatee, sloth, anteater, \n        armadillo\n    \"\"\"\n    category = 'animals'\n    pachyderm_words = [\n        'elephant',\n        'giraffe',\n        'hippopotamus',\n        'rhinoceros',\n        'camel',\n        'dugong',\n        'manatee',\n        'sloth',\n       "}
{"cat": "animals", "slot": "generalization", "value": "arachnoid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are arachnoid. \n        Output: ", "result": "\n        dog, spider, scorpion, tarantula, wolf, snake, lizard, crocodile, centipede, millipede\n\nExample 2: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n        orange, lemon, lime, grapefruit, tangerine, mandarin, clementine, pomelo"}
{"cat": "animals", "slot": "generalization", "value": "arachnid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are arachnid. \n        Output: ", "result": "\n```\nscorpion, spider, tarantula, tick, wolf, mite, tick, spider, scorpion, wolf\n```"}
{"cat": "animals", "slot": "generalization", "value": "ruminant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are ruminant. \n        Output: ", "result": "\n```\ngoat, cow, deer, antelope, sheep, buffalo, giraffe, elephant, camel, moose\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine, clement"}
{"cat": "animals", "slot": "generalization", "value": "proboscidian", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are proboscidian. \n        Output: ", "result": "\n        elephant, rhinoceros, hippopotamus, whale, narwhal,\n```"}
{"cat": "animals", "slot": "generalization", "value": "chelonian", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are chelonian. \n        Output: ", "result": "\n        turtle, tortoise, terrapin, alligator, crocodile, snapping turtle, leatherback turtle, hawksbill turtle, loggerhead turtle, Kemp's ridley turtle\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() == condition.lower():\n            words.append(word)\n    print(\", \".join(words))\n"}
{"cat": "animals", "slot": "generalization", "value": "leporid mammal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are leporid mammal. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "generalization", "value": "animal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are animal. \n        Output: ", "result": "\n        dog, cat, bird, fish, snake, elephant, giraffe, lion, monkey, zebra\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    words = Word.objects.filter(category=category)\n    filtered_words = []\n    for word in words:\n        if word.text.lower() == 'are animal':\n            filtered_words.append(word)\n    filtered_words = list(filter(lambda x: x.text.lower() == 'are animal', filtered_words))"}
{"cat": "animals", "slot": "generalization", "value": "arthropod", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are arthropod. \n        Output: ", "result": "\n```\nant, spider, cricket, grasshopper, beetle, cockroach, mantis, millipede, centipede, tick\n```\nExplanation:\n\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Desired output: comma separated list of words.\n3. Category: animals.\n4. Condition: are arthropod.\n5. Output: \n```\nant, spider, cricket, grasshopper, beetle, cockroach,"}
{"cat": "animals", "slot": "generalization", "value": "invertebrate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are invertebrate. \n        Output: ", "result": "\n        bee, ant, spider, snail, crab, lobster, shrimp, jellyfish, octopus, cuttlefish.\n    \"\"\"\n    category = \"animals\"\n    condition = \"are invertebrate\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"animals\", \"are invertebrate\"))  # Output: bee, ant, spider, snail, crab, lobster, shrimp, jel"}
{"cat": "animals", "slot": "activity", "value": "nest", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be nest. \n        Output: ", "result": "\n          dog, \n          cat, \n          bird, \n          fish, \n          snake, \n          spider, \n          ant, \n          bee, \n          wasp, \n          hornet.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"nest\" in word:\n            if word not in words:\n                words.append(word)\n        else:\n            if word not in words:\n                words.append(word)\n    return words\n\nif __name__ == \""}
{"cat": "animals", "slot": "generalization", "value": "hymenopterous insect", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are hymenopterous insect. \n        Output: ", "result": "\n        bee, ant, wasp, honeybee, bumblebee, yellowjacket, hornet,\n```"}
{"cat": "animals", "slot": "generalization", "value": "chordate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are chordate. \n        Output: ", "result": "\n        fish, shark, whale, ray, skate, hagfish, lancelet, salamander, axolotl, platypus\n\nExample 2: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n        lemon, lime, orange, grapefruit, mandarin, tangerine, clementine, pomelo,"}
{"cat": "animals", "slot": "generalization", "value": "hymenopter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are hymenopter. \n        Output: ", "result": "\n        bee, ant, wasp, honeybee, bumblebee, yellowjacket, hornet,\n```"}
{"cat": "animals", "slot": "generalization", "value": "hymenopteron", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are hymenopteron. \n        Output: ", "result": "\n        bee, ant, wasp, honeybee, bumblebee, yellowjacket, hornet,\n```"}
{"cat": "animals", "slot": "generalization", "value": "hymenopteran", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are hymenopteran. \n        Output: ", "result": "\n        bee, ant, wasp, honeybee, bumblebee, yellowjacket, hornet,\n```"}
{"cat": "animals", "slot": "place", "value": "larva", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in larvas. \n        Output: ", "result": "\n        dog, cat, bird, fish, snake, worm, spider, ant, butterfly, caterpillar.\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    words = Word.objects.filter(category=category)\n    filtered_words = []\n    for word in words:\n        if 'larva' in word.definition.lower():\n            filtered_words.append(word)\n    filtered_words = sorted(filtered_words, key=lambda x: x.definition.lower())\n    return"}
{"cat": "animals", "slot": "place", "value": "hive", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in hives. \n        Output: ", "result": "\n        bee, honey, comb, hive, swarm, queen, worker, drone, frame, honeycomb\n\"\"\"\n\n# Define the category and condition\ncategory = \"animals\"\ncondition = \"can be found or used in hives\"\n\n# Define a list to store the words\nwords = []\n\n# Define a function to find words that satisfy the condition\ndef find_words(category, condition):\n    words = []\n    for word in all_words:\n        if word.lower() == category.lower() and word.lower() in"}
{"cat": "animals", "slot": "generalization", "value": "mollusk", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mollusk. \n        Output: ", "result": "\n          snail, clam, oyster, mussel, scallop, squid, cuttlefish, nautilus, octopus, squid\n```\n```"}
{"cat": "animals", "slot": "generalization", "value": "herbivore", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are herbivore. \n        Output: ", "result": "\n             elephant, \n             giraffe, \n             kangaroo, \n             koala, \n             llama, \n             ostrich, \n             rhinoceros, \n             sloth, \n             zebra, \n             hippopotamus\n        \"\"\"\n        category = 'animals'\n        condition = 'are herbivore'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('animals', 'are her"}
{"cat": "animals", "slot": "activity", "value": "walk", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be walk. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "activity", "value": "crawl", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be crawl. \n        Output: ", "result": "\n            dog, cat, snake, lizard, spider, scorpion, ant, cockroach, beetle, centipede\n        Explanation: dog, cat, snake, lizard, spider, scorpion, ant, cockroach, beetle, centipede can crawl.\n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, can_crawl=True)\n        return words.distinct().order_by('name')"}
{"cat": "animals", "slot": "activity", "value": "run", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be run. \n        Output: ", "result": "\n            dog, cat, bird, fish, snake, lion, tiger, elephant, giraffe, zebra\n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, can_run=True)\n        return [word.name for word in words]\n\n    def get_animals_that_cant_run(self):\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, can"}
{"cat": "animals", "slot": "activity", "value": "fly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be fly. \n        Output: ", "result": "\n          dog, cat, bird, butterfly, bee, mosquito, fly, ant, spider, moth\n```\n\n```\nDescribe a scenario where the category is \"vehicles\" and the condition is \"can be driven on land\". \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be driven on land. \n        Output: \n          car, truck, bus, train,"}
{"cat": "animals", "slot": "activity", "value": "yelp", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be yelp. \n        Output: ", "result": "\n          dog, cat, bird, fish, snake, lion, tiger, elephant, giraffe, zebra\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"yelp\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n        Desired output: a dictionary where the keys are words and the values are the number of vowels"}
{"cat": "animals", "slot": "activity", "value": "swim", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be swim. \n        Output: ", "result": " fish, shark, whale, dolphin, jellyfish, octopus, crab, lobster, clam, oyster. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        condition = Condition.objects.get(name='can be swim')\n        words = Word.objects.filter(category=category, condition=condition)\n        return [word.name for word in words]\n\n    def get_random_word(self):\n        \"\"\"\n        Get a random word from the database. \n       "}
{"cat": "animals", "slot": "activity", "value": "creep", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be creep. \n        Output: ", "result": "\n          dog, cat, snake, spider, bat, frog, crocodile, lizard, scorpion, centipede\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() == condition.lower():\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n# Example usage\nsolve(\"animals,"}
{"cat": "animals", "slot": "activity", "value": "fly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be fly. \n        Output: ", "result": "\n          dog, cat, bird, butterfly, bee, mosquito, fly, ant, spider, moth\n```\n\n```\nDescribe a scenario where the category is \"vehicles\" and the condition is \"can be driven on land\". \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be driven on land. \n        Output: \n          car, truck, bus, train,"}
{"cat": "animals", "slot": "activity", "value": "hop", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be hop. \n        Output: ", "result": "\n```\ncat, hop, jump, hopscotch, hopeless, hop-on-hop-off, hopelessly, hopelessly, hopelessly, hopelessly, hopelessly, hopelessly, hopelessly, hopelessly, hopelessly, hopelessly, hopelessly, hopelessly, hopelessly, hopelessly, hopelessly, hopelessly, hopelessly, hopelessly, hopelessly, hopelessly, hopelessly, hopelessly, hopelessly, hopelessly, hopelessly, hopeless"}
{"cat": "animals", "slot": "activity", "value": "jump", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be jump. \n        Output: ", "result": "\n```\ncat, dog, bird, frog, kangaroo, giraffe, rabbit, squirrel, mouse, elephant\n```\n\nExample 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: starts with f. \n        Output: \n```\napple, banana, cherry, date, fig, grape, guava, kiwi, mango,"}
{"cat": "animals", "slot": "activity", "value": "howl", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be howl. \n        Output: ", "result": "\n            1. wolf\n            2. howl\n            3. coyote\n            4. bark\n            5. meow\n            6. chirp\n            7. roar\n            8. quack\n            9. hiss\n            10. growl\n        \"\"\"\n        animal_words = [\"wolf\", \"howl\", \"coyote\", \"bark\", \"meow\", \"chirp\", \"roar\", \"quack\", \"hiss\", \"growl\"]\n        animal_words = [word for word in animal_"}
{"cat": "animals", "slot": "activity", "value": "leap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be leap. \n        Output: ", "result": "\n```\ncat, leopard, leap\n```\n1. Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: can be. \n        Output: \n```\napple, banana, cherry, date, fig, grape, kiwi, mango, orange, peach\n```\n2. Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired"}
{"cat": "animals", "slot": "activity", "value": "leap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be leap. \n        Output: ", "result": "\n```\ncat, leopard, leap\n```\n1. Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: can be. \n        Output: \n```\napple, banana, cherry, date, fig, grape, kiwi, mango, orange, peach\n```\n2. Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired"}
{"cat": "animals", "slot": "generalization", "value": "decapod crustacean", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are decapod crustacean. \n        Output: ", "result": "\n```\ncrab, lobster, shrimp, prawn, lobster, crab, shrimp, lobster, crab, lobster\n```"}
{"cat": "animals", "slot": "generalization", "value": "decapod", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are decapod. \n        Output: ", "result": "\n```\ncat, crab, lobster, shrimp, prawn, crayfish, squid, octopus, snail, oyster\n```\n\n### Example 2:\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine, clementine,"}
{"cat": "animals", "slot": "generalization", "value": "domestic animal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are domestic animal. \n        Output: ", "result": " cat, dog, horse, cow, pig, chicken, sheep, goat, turkey, \n        llama. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        animals = Animal.objects.filter(species__in=category.species.values_list('name', flat=True))\n        filtered_animals = [animal for animal in animals if animal.is_domestic]\n        filtered_animals_names = [animal.name for animal in filtered_animals]\n        return filtered_animals_names"}
{"cat": "animals", "slot": "generalization", "value": "lepidopteron", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are lepidopteron. \n        Output: ", "result": "\n        butterfly, moth, caterpillar, silk, chrysalis, pupa, wing, antennae, proboscis, scales.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() in condition.lower().split(','):\n            words.append(word)\n    print(\", \".join(words))\n\n# Example usage\nsolution(category=\"animals\", condition=\"are lepidopter"}
{"cat": "animals", "slot": "generalization", "value": "domesticated animal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are domesticated animal. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "generalization", "value": "lepidopteran", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are lepidopteran. \n        Output: ", "result": "\n        butterfly, moth, caterpillar, silk, chrysalis, pupa, wing, antennae, proboscis, scales\n\"\"\"\n\n# Define the category and condition\ncategory = \"animals\"\ncondition = \"are lepidopteran\"\n\n# Split the condition into words\ncondition_words = condition.split()\n\n# Define a list to store the words\nwords = []\n\n# Iterate over the words in the category\nfor word in category_words:\n    # Check if the word satisfies the condition\n    if all("}
{"cat": "animals", "slot": "generalization", "value": "ectotherm", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are ectotherm. \n        Output: ", "result": "\n        lizard, snake, crocodile, alligator, turtle, chameleon, iguana, gecko, monitor lizard, tortoise\n```\n```"}
{"cat": "animals", "slot": "generalization", "value": "lepidopterous insect", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are lepidopterous insect. \n        Output: ", "result": "\n        butterfly, moth, caterpillar, silkworm, pupa, chrysalis, larva, wing, antenna, proboscis\n\"\"\"\n\n# Define the category and condition\ncategory = \"animals\"\ncondition = \"are lepidopterous insect\"\n\n# Split the condition into words\ncondition_words = condition.split()\n\n# Define an empty list to store the words\nwords = []\n\n# Iterate over the words in the category\nfor word in category_words:\n    # Check if the word satisfies the condition\n   "}
{"cat": "animals", "slot": "specialization", "value": "worker", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are worker. \n        Output: ", "result": "\n        dog, ant, bee, spider, wasp, termite, mosquito, fly, beetle, cockroach\n    \"\"\"\n    words = []\n    for word in animal_words:\n        if word.lower() == \"worker\":\n            words.append(word)\n    return words\n\ndef get_animals_with_category(category):\n    \"\"\"\n    Given a category, provide a list of animals that belong to that category. \n        Desired output: comma separated list of animals. \n        Category: animals. \n"}
{"cat": "animals", "slot": "specialization", "value": "queen", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are queen. \n        Output: ", "result": "\n```\ncat,queen,bee,monarch,reign,regal,royal,queenly,queenly,queenly\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple,strawberry,cherry,tomato,red delicious,beauty,scarlet,crimson,ruby,"}
{"cat": "animals", "slot": "specialization", "value": "drone", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are drone. \n        Output: ", "result": "\n        bee, drone, fly, hive, insect, pollinate, queen, swarm, technology, worker\n\"\"\"\n\n# Define the function\ndef generate_list(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Iterate over the words in the category\n    for word in category_words:\n        # Check if the word satisfies the condition\n       "}
{"cat": "animals", "slot": "specialization", "value": "Rottweiler", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Rottweiler. \n        Output: ", "result": "\n            1. Rottweiler\n            2. German Shepherd\n            3. Doberman Pinscher\n            4. Boxer\n            5. Siberian Husky\n            6. Alaskan Malamute\n            7. Chow Chow\n            8. Great Dane\n            9. Golden Retriever\n            10. Labrador Retriever\n        \"\"\"\n        category = Category.objects.get(name='animals')\n        rottweilers = Rottweiler.objects.filter(category=category)\n        words = [word.name"}
{"cat": "animals", "slot": "specialization", "value": "German Shepherd", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are German Shepherd. \n        Output: ", "result": "\n            1. Dog\n            2. German\n            3. Shepherd\n            4. Canine\n            5. Herding\n            6. Working\n            7. Police\n            8. Military\n            9. Service\n            10. Protection\n        \"\"\"\n        category = \"animals\"\n        condition = \"are German Shepherd\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n# Test the function\nprint(get_words(\"animals\", \"are German Shepherd\"))\n```\nOutput:"}
{"cat": "animals", "slot": "specialization", "value": "Labrador", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Labrador. \n        Output: ", "result": "\n```\nlabrador, retriever, dog, canine, water, hunting, guide, pet, friendly, loyal\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\norange, lemon, lime, grapefruit, mandarin, tangerine, clementine, pomelo,"}
{"cat": "animals", "slot": "specialization", "value": "Golden Retriever", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Golden Retriever. \n        Output: ", "result": "\n        golden,retriever,goldenretriever,goldenretrievers,retrievergolden,retrieversgolden,goldenretrievergolden,goldenretrieversgolden,retrievergoldenretriever,retrieversgoldenretriever,goldenretrievergoldenretrievers,goldenretrieversgoldenretriever,retrievergoldenretrievers"}
{"cat": "animals", "slot": "specialization", "value": "red fox", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are red fox. \n        Output: ", "result": "\n        red, fox, red fox, red foxes, red fox, red foxes, red fox, red foxes, red fox. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        condition = Condition.objects.get(name='are red fox')\n        words = [word.name for word in Animal.objects.filter(category=category, condition=condition)]\n        return ', '.join(words)\n"}
{"cat": "animals", "slot": "specialization", "value": "Bulldog", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Bulldog. \n        Output: ", "result": "\n            1. Bulldog\n            2. English Bulldog\n            3. French Bulldog\n            4. American Bulldog\n            5. Old English Bulldog\n            6. Olde English Bulldogge\n            7. Bullmastiff\n            8. Boxer\n            9. Boston Terrier\n            10. Bull Terrier\n    \"\"\"\n    category = \"animals\"\n    condition = \"are Bulldog\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__"}
{"cat": "animals", "slot": "specialization", "value": "kit fox", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are kit fox. \n        Output: ", "result": "\n```\nkit fox, red fox, arctic fox, gray fox, swift fox, kit fox, red fox, arctic fox, gray fox, swift fox\n```\nExplanation: The words that belong to the category `animals` and satisfy the condition `are kit fox` are `kit fox`, `red fox`, `arctic fox`, `gray fox`, `swift fox`.\n```"}
{"cat": "animals", "slot": "specialization", "value": "Yorkshire Terrier", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Yorkshire Terrier. \n        Output: ", "result": "\n        Yorkshire Terrier, Yorkie, Yorkshire, Terrier, York, Yorkshire, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier, Terrier"}
{"cat": "animals", "slot": "specialization", "value": "Poodle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Poodle. \n        Output: ", "result": "\n```\nPoodle,poodle,poodle,poodle,poodle,poodle,poodle,poodle,poodle\n```"}
{"cat": "animals", "slot": "specialization", "value": "Boxer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Boxer. \n        Output: ", "result": "\n```\nboxer,bull terrier,doberman pinscher,german shepherd,golden retriever,labrador retriever,poodle,rottweiler,siberian husky,weimaraner\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are apple. \n        Output: \n```\napple,banana,"}
{"cat": "animals", "slot": "specialization", "value": "bug", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are bug. \n        Output: ", "result": "\n```\nant, beetle, butterfly, caterpillar, cricket, grasshopper, ladybug, mantis, mosquito, spider\n```\nExplanation:\n\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Desired output: comma separated list of words.\n3. Category: animals.\n4. Condition: are bug.\n5. Output: ant, beetle, butterfly, caterpillar, cricket, grasshopper, ladybug,"}
{"cat": "animals", "slot": "specialization", "value": "louse", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are louse. \n        Output: ", "result": "\n```\ncat, louse, flea, tick, bedbug, mosquito, ant, cockroach, spider, fly\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine, clementine, mandarin"}
{"cat": "animals", "slot": "specialization", "value": "Beagle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Beagle. \n        Output: ", "result": "\n```\nbeagle,basset,hound,dog,canine,mammal,mammalian,carnivore,carnivorous,fauna\n```\n\nExample 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are apple. \n        Output: \n```\napple,banana,orange,grape,pear,mango,kiwi,"}
{"cat": "animals", "slot": "specialization", "value": "Brussels griffon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Brussels griffon. \n        Output: ", "result": "\n        buffalo, camel, chimpanzee, elephant, giraffe, hippopotamus, \n        kangaroo, koala, llama, octopus, penguin, rhinoceros, \n        seahorse, turtle, walrus, zebra. \n        \"\"\"\n        category = 'animals'\n        condition = 'are Brussels griffon'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words"}
{"cat": "animals", "slot": "specialization", "value": "cottontail rabbit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are cottontail rabbit. \n        Output: ", "result": "\n```\nrabbit, bunny, cottontail, hare, jackrabbit, rabbitry, warren, bunnyhop, cottontail rabbit, jackrabbit\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are cottontail rabbit\" are: rabbit, bunny, cottontail, hare, jackrabbit, rabbitry, warren, bunnyhop, cottontail rabbit, jackrabbit.\n```"}
{"cat": "animals", "slot": "specialization", "value": "polyzoan", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are polyzoan. \n        Output: ", "result": "\n        fish, shrimp, jellyfish, coral, sea anemone, sponge, hydroid, bryozoan, cnidarian, polyp\n\"\"\"\n\nprint(\"Provide a list of 10 words that belong to the category and satisfy the condition. \")\nprint(\"Desired output: comma separated list of words. \")\n\ncategory = input(\"Category: \")\ncondition = input(\"Condition: \")\n\nif category == \"animals\" and condition == \"are polyzoan\":\n    words = input(\"Desired output: \")"}
{"cat": "animals", "slot": "specialization", "value": "Anoplophora glabripennis", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Anoplophora glabripennis. \n        Output: ", "result": "\n        beetle, Asian, longhorn, invasive, wood, borer, furniture, destroy, hardwood, infestation \n    \"\"\"\n    category = \"animals\"\n    condition = \"are Anoplophora glabripennis\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\nThis code will output:\n```\nbeetle, Asian, longhorn, invasive, wood, borer, furniture, destroy,"}
{"cat": "animals", "slot": "specialization", "value": "mutt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mutt. \n        Output: ", "result": "\n            dog, cat, pug, poodle, mutt, puppy, kitten, bull terrier, mongrel, mixed breed\n\"\"\"\nprint(dog, cat, pug, poodle, mutt, puppy, kitten, bull terrier, mongrel, mixed breed)"}
{"cat": "animals", "slot": "specialization", "value": "mongrel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mongrel. \n        Output: ", "result": "\n            dog, cat, horse, cow, sheep, pig, chicken, goat, lion, tiger\n        \"\"\"\n        category = \"animals\"\n        condition = \"are mongrel\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n       "}
{"cat": "animals", "slot": "specialization", "value": "neuropteron", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are neuropteron. \n        Output: ", "result": "\n            1. dragonfly\n            2. damselfly\n            3. mayfly\n            4. stonefly\n            5. caddisfly\n            6. leech\n            7. mantis shrimp\n            8. squid\n            9. jellyfish\n            10. octopus\n        \"\"\"\n        animal_words = [\"dragonfly\", \"damselfly\", \"mayfly\", \"stonefly\", \"caddisfly\", \"leech\", \"mantis shrimp\", \"squid\", \"jellyfish\", \"octopus\"]\n"}
{"cat": "animals", "slot": "specialization", "value": "fertilized egg", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are fertilized egg. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "specialization", "value": "humblebee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are humblebee. \n        Output: ", "result": "\n```\nhumblebee, bumblebee, bee, beehive, honeybee, workerbee, dronebee, queenbee, mellifluous, humble\n```\nExplanation: The word \"humblebee\" is a combination of the words \"humble\" and \"bee\" and satisfies the condition of being a humblebee.\n```"}
{"cat": "animals", "slot": "specialization", "value": "Old World rabbit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Old World rabbit. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "specialization", "value": "Newfoundland", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Newfoundland. \n        Output: ", "result": "\n```\ndog, seal, fisherman, iceberg, St. John's, Newfoundland, Labrador, Newfoundland, Newfoundland, Newfoundland, Newfoundland, Newfoundland, Newfoundland, Newfoundland, Newfoundland, Newfoundland, Newfoundland, Newfoundland, Newfoundland, Newfoundland, Newfoundland, Newfoundland, Newfoundland, Newfoundland, Newfoundland, Newfoundland, Newfoundland, Newfoundland, Newfoundland, Newfoundland, Newfoundland, Newfoundland,"}
{"cat": "animals", "slot": "specialization", "value": "creepy-crawly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are creepy-crawly. \n        Output: ", "result": "\n          snake, spider, scorpion, centipede, millipede,\n```"}
{"cat": "animals", "slot": "specialization", "value": "passeriform bird", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are passeriform bird. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "specialization", "value": "aquatic bird", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are aquatic bird. \n        Output: ", "result": "\n        swan, goose, duck, gull, heron, stork, crane, pelican, flamingo, seagull\n    \"\"\"\n    category = \"animals\"\n    condition = \"are aquatic bird\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"animals\", \"are mammals\"))\nprint(get_words(\"animals\", \"have fur\"))\nprint(get_words(\"animals\", \"are aquatic bird\"))\nprint"}
{"cat": "animals", "slot": "specialization", "value": "mussel shrimp", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mussel shrimp. \n        Output: ", "result": "\n```\ncat, mussel, shrimp\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, cherry, strawberry, raspberry, plum, red delicious, watermelon, blueberry, blackberry, orange\n```\n\nExample:\n```\nProvide a list of 1"}
{"cat": "animals", "slot": "specialization", "value": "carinate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are carinate. \n        Output: ", "result": " elephant, giraffe, camel, rhino, hippo, \n        zebra, lion, tiger, leopard, cheetah. \n        \"\"\"\n        category = 'animals'\n        condition = 'are carinate'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of"}
{"cat": "animals", "slot": "specialization", "value": "clerid beetle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are clerid beetle. \n        Output: ", "result": "\n```\nant, beetle, clerid, dung, elytra, exoskeleton, grubs, larvae, metallic, predator\n```\nExplanation:\nThe words that belong to the category \"animals\" and satisfy the condition \"are clerid beetle\" are: ant, beetle, clerid, dung, elytra, exoskeleton, grubs, larvae, metallic, predator.\n```"}
{"cat": "animals", "slot": "specialization", "value": "scavenger", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are scavenger. \n        Output: ", "result": "\n            1. hyena\n            2. vulture\n            3. shark\n            4. octopus\n            5. eagle\n            6. crocodile\n            7. cat\n            8. seagull\n            9. owl\n            10. fox\n        \"\"\"\n        scavenger_animals = [\n            \"hyena\",\n            \"vulture\",\n            \"shark\",\n            \"octopus\",\n            \"eagle\",\n            \"crocodile\",\n            \"cat\",\n            \"seagull\",\n            \""}
{"cat": "animals", "slot": "specialization", "value": "ladybird beetle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are ladybird beetle. \n        Output: ", "result": "\n```\nladybird, beetle, ladybug, ladybird beetle, ladybird beetle, ladybird beetle, ladybird beetle, ladybird beetle, ladybird beetle, ladybird beetle\n```"}
{"cat": "animals", "slot": "specialization", "value": "Felis catus", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Felis catus. \n        Output: ", "result": "\n```\ncat,pussycat,kitten,tabby,calico,Siamese,Persian,Bengal,Snowshoe,Sphynx\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n```\norange,lemon,lime,grapefruit,tangerine,"}
{"cat": "animals", "slot": "specialization", "value": "wood ant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are wood ant. \n        Output: ", "result": "\n```\nant\nbee\nbutterfly\ncaterpillar\ndragonfly\ngrasshopper\nladybug\nmoth\nspider\nwasp\n```\nExplanation:\nThe words that belong to the category \"animals\" and satisfy the condition \"are wood ant\" are \"ant\", \"bee\", \"butterfly\", \"caterpillar\", \"dragonfly\", \"grasshopper\", \"ladybug\", \"moth\", \"spider\", and \"wasp\".\n```"}
{"cat": "animals", "slot": "specialization", "value": "ratite bird", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are ratite bird. \n        Output: ", "result": "\n            1. ostrich\n            2. emu\n            3. rhea\n            4. cassowary\n            5. kiwi\n            6. condor\n            7. vulture\n            8. stork\n            9. flamingo\n            10. ibis\n        \"\"\"\n        category = \"animals\"\n        condition = \"are ratite bird\"\n        words = [\n            \"ostrich\",\n            \"emu\",\n            \"rhea\",\n            \"cassowary\",\n            \"kiwi\",\n            \"cond"}
{"cat": "animals", "slot": "specialization", "value": "springtail", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are springtail. \n        Output: ", "result": "\n```\nant, cricket, grasshopper, locust, mantis, millipede, sowbug, spider, tick, \n```\n1. Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\norange, lemon, lime, grapefruit, mandarin, tangerine, clementine, pomegranate, \n```"}
{"cat": "animals", "slot": "specialization", "value": "honeybee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are honeybee. \n        Output: ", "result": "\n```\nbee, honey, hive, pollen, queen, worker, drone, nectar, honeycomb, apiary\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are apple. \n        Output: \n```\napple, banana, cherry, date, fig, grape, lemon, orange, peach, plum\n```\n"}
{"cat": "animals", "slot": "specialization", "value": "barnacle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are barnacle. \n        Output: ", "result": "\n        dog, cat, horse, cow, pig, sheep, goat, chicken, duck, turkey\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    barnacle_animal_objects = BarnacleAnimal.objects.filter(category=category)\n    barnacle_words = [barnacle_animal.name.lower() for barnacle_animal in barnacle_animal_objects]\n    barnacle_words = [word for word in barnacle_words if 'barn"}
{"cat": "animals", "slot": "specialization", "value": "thysanuron", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are thysanuron. \n        Output: ", "result": "\n        lizard, gecko, skink, chameleon, \n        monitor, crocodile, alligator, \n        turtle, tortoise, terrapin, \n        snake, python, boa, \n        lizard, gecko, skink, chameleon, \n        monitor, crocodile, alligator, \n        turtle, tortoise, terrapin, \n        snake, python, boa, \n        lizard, gecko, skink, chameleon,"}
{"cat": "animals", "slot": "specialization", "value": "homoiotherm", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are homoiotherm. \n        Output: ", "result": "\n        dog, cat, elephant, giraffe, hippopotamus, \n        kangaroo, koala, lion, tiger, zebra. \n        \"\"\"\n        category = 'animals'\n        condition = 'are homoiotherm'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired"}
{"cat": "animals", "slot": "specialization", "value": "Monomorium pharaonis", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Monomorium pharaonis. \n        Output: ", "result": "\n            1. ant\n            2. pharaonis\n            3. Monomorium\n            4. worker\n            5. colony\n            6. nest\n            7. foraging\n            8. food\n            9. harvester\n            10. monomorium\n        \"\"\"\n        category = \"animals\"\n        condition = \"are Monomorium pharaonis\"\n        words = [\n            \"ant\",\n            \"pharaonis\",\n            \"Monomorium\",\n            \"worker\",\n            \"colony\",\n"}
{"cat": "animals", "slot": "specialization", "value": "hemipterous insect", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are hemipterous insect. \n        Output: ", "result": "\n        beetle, cockroach, cricket, grasshopper, locust, mantis,\n```"}
{"cat": "animals", "slot": "specialization", "value": "Jonah crab", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Jonah crab. \n        Output: ", "result": "\n```\nJonah,crab,crabs,crabbing,crabby,crabber,crabwise,crabgrass,crabapple,crabcake\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are Jonah crab\" are \"Jonah\", \"crab\", \"crabs\", \"crabbing\", \"crabby\", \"crabber\", \"crabwise\", \"crabgrass\", \"crabapple\", and \"crabcake\". These words are"}
{"cat": "animals", "slot": "specialization", "value": "hen", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are hen. \n        Output: ", "result": "\n            dog, hen, rooster, chicken, duck, goose, gander, swan, turkey, peacock\n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category)\n        filtered_words = []\n        for word in words:\n            if word.text.lower() == 'hen':\n                filtered_words.append(word)\n        filtered_words = list(filtered_words)\n        return filtered_words\n\n    def get_anagrams("}
{"cat": "animals", "slot": "specialization", "value": "long-horned beetle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are long-horned beetle. \n        Output: ", "result": "\n        elephant, giraffe, rhinoceros, buffalo, zebra, antelope, hippopotamus, crocodile, lion, tiger\n    \"\"\"\n    category = \"animals\"\n    condition = \"are long-horned beetle\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "animals", "slot": "specialization", "value": "vixen", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are vixen. \n        Output: ", "result": "\n            dog, fox, vixen, hen, cock, rooster, bull, boar, sow, pig\n        \"\"\"\n        category = \"animals\"\n        condition = \"are vixen\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n"}
{"cat": "animals", "slot": "specialization", "value": "barker", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are barker. \n        Output: ", "result": "\n            dog, cat, elephant, giraffe, lion, monkey, parrot, seal, tiger, zebra\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        # Check if the word is"}
{"cat": "animals", "slot": "specialization", "value": "soft-shelled crab", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are soft-shelled crab. \n        Output: ", "result": "\n```\ncrab,shelled,soft,animal,seafood,crustacean,molting,arachnodactyly,swimming,crustacean\n```\n\nExample 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n```\norange,lemon,lime,grapef"}
{"cat": "animals", "slot": "specialization", "value": "archeopteryx", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are archeopteryx. \n        Output: ", "result": "\n            1. Archaeopteryx\n            2. Pterodactyl\n            3. Dinosaur\n            4. Bird\n            5. Reptile\n            6. Flying\n            7. Winged\n            8. Prehistoric\n            9. Fossil\n            10. Paleontology\n        \"\"\"\n        category = \"animals\"\n        condition = \"are archeopteryx\"\n        words = [\n            \"Archaeopteryx\",\n            \"Pterodactyl\",\n            \"Dinosaur\",\n            \""}
{"cat": "animals", "slot": "specialization", "value": "griffon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are griffon. \n        Output: ", "result": "\n        elephant, giraffe, hippopotamus, kangaroo, lion, okapi, rhinoceros, tiger, zebra, \n        Condition: are griffon. \n        Output: \n        eagle, falcon, hawk, vulture, \n        Condition: are griffon. \n        Output: \n        condor, kite, osprey, sparrowhawk, \n        Condition: are griffon. \n        Output: \n        bald eagle"}
{"cat": "animals", "slot": "specialization", "value": "lycaenid butterfly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are lycaenid butterfly. \n        Output: ", "result": "\n            dog, butterfly, blue, orange, black, white, red, green, yellow, brown\n        \"\"\"\n        category = Category.objects.get(name='animals')\n        condition = Condition.objects.get(name='are lycaenid butterfly')\n        words = Word.objects.filter(category=category, condition=condition)\n        return [word.name for word in words]\n\n    def get_random_word(self):\n        \"\"\"\n        Retrieve a random word from the database. \n        \"\"\"\n        word ="}
{"cat": "animals", "slot": "specialization", "value": "dictyopterous insect", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are dictyopterous insect. \n        Output: ", "result": "\n```\ndragonfly, damselfly, mayfly, stonefly, caddisfly, leech, antlion, dobsonfly, beetle, grasshopper\n```\n\nExample 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n```\norange, lemon, lime, grapefruit, t"}
{"cat": "animals", "slot": "specialization", "value": "working dog", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are working dog. \n        Output: ", "result": " police, search and rescue, guard, service, therapy, \n        detection, protection, assistance, support. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        condition = Condition.objects.get(name='are working dog')\n        words = Word.objects.filter(category=category, condition=condition)\n        word_list = ', '.join([word.name for word in words])\n        print(word_list)\n```\nThis will output:\n```\npolice, search and rescue, guard, service, therapy,"}
{"cat": "animals", "slot": "specialization", "value": "pollinator", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are pollinator. \n        Output: ", "result": "\n```\nbee, butterfly, moth, hummingbird, bumblebee, honeybee, fly, beetle, ant, ladybug\n```\nExplanation:\nThe words that belong to the category \"animals\" and satisfy the condition \"are pollinator\" are: bee, butterfly, moth, hummingbird, bumblebee, honeybee, fly, beetle, ant, ladybug.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Des"}
{"cat": "animals", "slot": "specialization", "value": "cuckoo-bumblebee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are cuckoo-bumblebee. \n        Output: ", "result": "\n```\ncat, cuckoo, bumblebee\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, banana, cherry,\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list"}
{"cat": "animals", "slot": "specialization", "value": "European rabbit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are European rabbit. \n        Output: ", "result": "\n```\nrabbit, bunny, cottontail, hare, jackrabbit, European rabbit, Oryctolagus cuniculus, lagomorph, lagomorpha\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n```\norange, lemon, lime, grapef"}
{"cat": "animals", "slot": "specialization", "value": "sea animal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are sea animal. \n        Output: ", "result": "\n        dolphin, shark, whale, jellyfish, octopus, crab, lobster, oyster, clam, snail\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    sea_animals = category.objects.filter(\n        Q(name__contains='sea') | Q(name__contains='ocean') | Q(name__contains='water')\n    )\n    sea_animals_words = sea_animals.values_list('name', flat=True).distinct()\n   "}
{"cat": "animals", "slot": "specialization", "value": "water beetle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are water beetle. \n        Output: ", "result": "\n```\nwater, beetle, aquatic, insect, larva, metamorphosis, carapace, underwater, survival\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, raspberry, watermelon, pear, plum, orange"}
{"cat": "animals", "slot": "specialization", "value": "biped", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are biped. \n        Output: ", "result": "\n        dog, cat, horse, giraffe, zebra, deer, elephant, rhinoceros, \n        lion, tiger\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    words = Word.objects.filter(category=category)\n    biped_words = []\n    for word in words:\n        if word.is_biped:\n            biped_words.append(word)\n    if biped_words:\n        result = ', '.join(biped_"}
{"cat": "animals", "slot": "specialization", "value": "heteropterous insect", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are heteropterous insect. \n        Output: ", "result": "\n            1. ant\n            2. grasshopper\n            3. cricket\n            4. cockroach\n            5. termite\n            6. flea\n            7. tsetse fly\n            8. louse\n            9. bed bug\n            10. mosquito\n        \"\"\"\n        category = \"animals\"\n        condition = \"are heteropterous insect\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    print(get_words(\"animals\", \"are heteropterous insect\"))"}
{"cat": "animals", "slot": "specialization", "value": "flightless bird", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are flightless bird. \n        Output: ", "result": "\n          penguin, emu, ostrich, kiwi, cassowary, rhea, emu, ostrich, kiwi, cassowary\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in text.split():\n        if word.lower() in category.lower() and word.lower() not in condition.lower():\n            words.append(word)\n    print(\", \".join(words))\n```\nExample:\n```\npython word_filter"}
{"cat": "animals", "slot": "specialization", "value": "apodiform bird", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are apodiform bird. \n        Output: ", "result": "\n            1. Albatross\n            2. Shearwater\n            3. Petrel\n            4. Storm petrel\n            5. Fulmar\n            6. Manx shearwater\n            7. Sooty shearwater\n            8. White-faced storm petrel\n            9. Leach's storm petrel\n            10. Band-rumped storm petrel\n        \"\"\"\n        words = [\n            \"Albatross\",\n            \"Shearwater\",\n            \"Petrel\",\n            \"Storm petrel\",\n            \"Ful"}
{"cat": "animals", "slot": "specialization", "value": "echinoderm", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are echinoderm. \n        Output: ", "result": " starfish, sea urchin, sand dollar, sea cucumber, sea lily, feather star, brittle star, sea urchin, sand dollar, sea cucumber\n```\n\nExample 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output:  lemon, lime, orange, grapefruit, tangerine,"}
{"cat": "animals", "slot": "specialization", "value": "brachiopod", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are brachiopod. \n        Output: ", "result": "\n        fish, shrimp, crab, lobster, snail, scallop, clam, oyster, mussel, squid\n\nExample 2: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n        lemon, lime, orange, grapefruit, tangerine, clementine, mandarin orange, pomelo,"}
{"cat": "animals", "slot": "specialization", "value": "termite", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are termite. \n        Output: ", "result": "\n```\nant, termite, mound, colony, damage, wood, underground, social, insect\n```\n\n#### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\norange, lemon, lime, grapefruit, mandarin, tangerine, clementine, pomelo, bergamot,"}
{"cat": "animals", "slot": "specialization", "value": "cnidarian", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are cnidarian. \n        Output: ", "result": "\n        jellyfish, comb jelly, sea wasp, Portuguese man o' war, blue bottle, lion's mane jellyfish, hydroid, sea anemone, coral, hydrozoan\n```\n\nExample 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n        lemon, lime, orange,"}
{"cat": "animals", "slot": "specialization", "value": "fiddler crab", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are fiddler crab. \n        Output: ", "result": "\n```\nfiddler, crab\n```\n\n```\ncrab, fiddler\n```\n\n```\nfiddler, crab\n```\n\n```\ncrab, fiddler\n```\n\n```\nfiddler, crab\n```\n\n```\ncrab, fiddler\n```\n\n```\nfiddler, crab\n```\n\n```\ncrab, fiddler\n```\n\n```\nfiddler, crab\n```\n\n```\ncrab, fiddler\n```\n\n```\nfiddler, c"}
{"cat": "animals", "slot": "specialization", "value": "Canis niger", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Canis niger. \n        Output: ", "result": "1. wolf, 2. coyote, 3. jackal, 4. dingo, 5. gray wolf, 6. red wolf, 7. Ethiopian wolf, 8. African golden wolf, 9. Indian wolf, 10. domestic dog.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in text:\n        if word.lower() == category.lower() and word.lower() == condition.lower():\n           "}
{"cat": "animals", "slot": "specialization", "value": "Alaska crab", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Alaska crab. \n        Output: ", "result": "\n```\ncrab, salmon, halibut, king crab, snow crab, Dungeness crab, Tanner crab, blue king crab, red king crab\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are Alaska crab\" are: crab, salmon, halibut, king crab, snow crab, Dungeness crab, Tanner crab, blue king crab, and red king crab.\n```"}
{"cat": "animals", "slot": "specialization", "value": "dipterous insect", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are dipterous insect. \n        Output: ", "result": "\n        dog, fly, mosquito, gnat, housefly, horsefly, deerfly, blackfly, buffalo fly, tsetse fly.\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    condition = Condition.objects.get(name='are dipterous insect')\n    words = Word.objects.filter(category=category, condition=condition)\n    return [word.name for word in words]\n\n# Test the function\nprint(get_words_from_category_and_condition('animals', 'are"}
{"cat": "animals", "slot": "specialization", "value": "embryo", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are embryo. \n        Output: ", "result": "\n        dog, cat, bird, fish, frog, snake, sheep, cow, pig, chicken\n    \"\"\"\n    category = \"animals\"\n    condition = \"are embryo\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "animals", "slot": "specialization", "value": "biting louse", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are biting louse. \n        Output: ", "result": "\n            1. Flea\n            2. Tick\n            3. Mosquito\n            4. Bedbug\n            5. Lice\n            6. Gnat\n            7. Midges\n            8. Sandfly\n            9. Blackfly\n            10. No-see-um\n        \"\"\"\n        words = [\n            \"Flea\",\n            \"Tick\",\n            \"Mosquito\",\n            \"Bedbug\",\n            \"Lice\",\n            \"Gnat\",\n            \"Midges\",\n            \"Sandfly\",\n           "}
{"cat": "animals", "slot": "specialization", "value": "bulldog ant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are bulldog ant. \n        Output: ", "result": "\n```\nbulldog,ant,bull,dog,English,British,Bulldog,British Bulldog,English Bulldog,Bulldog Breed\n```"}
{"cat": "animals", "slot": "specialization", "value": "earwig", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are earwig. \n        Output: ", "result": "\n```\ncat,earwig\n```\n```"}
{"cat": "animals", "slot": "specialization", "value": "mecopteran", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mecopteran. \n        Output: ", "result": "\n        bee, fly, ant, wasp, spider, mosquito, butterfly, moth, cricket, grasshopper.\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    mecopterans = Mecopteran.objects.filter(species__in=category.species.values_list('name', flat=True))\n    words = ', '.join([word.name for word in mecopterans])\n    print(words)\n```\nThis will output:\n```\nbee, fly, ant, wasp"}
{"cat": "animals", "slot": "specialization", "value": "rabbit ears", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are rabbit ears. \n        Output: ", "result": "\n```\nrabbit,ears,rabbitry,rabbitization,rabbitize,rabbitly,rabbithood,rabbitlyness,rabbitness,rabbitly\n```\nExplanation: The word \"rabbit\" satisfies the condition of being \"rabbit ears\" and belongs to the category of animals.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n"}
{"cat": "animals", "slot": "specialization", "value": "Canis latrans", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Canis latrans. \n        Output: ", "result": " coyote, gray wolf, red wolf, \n```"}
{"cat": "animals", "slot": "specialization", "value": "four-footed butterfly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are four-footed butterfly. \n        Output: ", "result": "\n            \n```\ncat, dog, horse, cow, pig, sheep, goat, giraffe, zebra, butterfly\n```\n\nExample 2: \nInput: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n            \n```\napple, strawberry, cherry, raspberry, blueberry, plum, orange,"}
{"cat": "animals", "slot": "specialization", "value": "varment", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are varment. \n        Output: ", "result": "\n        dog, cat, mouse, rat, snake, spider, ant, bee, butterfly, fly.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"varment\" in word:\n            words.append(word)\n    return words\n\ndef get_anagrams(word_list):\n    anagrams = []\n    for word in word_list:\n        anagrams.extend(word_list[::-1])\n    return anagrams\n\ndef get_palindrome(word_"}
{"cat": "animals", "slot": "specialization", "value": "copepod crustacean", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are copepod crustacean. \n        Output: ", "result": "\n```\ncopepod, crustacean, zooplankton, aquatic, filter-feeder, copepodites, nauplii,\n```\n1. Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine, clementine, mandarin, pomelo"}
{"cat": "animals", "slot": "specialization", "value": "toy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are toy. \n        Output: ", "result": "\n        dog, cat, elephant, giraffe, horse, lion, monkey, rabbit, tiger, zebra\n```\n\n```\nDescribe a scenario where the input is a list of 10 words that belong to the category and satisfy the condition. \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are toy. \n        Input: \n        dog, cat, eleph"}
{"cat": "animals", "slot": "specialization", "value": "gray wolf", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are gray wolf. \n        Output: ", "result": "\n```\ngray,wolf,wolves,gray-wolf,gray-wolves,wolf-gray,gray-wolf-wolves,wolves-gray,gray-wolves-wolf,gray-wolf-wolves-gray\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are gray wolf\" are: gray, wolf, wolves, gray-wolf, gray-wolves, wolf-gray, gray-wolf-wolves, wolves-gray, gray-wolves-w"}
{"cat": "animals", "slot": "specialization", "value": "Angora rabbit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Angora rabbit. \n        Output: ", "result": "\n```\nrabbit, angora, fluffy, soft, wool, cuddly, bunny, fuzzy, furry, cute\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are sweet. \n        Output: \n```\napple, banana, cherry, date, fig, grape, honeydew, kiwi, mango"}
{"cat": "animals", "slot": "specialization", "value": "Angora", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Angora. \n        Output: ", "result": "\n```\ncat, rabbit, angora, wool, fluffy, white, soft, delicate, rare, expensive\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine, clementine, mandarin, pomelo"}
{"cat": "animals", "slot": "specialization", "value": "clerid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are clerid. \n        Output: ", "result": "\n        elephant,giraffe,hippopotamus,kangaroo,lion,monkey,octopus,penguin,shark,zebra\n```\n\n```\nDescribe a scenario where the input is a list of words and the output should be a single word that is the most common word in the list. \n        Desired output: a single word. \n        Input: \n        [\"apple\", \"banana\", \"cherry\", \"date\"]\n        Output: \n        cherry\n```\n\n```\nDescribe a"}
{"cat": "animals", "slot": "specialization", "value": "dickybird", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are dickybird. \n        Output: ", "result": "\n```\ncat, dickybird, parrot, cockatoo, macaw, parakeet, budgerigar, canary, finch, sparrow\n```\nExplanation: The words `cat`, `dickybird`, `parrot`, `cockatoo`, `macaw`, `parakeet`, `budgerigar`, `canary`, `finch`, and `sparrow` all belong to the category `animals` and satisfy the condition `are dickybird`.\n```"}
{"cat": "animals", "slot": "specialization", "value": "andrena", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are andrena. \n        Output: ", "result": "\n            ant, bee, fly, wasp, moth, butterfly, beetle, mosquito, gnat, ladybug\n\"\"\"\n\n# Define the category and condition\ncategory = \"animals\"\ncondition = \"are andrena\"\n\n# Split the condition into words\ncondition_words = condition.split()\n\n# Define a list to store the words\nwords = []\n\n# Iterate over the words in the condition\nfor word in condition_words:\n    # If the word is in the category, add it to the list\n    if word"}
{"cat": "animals", "slot": "specialization", "value": "spitz", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are spitz. \n        Output: ", "result": "\n```\nwolf, polar bear, husky, samoyed, akita, chow chow, eskimo dog, white fox, silver fox, arctic fox\n```\n\nExample 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n```\norange, lemon, lime, grapefruit,"}
{"cat": "animals", "slot": "specialization", "value": "lapdog", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are lapdog. \n        Output: ", "result": "\n        dog, pug, poodle, lapdog, chihuahua, bichon frise, pomeranian, yorkshire terrier, toy poodle, miniature schnauzer\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"lapdog\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n        Desired"}
{"cat": "animals", "slot": "specialization", "value": "sea moss", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are sea moss. \n        Output: ", "result": "\n        dolphin, fish, jellyfish, kangaroo, lobster, octopus, penguin, seahorse, starfish, whale\n    \"\"\"\n    category = \"animals\"\n    condition = \"are sea moss\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "animals", "slot": "specialization", "value": "blister beetle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are blister beetle. \n        Output: ", "result": "\n        dog, elephant, giraffe, hippopotamus, \n        kangaroo, koala, llama, meerkat, \n        octopus, ostrich, penguin, rhinoceros, \n        seahorse, shark, snake, spider, \n        turtle, \n```"}
{"cat": "animals", "slot": "specialization", "value": "pupa", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are pupa. \n        Output: ", "result": "\n```\ndog, butterfly, moth, caterpillar, pupa, ant, bee, wasp, spider, silkworm\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, raspberry, watermelon, pear, pl"}
{"cat": "animals", "slot": "specialization", "value": "slave-making ant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are slave-making ant. \n        Output: ", "result": "\n        bee, ant, wasp, termite, yellowjacket, hornet, sawfly, ichneumonid, braconid, tachinid\n\"\"\"\n\n# Define the function\ndef get_slave_making_ants(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Iterate over the words in the category\n    for word in category_"}
{"cat": "animals", "slot": "specialization", "value": "Arctic wolf", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Arctic wolf. \n        Output: ", "result": "\n```\nArctic,wolf,white,furry,carnivorous,Canis,lupus,arcticus,wild,endangered\n```\nExplanation:\nThe words that belong to the category \"animals\" and satisfy the condition \"are Arctic wolf\" are:\n\n* Arctic\n* wolf\n* white\n* furry\n* carnivorous\n* Canis\n* lupus\n* arcticus\n* wild\n* endangered\n\nThe words are sorted in alphabetical order."}
{"cat": "animals", "slot": "specialization", "value": "feeder", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are feeder. \n        Output: ", "result": "\n        dog, cat, bird, fish, hamster, guinea pig, turtle, snake, lizard, \n        rabbit\n\nExample 2: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n        apple, strawberry, cherry, raspberry, plum, watermelon, pineapple, \n        orange"}
{"cat": "animals", "slot": "specialization", "value": "homeotherm", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are homeotherm. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "specialization", "value": "peanut worm", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are peanut worm. \n        Output: ", "result": "\n```\ncat,worm,peanut,caterpillar,larva,grub,pupa,moth,butterfly,caterpillar\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are peanut worm\" are \"cat\", \"worm\", \"peanut\", \"caterpillar\", \"larva\", \"grub\", \"pupa\", \"moth\", \"butterfly\", and \"caterpillar\"."}
{"cat": "animals", "slot": "specialization", "value": "coach dog", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are coach dog. \n        Output: ", "result": "\n```\ncat, coach, dog\n```\n1. Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are sweet. \n        Output: \n```\napple, banana, cherry, date, fig, grape, melon, orange, peach, plum\n```\n2. Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma"}
{"cat": "animals", "slot": "specialization", "value": "twitterer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are twitterer. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "specialization", "value": "dicky-bird", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are dicky-bird. \n        Output: ", "result": "\n```\nparrot, seagull, penguin, flamingo, pelican, crane, stork, owl, eagle, hawk\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are dicky-bird\" are: parrot, seagull, penguin, flamingo, pelican, crane, stork, owl, eagle, hawk.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Des"}
{"cat": "animals", "slot": "specialization", "value": "Vulpes vulpes", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Vulpes vulpes. \n        Output: ", "result": "\n```\nfox, wolf, coyote, red fox, gray fox, arctic fox, swift fox, kit fox, red wolf, gray wolf\n```\nExplanation: The words that belong to the category `animals` and satisfy the condition `are Vulpes vulpes` are `fox, wolf, coyote, red fox, gray fox, arctic fox, swift fox, kit fox, red wolf, gray wolf`."}
{"cat": "animals", "slot": "specialization", "value": "thoroughbred", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are thoroughbred. \n        Output: ", "result": "\n        dog, cat, horse, zebra, giraffe, lion, tiger, elephant, rhinoceros, cheetah\n\"\"\"\n\n# Define the function\ndef get_thoroughbred_animals(category, condition):\n    # Create an empty list to store the words\n    words = []\n    \n    # Use a for loop to iterate through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if word.satisfies(condition):"}
{"cat": "animals", "slot": "specialization", "value": "Canis lupus tundrarum", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Canis lupus tundrarum. \n        Output: ", "result": "\n```\nwolf, arctic wolf, white wolf, tundra wolf, Canis lupus, Canis lupus tundrarum, arctic wolf, white wolf, tundra wolf, Canis lupus, Canis lupus tundrarum, arctic wolf, white wolf, tundra wolf, Canis lupus, Canis lupus tundrarum, arctic wolf, white wolf, tundra wolf, Canis lupus, Canis lupus tundrar"}
{"cat": "animals", "slot": "specialization", "value": "poriferan", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are poriferan. \n        Output: ", "result": "\n        dog, cat, fish, shrimp, jellyfish, coral, sponge, sea anemone, cnidarian, poriferan\n\nExample 2: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n        lemon, lime, orange, grapefruit, tangerine, mandarin, clementine, pom"}
{"cat": "animals", "slot": "specialization", "value": "web spinner", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are web spinner. \n        Output: ", "result": "\n        dog, cat, spider, scorpion, tarantula, ant, bee, wasp, fly, mosquito \n    \"\"\"\n    category = \"animals\"\n    condition = \"are web spinner\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "animals", "slot": "specialization", "value": "Nomia melanderi", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Nomia melanderi. \n        Output: ", "result": "\n        camel, giraffe, kangaroo, koala, meerkat, numbat, possum, wombat, zebra, \n        llama, alpaca.\n    \"\"\"\n    category = \"animals\"\n    condition = \"are Nomia melanderi\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"animals\", \"are Nomia melanderi\"))\n```\nOutput:\ncamel, giraffe, kangar"}
{"cat": "animals", "slot": "specialization", "value": "defoliator", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are defoliator. \n        Output: ", "result": " elephant, caterpillar, worm, butterfly, moth, \n        beetle, grasshopper, aphid, scale, mealybug. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        condition = Condition.objects.get(name='are defoliator')\n        words = []\n        for word in Word.objects.all():\n            if word.category == category and word.condition == condition:\n                words.append(word.word_text)\n        return words\n\n    def"}
{"cat": "animals", "slot": "specialization", "value": "Apis mellifera", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Apis mellifera. \n        Output: ", "result": "\n```\nbee, honey, hive, worker, queen, drone, pollen, nectar, sting, honeycomb\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n```\norange, lemon, lime, grapefruit, mandarin, tangerine, clementine, pomelo"}
{"cat": "animals", "slot": "specialization", "value": "quarry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are quarry. \n        Output: ", "result": "\n        dog, \n        cat, \n        sheep, \n        goat, \n        cow, \n        pig, \n        chicken, \n        horse, \n        elephant, \n        giraffe\n    \"\"\"\n    words = []\n    for word in animal_words:\n        if \"quarry\" in word:\n            words.append(word)\n    return words\n\ndef get_anagrams(word):\n    anagrams = []\n    for char in word:\n        if len(word) >"}
{"cat": "animals", "slot": "specialization", "value": "copepod", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are copepod. \n        Output: ", "result": "\n```\ncopepod, crustacean, aquatic, zooplankton, copepodites, copepodid, nauplius, water, plankton\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: mammals. \n        Condition: are marsupials. \n        Output: \n```\nmarsupial, placenta, pouch, lactation, young"}
{"cat": "animals", "slot": "specialization", "value": "pest", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are pest. \n        Output: ", "result": "\n```\ncat, mouse, rat, cockroach, ant, termite, fly, spider, mosquito, bee\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are pest\" are: cat, mouse, rat, cockroach, ant, termite, fly, spider, mosquito, bee.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category:"}
{"cat": "animals", "slot": "specialization", "value": "Canis lupus", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Canis lupus. \n        Output: ", "result": "\n```\nwolf,Canis lupus,gray wolf,timber wolf,arctic wolf,gray wolf,Canis lupus,gray wolf,timber wolf,arctic wolf,gray wolf,Canis lupus,gray wolf,timber wolf,arctic wolf,gray wolf,Canis lupus,gray wolf,timber wolf,arctic wolf,gray wolf,Canis lupus,gray wolf,timber wolf,arctic wolf,gray wolf,Canis"}
{"cat": "animals", "slot": "specialization", "value": "thysanopter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are thysanopter. \n        Output: ", "result": "1. Thysanoptera, 2. Thrips, 3. Thysanoptera, 4. Thrips, 5. Thysanoptera, 6. Thrips, 7. Thysanoptera, 8. Thrips, 9. Thysanoptera, 10. Thrips. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        condition = Condition.objects.get(name='are thysanopter')\n        words = Word.objects.filter(category=category, condition"}
{"cat": "animals", "slot": "specialization", "value": "lapin", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are lapin. \n        Output: ", "result": "\n```\nrabbit, bunny, hare, leveret, cottontail, jackrabbit, snowshoe hare, pika, porcupine, beaver\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\nlemon, lime, orange, grapefruit, tangerine, clementine"}
{"cat": "animals", "slot": "specialization", "value": "pharaoh ant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are pharaoh ant. \n        Output: ", "result": "\n```\nant, aphid, colony, infestation, mound, pharaoh, queen, worker\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are juicy. \n        Output: \n```\napple, banana, cherry, grape, juice, kiwi, melon, orange, pear, watermelon"}
{"cat": "animals", "slot": "specialization", "value": "corgi", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are corgi. \n        Output: ", "result": "\n```\ncorgi,pembroke,corgi,dachshund,corgi,corgi,corgi,corgi,corgi,corgi\n```\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are apple. \n        Output: \n```\napple,banana,orange,pear,apple,apple,apple,apple"}
{"cat": "animals", "slot": "specialization", "value": "young", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are young. \n        Output: ", "result": " puppy, kitten, calf, foal, chick, duckling, gosling, cub, fawn, piglet. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, is_young=True)\n        return [word.name for word in words]\n\n    def describe_category(self, category):\n        \"\"\"\n        Provide a description of the given category. \n        Desired output: a string describing the category. \n        Category:"}
{"cat": "animals", "slot": "specialization", "value": "borer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are borer. \n        Output: ", "result": "\n        dog, cat, elephant, giraffe, hippopotamus, kangaroo, lion, monkey, rhinoceros, zebra\n    \"\"\"\n    category = \"animals\"\n    condition = \"are borer\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "animals", "slot": "specialization", "value": "male", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are male. \n        Output: ", "result": "\n        dog, cat, horse, elephant, lion, tiger, giraffe, zebra, rhinoceros, hippopotamus\n    \"\"\"\n    animal_words = [\"dog\", \"cat\", \"horse\", \"elephant\", \"lion\", \"tiger\", \"giraffe\", \"zebra\", \"rhinoceros\", \"hippopotamus\"]\n    male_animals = [\"dog\", \"cat\", \"horse\", \"elephant\", \"lion\", \"tiger\", \"giraffe\","}
{"cat": "animals", "slot": "specialization", "value": "soft-shell crab", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are soft-shell crab. \n        Output: ", "result": "\n        soft-shell,crabby,crabber,crabcake,crabhouse,crabmeat,crabwalk,crabwise,crabwise,crabwise. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        condition = Condition.objects.get(name='are soft-shell crab')\n        words = Word.objects.filter(category=category, condition=condition)\n        return ', '.join(words.values_list('name', flat=True))\n\n    def test_get_"}
{"cat": "animals", "slot": "specialization", "value": "sea mat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are sea mat. \n        Output: ", "result": "\n        fish, shark, whale, dolphin, octopus, jellyfish, crab, lobster, oyster, clam\n\"\"\"\n\n# Define the category and condition\ncategory = \"animals\"\ncondition = \"are sea mat\"\n\n# Define a list to store the words that satisfy the condition\nwords = []\n\n# Use a loop to find all the words in the vocabulary that satisfy the condition\nfor word in vocabulary:\n    # Check if the word is in the category\n    if word.startswith(category"}
{"cat": "animals", "slot": "specialization", "value": "Formica rufa", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Formica rufa. \n        Output: ", "result": "\n```\nant, colony, Formica, rufa, queen, worker, nest, forage, defense, territory\n```\n\n### Example 2:\n```python\nGenerate a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are sweet. \n        Output: \n```\napple, banana, cherry, date, fig, grape, mango, orange, pear, strawberry\n```\n"}
{"cat": "animals", "slot": "specialization", "value": "neuropteran", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are neuropteran. \n        Output: ", "result": "\n            1. dragonfly\n            2. damselfly\n            3. mayfly\n            4. stonefly\n            5. caddisfly\n            6. leech\n            7. mantis shrimp\n            8. squid\n            9. octopus\n            10. jellyfish\n        \"\"\"\n        category = \"animals\"\n        condition = \"are neuropteran\"\n        words = [\n            \"dragonfly\",\n            \"damselfly\",\n            \"mayfly\",\n            \"stonefly\",\n            \"caddisf"}
{"cat": "animals", "slot": "specialization", "value": "carpenter bee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are carpenter bee. \n        Output: ", "result": "\n            elephant, giraffe, hippopotamus, \n            kangaroo, koala, llama, \n            meerkat, ostrich, penguin, \n            rhinoceros, sloth, \n```"}
{"cat": "animals", "slot": "specialization", "value": "nymphalid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are nymphalid. \n        Output: ", "result": "\n```\nmonarch,peacock,kiwi,lemon shark,golden lion tamarin,giant panda,red-crowned crane,giant panda,red-crowned crane,giant panda,red-crowned crane,giant panda,red-crowned crane,giant panda,red-crowned crane,giant panda,red-crowned crane,giant panda,red-crowned crane,giant panda,red-crowned c"}
{"cat": "animals", "slot": "specialization", "value": "poikilotherm", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are poikilotherm. \n        Output: ", "result": "\n        dog, cat, fish, frog, bird, snake, lizard, turtle, crocodile, alligator\n```\n\n```\nDescribe a category and provide a list of 10 words that belong to the category and satisfy a condition.\n\nProvide a list of 10 words that belong to the category and satisfy the condition.\n\nDescribe a category and provide a list of 10 words that belong to the category and satisfy the condition.\n\nProvide a list of 10 words that belong to the category and satisfy the condition."}
{"cat": "animals", "slot": "specialization", "value": "carpet beetle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are carpet beetle. \n        Output: ", "result": "\n```\nbeetle, larva, webbing, carpet, furniture, fabric, silk, wool, infestation, damage\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are carpet beetle\" are: beetle, larva, webbing, carpet, furniture, fabric, silk, wool, infestation, and damage.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma"}
{"cat": "animals", "slot": "specialization", "value": "prairie fox", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are prairie fox. \n        Output: ", "result": "\n        buffalo, coyote, deer, elk, fox, gray wolf, pronghorn, rattlesnake, skunk, \n        bison, coyote, deer, elk, fox, gray wolf, pronghorn, rattlesnake, skunk, \n        buffalo, coyote, deer, elk, fox, gray wolf, pronghorn, rattlesnake, skunk, \n        buffalo, coyote, deer, elk, fox, gray wolf, pr"}
{"cat": "animals", "slot": "specialization", "value": "sucking louse", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are sucking louse. \n        Output: ", "result": "\n        dog, cat, louse, flea, tick, mosquito, spider, ant, bee, wasp\n```\n\n```\nDescribe a scenario where the input is a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: a description of the scenario. \n        Category: animals. \n        Condition: are sucking louse. \n        Input: \n        dog, cat, louse, flea, tick, mosquito, spider, ant, bee, wasp\n       "}
{"cat": "animals", "slot": "specialization", "value": "thysanopterous insect", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are thysanopterous insect. \n        Output: ", "result": "\n        bee, fly, ant, wasp, mosquito, gnat, moth, butterfly, dragonfly, grasshopper\n\"\"\"\n\n# Define the category and condition\ncategory = \"animals\"\ncondition = \"are thysanopterous insect\"\n\n# Split the condition into words\ncondition_words = condition.split()\n\n# Define a list to store the words\nwords = []\n\n# Iterate over the words in the category\nfor word in category_words:\n    # Check if the word satisfies the condition\n    if all(word"}
{"cat": "animals", "slot": "specialization", "value": "beetle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are beetle. \n        Output: ", "result": "\n```\nbeetle,\nbeetle,\nbeetle,\nbeetle,\nbeetle,\nbeetle,\nbeetle,\nbeetle,\nbeetle,\nbeetle\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are apple. \n        Output: \n```\napple,\napple,\napple,\napple,"}
{"cat": "animals", "slot": "specialization", "value": "Monomorium minimum", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Monomorium minimum. \n        Output: ", "result": "\n        dog, cat, mouse, rat, hamster, gerbil, chinchilla, guinea pig, rabbit, gerbil\n\"\"\"\n\nword_list = [\"dog\", \"cat\", \"mouse\", \"rat\", \"hamster\", \"gerbil\", \"chinchilla\", \"guinea pig\", \"rabbit\", \"gerbil\"]\nfiltered_list = []\nfor word in word_list:\n    if \"Monomorium minimum\" in word:\n        filtered_list.append(word)\n\nprint(\", \".join(filtered_list"}
{"cat": "animals", "slot": "specialization", "value": "raptor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are raptor. \n        Output: ", "result": "\n        hawk, eagle, falcon, kestrel, osprey, goshawk, buzzard, vulture, kite, falconet\n    \"\"\"\n    raptor_words = [\"hawk\", \"eagle\", \"falcon\", \"kestrel\", \"osprey\", \"goshawk\", \"buzzard\", \"vulture\", \"kite\", \"falconet\"]\n    raptor_words = [word for word in raptor_words if \"raptor\" in word]\n    return raptor_words"}
{"cat": "animals", "slot": "specialization", "value": "leaf-cutting bee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are leaf-cutting bee. \n        Output: ", "result": "\n            ant, bee, butterfly, caterpillar, dragonfly, ladybug, mantis, mosquito, spider, wasp\n        \"\"\"\n        category = \"animals\"\n        condition = \"are leaf-cutting bee\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    print(get_words(\"animals\", \"are leaf-cutting bee\"))\n```\nOutput:\n```\nant, bee, butterfly, caterpillar, dragonfly"}
{"cat": "animals", "slot": "specialization", "value": "predatory animal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are predatory animal. \n        Output: ", "result": "\n            1. Lion\n            2. Tiger\n            3. Shark\n            4. Crocodile\n            5. Bear\n            6. Wolf\n            7. Cheetah\n            8. Jaguar\n            9. Leopard\n            10. Panther\n        \"\"\"\n        lion, tiger, shark, crocodile, bear, wolf, cheetah, jaguar, leopard, panther = \\\n            sorted(animal_predator.split(\",\"), key=lambda x: x.lower())\n        return \", \"."}
{"cat": "animals", "slot": "specialization", "value": "two-winged insects", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are two-winged insects. \n        Output: ", "result": "\n        bee, fly, wasp, mosquito, gnat, moth, butterfly, dragonfly, ant, grasshopper\n\"\"\"\n\nword_list = [\"bee\", \"fly\", \"wasp\", \"mosquito\", \"gnat\", \"moth\", \"butterfly\", \"dragonfly\", \"ant\", \"grasshopper\"]\ntwo_winged_insects = [\"bee\", \"fly\", \"wasp\", \"mosquito\", \"gnat\", \"moth\", \"butterfly\", \"dragonfly\","}
{"cat": "animals", "slot": "specialization", "value": "thysanuran insect", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are thysanuran insect. \n        Output: ", "result": "\n```\ngrasshopper, cricket, mantis, cockroach, stick insect, locust, grasshopper, cricket, mantis, cockroach\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are thysanuran insect\" are: grasshopper, cricket, mantis, cockroach, stick insect, locust, and grasshopper, cricket, mantis, cockroach.\n```\nProvide a list of 10 words that belong to the category and"}
{"cat": "animals", "slot": "specialization", "value": "predator", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are predator. \n        Output: ", "result": " tiger, lion, cheetah, jaguar, leopard, cougar, shark, barracuda, great white shark, hammerhead shark. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        predators = Predator.objects.filter(species__in=category.species.values_list('name', flat=True))\n        words = [word.name for word in predators]\n        return ', '.join(words)\n\n    def get_category_name(self, request, queryset"}
{"cat": "animals", "slot": "specialization", "value": "elaterid beetle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are elaterid beetle. \n        Output: ", "result": "\n        dog, elephant, giraffe, hippopotamus, \n        kangaroo, koala, lion, rhinoceros, \n        tiger, zebra\n    \"\"\"\n    category = \"animals\"\n    condition = \"are elaterid beetle\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n```\n```\nExample:\n    Input: \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n       "}
{"cat": "animals", "slot": "specialization", "value": "stomatopod crustacean", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are stomatopod crustacean. \n        Output: ", "result": "\n```\ncrab, lobster, shrimp, prawn, krill, mantis shrimp, squid, crayfish, barnacle, snail\n```\nExplanation:\n\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Desired output: comma separated list of words.\n3. Category: animals.\n4. Condition: are stomatopod crustacean.\n5. Output: crab, lobster, shrimp, prawn, krill,"}
{"cat": "animals", "slot": "specialization", "value": "Mexican hairless", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Mexican hairless. \n        Output: ", "result": "\n        dog, cat, chihuahua, xoloitzcuintle, guinea pig, \n        rabbit, iguana, \n```"}
{"cat": "animals", "slot": "specialization", "value": "coyote", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are coyote. \n        Output: ", "result": "\n```\ncoyote, wolf, jackal, dog, fox, gray wolf, timber wolf, red wolf, Mexican gray wolf, Canis latrans\n```\nExplanation:\nThe words that belong to the category \"animals\" and satisfy the condition \"are coyote\" are: coyote, wolf, jackal, dog, fox, gray wolf, timber wolf, red wolf, Mexican gray wolf, Canis latrans.\n```"}
{"cat": "animals", "slot": "specialization", "value": "sea creature", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are sea creature. \n        Output: ", "result": "\n        shark, whale, dolphin, jellyfish, octopus, squid, crab, lobster, starfish, sea urchin\n\nExample 2: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n        apple, strawberry, cherry, raspberry, watermelon, tomato, pumpkin, cran"}
{"cat": "animals", "slot": "specialization", "value": "maned wolf", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are maned wolf. \n        Output: ", "result": "\n```\nmaned,wolf\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are apple. \n        Output: \n```\napple,banana,cherry,date,elderberry,fig,grape,kiwi,mango,orange\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and"}
{"cat": "animals", "slot": "specialization", "value": "brush-footed butterfly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are brush-footed butterfly. \n        Output: ", "result": "\n        comma-separated-list \n    \"\"\"\n    category = \"animals\"\n    condition = \"are brush-footed butterfly\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"cat": "animals", "slot": "specialization", "value": "grey wolf", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are grey wolf. \n        Output: ", "result": "\n```\ngrey,wolf,wolves,gray,graying,grayish,grayscale,grayish-blue,grayish-green,grayish-purple\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are apple. \n        Output: \n```\napple,banana,cherry,date,elderberry,fig,grape,kiwi,mango,"}
{"cat": "animals", "slot": "specialization", "value": "lamellicorn beetle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are lamellicorn beetle. \n        Output: ", "result": "\n        dog, elephant, giraffe, hippopotamus, kangaroo, lion, rhinoceros, tiger, zebra, \n        Category: animals. \n        Condition: are mammals. \n        Output: \n        bat, cat, cow, deer, dog, elephant, giraffe, hippopotamus, kangaroo, lion, \n        Category: animals. \n        Condition: have more than 4 legs. \n        Output: \n        sp"}
{"cat": "animals", "slot": "specialization", "value": "Leonberg", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Leonberg. \n        Output: ", "result": "\n```\ncat, dog, lion, tiger, panther, leopard, jaguar, cheetah, cougar, lynx\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are Leonberg\" are: cat, dog, lion, tiger, panther, leopard, jaguar, cheetah, cougar, lynx.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma"}
{"cat": "animals", "slot": "specialization", "value": "marine animal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are marine animal. \n        Output: ", "result": "\n        dolphin, whale, shark, jellyfish, octopus, crab, lobster, oyster, clam, snail\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    condition = Condition.objects.get(name='are marine animal')\n    words = Word.objects.filter(category=category, condition=condition)\n    return ', '.join(words.values_list('name', flat=True))\n\n# Create some sample data\ncategory = Category.objects.create(name='animals')"}
{"cat": "animals", "slot": "specialization", "value": "lightning bug", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are lightning bug. \n        Output: ", "result": "\n```\nfirefly, glowworm, lightning bug, lantern bug, glowworm, lightning bug, firefly, glowworm, lantern bug\n```"}
{"cat": "animals", "slot": "specialization", "value": "zooplankton", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are zooplankton. \n        Output: ", "result": "\n        fish, shrimp, krill, cladocera, copepod, ostracod, planktonic, aquatic, microscopic, filter feeders. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        condition = Condition.objects.get(name='are zooplankton')\n        words = Word.objects.filter(category=category, condition=condition)\n        return [word.name for word in words]\n\n    def load_data(self):\n        self.categories = Category.objects"}
{"cat": "animals", "slot": "specialization", "value": "carabid beetle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are carabid beetle. \n        Output: ", "result": "\n```\nbeetle,\ncarabid,\ngrass,\nherbivore,\ninsect,\nmeat,\nomnivore,\npredator,\nwoody\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n```\norange,\nlemon,\nlime,\ngrapefruit"}
{"cat": "animals", "slot": "specialization", "value": "Menippe mercenaria", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Menippe mercenaria. \n        Output: ", "result": "\n        fish,crab,lobster,shrimp,squid,scallop,oyster,clam,barnacle,mussel\n\"\"\"\n\nword_list = [\"fish\", \"crab\", \"lobster\", \"shrimp\", \"squid\", \"scallop\", \"oyster\", \"clam\", \"barnacle\", \"mussel\"]\ncategory = \"animals\"\ncondition = \"are Menippe mercenaria\"\n\nfiltered_list = [word for word in word_list if word.startswith(condition)]\n"}
{"cat": "animals", "slot": "specialization", "value": "gallinacean", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are gallinacean. \n        Output: ", "result": "\n        chicken, duck, goose, turkey, pigeon, quail, guinea fowl, peafowl, emu, ostrich\n    \"\"\"\n    category = \"animals\"\n    condition = \"are gallinacean\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n```\n```\nExample:\n```\n```"}
{"cat": "animals", "slot": "specialization", "value": "orthopterous insect", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are orthopterous insect. \n        Output: ", "result": "\n```\ngrasshopper, cricket, locust, mantis, dragonfly, grasshopper, cricket, locust, mantis, dragonfly\n```"}
{"cat": "animals", "slot": "specialization", "value": "homopteran", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are homopteran. \n        Output: ", "result": "\n        beetle, cricket, grasshopper, cockroach, ant, termite,\n```"}
{"cat": "animals", "slot": "specialization", "value": "pug", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are pug. \n        Output: ", "result": "\n```\npug,\npuggle,\npugly,\npugnacious,\npugilistic,\npugilist,\npugilisticly,\npugilistically,\npugilistically,\npugilistically\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: colors. \n        Condition: are blue. \n        Output: \n```\nblue,"}
{"cat": "animals", "slot": "specialization", "value": "dipteran", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are dipteran. \n        Output: ", "result": "\n```\nfly, mosquito, gnat, fruitfly, midges, biting midge, buffalo gnat, blackfly, deerfly, horsefly\n```\n\n### Example 2:\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine,"}
{"cat": "animals", "slot": "specialization", "value": "Alopex lagopus", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Alopex lagopus. \n        Output: ", "result": "\n        fox, arctic, snow, white, red, tail, bushy, agile, hunt, leap\n    \"\"\"\n    words = []\n    for word in words:\n        if Alopex lagopus.lower() in word.lower():\n            words.append(word)\n    print(\", \".join(words))\n\n# Test the function\ntest_category(\"animals\", \"Alopex lagopus\", \"fox\")\ntest_category(\"animals\", \"Alopex lagopus\", \"arctic\")\ntest_category(\"animals\","}
{"cat": "animals", "slot": "specialization", "value": "prairie wolf", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are prairie wolf. \n        Output: ", "result": "\n```\nwolf,coyote,gray wolf,timber wolf,prairie wolf,Canis lupus,gray wolf,Canis lupus,gray wolf,Canis lupus,gray wolf,Canis lupus,gray wolf,Canis lupus,gray wolf,Canis lupus,gray wolf,Canis lupus,gray wolf,Canis lupus,gray wolf,Canis lupus,gray wolf,Canis lupus,gray wolf,Canis l"}
{"cat": "animals", "slot": "specialization", "value": "white fox", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are white fox. \n        Output: ", "result": "\n            polar bear, arctic fox, snow leopard, white tiger, white lion, white elephant, white rhinoceros, white buffalo, white camel, white giraffe\n        \"\"\"\n        category = \"animals\"\n        condition = \"are white fox\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"animals\", \"are white fox\")) # polar bear, arctic fox, snow leopard, white"}
{"cat": "animals", "slot": "specialization", "value": "pureblood", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are pureblood. \n        Output: ", "result": "\n        */\n        public List<string> GetPurebloodAnimals(string category, string condition)\n        {\n            var words = GetWords(category);\n            var purebloodWords = new List<string>();\n            foreach (var word in words)\n            {\n                if (IsPureblood(word, condition))\n                {\n                    purebloodWords.Add(word);\n                }\n            }\n            return purebloodWords;\n        }\n\n        private bool IsPureblood(string word, string condition"}
{"cat": "animals", "slot": "specialization", "value": "cirripede", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are cirripede. \n        Output: ", "result": "\n        crab\n        shrimp\n        lobster\n        barnacle\n        snail\n        clam\n        oyster\n        scallop\n        mussel\n        squid\n    \"\"\"\n    category = \"animals\"\n    condition = \"are cirripede\"\n    words = [\n        \"crab\",\n        \"shrimp\",\n        \"lobster\",\n        \"barnacle\",\n        \"snail\",\n        \"clam\",\n        \"oyster\",\n        \"scallop\",\n        \"mussel\",\n"}
{"cat": "animals", "slot": "specialization", "value": "doggie", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are doggie. \n        Output: ", "result": "\n```\ncat,dog,puppy,woof,paws,bark,tail,woe,woofy,pup\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple,banana,cherry,strawberry,orange,peach,r\n```"}
{"cat": "animals", "slot": "specialization", "value": "critter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are critter. \n        Output: ", "result": "\n        dog, cat, mouse, elephant, giraffe, lion, zebra, monkey, snake, crocodile\n    \"\"\"\n    category = \"animals\"\n    critter_words = [\n        \"dog\",\n        \"cat\",\n        \"mouse\",\n        \"elephant\",\n        \"giraffe\",\n        \"lion\",\n        \"zebra\",\n        \"monkey\",\n        \"snake\",\n        \"crocodile\"\n    ]\n    critter_words = [word for word in"}
{"cat": "animals", "slot": "specialization", "value": "molter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are molter. \n        Output: ", "result": "\n        dog, cat, mouse, elephant, giraffe, whale, butterfly, bird, spider, snake\n    \"\"\"\n    category = \"animals\"\n    condition = \"are molter\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "animals", "slot": "specialization", "value": "firefly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are firefly. \n        Output: ", "result": "\n```\nfirefly, glowworm, lightningbug, firefly1, firefly2, firefly3, firefly4, firefly5, firefly6, firefly7\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are firefly\" are \"firefly\", \"glowworm\", \"lightningbug\", \"firefly1\", \"firefly2\", \"firefly3\", \"firefly4\", \"firefly5\", \"firefly6\", \"firefly7\"."}
{"cat": "animals", "slot": "specialization", "value": "Cancer magister", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Cancer magister. \n        Output: ", "result": "\n        dog, elephant, giraffe, hippopotamus, \n        kangaroo, koala, lion, octopus, \n        penguin, rhinoceros, shark, \n        tiger, whale, zebra. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        condition = Condition.objects.get(name='Cancer magister')\n        words = Word.objects.filter(category=category, condition=condition)\n        return ', '.join(words."}
{"cat": "animals", "slot": "specialization", "value": "gallfly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are gallfly. \n        Output: ", "result": "\n```\ncat,fly,gall,fly,fly,fly,fly,fly,fly\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\nlemon,orange,grapefruit,lemon,orange,grapefruit,lemon,orange,grapefruit\n```\n\nExample:"}
{"cat": "animals", "slot": "specialization", "value": "stomatopod", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are stomatopod. \n        Output: ", "result": "\n```\ncrab, lobster, shrimp, krill, mantis shrimp, snapping shrimp, squid, cuttlefish, nautilus, octopus\n```\nExplanation:\n\n1. The category is animals.\n2. The condition is that the words belong to the category and satisfy the condition that they are stomatopod.\n3. The output is a comma-separated list of 10 words that belong to the category and satisfy the condition.\n4. The words in the output are: crab, lobster"}
{"cat": "animals", "slot": "specialization", "value": "malacostracan crustacean", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are malacostracan crustacean. \n        Output: ", "result": "\n```\ncrab, shrimp, lobster, prawn, crayfish, barnacle, krill, mantis shrimp, squat lobster, slipper lobster\n```\nExplanation:\n\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Desired output: comma separated list of words.\n3. Category: animals.\n4. Condition: are malacostracan crustacean.\n5. Output: crab, shrimp, lobster,"}
{"cat": "animals", "slot": "specialization", "value": "Welsh corgi", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Welsh corgi. \n        Output: ", "result": "\n```\ncorgi, pembroke, cardigan, welsh, dog, breed, heritage, royal, family, pet\n```\nExplanation:\nThe words that belong to the category \"animals\" and satisfy the condition \"are Welsh corgi\" are: corgi, pembroke, cardigan, welsh, dog, breed, heritage, royal, family, pet.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. "}
{"cat": "animals", "slot": "specialization", "value": "worm", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are worm. \n        Output: ", "result": "\n```\ndog, snake, frog, worm, spider, ant, bee, butterfly, caterpillar, mosquito\n```\n\n### Example 2:\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, watermelon, raspberry, plum, orange,"}
{"cat": "animals", "slot": "specialization", "value": "Newfoundland dog", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Newfoundland dog. \n        Output: ", "result": "\n```\nNewfoundland, Labrador Retriever, St. Bernard, Great Dane, Irish Wolfhound, Alaskan Malamute, Siberian Husky, Samoyed, Greenland Dog, Pyrenean Mountain Dog\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n```\nOrange, Lemon, Lime"}
{"cat": "animals", "slot": "specialization", "value": "sulfur butterfly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are sulfur butterfly. \n        Output: ", "result": "\n```\nsulfur, butterfly, sulfur-butterfly, sulfur-winged-butterfly, sulfur-yellow-butterfly, sulfur-veined-butterfly, sulfur-spotted-butterfly, sulfur-striped-butterfly, sulfur-spotted-and-striped-butterfly, sulfur-banded-butterfly\n```\nExplanation:\n\n1. The category is \"animals\"\n2. The condition is \"are sulfur butterfly\"\n3. The words"}
{"cat": "animals", "slot": "specialization", "value": "trichopterous insect", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are trichopterous insect. \n        Output: ", "result": "\n        bee, ant, fly, mosquito, gnat, butterfly, moth, dragonfly, grasshopper, cricket\n\"\"\"\n\nprint(\"Provide a list of 10 words that belong to the category and satisfy the condition. \")\ncategory = input(\"Enter category: \")\ncondition = input(\"Enter condition: \")\nwords = input(\"Enter 10 words: \").split()\n\nif category == \"animals\" and condition == \"are trichopterous insect\":\n    print(\", \".join(words))\nelse:\n    print"}
{"cat": "animals", "slot": "specialization", "value": "work animal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are work animal. \n        Output: ", "result": " dog, horse, cow, sheep, pig, chicken, goat, elephant, giraffe, zebra. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        work_animals = Animal.objects.filter(species__in=category.species.values_list('name', flat=True), is_work=True)\n        words = [animal.name for animal in work_animals]\n        return words\n\n    def get_category_name(self, request, queryset):\n        \"\"\"\n       "}
{"cat": "animals", "slot": "specialization", "value": "piciform bird", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are piciform bird. \n        Output: ", "result": "\n        peacock, pheasant, quail, partridge, jungle fowl, guinea fowl, turkey, grouse, chicken, pigeon.\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    condition = Condition.objects.get(name='are piciform bird')\n    words = Word.objects.filter(category=category, condition=condition)\n    return [word.name for word in words]\n\n# Test the function\nprint(get_words_by_category_and_condition"}
{"cat": "animals", "slot": "specialization", "value": "sulphur butterfly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are sulphur butterfly. \n        Output: ", "result": "\n```\nmonarch, sulphur, butterfly, monarch, sulphur, butterfly, monarch, sulphur, butterfly, monarch, sulphur, butterfly, monarch, sulphur, butterfly, monarch, sulphur, butterfly, monarch, sulphur, butterfly, monarch, sulphur, butterfly, monarch, sulphur, butterfly, monarch, sulphur, butterfly, monarch, sulphur, butterfly, monarch, sulphur, butterfly, monarch, sulph"}
{"cat": "animals", "slot": "specialization", "value": "Belgian hare", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Belgian hare. \n        Output: ", "result": "\n```\nrabbit, bunny, hare, leveret, coney, cottontail, jackrabbit, snowshoe hare, brown hare, European rabbit\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n```\norange, lemon, lime, grapefruit,"}
{"cat": "animals", "slot": "specialization", "value": "darter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are darter. \n        Output: ", "result": "\n        dog, cat, bird, fish, snake, lizard, turtle, frog, dolphin, shark\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    if category == \"animals\":\n        for word in animal_words:\n            if condition.lower() in word.lower():\n                words.append(word)\n"}
{"cat": "animals", "slot": "specialization", "value": "peeper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are peeper. \n        Output: ", "result": "\n        dog, cat, bird, fish, frog, snake, chicken, lion, tiger, elephant\n    \"\"\"\n    category = \"animals\"\n    peeper_words = [\"bird\", \"fish\", \"frog\", \"snake\", \"chicken\", \"lion\", \"tiger\", \"elephant\"]\n    peeper_words = [word for word in peeper_words if \"peeper\" in word]\n    peeper_words = [word for word in peeper_words if \"peeper\" not in word]\n   "}
{"cat": "animals", "slot": "specialization", "value": "wildcat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are wildcat. \n        Output: ", "result": " tiger, leopard, cheetah, jaguar, cougar, lion, leopard, jaguar, cheetah, cougar. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, is_wildcat=True)\n        return words.distinct().values_list('name', flat=True).filter(name__contains='wildcat').order_by('name')[:10]\n\n    def get_wildcat_anim"}
{"cat": "animals", "slot": "specialization", "value": "pharaoh's ant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are pharaoh's ant. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "specialization", "value": "night bird", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are night bird. \n        Output: ", "result": "\n            owl, \n            bat, \n            nightingale, \n            whip-poor-will, \n            nighthawk, \n            goose, \n            swan, \n            crane, \n            stork, \n            flamingo.\n    \"\"\"\n    words = []\n    for word in words:\n        if \"night\" in word and \"bird\" in word:\n            words.append(word)\n    return words\n\ndef get_anagrams(words):\n    \"\"\"\n    Given a list of"}
{"cat": "animals", "slot": "specialization", "value": "metazoan", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are metazoan. \n        Output: ", "result": " cat, dog, elephant, giraffe, horse, kangaroo, lion, monkey, snake, zebra.\n        \"\"\"\n        category = 'animals'\n        condition = 'are metazoan'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def example_2():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n       "}
{"cat": "animals", "slot": "specialization", "value": "homotherm", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are homotherm. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "specialization", "value": "archaeornis", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are archaeornis. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "specialization", "value": "Vulpes macrotis", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Vulpes macrotis. \n        Output: ", "result": "\n```\nfox, coyote, red fox, gray fox, arctic fox, kit fox, swift fox, red wolf, gray wolf, golden jackal\n```\nExplanation: The words that belong to the category `animals` and satisfy the condition `are Vulpes macrotis` are `fox, coyote, red fox, gray fox, arctic fox, kit fox, swift fox, red wolf, gray wolf, golden jackal`."}
{"cat": "animals", "slot": "specialization", "value": "branchiopod crustacean", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are branchiopod crustacean. \n        Output: ", "result": "\n```\ncrayfish, daphnia, cladocera, water flea, crustacean, aquatic, branchiopod, planktonic, freshwater, zooplankton\n```\nExplanation:\n\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Desired output: comma separated list of words.\n3. Category: animals.\n4. Condition: are branchiopod crustacean.\n5. Output: crayfish, daphnia, cladoc"}
{"cat": "animals", "slot": "specialization", "value": "potter bee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are potter bee. \n        Output: ", "result": "\n```\nbee, drone, hive, pollen, queen, worker\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are sweet. \n        Output: \n```\napple, banana, cherry, date, fig, grape, melon, orange, pear, strawberry\n```\n\nExample:\n```\nProvide a list of "}
{"cat": "animals", "slot": "specialization", "value": "rove beetle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are rove beetle. \n        Output: ", "result": "\n        dog, elephant, giraffe, hippopotamus, \n        kangaroo, koala, lion, monkey, \n        octopus, penguin, rhinoceros, \n        shark, snake, spider, tiger, \n        whale, wolf, zebra. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        queryset = Beetle.objects.filter(category=category)\n        words = [word.name for word in queryset"}
{"cat": "animals", "slot": "specialization", "value": "carpet bug", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are carpet bug. \n        Output: ", "result": "\n        dog, cat, mouse, elephant, giraffe, lion, zebra, snake, spider, scorpion\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    if category == \"animals\" and condition == \"are carpet bug\":\n        words.append(\"dog\")\n        words.append(\"cat\")\n       "}
{"cat": "animals", "slot": "specialization", "value": "proturan", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are proturan. \n        Output: ", "result": "\n        dog, elephant, giraffe, horse, kangaroo, lion, octopus, penguin, shark, zebra\n    \"\"\"\n    category = \"animals\"\n    proturan_words = [\"dog\", \"elephant\", \"giraffe\", \"horse\", \"kangaroo\", \"lion\", \"octopus\", \"penguin\", \"shark\", \"zebra\"]\n\n    for word in proturan_words:\n        if \"proturan\" in word:\n            print(word"}
{"cat": "animals", "slot": "specialization", "value": "wood rabbit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are wood rabbit. \n        Output: ", "result": "\n```\nrabbit, bunny, wood, carrot, burrow, cottontail, whisker, fluffy, pink, flopsy\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are wood rabbit\" are \"rabbit, bunny, wood, carrot, burrow, cottontail, whisker, fluffy, pink, flopsy\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. "}
{"cat": "animals", "slot": "specialization", "value": "social insect", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are social insect. \n        Output: ", "result": "\n```\nant, bee, wasp, termite, honeybee, bumblebee, yellowjacket, hornet, paper wasp, \n```\n1. Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red in color. \n        Output: \n```\napple, strawberry, cherry, raspberry, watermelon, pear, plum, red delicious"}
{"cat": "animals", "slot": "specialization", "value": "cirriped", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are cirriped. \n        Output: ", "result": "\n```\ncrab, shrimp, lobster, barnacle, snail, clam, oyster, scallop, krill, hermit crab\n```\nExplanation:\n\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Desired output: comma separated list of words.\n3. Category: animals.\n4. Condition: are cirriped.\n5. Output: crab, shrimp, lobster, barnacle, snail, clam, oyster"}
{"cat": "animals", "slot": "specialization", "value": "Archaeopteryx lithographica", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Archaeopteryx lithographica. \n        Output: ", "result": "\n        * Archaeopteryx\n        * Lithographica\n        * Archaeopteryx lithographica\n        * Archaeopteryx, Lithographica\n        * Archaeopteryx lithographica, Archaeopteryx\n        * Archaeopteryx, Lithographica, Archaeopteryx\n        * Archaeopteryx lithographica, Archaeopteryx, Lithographica\n        * Archaeopteryx, Lithographica, Archaeopteryx, Lithographica\n        * Archaeopteryx lith"}
{"cat": "animals", "slot": "specialization", "value": "ringlet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are ringlet. \n        Output: ", "result": "\n        dog, cat, elephant, giraffe, kangaroo, lion, monkey, octopus, penguin, seahorse\n    \"\"\"\n    category = \"animals\"\n    condition = \"are ringlet\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "animals", "slot": "specialization", "value": "pierid butterfly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are pierid butterfly. \n        Output: ", "result": "\n```\npeacock, swallowtail, painted lady, monarch, \n```\n```"}
{"cat": "animals", "slot": "specialization", "value": "hemipteran", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are hemipteran. \n        Output: ", "result": "\n        beetle\n        cockroach\n        grasshopper\n        cricket\n        ant\n        termite\n        mantis\n        cricket\n        grasshopper\n        cockroach\n    \"\"\"\n    category = \"animals\"\n    condition = \"are hemipteran\"\n    words = [\n        \"beetle\",\n        \"cockroach\",\n        \"grasshopper\",\n        \"cricket\",\n        \"ant\",\n        \"termite\",\n        \"mantis\",\n        \"cricket\",\n        \""}
{"cat": "animals", "slot": "specialization", "value": "deathwatch beetle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are deathwatch beetle. \n        Output: ", "result": "\n        dog, elephant, giraffe, hippopotamus, kangaroo, lion, octopus, penguin, rhinoceros, shark\n    \"\"\"\n    category = \"animals\"\n    condition = \"are deathwatch beetle\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "animals", "slot": "specialization", "value": "caprimulgiform bird", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are caprimulgiform bird. \n        Output: ", "result": "\n            1. Nightjar\n            2. Go-away-bird\n            3. Nighthawk\n            4. Chuck-will's-widow\n            5. Oilbird\n            6. Potoo\n            7. Potoo\n            8. Potoo\n            9. Potoo\n            10. Potoo\n        \"\"\"\n        category = \"animals\"\n        condition = \"are caprimulgiform bird\"\n        words = [\n            \"Nightjar\",\n            \"Go-away-bird\",\n            \"Nighthawk"}
{"cat": "animals", "slot": "specialization", "value": "flea", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are flea. \n        Output: ", "result": "\n```\ncat, flea, fleas, flea, fleas, flea, fleas, flea, fleas\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: colors. \n        Condition: are blue. \n        Output: \n```\nblue, blue, blue, blue, blue, blue, blue, blue, blue, blue\n```\n\n### Example 3:"}
{"cat": "animals", "slot": "specialization", "value": "varmint", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are varmint. \n        Output: ", "result": "\n        */\n        public List<string> GetWords(string category, string condition)\n        {\n            List<string> words = new List<string>();\n\n            using (SqlConnection connection = new SqlConnection(connectionString))\n            {\n                connection.Open();\n\n                using (SqlCommand command = new SqlCommand(\"GetWords\", connection))\n                {\n                    command.CommandType = CommandType.StoredProcedure;\n                    command.Parameters.AddWithValue(\"@Category\", category);\n                    command.Parameters.AddWithValue(\"@Condition\", condition"}
{"cat": "animals", "slot": "specialization", "value": "cock", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are cock. \n        Output: ", "result": "\n        dog, rooster, hen, cockatoo, cocker spaniel, cockerel, cocker, cocker spaniel, cockerel, cocker spaniel. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category)\n        filtered_words = []\n        for word in words:\n            if word.word.endswith('cock'):\n                filtered_words.append(word)\n        filtered_words = sorted(filtered_words, key=lambda x: x"}
{"cat": "animals", "slot": "specialization", "value": "holometabola", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are holometabola. \n        Output: ", "result": "\n        beetle, butterfly, moth, dragonfly, damselfly, mayfly, grasshopper, cricket, cockroach, ant. \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() == condition.lower():\n            words.append(word)\n    print(\", \".join(words))\n\n# Example usage\ntest_case1()\ntest_case2()\n"}
{"cat": "animals", "slot": "specialization", "value": "sipunculid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are sipunculid. \n        Output: ", "result": "\n        elephant, giraffe, hippopotamus, jellyfish, kangaroo, lobster, octopus, squid, starfish, whale \n    \"\"\"\n    animal_words = [\n        \"elephant\",\n        \"giraffe\",\n        \"hippopotamus\",\n        \"kangaroo\",\n        \"lobster\",\n        \"octopus\",\n        \"squid\",\n        \"starfish\",\n        \"whale\"\n    ]\n\n    sipunculid_words ="}
{"cat": "animals", "slot": "specialization", "value": "meloid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are meloid. \n        Output: ", "result": "\n        dog, ant, bee, wasp, termite, cockroach, beetle, grasshopper, locust, caterpillar.\n    \"\"\"\n    category = 'animals'\n    condition = 'are meloid'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n        Category:"}
{"cat": "animals", "slot": "specialization", "value": "timber wolf", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are timber wolf. \n        Output: ", "result": "\n```\nwolf,alpha,pack,howl,protect,hunt,family,pack,mate,defend\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are apple. \n        Output: \n```\napple,red,juicy,crunchy,sweet,healthy,tasty,popular,ancient, versatile\n```\n"}
{"cat": "animals", "slot": "specialization", "value": "pleurodont", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are pleurodont. \n        Output: ", "result": "\n        dog, cat, lion, tiger, panther, leopard, jaguar, cheetah, cougar, wolf\n    \"\"\"\n    category = 'animals'\n    condition = 'are pleurodont'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Example usage\nprint(get_words('animals', 'are mammals'))\n# Output: \n# dog, cat, lion, tiger, panther, leopard, jaguar, cheetah"}
{"cat": "animals", "slot": "specialization", "value": "Xestobium rufovillosum", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Xestobium rufovillosum. \n        Output: ", "result": "\n        beetle, weevil, Xestobium, rufovillosum, insect, pest, wood, damage, \n        larvae, furniture, infestation. \n        \"\"\"\n        category = 'animals'\n        condition = 'are Xestobium rufovillosum'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('animals', 'are Xestobium rufovillosum'))\n\nif __name__ == '"}
{"cat": "animals", "slot": "specialization", "value": "nester", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are nester. \n        Output: ", "result": "\n            dog, hen, nest, roost, colony, hive, swarm, flock, herd, colony\n        \"\"\"\n        category = \"animals\"\n        condition = \"are nester\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n"}
{"cat": "animals", "slot": "specialization", "value": "orthopteron", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are orthopteron. \n        Output: ", "result": "\n```\ngrasshopper, cricket, katydid, locust, mantis, dragonfly, grasshopper, cricket, katydid, locust\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are orthopteron\" are \"grasshopper, cricket, katydid, locust, mantis, dragonfly\".\n```"}
{"cat": "animals", "slot": "specialization", "value": "Reynard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Reynard. \n        Output: ", "result": "\n            1. fox\n            2. wolf\n            3. coyote\n            4. jackal\n            5. dingo\n            6. red fox\n            7. gray wolf\n            8. golden jackal\n            9. Ethiopian wolf\n            10. red fox\n        \"\"\"\n        words = []\n        for word in animal_words:\n            if \"Reynard\" in word:\n                words.append(word)\n        return words\n\ndef get_anagrams(word):\n    \"\"\"\n    Provide a"}
{"cat": "animals", "slot": "specialization", "value": "birch leaf miner", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are birch leaf miner. \n        Output: ", "result": "\n        beech, \n        birch, \n        fir, \n        hemlock, \n        larch, \n        pine, \n        spruce, \n        tamarack, \n        yew.\n    \"\"\"\n    category = \"animals\"\n    condition = \"are birch leaf miner\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the"}
{"cat": "animals", "slot": "specialization", "value": "mining bee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mining bee. \n        Output: ", "result": "\n            honeybee, bumblebee, mining bee, blue orchard bee, cellophane bee, \n            carpenter bee, leafcutter bee, mason bee, blue orchard bee, \n            cellophane bee, blue orchard bee, mining bee.\n        \"\"\"\n        category = Category.objects.get(name='animals')\n        condition = Condition.objects.get(name='are mining bee')\n        words = Word.objects.filter(category=category,"}
{"cat": "animals", "slot": "specialization", "value": "stunt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are stunt. \n        Output: ", "result": "\n```\ncat, jump, fly, dive, leap, flip, somersault, twist, tumble, backflip\n```\n\nExplanation:\n```\nThe words that belong to the category \"animals\" and satisfy the condition \"are stunt\" are: cat, jump, fly, dive, leap, flip, somersault, twist, tumble, backflip.\n```"}
{"cat": "animals", "slot": "specialization", "value": "white wolf", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are white wolf. \n        Output: ", "result": "\n        polar bear, snow leopard, white tiger, white lion, white wolf, white elephant, white rhinoceros, white buffalo, white giraffe, white hippopotamus. \n        \"\"\"\n        category = \"animals\"\n        condition = \"are white wolf\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"animals\", \"are big cat\"))\nprint(get_words(\"animals\", \""}
{"cat": "animals", "slot": "specialization", "value": "hard-shell crab", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are hard-shell crab. \n        Output: ", "result": "\n        crab, claw, shell, crustacean, blue crab, Chesapeake Bay, Maryland, seafood, delicacy, May. \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in text:\n        if word.lower() == category.lower() and word.lower() == condition.lower():\n            words.append(word)\n    print(\", \".join(words))\n```"}
{"cat": "animals", "slot": "specialization", "value": "hexapod", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are hexapod. \n        Output: ", "result": "\n        dog, cat, elephant, giraffe, spider, scorpion, ant, bee, butterfly, grasshopper\n\nExample 2: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n        apple, strawberry, cherry, raspberry, watermelon, tomato, pear, plum, orange,"}
{"cat": "animals", "slot": "specialization", "value": "bunny", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are bunny. \n        Output: ", "result": "\n```\nbunny,rabbit,hare,cottontail,warren,burrow,leap,jump,nibble,hop\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are bunny\" are \"bunny\", \"rabbit\", \"hare\", \"cottontail\", \"warren\", \"burrow\", \"leap\", \"jump\", \"nibble\", and \"hop\".\n```\nProvide a list of 10 words that belong to"}
{"cat": "animals", "slot": "specialization", "value": "omnivore", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are omnivore. \n        Output: ", "result": "\n        dog, cat, cow, pig, chicken, sheep, goat, horse, elephant, giraffe\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    words = Word.objects.filter(category=category, is_omnivore=True)\n    return [word.name for word in words]\n\ndef get_omnivore_animals_with_image(request):\n    \"\"\"\n    Get a list of 10 omnivore animals along with their images.\n    \"\"\"\n    category"}
{"cat": "animals", "slot": "specialization", "value": "moulter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are moulter. \n        Output: ", "result": "\n        dog, cat, cow, pig, sheep, goat, horse, chicken, duck, turkey\n    \"\"\"\n    category = \"animals\"\n    condition = \"are moulter\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"animals\", \"are moulter\"))  # Output: dog, cat, cow, pig, sheep, goat, horse, chicken, duck, turkey\nprint(get_words(\"animals\", \""}
{"cat": "animals", "slot": "specialization", "value": "longicorn", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are longicorn. \n        Output: ", "result": "\n```\nelephant, giraffe, rhino, horse, zebra, buffalo, deer, antelope, elk, moose\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine, clementine, mandarin, pomelo"}
{"cat": "animals", "slot": "specialization", "value": "branchiopod", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are branchiopod. \n        Output: ", "result": "\n        fish, shrimp, lobster, crayfish, barnacle, krill, clam, oyster, snail, scallop.\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    branchiopod_animal = Animal.objects.filter(category=category).filter(is_branchiopod=True)\n    branchiopod_words = [animal.name for animal in branchiopod_animal]\n    if condition:\n        branchiopod_words = [word for word in branchiopod_"}
{"cat": "animals", "slot": "specialization", "value": "weevil", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are weevil. \n        Output: ", "result": "\n        dog, cat, mouse, elephant, giraffe, lion, zebra, ant, bee, butterfly\n    \"\"\"\n    category = \"animals\"\n    condition = \"are weevil\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "animals", "slot": "specialization", "value": "leaf-cutter bee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are leaf-cutter bee. \n        Output: ", "result": "\n            ant, bee, butterfly, caterpillar, dragonfly, ladybug, mantis, mosquito, praying mantis, spider\n        \"\"\"\n        category = \"animals\"\n        condition = \"are leaf-cutter bee\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    print(get_words(\"animals\", \"are leaf-cutter bee\"))\n```\n\u8f93\u51fa\uff1a\n```\nant, bee, butterfly, caterpillar,"}
{"cat": "animals", "slot": "specialization", "value": "coelenterate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are coelenterate. \n        Output: ", "result": "\n```\ncat, jellyfish, coral, sea anemone, sea cucumber, sea urchin, starfish, sea sponge, sea turtle, seahorse\n```\n\n### Example 2:\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n```\norange, lemon, lime, grapef"}
{"cat": "animals", "slot": "specialization", "value": "bumblebee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are bumblebee. \n        Output: ", "result": "\n```\nbee,bumble,bumblebee,bumblebees,bumbling,bumblebee,bumblebees,bumblebee,bumblebees,bumblebee\n```"}
{"cat": "animals", "slot": "specialization", "value": "slave ant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are slave ant. \n        Output: ", "result": "\n```\nant\n```"}
{"cat": "animals", "slot": "specialization", "value": "Fenusa pusilla", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Fenusa pusilla. \n        Output: ", "result": "\n        mouse, shrew, lemming, vole, hamster, gerbil, chipmunk, ground squirrel, marmot, prairie dog \n    \"\"\"\n    fenusa_pusilla_words = []\n    for word in word_list:\n        if \"Fenusa pusilla\" in word:\n            fenusa_pusilla_words.append(word)\n    comma_separated_fenusa_pusilla_words = \", \".join(fenusa_pusilla_words)\n    print(comma_separated_fenusa_pusilla"}
{"cat": "animals", "slot": "specialization", "value": "offspring", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are offspring. \n        Output: ", "result": "\n          dog, \n          cat, \n          horse, \n          cow, \n          pig, \n          sheep, \n          goat, \n          chicken, \n          turkey, \n          duck\n    \"\"\"\n    words = []\n    for word in animal_words:\n        if \"offspring\" in word:\n            words.append(word)\n    return words\n\ndef get_anagrams(word):\n    anagrams = []\n    for char in word:\n        if char in word:\n            anagr"}
{"cat": "animals", "slot": "specialization", "value": "carpenter ant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are carpenter ant. \n        Output: ", "result": "\n```\nant, carpenter, colony, damage, wood, home, infestation, nest, pest, structural\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are carpenter ant\" are: ant, carpenter, colony, damage, wood, home, infestation, nest, pest, and structural.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category"}
{"cat": "animals", "slot": "specialization", "value": "domestic cat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are domestic cat. \n        Output: ", "result": " cat, dog, horse, cow, pig, chicken, sheep, goat, llama, giraffe. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, is_domestic=True)\n        return [word.name for word in words]\n\n    def get_anagrams(self, word):\n        \"\"\"\n        Retrieve a list of anagrams for a given word.\n        \"\"\"\n        word = Word.objects.get(name=word)"}
{"cat": "animals", "slot": "specialization", "value": "longicorn beetle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are longicorn beetle. \n        Output: ", "result": "\n        elephant, giraffe, rhinoceros, hippopotamus, \n        zebra, lion, tiger, panther, leopard, \n        cobra, crocodile, snake, scorpion, \n        antelope, deer, elk, moose, \n        horse, donkey, mule, camel, \n        buffalo, bison, cow, ox, \n        sheep, goat, pig, boar, \n        kangaroo, koala,"}
{"cat": "animals", "slot": "specialization", "value": "thysanopteron", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are thysanopteron. \n        Output: ", "result": "\n        bee, fly, ant, wasp, moth, butterfly, dragonfly, grasshopper, cricket, beetle\n\"\"\"\n\nprint(\"Provide a list of 10 words that belong to the category and satisfy the condition. \")\ncategory = input(\"Enter category: \")\ncondition = input(\"Enter condition: \")\nwords = input(\"Enter 10 words: \").split()\n\nif category == \"animals\" and condition == \"are thysanopteron\":\nprint(\", \".join(words))\nelse:\nprint(\"Invalid"}
{"cat": "animals", "slot": "specialization", "value": "grey fox", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are grey fox. \n        Output: ", "result": "\n```\ngrey,fox,greyfox,grey-fox,greyfoxes,grey-grey-fox,grey-grey-grey-fox,grey-grey-grey-grey-fox,grey-grey-grey-grey-grey-fox,grey-grey-grey-grey-grey-grey-fox,grey-grey-grey-grey-grey-grey-grey-fox,grey-grey-grey-grey-gre"}
{"cat": "animals", "slot": "specialization", "value": "lamp shell", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are lamp shell. \n        Output: ", "result": "\n```\nturtle, terrapin, tortoise, sea turtle, loggerhead, leatherback, hawksbill, green turtle, Kemp's ridley, flatback\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are lamp shell\" are turtle, terrapin, tortoise, sea turtle, loggerhead, leatherback, hawksbill, green turtle, Kemp's ridley, and flatback.\n```\nProvide a"}
{"cat": "animals", "slot": "specialization", "value": "pug-dog", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are pug-dog. \n        Output: ", "result": "\n        beagle,bulldog,pug,dachshund,shih-tzu,yorkshire-terrier,poodle,bichon-frise,pomeranian,chihuahua\n    \"\"\"\n    category = 'animals'\n    condition = 'are pug-dog'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category"}
{"cat": "animals", "slot": "specialization", "value": "coraciiform bird", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are coraciiform bird. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "specialization", "value": "stonefly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are stonefly. \n        Output: ", "result": "\n        dog, cat, bird, fish, frog, snake, spider, ant, bee, stonefly. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        condition = Condition.objects.get(name='are stonefly')\n        words = Word.objects.filter(category=category, condition=condition)\n        return [word.name for word in words]\n\n    def test_filter_by_category_and_condition(self):\n        self.assertQuerysetEqual(\n            Word.objects.filter("}
{"cat": "animals", "slot": "specialization", "value": "lady beetle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are lady beetle. \n        Output: ", "result": "\n```\nladybug, ladybird, lady beetle, lady beetle, ladybug, ladybird, lady beetle, ladybug, ladybird, lady beetle, ladybug, ladybird, lady beetle, ladybug, ladybird, lady beetle, ladybug, ladybird, lady beetle, ladybug, ladybird, lady beetle, ladybug, ladybird, lady beetle, ladybug, ladybird, lady beetle, ladybug, ladybird, lady beetle, ladybug, ladybird, lady beet"}
{"cat": "animals", "slot": "specialization", "value": "ctenophore", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are ctenophore. \n        Output: ", "result": "\n        dolphin, octopus, jellyfish, squid, cuttlefish, nautilus, ctenophore, sea anemone, sea cucumber, starfish\n    \"\"\"\n    animal_words = [\"dolphin\", \"octopus\", \"jellyfish\", \"squid\", \"cuttlefish\", \"nautilus\", \"ctenophore\", \"sea anemone\", \"sea cucumber\", \"starfish\"]\n    ctenophore_words = [word for word in animal_words if \"ctenophore\""}
{"cat": "animals", "slot": "specialization", "value": "trogon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are trogon. \n        Output: ", "result": "\n```\ntrogon\ntrogon\ntrogon\ntrogon\ntrogon\ntrogon\ntrogon\ntrogon\ntrogon\ntrogon\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are trogon\" are \"trogon\", \"trogon\", \"trogon\", \"trogon\", \"trogon\", \"trogon\", \"trogon\", \"trogon\", \"trogon\", \"trogon\"\n```"}
{"cat": "animals", "slot": "specialization", "value": "conceptus", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are conceptus. \n        Output: ", "result": "\n            1. Conceptus\n            2. Fetus\n            3. Embryo\n            4. Ovum\n            5. Zygote\n            6. Blastocyst\n            7. Fetus\n            8. Embryo\n            9. Ovum\n            10. Zygote\n        \"\"\"\n        animal_words = [\"conceptus\", \"fetus\", \"embryo\", \"ovum\", \"zygote\", \"blastocyst\", \"fetus\", \"embryo\", \"ovum\", \"zyg"}
{"cat": "animals", "slot": "specialization", "value": "toy dog", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are toy dog. \n        Output: ", "result": "\n        dog,poodle,toy,terrier,schnauzer,pug,chihuahua,dachshund,bichon,france\n\"\"\"\n\nword_list = [\"dog\", \"poodle\", \"toy\", \"terrier\", \"schnauzer\", \"pug\", \"chihuahua\", \"dachshund\", \"bichon\", \"france\"]\ncategory = \"animals\"\ncondition = \"are toy dog\"\n\nfiltered_list = [word for word in word_list if word."}
{"cat": "animals", "slot": "specialization", "value": "plecopteran", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are plecopteran. \n        Output: ", "result": "\n            1. Dragonfly\n            2. Damselfly\n            3. Mayfly\n            4. Mosquito\n            5. Caddisfly\n            6. Stonefly\n            7. Blackfly\n            8. Sedgefly\n            9. Beetle\n            10. Ant\n        \"\"\"\n        words = [\n            \"Dragonfly\",\n            \"Damselfly\",\n            \"Mayfly\",\n            \"Mosquito\",\n            \"Caddisfly\",\n            \"Stonefly\",\n            \"Blackfly\",\n            \"S"}
{"cat": "animals", "slot": "specialization", "value": "psocopterous insect", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are psocopterous insect. \n        Output: ", "result": "\n        bee, ant, wasp, fly, mosquito, gnat, moth, butterfly, cricket, grasshopper\n\"\"\"\n\nword_list = [\"bee\", \"ant\", \"wasp\", \"fly\", \"mosquito\", \"gnat\", \"moth\", \"butterfly\", \"cricket\", \"grasshopper\"]\ncategory = \"animals\"\ncondition = \"are psocopterous insect\"\n\nif category == \"animals\" and condition == \"are psocopterous insect\":\n    print(\", \".join(word"}
{"cat": "animals", "slot": "specialization", "value": "ladybeetle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are ladybeetle. \n        Output: ", "result": "\n```\nladybug, ladybeetle, ladybird, lady, ladybug, ladybeetle, ladybird, lady, ladybug, ladybeetle, ladybird, lady, ladybug, ladybeetle, ladybird, lady, ladybug, ladybeetle, ladybird, lady, ladybug, ladybeetle, ladybird, lady, ladybug, ladybeetle, ladybird, lady, ladybug, ladybeetle, ladybird, lady, ladybug, ladybeetle, ladybird, lady, ladybug, ladybeetle"}
{"cat": "animals", "slot": "specialization", "value": "rock crab", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are rock crab. \n        Output: ", "result": "\n```\ncrab\ncrab\ncrab\ncrab\ncrab\ncrab\ncrab\ncrab\ncrab\n```\n\nExample 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are sweet. \n        Output: \n```\napple\nbanana\ncherry\ndate\nfig\ngrape\nkiwi\nmango\norange\npeach\n```\n"}
{"cat": "animals", "slot": "specialization", "value": "Cancer irroratus", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Cancer irroratus. \n        Output: ", "result": "\n        crocodile, alligator, caiman, gharial, mugger, marsh crocodile, Orinoco crocodile, saltwater crocodile, estuarine crocodile, Nile crocodile\n    \"\"\"\n    category = \"animals\"\n    crocodile_words = [\n        \"crocodile\",\n        \"alligator\",\n        \"caiman\",\n        \"gharial\",\n        \"mugger\",\n        \"marsh crocodile\",\n        \"Orinoco crocodile\",\n"}
{"cat": "animals", "slot": "specialization", "value": "range animal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are range animal. \n        Output: ", "result": "\n            1. Elephant\n            2. Giraffe\n            3. Lion\n            4. Zebra\n            5. Rhinoceros\n            6. Hippopotamus\n            7. Kangaroo\n            8. Koala\n            9. Gorilla\n            10. Chimpanzee\n        \"\"\"\n        animal_words = [\"elephant\", \"giraffe\", \"lion\", \"zebra\", \"rhinoceros\", \"hippopotamus\", \"kangaroo\", \"koala\", \"gorilla"}
{"cat": "animals", "slot": "specialization", "value": "entoproct", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are entoproct. \n        Output: ", "result": "\n        dog, elephant, giraffe, hippopotamus, jellyfish, kangaroo, octopus, penguin, seahorse, starfish\n    \"\"\"\n    category = \"animals\"\n    condition = \"are entoproct\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"animals\", \"are mammals\"))\nprint(get_words(\"animals\", \"have fur\"))\nprint(get_words(\"animals"}
{"cat": "animals", "slot": "specialization", "value": "swimming crab", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are swimming crab. \n        Output: ", "result": "\n```\ncrab, fish, shrimp, lobster, jellyfish, squid, octopus, clam, oyster, snail\n```\nExplanation:\n\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Desired output: comma separated list of words.\n3. Category: animals.\n4. Condition: are swimming crab.\n5. Output: crab, fish, shrimp, lobster, jellyfish, squid, octopus, clam,"}
{"cat": "animals", "slot": "specialization", "value": "ladybug", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are ladybug. \n        Output: ", "result": "\n```\nladybug,beetle,bug,insect,lady,ladybug,beetle,bug,insect,lady,ladybug,beetle,bug,insect,lady,ladybug,beetle,bug,insect,lady,ladybug,beetle,bug,insect,lady,ladybug,beetle,bug,insect,lady,ladybug,beetle,bug,insect,lady,ladybug,beetle,bug,insect,"}
{"cat": "animals", "slot": "specialization", "value": "ectoproct", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are ectoproct. \n        Output: ", "result": "\n        octopus\n        cuttlefish\n        nautilus\n        squid\n        cuttlefish\n        octopus\n        squid\n        nautilus\n        cuttlefish\n        octopus\n    \"\"\"\n    category = \"animals\"\n    condition = \"are ectoproct\"\n    words = [\n        \"octopus\",\n        \"cuttlefish\",\n        \"nautilus\",\n        \"squid\",\n        \"cuttlefish\",\n        \"octopus\",\n        \"squid\",\n        \"nautilus"}
{"cat": "animals", "slot": "specialization", "value": "ephemeral", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are ephemeral. \n        Output: ", "result": "\n```\ncat, frog, butterfly, moth, firefly, dragonfly, damselfly, mayfly, grasshopper, locust\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are native to the United States. \n        Output: \n```\napple, cherry, blueberry, strawberry, pear, plum,"}
{"cat": "animals", "slot": "specialization", "value": "parrot", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are parrot. \n        Output: ", "result": "\n```\nparrot, macaw, cockatoo, parakeet, conure, budgerigar, lovebird, parrotlet, Amazon parrot, umbrella cockatoo\n```\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, raspberry, watermelon, tomato"}
{"cat": "animals", "slot": "specialization", "value": "bird louse", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are bird louse. \n        Output: ", "result": "\n        crow, \n        sparrow, \n        finch, \n        pigeon, \n        dove, \n        seagull, \n        swallow, \n        wren, \n        starling.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"bird louse\" in word:\n            words.append(word)\n    return words\n\ndef get_anagrams(word_list):\n    \"\"\"\n    Given a list of words, return a list of all anagrams of the words"}
{"cat": "animals", "slot": "specialization", "value": "collembolan", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are collembolan. \n        Output: ", "result": "\n```\nant, springtail, collembola, insect, arthropod, entomology, bug, \n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine, clementine, mandarin, "}
{"cat": "animals", "slot": "specialization", "value": "fictional animal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are fictional animal. \n        Output: ", "result": "\n            1. dragon\n            2. griffin\n            3. phoenix\n            4. unicorn\n            5. mermaid\n            6. centaur\n            7. minotaur\n            8. harpy\n            9. satyr\n            10. cyclops\n        \"\"\"\n        words = [\n            \"dragon\",\n            \"griffin\",\n            \"phoenix\",\n            \"unicorn\",\n            \"mermaid\",\n            \"centaur\",\n            \"minotaur\",\n            \"harpy\",\n"}
{"cat": "animals", "slot": "specialization", "value": "leporide", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are leporide. \n        Output: ", "result": "\n        dog, cat, rabbit, hare, fox, squirrel, mouse, rat, hamster, leopard.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in text:\n        if word.lower() in category.lower() and word.lower() in condition.lower():\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n# Test the function\n"}
{"cat": "animals", "slot": "specialization", "value": "spider crab", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are spider crab. \n        Output: ", "result": "\n```\ncrab, spider\n```\n\n### Example 2:\n```python\npython generate_word_list.py category:animals, condition:are_mammals\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammals. \n        Output: \n```\ncow, elephant, giraffe, horse, kangaroo, koala, llama,"}
{"cat": "animals", "slot": "specialization", "value": "king crab", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are king crab. \n        Output: ", "result": "\n        dog, cat, bird, fish, crab, lobster, shrimp, snail, jellyfish, octopus\n\"\"\"\n\n# Define the function\ndef get_king_crab_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        # Check if"}
{"cat": "animals", "slot": "specialization", "value": "bird of prey", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are bird of prey. \n        Output: ", "result": "\n        hawk, eagle, falcon, osprey, vulture, kite, harrier, buzzard,\n```"}
{"cat": "animals", "slot": "specialization", "value": "ground beetle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are ground beetle. \n        Output: ", "result": "\n        dog, elephant, giraffe, hippopotamus, \n        kangaroo, koala, llama, octopus, \n        penguin, rhinoceros, sloth, turtle. \n        \"\"\"\n        category = 'animals'\n        condition = 'are ground beetle'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n# Test the function with sample inputs\nprint(get_words('animals', 'are mammals'))\nprint(get"}
{"cat": "animals", "slot": "specialization", "value": "survivor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are survivor. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "specialization", "value": "stone fly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are stone fly. \n        Output: ", "result": "\n```\ncat,fly,stone,stonefly,mayfly,flyfisherman,nymph,dryfly,nymphing,trout\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are sweet. \n        Output: \n```\napple,banana,cherry,date,fig,grape,kiwi,mango,orange,peach\n```"}
{"cat": "animals", "slot": "specialization", "value": "telsontail", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are telsontail. \n        Output: ", "result": "\n        elephant, giraffe, hippopotamus, jellyfish, kangaroo, octopus, penguin, seahorse, shark, whale\n    \"\"\"\n    animal_words = [\n        \"elephant\",\n        \"giraffe\",\n        \"hippopotamus\",\n        \"jellyfish\",\n        \"kangaroo\",\n        \"octopus\",\n        \"penguin\",\n        \"seahorse\",\n        \"shark\",\n        \"whale\"\n    ]"}
{"cat": "animals", "slot": "specialization", "value": "imago", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are imago. \n        Output: ", "result": "\n        dog, elephant, giraffe, horse, kangaroo, lion, octopus, penguin, seahorse, zebra\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    imago_words = Word.objects.filter(category=category, is_imago=True)\n    return ', '.join(imago_words.values_list('name', flat=True))\n\ndef get_animals_with_image(request):\n    \"\"\"\n    Retrieve a list of animals with"}
{"cat": "animals", "slot": "specialization", "value": "giant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are giant. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "specialization", "value": "cottontail", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are cottontail. \n        Output: ", "result": "\n```\nrabbit, bunny, cottontail, hare, jackrabbit, rabbitry, warren, bunnyhop, cottontail rabbit, cottontail rabbits\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\nlemon, lime, orange, grapefruit"}
{"cat": "animals", "slot": "specialization", "value": "Vulpes fulva", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Vulpes fulva. \n        Output: ", "result": "\n```\nfox, coyote, red fox, gray fox, arctic fox, kit fox, red wolf, gray wolf, jackal, dingo\n```\nExplanation: The words that belong to the category `animals` and satisfy the condition `are Vulpes fulva` are `fox, coyote, red fox, gray fox, arctic fox, kit fox, red wolf, gray wolf, jackal, dingo`."}
{"cat": "animals", "slot": "specialization", "value": "bunny rabbit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are bunny rabbit. \n        Output: ", "result": "\n```\nrabbit, bunny, cottontail, hop, Easter, spring, fluffy, bouncy, adorable, cute\n```\nExplanation:\nThe words that belong to the category \"animals\" and satisfy the condition \"are bunny rabbit\" are: rabbit, bunny, cottontail, hop, Easter, spring, fluffy, bouncy, adorable, cute.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. "}
{"cat": "animals", "slot": "specialization", "value": "little black ant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are little black ant. \n        Output: ", "result": "\n```\nant, black, little, ant, black, little, ant, black, little, ant\n```"}
{"cat": "animals", "slot": "specialization", "value": "leaf-miner", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are leaf-miner. \n        Output: ", "result": "\n        dog, elephant, giraffe, hippopotamus, \n        kangaroo, koala, lion, rhinoceros, \n        tiger, zebra.\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    condition = 'are leaf-miner'\n    words = Word.objects.filter(category=category, condition=condition).values_list('name', flat=True).distinct()\n    return ', '.join(words)\n\ndef get_anagrams(word):"}
{"cat": "animals", "slot": "specialization", "value": "wolf cub", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are wolf cub. \n        Output: ", "result": "\n            1. wolf\n            2. cub\n            3. howl\n            4. pack\n            5. hunt\n            6. prey\n            7. alpha\n            8. defend\n            9. family\n            10. territory\n        \"\"\"\n        wolf_cubs = [\"wolf\", \"cub\", \"howl\", \"pack\", \"hunt\", \"prey\", \"alpha\", \"defend\", \"family\", \"territory\"]\n        return wolf_cubs"}
{"cat": "animals", "slot": "specialization", "value": "Oryctolagus cuniculus", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Oryctolagus cuniculus. \n        Output: ", "result": "\n```\nrabbit, cottontail, bunny, hare, jackrabbit, European rabbit, Oryctolagus, cuniculus\n```\n\nExample 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are Citrus fruit. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine,"}
{"cat": "animals", "slot": "specialization", "value": "moss animal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are moss animal. \n        Output: ", "result": "\n        dog, cat, elephant, giraffe, horse, kangaroo, koala, lion, tiger, zebra\n    \"\"\"\n    category = \"animals\"\n    words = [\n        \"dog\",\n        \"cat\",\n        \"elephant\",\n        \"giraffe\",\n        \"horse\",\n        \"kangaroo\",\n        \"koala\",\n        \"lion\",\n        \"tiger\",\n        \"zebra\"\n    ]\n    moss_animals = [word for word in"}
{"cat": "animals", "slot": "specialization", "value": "Belgian griffon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Belgian griffon. \n        Output: ", "result": "\n```\ngriffon, griffon, griffon, griffon, griffon, griffon, griffon, griffon, griffon\n```"}
{"cat": "animals", "slot": "specialization", "value": "edible snail", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are edible snail. \n        Output: ", "result": "\n```\nslug, snail, escargot, helix, perlemoen, conch, whelk, abalone, oyster, mussel\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, cherry, strawberry, raspberry, watermelon, tomato, pear, plum"}
{"cat": "animals", "slot": "specialization", "value": "purebred", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are purebred. \n        Output: ", "result": "\n            dog, cat, horse, sheep, cow, pig, chicken, goat, lion, tiger\n\"\"\"\n\n# Define the function\ndef get_purebred_animals(category, condition):\n    # Create an empty list to store the results\n    results = []\n    \n    # Use a for loop to iterate through the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if word.category == category and word.is_purebred(condition):\n"}
{"cat": "animals", "slot": "specialization", "value": "scorpion shell", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are scorpion shell. \n        Output: ", "result": "\n```\nscorpion, shell, sting, venom, tail, claws, poison, arachnid, exoskeleton, underworld\n```\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine, clementine, mandarin, pomelo, bergam"}
{"cat": "animals", "slot": "specialization", "value": "Felis domesticus", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Felis domesticus. \n        Output: ", "result": "\n```\ncat, kitten, purr, meow, fur, tail, whiskers, domestic, housecat\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, raspberry, watermelon, pear, plum, red delicious, orange, banana\n```"}
{"cat": "animals", "slot": "specialization", "value": "game", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are game. \n        Output: ", "result": "\n```\ncat, dog, elephant, giraffe, horse, kangaroo, koala, lion, tiger, zebra\n```\nExplanation: The words `cat`, `dog`, `elephant`, `giraffe`, `horse`, `kangaroo`, `koala`, `lion`, `tiger`, and `zebra` belong to the category `animals` and satisfy the condition `are game`.\n```"}
{"cat": "animals", "slot": "specialization", "value": "white ant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are white ant. \n        Output: ", "result": "\n```\nelephant, giraffe, kangaroo, koala, penguin, polar bear, seal, walrus, whale, zebra\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are edible. \n        Output: \n```\napple, banana, cherry, date, fig, grape, lemon, orange, peach, pl"}
{"cat": "animals", "slot": "specialization", "value": "wolf pup", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are wolf pup. \n        Output: ", "result": "\n            1. wolf\n            2. pup\n            3. howl\n            4. pack\n            5. hunt\n            6. prey\n            7. alpha\n            8. family\n            9. territory\n            10. pack\n        \"\"\"\n        wolf_pup_words = [\n            \"wolf\",\n            \"pup\",\n            \"howl\",\n            \"pack\",\n            \"hunt\",\n            \"prey\",\n            \"alpha\",\n            \"family\",\n            \"territory\",\n            \"pack\"\n       "}
{"cat": "animals", "slot": "specialization", "value": "army ant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are army ant. \n        Output: ", "result": "\n```\nant,soldier,army,colony,organization,insect,insects,social,insects\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are army ant\" are: ant, soldier, army, colony, organization, insect, insects, social, and insects.\n```"}
{"cat": "animals", "slot": "specialization", "value": "archaeopteryx", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are archaeopteryx. \n        Output: ", "result": "\n            1. Archaeopteryx\n            2. Pterodactyl\n            3. Pteranodon\n            4. Rhamphorhynchus\n            5. Dimorphodon\n            6. Scaphognathus\n            7. Tupandactylus\n            8. Ctenochasmatidae\n            9. Pterodactyloidea\n            10. Pterosauria\n        \"\"\"\n        category = \"animals\"\n        condition = \"are archaeopteryx\"\n        words = [\n            \"Archaeoptery"}
{"cat": "animals", "slot": "specialization", "value": "sponge", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are sponge. \n        Output: ", "result": "\n        elephant, shark, jellyfish, whale, octopus, squid, cuttlefish, nautilus, starfish, sea anemone.\n    \"\"\"\n    animal_words = [\"elephant\", \"shark\", \"jellyfish\", \"whale\", \"octopus\", \"squid\", \"cuttlefish\", \"nautilus\", \"starfish\", \"sea anemone\"]\n    sponge_words = [word for word in animal_words if \"sponge\" in word]\n    return \", \".join("}
{"cat": "animals", "slot": "specialization", "value": "mollusc", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mollusc. \n        Output: ", "result": "\n        dog, cat, snail, oyster, crab, lobster, squid, octopus, mussel, clam\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Iterate over the words in the category\n    for word in category_words:\n        # Check if the word satisfies"}
{"cat": "animals", "slot": "specialization", "value": "shellfish", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are shellfish. \n        Output: ", "result": "\n        crab\n        lobster\n        shrimp\n        oyster\n        scallop\n        clam\n        mussel\n        snail\n        abalone\n        squid\n    \"\"\"\n    category = \"animals\"\n    condition = \"are shellfish\"\n    words = [\n        \"crab\",\n        \"lobster\",\n        \"shrimp\",\n        \"oyster\",\n        \"scallop\",\n        \"clam\",\n        \"mussel\",\n        \"snail\",\n        \"abalone\",\n        \"squ"}
{"cat": "animals", "slot": "specialization", "value": "ostracod", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are ostracod. \n        Output: ", "result": "\n```\ncrab, shrimp, snail, oyster, scallop, krill, barnacle, clam, lobster, ostracod\n```\nExplanation:\n\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Desired output: comma separated list of words.\n3. Category: animals.\n4. Condition: are ostracod.\n5. Output: crab, shrimp, snail, oyster, scallop, krill, barnacle, cl"}
{"cat": "animals", "slot": "specialization", "value": "Ibero-mesornis", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Ibero-mesornis. \n        Output: ", "result": "\n            1. Ibero-mesornis\n            2. Ibero-mesornis\n            3. Ibero-mesornis\n            4. Ibero-mesornis\n            5. Ibero-mesornis\n            6. Ibero-mesornis\n            7. Ibero-mesornis\n            8. Ibero-mesornis\n            9. Ibero-mesornis\n            10. Ibero-mesornis"}
{"cat": "animals", "slot": "specialization", "value": "metabola", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are metabola. \n        Output: ", "result": "\n        dog, cat, bird, fish, snake, lion, tiger, bear, wolf, elephant\n    \"\"\"\n    category = \"animals\"\n    words = [\n        \"dog\",\n        \"cat\",\n        \"bird\",\n        \"fish\",\n        \"snake\",\n        \"lion\",\n        \"tiger\",\n        \"bear\",\n        \"wolf\",\n        \"elephant\"\n    ]\n\n    for word in words:\n        if \"metabola\" in word:\n            print(word)"}
{"cat": "animals", "slot": "specialization", "value": "bark beetle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are bark beetle. \n        Output: ", "result": "\n        dog, elephant, giraffe, horse, kangaroo, koala, lion, monkey, rhinoceros, tiger\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() == condition.lower():\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n# Test the function\ntest"}
{"cat": "animals", "slot": "specialization", "value": "bow-wow", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are bow-wow. \n        Output: ", "result": "\n```\ncat, dog, bark, howl, meow, purr, roar, quack, chirp, tweet\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are bow-wow\" are: cat, dog, bark, howl, meow, purr, roar, quack, chirp, tweet.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. "}
{"cat": "animals", "slot": "specialization", "value": "mutant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mutant. \n        Output: ", "result": "\n```\ncat, dog, fish, bird, snake, spider, mouse, cow, chicken, hamster\n```"}
{"cat": "animals", "slot": "specialization", "value": "phasmid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are phasmid. \n        Output: ", "result": "\n            1. stick insect\n            2. walking stick\n            3. phasmid\n            4. mantis\n            5. grasshopper\n            6. locust\n            7. cricket\n            8. cockroach\n            9. spider\n            10. stick insect\n        \"\"\"\n        category = \"animals\"\n        condition = \"are phasmid\"\n        words = [\n            \"stick insect\",\n            \"walking stick\",\n            \"phasmid\",\n            \"mantis\",\n            \"grasshopper\",\n           "}
{"cat": "animals", "slot": "specialization", "value": "mason bee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mason bee. \n        Output: ", "result": "\n```\nbee, drone, queen, mating, nest, pollination, overwintering, food source, solitary, diversity\n```\nExplanation:\n\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Desired output: comma separated list of words.\n3. Category: animals.\n4. Condition: are mason bee.\n5. Output: bee, drone, queen, mating, nest, pollination, overwintering, food source, solitary,"}
{"cat": "animals", "slot": "specialization", "value": "female", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are female. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "specialization", "value": "neuropterous insect", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are neuropterous insect. \n        Output: ", "result": "\n            1. dragonfly\n            2. damselfly\n            3. mayfly\n            4. stonefly\n            5. caddisfly\n            6. lepidopterous insect\n            7. true bug\n            8. beetle\n            9. grasshopper\n            10. cricket\n        \"\"\"\n        category = \"animals\"\n        condition = \"are neuropterous insect\"\n        words = [\n            \"dragonfly\",\n            \"damselfly\",\n            \"mayfly\",\n            \"stonefly\",\n            \"c"}
{"cat": "animals", "slot": "specialization", "value": "trichopteran", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are trichopteran. \n        Output: ", "result": "\n        bee, butterfly, moth, dragonfly, damselfly, mayfly, ant, grasshopper, cricket, locust\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Create an empty list to store the words\n    words = []\n    \n    # Use a for loop to iterate through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if word.category == category and word.trichopteran:\n            #"}
{"cat": "animals", "slot": "specialization", "value": "orthopteran", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are orthopteran. \n        Output: ", "result": "\n```\ngrasshopper, cricket, locust, katydid, mantis, cockroach, grasshopper, cricket, locust, katydid\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are orthopteran\" are \"grasshopper\", \"cricket\", \"locust\", \"katydid\", \"mantis\", \"cockroach\", \"grasshopper\", \"cricket\", \"locust\", \"katydid\".\n```\nProvide a list of "}
{"cat": "animals", "slot": "specialization", "value": "leaf-cutter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are leaf-cutter. \n        Output: ", "result": "\n        elephant, giraffe, hippopotamus, kangaroo, lion, meerkat, okapi, rhinoceros, zebra, \n        Category: animals. \n        Condition: are mammals. \n        Output: \n        bat, cat, dog, elephant, giraffe, hippopotamus, kangaroo, lion, meerkat, okapi, \n        Category: animals. \n        Condition: are herbivores. \n        Output: "}
{"cat": "animals", "slot": "specialization", "value": "Arctic fox", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Arctic fox. \n        Output: ", "result": "\n```\nArctic, fox, white, blue, furry, carnivorous, tundra, snow, red, agile\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are sweet. \n        Output: \n```\napple, banana, cherry, date, fig, grape, mango, orange, pear, strawberry\n```\n\n```\n"}
{"cat": "animals", "slot": "specialization", "value": "deathwatch", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are deathwatch. \n        Output: ", "result": "\n        dog, spider, snake, scorpion, tick, wasp, hornet, bee, ant, centipede.\n    \"\"\"\n    words = []\n    for word in animal_words:\n        if any(word.startswith(prefix) for prefix in deathwatch_prefixes):\n            words.append(word)\n    return words\n\ndef get_anagrams(word):\n    \"\"\"\n    Given a word, returns a list of anagrams of that word.\n    \"\"\"\n    anagrams = []\n    for char in word"}
{"cat": "animals", "slot": "specialization", "value": "dipteron", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are dipteron. \n        Output: ", "result": "\n        dog, fly, ant, bee, mosquito, butterfly, moth, gnat, housefly, mosquito\n```\n\n```\nDescribe the behavior of the following code snippet:\n```\n\n```\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\nz = [1, 3, 5, 7, 9]\n\nfor i in range(len(x)):\n    for j in range(len(y)):"}
{"cat": "animals", "slot": "specialization", "value": "marine creature", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are marine creature. \n        Output: ", "result": "\n        shark, whale, dolphin, jellyfish, octopus, squid, crab, lobster, oyster, clam\n\nExample 2: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n        lemon, lime, orange, grapefruit, tangerine, clementine, mandarin,"}
{"cat": "animals", "slot": "specialization", "value": "andrenid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are andrenid. \n        Output: ", "result": "\n```\ncat, lion, giraffe, zebra, elephant, rhinoceros, buffalo, antelope, wildebeest, hippopotamus\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\norange, lemon, lime, grapef"}
{"cat": "animals", "slot": "specialization", "value": "dickey-bird", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are dickey-bird. \n        Output: ", "result": "\n        dog,cat,bird,chicken,turkey,duck,goose,swan,ostrich,penguin\n```\n\n```\nDescribe a scenario where the category is \"fruits\" and the condition is \"have an odd number of letters\".\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: have an odd number of letters. \n        Output: \n        apple,banana,"}
{"cat": "animals", "slot": "specialization", "value": "zoophyte", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are zoophyte. \n        Output: ", "result": "\n        dolphin, jellyfish, octopus, squid, cuttlefish, nautilus, sea anemone, sea cucumber, starfish, sea urchin\n    \"\"\"\n    category = \"animals\"\n    condition = \"are zoophyte\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nexample_input = \"provide a list of 10 words that belong to the category and satisfy the condition. Desired output: comma separated list of words. Category: animals."}
{"cat": "animals", "slot": "specialization", "value": "garden snail", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are garden snail. \n        Output: ", "result": "\n```\nslug, snail, snail, snail, snail, snail, snail, snail, snail\n```"}
{"cat": "animals", "slot": "specialization", "value": "woodborer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are woodborer. \n        Output: ", "result": "\n```\nant, beetle, cockroach, termite, borer, woodworm, powderpost, ambrosia, furniture, deathwatch\n```\nExplanation:\n\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Desired output: comma separated list of words.\n3. Category: animals.\n4. Condition: are woodborer.\n5. Output: ant, beetle, cockroach, termite, borer, woodworm, powderpost,"}
{"cat": "animals", "slot": "specialization", "value": "leaf miner", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are leaf miner. \n        Output: ", "result": "\n        dog, elephant, giraffe, horse, kangaroo, koala, lion, monkey, parrot, tiger\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in text:\n        if word.lower() == category.lower() and word.lower() == condition.lower():\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n```\nExample"}
{"cat": "animals", "slot": "specialization", "value": "lampshell", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are lampshell. \n        Output: ", "result": "\n```\nturtle, tortoise, terrapin, snapping turtle, box turtle, leatherback turtle, hawksbill turtle, green turtle, loggerhead turtle, Kemp's ridley turtle\n```\nExplanation:\nThe words that belong to the category \"animals\" and satisfy the condition \"are lampshell\" are: turtle, tortoise, terrapin, snapping turtle, box turtle, leatherback turtle, hawksbill"}
{"cat": "animals", "slot": "specialization", "value": "Alaskan king crab", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Alaskan king crab. \n        Output: ", "result": "\n        salmon, halibut, king crab, octopus, shrimp, crab, lobster, clam, oyster, scallop\n    \"\"\"\n    category = \"animals\"\n    condition = \"are Alaskan king crab\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "animals", "slot": "specialization", "value": "bird of passage", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are bird of passage. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "specialization", "value": "flying bird", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are flying bird. \n        Output: ", "result": "\n            1. Eagle\n            2. Falcon\n            3. Osprey\n            4. Hawk\n            5. Kite\n            6. Vulture\n            7. Stork\n            8. Pelican\n            9. Albatross\n            10. Swan\n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"bird\" in word and \"flying\" in word:\n                words.append(word)\n        return words\n\n    def get_animals_with_category(self, word_list, category"}
{"cat": "animals", "slot": "specialization", "value": "protoavis", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are protoavis. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "specialization", "value": "Urocyon cinereoargenteus", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Urocyon cinereoargenteus. \n        Output: ", "result": "\n```\nwolf,coyote,gray wolf,Canis lupus,gray wolf,Urocyon cinereoargenteus,gray wolf,Canis lupus,gray wolf,Urocyon cinereoargenteus,gray wolf,Canis lupus,gray wolf,Urocyon cinereoargenteus,gray wolf,Canis lupus,gray wolf,Urocyon cinereoargenteus,gray wolf,Canis lupus,gray wolf,Urocyon"}
{"cat": "animals", "slot": "specialization", "value": "pea crab", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are pea crab. \n        Output: ", "result": "\n```\ncrab,pea,crabby,crabgrass,crabapple,crabwalk,crabcake,crabby,crabby\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\norange,lemon,lime,grapefruit,tangerine,clementine,k"}
{"cat": "animals", "slot": "specialization", "value": "Alaska king crab", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Alaska king crab. \n        Output: ", "result": "\n        salmon, halibut, king crab, salmon, halibut, king crab, salmon, \n        halibut, king crab, salmon, halibut, king crab, salmon, halibut, \n        king crab, salmon, halibut, king crab, salmon, halibut, king crab, \n        salmon, halibut, king crab, salmon, halibut, king crab, salmon, \n        halibut, king crab, salmon, hal"}
{"cat": "animals", "slot": "specialization", "value": "lycaenid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are lycaenid. \n        Output: ", "result": "\n            dog, cat, butterfly, moth, skipper, bluethroat, copper, peacock, zebra, leopard\n        Explanation: dog, cat, butterfly, moth, skipper, bluethroat, copper, peacock, zebra, leopard all belong to the category of animals and are lycaenid. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        condition = 'are lycaenid'\n        words = Word.objects.filter("}
{"cat": "animals", "slot": "specialization", "value": "Paralithodes camtschatica", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Paralithodes camtschatica. \n        Output: ", "result": "\n        lobster,camtschatica,Paralithodes,crustacean,red,shell,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lobster,lob"}
{"cat": "animals", "slot": "specialization", "value": "passerine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are passerine. \n        Output: ", "result": "\n```\nparakeet, finch, sparrow, canary, warbler, nightingale, lark, dove, pigeon, sparrowhawk\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are passerine\" are: parakeet, finch, sparrow, canary, warbler, nightingale, lark, dove, pigeon, and sparrowhawk.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n       "}
{"cat": "animals", "slot": "specialization", "value": "puppy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are puppy. \n        Output: ", "result": " puppy, pug, poodle, pomeranian, pitbull, pomeranian, pug, poodle, pomeranian, pitbull\n```\n```"}
{"cat": "animals", "slot": "specialization", "value": "Great Pyrenees", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Great Pyrenees. \n        Output: ", "result": "\n```\nwolf,husky,grizzly,bear,moose,caribou,lion,tiger,leopard,cougar\n```\nExplanation:\nThe words that belong to the category \"animals\" and satisfy the condition \"are Great Pyrenees\" are: wolf, husky, grizzly, bear, moose, caribou, lion, tiger, leopard, and cougar."}
{"cat": "animals", "slot": "specialization", "value": "brush wolf", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are brush wolf. \n        Output: ", "result": "\n            1. wolf\n            2. brush\n            3. wolf\n            4. brush\n            5. wolf\n            6. brush\n            7. wolf\n            8. brush\n            9. wolf\n            10. brush\n        \"\"\"\n        category = \"animals\"\n        condition = \"are brush wolf\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n# Test the function\nprint(get_words(\"animals\", \"are brush wolf\"))\n"}
{"cat": "animals", "slot": "specialization", "value": "Symbion pandora", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Symbion pandora. \n        Output: ", "result": "\n        elephant, giraffe, kangaroo, koala, octopus, penguin, seahorse, spider, starfish, turtle\n    \"\"\"\n    category = 'animals'\n    condition = 'are Symbion pandora'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Example usage\nprint(get_words('animals', 'are Symbion pandora'))  # Output: elephant, giraffe, kangaroo, koala,"}
{"cat": "animals", "slot": "specialization", "value": "branchiopodan", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are branchiopodan. \n        Output: ", "result": "\n```\ncrayfish, water flea, daphnia, cladocera, branchiopod, crustacean, aquatic, planktonic, freshwater, zooplankton\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n```\norange, lemon, l"}
{"cat": "animals", "slot": "specialization", "value": "raptorial bird", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are raptorial bird. \n        Output: ", "result": "\n            hawk, eagle, falcon, kite, vulture, owl, osprey, heron, stork, crane\n        \"\"\"\n        category = Category.objects.get(name='animals')\n        condition = Condition.objects.get(name='are raptorial bird')\n        words = Word.objects.filter(category=category, condition=condition)\n        return [word.name for word in words]\n\n    def get_random_word(self):\n        \"\"\"\n        Get a random word from the database. \n       "}
{"cat": "animals", "slot": "specialization", "value": "parazoan", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are parazoan. \n        Output: ", "result": "\n        elephant, giraffe, kangaroo, lion, monkey, octopus, penguin, seal, snake, zebra\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() == condition.lower():\n            words.append(word)\n    print(\", \".join(words))\n```\nExample:\n```\npython word_category.py animals, are parazoan\n```"}
{"cat": "animals", "slot": "specialization", "value": "dalmatian", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are dalmatian. \n        Output: ", "result": "\n        dalmatian, dalmatian, dalmatian, dalmatian, dalmatian, dalmatian, dalmatian, dalmatian, dalmatian, dalmatian. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        dalmatian_word = Word.objects.filter(category=category, text='dalmatian').first()\n        if dalmatian_word:\n            return [dalmatian_word.text]\n        else:\n            return []\n"}
{"cat": "animals", "slot": "specialization", "value": "gallinaceous bird", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are gallinaceous bird. \n        Output: ", "result": "\n        chicken, duck, goose, turkey, pheasant, quail, guinea fowl, peafowl, emu, ostrich\n\"\"\"\n\n# Define the category and condition\ncategory = \"animals\"\ncondition = \"are gallinaceous bird\"\n\n# Define a list to store the words\nwords = []\n\n# Use a loop to find the words that satisfy the condition\nfor animal in animals:\n    if animal.startswith(category) and animal.endswith(condition):\n        words.append(animal)"}
{"cat": "animals", "slot": "specialization", "value": "slave-maker", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are slave-maker. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "specialization", "value": "nymphalid butterfly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are nymphalid butterfly. \n        Output: ", "result": "\n        peacock, swallowtail, monarch, painted lady, mourning cloak, \n        comma, question mark, exclamation mark, dollar sign, percent sign. \n        \"\"\"\n        category = 'animals'\n        condition = 'are nymphalid butterfly'\n        words = []\n        for word in word_list:\n            if word.category == category and word.satisfies_condition(condition):\n                words.append(word)\n        result = ', '.join(words)\n        print(result)\n```\nExample"}
{"cat": "animals", "slot": "specialization", "value": "pooch", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are pooch. \n        Output: ", "result": "\n        dog,cat,bird,fish,horse,cow,sheep,pig,monkey,elephant\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    pooch_words = Word.objects.filter(category=category, definition__contains='pooch')\n    return pooch_words.distinct().values_list('word', flat=True).filter(word__length__gte=3).annotate(count=Count('word')).order_by('count', 'word')[:10]\n\n@app"}
{"cat": "animals", "slot": "specialization", "value": "Vulpes velox", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Vulpes velox. \n        Output: ", "result": "\n```\nfox, wolf, coyote, red fox, arctic fox, swift fox, kit fox, red wolf, gray wolf, golden jackal\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are Vulpes velox\" are: fox, wolf, coyote, red fox, arctic fox, swift fox, kit fox, red wolf, gray wolf, and golden jackal."}
{"cat": "animals", "slot": "specialization", "value": "driver ant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are driver ant. \n        Output: ", "result": "\n```\ncat, dog, ant, bee, bird, butterfly, elephant, giraffe, horse, zebra\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are round. \n        Output: \n```\napple, banana, cherry, orange, peach, pear, plum, strawberry, watermelon\n```\n\n```"}
{"cat": "animals", "slot": "specialization", "value": "migrator", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are migrator. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "specialization", "value": "elaterid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are elaterid. \n        Output: ", "result": "\n        dog, cat, mouse, rat, hamster, gerbil, guinea pig, rabbit, squirrel, chipmunk\n```\n```"}
{"cat": "animals", "slot": "specialization", "value": "Asian longhorned beetle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Asian longhorned beetle. \n        Output: ", "result": "\n        beetle,horn,beetle,long,horn,beetle,long,horn,beetle,long,horn,beetle,long,horn,beetle,long,horn,beetle,long,horn,beetle,long,horn,beetle,long,horn,beetle,long,horn,beetle,long,horn,beetle,long,horn,beetle,long,horn,beetle,long,horn,beetle,long,horn,beetle,long,horn,"}
{"cat": "animals", "slot": "specialization", "value": "bryozoan", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are bryozoan. \n        Output: ", "result": "\n        fish, shrimp, crab, lobster, snail, scallop, oyster, clam, mussel, squid\n\nExample 2: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n        lemon, lime, orange, grapefruit, tangerine, clementine, mandarin, pomelo"}
{"cat": "animals", "slot": "specialization", "value": "insectivore", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are insectivore. \n        Output: ", "result": "\n```\nant, bee, butterfly, cricket, grasshopper, ladybug, mosquito, praying mantis, spider\n```\n\n### Example 2:\n```python\npython, c++, java, javascript, python\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: programming languages. \n        Condition: are popular. \n        Output: \n```\nc++, java, javascript, python, python\n"}
{"cat": "animals", "slot": "specialization", "value": "trichopteron", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are trichopteron. \n        Output: ", "result": "\n        dog, cat, bird, fish, frog, butterfly, bee, spider, ant, snail\n    \"\"\"\n    category = 'animals'\n    condition = 'are trichopteron'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: animals. \n        Output: dog"}
{"cat": "animals", "slot": "specialization", "value": "pierid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are pierid. \n        Output: ", "result": "\n```\ncat,peacock,peahen,peafowl,pea,feather,plumage,tail,eye,colorful,bird\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\norange,lemon,lime,grapefruit,tangerine,clementine,"}
{"cat": "animals", "slot": "specialization", "value": "phasmid insect", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are phasmid insect. \n        Output: ", "result": "\n            1. stick insect\n            2. walking stick\n            3. mantis\n            4. grasshopper\n            5. locust\n            6. cricket\n            7. cockroach\n            8. stick insect\n            9. walking stick\n            10. mantis\n        \"\"\"\n        animal_words = [\"stick insect\", \"walking stick\", \"mantis\", \"grasshopper\", \"locust\", \"cricket\", \"cockroach\", \"stick insect\", \"walking stick\", \"mantis\"]\n        animal_words ="}
{"cat": "animals", "slot": "specialization", "value": "Sinornis", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Sinornis. \n        Output: ", "result": "\n        dog, cat, bird, fish, lion, tiger, elephant, giraffe, zebra, \n        snake, crocodile. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        condition = Condition.objects.get(name='are Sinornis')\n        words = Word.objects.filter(category=category, condition=condition)\n        return [word.name for word in words]\n\n    def get_random_word(self):\n        \"\"\"\n        Retrieve a random word"}
{"cat": "animals", "slot": "specialization", "value": "stayer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are stayer. \n        Output: ", "result": "\n        dog, cat, horse, elephant, giraffe, zebra, lion, tiger, bear, wolf\n    \"\"\"\n    category = \"animals\"\n    condition = \"are stayer\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"animals\", \"are stayer\"))  # Output: dog, cat, horse, elephant, giraffe, zebra, lion, tiger, bear, wolf\n```\nIn this"}
{"cat": "animals", "slot": "specialization", "value": "ringlet butterfly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are ringlet butterfly. \n        Output: ", "result": "\n        dog, elephant, giraffe, hippopotamus, kangaroo, koala, lion, octopus, penguin, seahorse\n    \"\"\"\n    category = \"animals\"\n    condition = \"are ringlet butterfly\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n```\n```\nExample:\n```\nInput: \n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output:"}
{"cat": "animals", "slot": "specialization", "value": "cuculiform bird", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are cuculiform bird. \n        Output: ", "result": "\n            1. Cuckoo\n            2. Cuckoo\n            3. Cuckoo\n            4. Cuckoo\n            5. Cuckoo\n            6. Cuckoo\n            7. Cuckoo\n            8. Cuckoo\n            9. Cuckoo\n            10. Cuckoo\n        \"\"\"\n        cuculiform_bird_words = [\n            \"Cuckoo\",\n            \"Cuckoo\",\n            \"Cuckoo\",\n            \"Cuckoo\",\n            \"Cuckoo\",\n            \"Cuckoo\","}
{"cat": "animals", "slot": "specialization", "value": "Helix pomatia", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Helix pomatia. \n        Output: ", "result": "\n        snake, toad, frog, turtle, tortoise, terrapin, snapping turtle, box turtle, pond turtle, mud turtle.\n    \"\"\"\n    category = \"animals\"\n    condition = \"are Helix pomatia\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition within the category.\n    \"\"\"\n"}
{"cat": "animals", "slot": "specialization", "value": "homopterous insect", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are homopterous insect. \n        Output: ", "result": "\n```\ngrasshopper,cricket,locust,ant,aphid,leafhopper,whitefly,thrips,spider,mite\n```\nExplanation:\n\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Desired output: comma separated list of words.\n3. Category: animals.\n4. Condition: are homopterous insect.\n5. Output: \n```\ngrasshopper,cricket,locust,ant,aphid,leafhopper,whitefly"}
{"cat": "animals", "slot": "specialization", "value": "carriage dog", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are carriage dog. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "specialization", "value": "gray fox", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are gray fox. \n        Output: ", "result": "\n```\ngray,fox,grey,silver,gray-fox,grey-fox,silver-fox,grey-silver-fox,silver-grey-fox,grey-silver-grey-fox\n```\nExplanation: \n        The words that belong to the category \"animals\" and satisfy the condition \"are gray fox\" are: \n        gray,fox,grey,silver,gray-fox,grey-fox,silver-fox,grey-silver-fox,silver-grey-fox"}
{"cat": "animals", "slot": "specialization", "value": "tiger beetle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are tiger beetle. \n        Output: ", "result": "\n```\ntiger,beetle\n```\n\nExample 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are orange. \n        Output: \n```\napple,banana,cherry,date,grape,lemon,orange,peach,plum,strawberry\n```\n\nExample 3:\n```\nProvide a list of 10 words"}
{"cat": "animals", "slot": "specialization", "value": "whirligig beetle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are whirligig beetle. \n        Output: ", "result": "\n        dog, elephant, giraffe, hippopotamus, kangaroo, lion, octopus, penguin, rhinoceros, whirligig beetle. \n        \"\"\"\n        category = 'animals'\n        condition = 'are whirligig beetle'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('animals', 'are whirligig beetle'))\n\nif __name__ == '__main__':"}
{"cat": "animals", "slot": "specialization", "value": "Dungeness crab", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Dungeness crab. \n        Output: ", "result": "\n```\ncrab,crabby,crabgrass,crabapple,crabcake,crabmeat,crabwalk,crabwise,crabapple\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are strawberry. \n        Output: \n```\nstrawberry,strawberry jam,strawberry shortcake,straw"}
{"cat": "animals", "slot": "specialization", "value": "captive", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are captive. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "specialization", "value": "brachyuran", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are brachyuran. \n        Output: ", "result": "\n          dog, cat, spider, scorpion, lobster, crab, shrimp, crayfish, prawn, lobster\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    brachyuran_words = Word.objects.filter(category=category, is_brachyuran=True)\n    return ', '.join(brachyuran_words.values_list('name', flat=True))\n"}
{"cat": "animals", "slot": "specialization", "value": "ladybird", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are ladybird. \n        Output: ", "result": "\n```\nladybird,beetle,bug,insect,lady,ladybird,beetle,bug,insect,lady,ladybird,beetle,bug,insect,lady,ladybird,beetle,bug,insect,lady,ladybird,beetle,bug,insect,lady,ladybird,beetle,bug,insect,lady,ladybird,beetle,bug,insect,lady,ladybird,beetle,bug,insect,"}
{"cat": "animals", "slot": "specialization", "value": "Cancer borealis", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Cancer borealis. \n        Output: ", "result": "\n        polar bear, grizzly bear, black bear, brown bear, Kodiak bear, Ursus maritimus, Ursus arctos, Ursus horribilis, Ursus americanus, Ursus maritimus, Ursus arctos, Ursus horribilis, Ursus americanus, Ursus maritimus, Ursus arctos, Ursus horribilis, Ursus americanus, Ursus maritimus, Ursus arctos, Ursus horribilis, Ursus americanus, Ursus maritimus"}
{"cat": "animals", "slot": "specialization", "value": "racer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are racer. \n        Output: ", "result": "\n            1. cheetah\n            2. leopard\n            3. lion\n            4. tiger\n            5. jaguar\n            6. cougar\n            7. cheetah\n            8. leopard\n            9. lion\n            10. tiger\n        \"\"\"\n        words = [\n            'cheetah',\n            'leopard',\n            'lion',\n            'tiger',\n            'jaguar',\n            'cougar',\n            'cheetah',\n            'leopard"}
{"cat": "animals", "slot": "specialization", "value": "hemipteron", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are hemipteron. \n        Output: ", "result": "\n        beetle\n        cockroach\n        cricket\n        grasshopper\n        locust\n        mantis\n        praying mantis\n        stick insect\n        grasshopper\n        cricket\n    \"\"\"\n    category = \"animals\"\n    condition = \"are hemipteron\"\n    words = [\n        \"beetle\",\n        \"cockroach\",\n        \"cricket\",\n        \"grasshopper\",\n        \"locust\",\n        \"mantis\",\n        \"praying mantis\",\n        \"st"}
{"cat": "animals", "slot": "specialization", "value": "ephemeropteran", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are ephemeropteran. \n        Output: ", "result": "\n```\ndragonfly, damselfly, mayfly, stonefly, caddisfly, dobsonfly, leech, beetle, ant, grasshopper\n```\n\nExample 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine"}
{"cat": "animals", "slot": "specialization", "value": "danaid butterfly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are danaid butterfly. \n        Output: ", "result": "\n```\nmonarch,peacock,kiwi,giraffe,zebra,elephant,rhinoceros,lion,tiger,leopard\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are danaid butterfly\" are monarch, peacock, kiwi, giraffe, zebra, elephant, rhinoceros, lion, tiger, and leopard."}
{"cat": "animals", "slot": "specialization", "value": "adult", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are adult. \n        Output: ", "result": " cat, dog, elephant, giraffe, horse, kangaroo, lion, tiger, zebra. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        words = Word.objects.filter(category=category, adulthood=True)\n        return words.distinct().order_by('name')\n\n    def get_adult_mammals(self):\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output"}
{"cat": "animals", "slot": "specialization", "value": "alkali bee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are alkali bee. \n        Output: ", "result": "\n        elephant, giraffe, hippopotamus, \n        kangaroo, koala, llama, \n        meerkat, octopus, ostrich, \n        penguin, rhinoceros, \n```"}
{"cat": "animals", "slot": "specialization", "value": "doggy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are doggy. \n        Output: ", "result": "\n        dog,cat,bird,fish,horse,cow,sheep,pig,monkey,elephant\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() == condition.lower():\n            words.append(word.strip())\n    print(\", \".join(words))\n\n# Test the function\ntest_function(\"animals,are doggy\", \"dog\")\ntest_function(\"animals,are"}
{"cat": "animals", "slot": "specialization", "value": "acrodont", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are acrodont. \n        Output: ", "result": "\n          dog, cat, lion, tiger, leopard, cheetah, bear, wolf, fox, \n          seal, walrus, elephant, hippopotamus. \n        \"\"\"\n        category = 'animals'\n        condition = 'are acrodont'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('animals', 'are acrodont'))\n```\nOutput:\n```\ndog, cat, lion, tiger, le"}
{"cat": "animals", "slot": "specialization", "value": "comb jelly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are comb jelly. \n        Output: ", "result": "\n        jellyfish, comb jelly, ctenophore, jelly, medusa, hydromedusa, cnidaria, tentacled, stinging, gelatinous\n\"\"\"\n\n# Define the category and condition\ncategory = \"animals\"\ncondition = \"are comb jelly\"\n\n# Define a list to store the words\nwords = []\n\n# Split the condition into words\ncondition_words = condition.split()\n\n# Iterate through each word in the condition\nfor word in condition_words:\n    # Check if the current word is"}
{"cat": "animals", "slot": "specialization", "value": "fire ant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are fire ant. \n        Output: ", "result": "\n```\nant\nbee\nbutterfly\ndragonfly\ngrasshopper\nladybug\nmoth\nspider\nwasp\nyellowjacket\n```\nExplanation:\nThe words that belong to the category \"animals\" and satisfy the condition \"are fire ant\" are: ant, bee, butterfly, dragonfly, grasshopper, ladybug, moth, spider, wasp, yellowjacket.\n```"}
{"cat": "animals", "slot": "specialization", "value": "danaid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are danaid. \n        Output: ", "result": "\n        dog, cat, horse, cow, sheep, goat, pig, chicken, lion, tiger\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"danaid\" in word:\n            words.append(word)\n    return words\n\ndef get_anagrams(word_list):\n    anagrams = []\n    for word in word_list:\n        anagrams.extend(word.split())\n    return anagrams\n\ndef get_palindrome(word_list):\n   "}
{"cat": "animals", "slot": "specialization", "value": "ratite", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are ratite. \n        Output: ", "result": "\n          ostrich, emu, rhea, cassowary, kiwi, ostrich, emu, rhea, cassowary, kiwi\n    \"\"\"\n    category = \"animals\"\n    condition = \"are ratite\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"animals\", \"are mammals\"))\nprint(get_words(\"animals\", \"are birds\"))\nprint(get_words(\"animals"}
{"cat": "animals", "slot": "specialization", "value": "odonate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are odonate. \n        Output: ", "result": "\n        bee, dragonfly, damselfly, mayfly, stonefly, caddisfly, leech, mosquito, ant, grasshopper.\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    condition = Condition.objects.get(name='are odonate')\n    words = Word.objects.filter(category=category, condition=condition)\n    return [word.name for word in words]\n\n@pytest.mark.django_db\ndef test_get_words_by_category_and_"}
{"cat": "animals", "slot": "specialization", "value": "nonpasserine bird", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are nonpasserine bird. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "specialization", "value": "ephemerid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are ephemerid. \n        Output: ", "result": "\n        dog, mosquito, mayfly, cricket, grasshopper, butterfly, dragonfly, bee, ant, spider\n\nExample 2:\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n        orange, lemon, lime, grapefruit, mandarin, tangerine, clementine, pomelo, bergam"}
{"cat": "animals", "slot": "specialization", "value": "red wolf", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are red wolf. \n        Output: ", "result": "\n        red,wolf,howl,pack,wilderness,endangered,predator,south,carolina\n```\n\n```\nDescribe a scenario where the input is a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: a description of the scenario. \n        Category: animals. \n        Condition: are red wolf. \n        Input: \n        [red,wolf,howl,pack,wilderness,endangered,predator,south,carolina]"}
{"cat": "animals", "slot": "specialization", "value": "cur", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are cur. \n        Output: ", "result": "\n```\ncat, dog, lion, tiger, panther, leopard, cheetah, cougar, bear, wolf\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are cur\" are: cat, dog, lion, tiger, panther, leopard, cheetah, cougar, bear, wolf.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n"}
{"cat": "animals", "slot": "specialization", "value": "elater", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are elater. \n        Output: ", "result": "\n```\ncat, mouse, rat, hamster, gerbil, elephant, giraffe, zebra, rhino, hippopotamus\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are elater\" are: cat, mouse, rat, hamster, gerbil, elephant, giraffe, zebra, rhino, hippopotamus.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output"}
{"cat": "animals", "slot": "specialization", "value": "chrysomelid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are chrysomelid. \n        Output: ", "result": "\n        dog, beetle, weevil, leaf beetle, flour beetle,\n```"}
{"cat": "animals", "slot": "specialization", "value": "house cat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are house cat. \n        Output: ", "result": "\n```\ncat, kitten, litter, scratching post, food dish, scratching, playful, purring, cuddly, furry\n```\n\nExample 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, raspberry, watermelon, red delicious,"}
{"cat": "animals", "slot": "specialization", "value": "mate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mate. \n        Output: ", "result": "\n        dog,cat,bird,fish,cow,pig,sheep,horse,elephant,giraffe\n```\n\n```\nDescribe the behavior of the program when the input is: \n        Provide the input. \n        Desired output: empty list. \n        Category: animals. \n        Condition: are mate. \n        Input: \n        dog,cat,bird,fish,cow,pig,sheep,horse,elephant,giraffe\n```\n\n```\nDescribe the behavior of the program when"}
{"cat": "animals", "slot": "specialization", "value": "rotifer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are rotifer. \n        Output: ", "result": "\n```\ncat, rotifer\n```\n\nExample:\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are sweet. \n        Output: \n```\napple, banana, cherry, date, fig, grape, melon, orange, pear, strawberry\n```\n\nExample:\n```python\nProvide a list of 10 words that belong to the category and"}
{"cat": "animals", "slot": "specialization", "value": "ephemeron", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are ephemeron. \n        Output: ", "result": "\n        elephant, giraffe, jellyfish, kangaroo, octopus, penguin, seahorse, snake, spider, starfish\n    \"\"\"\n    animal_words = [\n        \"elephant\",\n        \"giraffe\",\n        \"jellyfish\",\n        \"kangaroo\",\n        \"octopus\",\n        \"penguin\",\n        \"seahorse\",\n        \"snake\",\n        \"spider\",\n        \"starfish\"\n    ]\n\n    ephemeron_"}
{"cat": "animals", "slot": "specialization", "value": "legionary ant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are legionary ant. \n        Output: ", "result": "\n```\ncat, ant, legionary, army, platoon, column, phalanx, battalion, regiment, legion\n```\nExplanation: The word `legionary` is a noun that belongs to the category of animals and satisfies the condition of being a legionary ant.\n```"}
{"cat": "animals", "slot": "specialization", "value": "hunting dog", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are hunting dog. \n        Output: ", "result": "\n            1. German Shepherd\n            2. Doberman Pinscher\n            3. Rottweiler\n            4. Boxer\n            5. Golden Retriever\n            6. Labrador Retriever\n            7. Siberian Husky\n            8. Alaskan Malamute\n            9. Greyhound\n            10. Dachshund\n        \"\"\"\n        category = Category.objects.get(name='animals')\n        condition = Condition.objects.get(name='are hunting dog')\n        words = Word.objects.filter(category"}
{"cat": "animals", "slot": "specialization", "value": "leaf beetle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are leaf beetle. \n        Output: ", "result": "\n        dog, elephant, giraffe, hippopotamus, kangaroo, lion, monkey, octopus, penguin, rhinoceros\n    \"\"\"\n    animal_words = [\"dog\", \"elephant\", \"giraffe\", \"hippopotamus\", \"kangaroo\", \"lion\", \"monkey\", \"octopus\", \"penguin\", \"rhinoceros\"]\n    leaf_beetle_words = [word for word in animal_words if \"leaf\" in word or \"beet"}
{"cat": "animals", "slot": "specialization", "value": "seed shrimp", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are seed shrimp. \n        Output: ", "result": "\n```\ncrayfish, shrimp, prawn, lobster, crab, snail, oyster, scallop, squid, octopus\n```\nExplanation:\n\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Desired output: comma separated list of words.\n3. Category: animals.\n4. Condition: are seed shrimp.\n5. Output: crayfish, shrimp, prawn, lobster, crab, snail, oyster,"}
{"cat": "animals", "slot": "specialization", "value": "carinate bird", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are carinate bird. \n        Output: ", "result": "\n            1. Penguin\n            2. Flamingo\n            3. Pelican\n            4. Albatross\n            5. Stork\n            6. Crane\n            7. Heron\n            8. Gull\n            9. Tern\n            10. Shearwater\n        \"\"\"\n        words = [\n            \"Penguin\",\n            \"Flamingo\",\n            \"Pelican\",\n            \"Albatross\",\n            \"Stork\",\n            \"Crane\",\n            \"Heron\",\n            \"Gull\",\n            \""}
{"cat": "animals", "slot": "specialization", "value": "phoronid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are phoronid. \n        Output: ", "result": "\n        elephant, giraffe, hippopotamus, jellyfish, kangaroo, octopus, penguin, seahorse, shark, squid\n    \"\"\"\n    animal_words = [\n        \"elephant\",\n        \"giraffe\",\n        \"hippopotamus\",\n        \"jellyfish\",\n        \"kangaroo\",\n        \"octopus\",\n        \"penguin\",\n        \"seahorse\",\n        \"shark\",\n        \"squid\"\n    ]"}
{"cat": "animals", "slot": "specialization", "value": "Canis rufus", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are Canis rufus. \n        Output: ", "result": "\n```\ncoyote, wolf, fox, jackal, dingo, red wolf, gray wolf, Ethiopian wolf, African wild dog, dhole\n```\nExplanation: The words that belong to the category \"animals\" and satisfy the condition \"are Canis rufus\" are: coyote, wolf, fox, jackal, dingo, red wolf, gray wolf, Ethiopian wolf, African wild dog, dhole.\n```\nProvide a list of 10 words that belong to the category and satisfy"}
{"cat": "animals", "slot": "specialization", "value": "stone crab", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are stone crab. \n        Output: ", "result": "\n        stone, crab, claw, shell, crustacean, mollusk, seafood, delicacy, Florida, seasonal. \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() == condition.lower():\n            words.append(word.strip())\n    print(\", \".join(words))\n\n# Example usage\nsolve(\"animals\", \"are mammals\")\nsolve(\"anim"}
{"cat": "animals", "slot": "specialization", "value": "dickeybird", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are dickeybird. \n        Output: ", "result": "\n        dog,cat,bird,chicken,turkey,duck,goose,swan,ostrich,penguin\n\"\"\"\n\n# Define the function\ndef get_animal_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    animal_words = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        # Check if"}
{"cat": "animals", "slot": "specialization", "value": "basenji", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are basenji. \n        Output: ", "result": "\n        basenji,bushdog,caracal,cheetah,cougar,dog,hyena,jaguar,leopard,lion\n\"\"\"\n\nword_list = [\"basenji\", \"bushdog\", \"caracal\", \"cheetah\", \"cougar\", \"dog\", \"hyena\", \"jaguar\", \"leopard\", \"lion\"]\nfiltered_list = []\nfor word in word_list:\n    if \"basenji\" in word:\n        filtered_list.append(word)"}
{"cat": "animals", "slot": "specialization", "value": "prey", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are prey. \n        Output: ", "result": "\n          dog, cat, mouse, rabbit, deer, antelope, sheep, cow, chicken, duck\n    \"\"\"\n    category = Category.objects.get(name='animals')\n    prey_words = Word.objects.filter(category=category, prey__isnull=False).values_list('word', flat=True).distinct()\n    return ', '.join(prey_words) if prey_words else ''\n\n# Create some test data\ncategory = Category.objects.create(name='animals')\nprey_word"}
{"cat": "animals", "slot": "specialization", "value": "decapod crustacean", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are decapod crustacean. \n        Output: ", "result": "\n```\ncrab, lobster, shrimp, prawn, lobster, crab, shrimp, lobster, crab, lobster\n```"}
{"cat": "animals", "slot": "specialization", "value": "lepidopterous insect", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are lepidopterous insect. \n        Output: ", "result": "\n        butterfly, moth, caterpillar, silkworm, pupa, chrysalis, larva, wing, antenna, proboscis\n\"\"\"\n\n# Define the category and condition\ncategory = \"animals\"\ncondition = \"are lepidopterous insect\"\n\n# Split the condition into words\ncondition_words = condition.split()\n\n# Define an empty list to store the words\nwords = []\n\n# Iterate over the words in the category\nfor word in category_words:\n    # Check if the word satisfies the condition\n   "}
{"cat": "animals", "slot": "specialization", "value": "domestic animal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are domestic animal. \n        Output: ", "result": " cat, dog, horse, cow, pig, chicken, sheep, goat, turkey, \n        llama. \n        \"\"\"\n        category = Category.objects.get(name='animals')\n        animals = Animal.objects.filter(species__in=category.species.values_list('name', flat=True))\n        filtered_animals = [animal for animal in animals if animal.is_domestic]\n        filtered_animals_names = [animal.name for animal in filtered_animals]\n        return filtered_animals_names"}
{"cat": "animals", "slot": "specialization", "value": "domesticated animal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are domesticated animal. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "specialization", "value": "lepidopteron", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are lepidopteron. \n        Output: ", "result": "\n        butterfly, moth, caterpillar, silk, chrysalis, pupa, wing, antennae, proboscis, scales.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() in condition.lower().split(','):\n            words.append(word)\n    print(\", \".join(words))\n\n# Example usage\nsolution(category=\"animals\", condition=\"are lepidopter"}
{"cat": "animals", "slot": "specialization", "value": "lepidopteran", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are lepidopteran. \n        Output: ", "result": "\n        butterfly, moth, caterpillar, silk, chrysalis, pupa, wing, antennae, proboscis, scales\n\"\"\"\n\n# Define the category and condition\ncategory = \"animals\"\ncondition = \"are lepidopteran\"\n\n# Split the condition into words\ncondition_words = condition.split()\n\n# Define a list to store the words\nwords = []\n\n# Iterate over the words in the category\nfor word in category_words:\n    # Check if the word satisfies the condition\n    if all("}
{"cat": "animals", "slot": "specialization", "value": "decapod", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are decapod. \n        Output: ", "result": "\n```\ncat, crab, lobster, shrimp, prawn, crayfish, squid, octopus, snail, oyster\n```\n\n### Example 2:\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine, clementine,"}
{"cat": "animals", "slot": "specialization", "value": "ectotherm", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are ectotherm. \n        Output: ", "result": "\n        lizard, snake, crocodile, alligator, turtle, chameleon, iguana, gecko, monitor lizard, tortoise\n```\n```"}
{"cat": "animals", "slot": "purpose", "value": "animal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are used for animal. \n        Output: ", "result": "\n            \n```"}
{"cat": "animals", "slot": "specialization", "value": "mollusk", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mollusk. \n        Output: ", "result": "\n          snail, clam, oyster, mussel, scallop, squid, cuttlefish, nautilus, octopus, squid\n```\n```"}
{"cat": "animals", "slot": "specialization", "value": "larva", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are larva. \n        Output: ", "result": "\n```\nant, caterpillar, maggot, worm, grub, larva, pupa, butterfly, moth\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine, clementine,"}
{"cat": "animals", "slot": "specialization", "value": "herbivore", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are herbivore. \n        Output: ", "result": "\n             elephant, \n             giraffe, \n             kangaroo, \n             koala, \n             llama, \n             ostrich, \n             rhinoceros, \n             sloth, \n             zebra, \n             hippopotamus\n        \"\"\"\n        category = 'animals'\n        condition = 'are herbivore'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('animals', 'are her"}
{"cat": "animals", "slot": "specialization", "value": "hymenopterous insect", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are hymenopterous insect. \n        Output: ", "result": "\n        bee, ant, wasp, honeybee, bumblebee, yellowjacket, hornet,\n```"}
{"cat": "animals", "slot": "specialization", "value": "chordate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are chordate. \n        Output: ", "result": "\n        fish, shark, whale, ray, skate, hagfish, lancelet, salamander, axolotl, platypus\n\nExample 2: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n        lemon, lime, orange, grapefruit, mandarin, tangerine, clementine, pomelo,"}
{"cat": "animals", "slot": "specialization", "value": "hymenopteran", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are hymenopteran. \n        Output: ", "result": "\n        bee, ant, wasp, honeybee, bumblebee, yellowjacket, hornet,\n```"}
{"cat": "animals", "slot": "specialization", "value": "hymenopteron", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are hymenopteron. \n        Output: ", "result": "\n        bee, ant, wasp, honeybee, bumblebee, yellowjacket, hornet,\n```"}
{"cat": "animals", "slot": "specialization", "value": "hymenopter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are hymenopter. \n        Output: ", "result": "\n        bee, ant, wasp, honeybee, bumblebee, yellowjacket, hornet,\n```"}
{"cat": "animals", "slot": "specialization", "value": "pet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are pet. \n        Output: ", "result": " cat, dog, fish, bird, hamster, rabbit, snake, lizard, turtle, iguana\n    \"\"\"\n    print(\"Category:\", category)\n    print(\"Condition:\", condition)\n    words = []\n    for word in all_words:\n        if word.lower() == category.lower() and word.lower() == condition.lower():\n            words.append(word)\n    if len(words) == 0:\n        print(\"No words found.\")\n    else:\n        print(\"Words:\", \", \".join(words"}
{"cat": "animals", "slot": "specialization", "value": "invertebrate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are invertebrate. \n        Output: ", "result": "\n        bee, ant, spider, snail, crab, lobster, shrimp, jellyfish, octopus, cuttlefish.\n    \"\"\"\n    category = \"animals\"\n    condition = \"are invertebrate\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"animals\", \"are invertebrate\"))  # Output: bee, ant, spider, snail, crab, lobster, shrimp, jel"}
{"cat": "animals", "slot": "specialization", "value": "arthropod", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are arthropod. \n        Output: ", "result": "\n```\nant, spider, cricket, grasshopper, beetle, cockroach, mantis, millipede, centipede, tick\n```\nExplanation:\n\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Desired output: comma separated list of words.\n3. Category: animals.\n4. Condition: are arthropod.\n5. Output: \n```\nant, spider, cricket, grasshopper, beetle, cockroach,"}
{"cat": "food", "slot": "purpose", "value": "vision", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are used for vision. \n        Output: ", "result": "\n            1. Eye\n            2. Vision\n            3. Sight\n            4. Look\n            5. See\n            6. View\n            7. Gaze\n            8. Peek\n            9. Glimpse\n            10. Inspect\n        \"\"\"\n        food_words = [\n            \"Eye\",\n            \"Vision\",\n            \"Sight\",\n            \"Look\",\n            \"See\",\n            \"View\",\n            \"Gaze\",\n            \"Peek\",\n            \"Glimpse\",\n            \"Inspect\"\n"}
{"cat": "food", "slot": "size", "value": "small", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be small. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grape, kiwi, mango, orange, peach\n    \"\"\"\n    food_words = [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"kiwi\", \"mango\", \"orange\", \"peach\"]\n    small_words = [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"kiwi\", \"mango\", \"orange\", \"peach\"]\n    for word in small_words:\n        if"}
{"cat": "food", "slot": "material", "value": "yeast", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be made of yeast. \n        Output: ", "result": "\n        apple, bread, cake, cookie, dough, pizza, roll, sourdough, yeast\n```\n\n```{r}\nlibrary(dplyr)\nlibrary(stringr)\n\nfood_words <- c(\"apple\", \"bread\", \"cake\", \"cookie\", \"dough\", \"pizza\", \"roll\", \"sourdough\", \"yeast\")\nwords_that_can_be_made_of_yeast <- food_words[str_detect(food_words, \"yeast\")]\nwords_that_can"}
{"cat": "food", "slot": "material", "value": "rye", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be made of rye. \n        Output: ", "result": "\n          apple, bread, cake, cookie, cracker, donut, loaf, muffin, pastry, pizza \n    \"\"\"\n    food_words = [\n        \"apple\", \"bread\", \"cake\", \"cookie\", \"cracker\", \"donut\", \"loaf\", \"muffin\", \"pastry\", \"pizza\"\n    ]\n    rye_words = [word for word in food_words if \"rye\" in word]\n    return \", \".join(rye_words) if rye_words else \"No words"}
{"cat": "food", "slot": "material", "value": "tasting", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be made of tasting. \n        Output: ", "result": "\n        apple, cake, chocolate, cookie, donut, ice cream, pizza, sandwich, sushi, yogurt\n    \"\"\"\n    category = 'food'\n    condition = 'can be made of tasting'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Example usage\nprint(get_words_from_description('Provide a list of 10 words that belong to the category and satisfy the condition. Desired output: comma separated list of words. Category: food."}
{"cat": "food", "slot": "material", "value": "sourdough", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be made of sourdough. \n        Output: ", "result": "\n        bread, dough, flour, yeast, sourdough, bake, knead, rise, mix, ferment\n```\n\n```\nDescribe a scenario where you need to find a list of words that belong to a category and satisfy a condition. \n        \n        bread, dough, fl"}
{"cat": "food", "slot": "material", "value": "unleavened", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be made of unleavened. \n        Output: ", "result": "\n        bread, cracker, naan, pita, tortilla, crepe, chapati, roti, lavash, manakish \n    \"\"\"\n    category = \"food\"\n    condition = \"can be made of unleavened\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"food\", \"can be made of unleavened\"))  # bread, cracker, naan, pita, tortilla, crepe, chapati, roti,"}
{"cat": "food", "slot": "material", "value": "salt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be made of salt. \n        Output: ", "result": "\n```\nsalt, salted, saltshaker, saltcellar, saltpeter, salty, salamander, salmagundi, salve\n```\nExplanation:\nThe words that satisfy the condition \"can be made of salt\" and belong to the category \"food\" are: salt, salted, saltshaker, saltcellar, saltpeter, salty, salamander, salmagundi, salve.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output"}
{"cat": "food", "slot": "time", "value": "dinner", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be consumed or used during dinner. \n        Output: ", "result": "\n          salad, soup, bread, pasta, steak, chicken, fish, potatoes, vegetables, dessert\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() in condition.lower().split(','):\n            words.append(word)\n    print(\", \".join(words))\n"}
{"cat": "food", "slot": "time", "value": "autumn", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be consumed or used during autumn. \n        Output: ", "result": "\n            1. Pumpkin \n            2. Apple \n            3. Cinnamon \n            4. Maple \n            5. Squash \n            6. Corn \n            7. Chili \n            8. Gourd \n            9. Nutmeg \n            10. Cider \n        \"\"\"\n        food_words = [\n            \"Pumpkin\",\n            \"Apple\",\n            \"Cinnamon\",\n            \"Maple\",\n            \"Squash\",\n            \"Corn\",\n            \""}
{"cat": "food", "slot": "time", "value": "lunch", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be consumed or used during lunch. \n        Output: ", "result": "\n        sandwich, soup, salad, bread, chips, drink, fruit, dessert, pasta, pizza \n    \"\"\"\n    food_words = [\n        \"sandwich\", \"soup\", \"salad\", \"bread\", \"chips\", \"drink\", \"fruit\", \"dessert\", \"pasta\", \"pizza\"\n    ]\n    lunch_words = [\n        \"sandwich\", \"soup\", \"salad\", \"bread\", \"chips\", \"drink\", \"fruit\", \"dessert\"\n"}
{"cat": "food", "slot": "time", "value": "summer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be consumed or used during summer. \n        Output: ", "result": "\n            1. Ice Cream\n            2. Watermelon\n            3. Popsicle\n            4. Lemonade\n            5. Salad\n            6. Grilled Chicken\n            7. Barbecue\n            8. Fresh Fruit\n            9. Iced Tea\n            10. Ice Cubes\n        \"\"\"\n        words = [\n            \"Ice Cream\",\n            \"Watermelon\",\n            \"Popsicle\",\n            \"Lemonade\",\n            \"Salad\",\n            \"Grilled Chicken\",\n"}
{"cat": "food", "slot": "time", "value": "April", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be consumed or used during April. \n        Output: ", "result": "\n            4. Eggs\n            5. Pizza\n            6. Ice Cream\n            7. Grilled Meat\n            8. BBQ Sauce\n            9. Salad Dressing\n            10. Potato Chips\n        \"\"\"\n        food_words = [\"Pizza\", \"Ice Cream\", \"Grilled Meat\", \"BBQ Sauce\", \"Salad Dressing\", \"Potato Chips\"]\n        food_words = [word for word in food_words if word.lower().startswith(\"a\") and word.lower()."}
{"cat": "food", "slot": "time", "value": "meal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be consumed or used during meal. \n        Output: ", "result": "\n        apple, bread, butter, coffee, milk, sugar, salt, water, knife, fork.\n    \"\"\"\n    food_words = [\n        \"apple\", \"bread\", \"butter\", \"coffee\", \"milk\", \"sugar\", \"salt\", \"water\", \"knife\", \"fork\"\n    ]\n    category = \"food\"\n    condition = \"can be consumed or used during meal\"\n    result = []\n    for word in food_words:\n        if re.search(condition, word):\n"}
{"cat": "food", "slot": "material", "value": "water", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be made of water. \n        Output: ", "result": "\n            apple, banana, cherry, coconut, grape, lemon, melon, orange, pear, water\n    \"\"\"\n    food_words = [\n        \"apple\", \"banana\", \"cherry\", \"coconut\", \"grape\", \"lemon\", \"melon\", \"orange\", \"pear\", \"water\"\n    ]\n    water_words = [\n        \"apple\", \"banana\", \"cherry\", \"coconut\", \"grape\", \"lemon\", \"melon\", \"orange\", \"pear\","}
{"cat": "food", "slot": "taste", "value": "acid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be acid. \n        Output: ", "result": "\n            apple, banana, citrus, orange, lemon, pineapple, grapefruit, cranberry, tomato, vinegar\n        \"\"\"\n        category = 'food'\n        condition = 'can be acid'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n       "}
{"cat": "food", "slot": "taste", "value": "cold", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be cold. \n        Output: ", "result": "\n            chocolate, ice cream, frozen yogurt, sorbet, sherbet, gelato, frozen pizza, frozen vegetables, frozen fruit, frozen dinners\n        \"\"\"\n        category = 'food'\n        condition = 'can be cold'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('food', 'can be cold'))  # Output: chocolate, ice cream, frozen yogurt, sorbet, sherbet, gel"}
{"cat": "food", "slot": "taste", "value": "dessert", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be dessert. \n        Output: ", "result": "\n            chocolate, cake, ice cream, cookie, pie, pudding, sundae, tart, tartufo, truffle\n        \"\"\"\n        category = 'food'\n        condition = 'can be dessert'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_no_words(self):\n        with self.assertRaises(IndexError):\n            get_words('category', 'condition')\n\n    def test_get_words_no_category"}
{"cat": "food", "slot": "taste", "value": "sparkling", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be sparkling. \n        Output: ", "result": "\n        chocolate, soda, champagne, sparkling water, iced tea, lemonade, ginger ale, \n        cola, tonic water, seltzer water.\n    \"\"\"\n    food_words = [\n        \"chocolate\", \"soda\", \"champagne\", \"sparkling water\", \"iced tea\", \"lemonade\", \n        \"ginger ale\", \"cola\", \"tonic water\", \"seltzer water\"\n    ]\n    sparkling_words = [word for word in food_words if word.endswith"}
{"cat": "food", "slot": "taste", "value": "sugary", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be sugary. \n        Output: ", "result": "\n            chocolate, candy, dessert, sweet, sugar, syrup, treat, cookie, ice cream, cake. \n        \"\"\"\n        category = 'food'\n        condition = 'can be sugary'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_example_1(self):\n        result = self.get_words('food', 'can be sugary')\n        self.assertEqual(result, 'chocolate, candy, dessert, sweet, sugar,"}
{"cat": "food", "slot": "taste", "value": "herbal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be herbal. \n        Output: ", "result": "\n            apple, banana, carrot, ginger, honey, lemon, mint, orange, turmeric, yogurt \n    \"\"\"\n    category = \"food\"\n    condition = \"can be herbal\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    words = []\n    if category == \"food\":\n       "}
{"cat": "food", "slot": "taste", "value": "fizzy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be fizzy. \n        Output: ", "result": "\n            apple, beer, cola, fizz, ginger ale, lemonade, \n            soda, sparkling water, tonic water, seltzer water. \n        \"\"\"\n        category = 'food'\n        condition = 'can be fizzy'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('food', 'can be fizzy'))\n```\nOutput:\napple, beer, cola, fizz, ginger ale, lemonade,"}
{"cat": "food", "slot": "taste", "value": "iced", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be iced. \n        Output: ", "result": "\n        chocolate, ice cream, iced coffee, iced tea, iced water, iced milk, iced frappuccino, iced mocha, iced latte, iced cappuccino\n```\n\n```"}
{"cat": "food", "slot": "taste", "value": "soft", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be soft. \n        Output: ", "result": "\n            chocolate, ice cream, cake, pudding, mousse, cheesecake, sorbet, frozen yogurt, gelato, sherbet.\n        \"\"\"\n        category = 'food'\n        condition = 'can be soft'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def describe_category_and_condition(category, condition):\n        \"\"\"\n        Provide a description of the category and condition. \n        Category: food. \n"}
{"cat": "food", "slot": "material", "value": "milk", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be made of milk. \n        Output: ", "result": "\n        chocolate, ice cream, cheese, yogurt, milkshake, pudding, cheesecake, butter, sour cream, whipped cream\n\"\"\"\n\nword_list = []\nfor word in word_list:\n    if \"milk\" in word:\n        word_list.remove(word)\n\nfor word in word_list:\n    if word.endswith(\".milk\"):\n        word_list.remove(word)\n\nfor word in word_list:\n    if word.endswith(\"."}
{"cat": "food", "slot": "smell", "value": "fruity", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can smell fruity. \n        Output: ", "result": "\n            apple, banana, cherry, grape, lemon, orange, peach, plum, raspberry, strawberry \n        \"\"\"\n        category = \"food\"\n        condition = \"can smell fruity\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition. \n        Desired output: a list of words. \n"}
{"cat": "food", "slot": "smell", "value": "floral", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can smell floral. \n        Output: ", "result": "\n            chocolate, rose, lilac, lavender, jasmine, gardenia, honeysuckle, orange blossom, ylang-ylang. \n        \"\"\"\n        category = 'food'\n        condition = 'can smell floral'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(find_words(category, condition))\n```\nOutput:\nchocolate, rose, lilac, lavender, jasmine, gardenia, honeysuckle,"}
{"cat": "food", "slot": "smell", "value": "bitter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can smell bitter. \n        Output: ", "result": "\n            apple, cinnamon, chocolate, coffee, vanilla, licorice, mint, orange, peppermint, raspberry\n    \"\"\"\n    category = \"food\"\n    condition = \"can smell bitter\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition.\n    \"\"\"\n    words = []\n    if category == \""}
{"cat": "food", "slot": "smell", "value": "spicy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can smell spicy. \n        Output: ", "result": "\n            chili, curry, garlic, jalapeno, onion, pepper, spicy, sriracha, thai, wasabi \n    \"\"\"\n    category = \"food\"\n    condition = \"can smell spicy\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"food\", \"can taste sweet\"))\n# Output: \n# comma separated list of words. \n# Category: food. \n# Condition: can taste sweet"}
{"cat": "food", "slot": "smell", "value": "cheap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can smell cheap. \n        Output: ", "result": "\n            apple, bread, cheese, coffee, garlic, onion, pizza, popcorn, sushi, vanilla\n\"\"\"\n\n# Define the function\ndef find_cheap_smelling_foods(category, condition):\n    # Define a list to store the words\n    words = []\n    \n    # Loop through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word belongs to the category\n        if word.category == category:\n            # Check if the word satisfies the condition\n"}
{"cat": "food", "slot": "smell", "value": "balsamic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can smell balsamic. \n        Output: ", "result": "1. Balsamic, 2. Balsamic, 3. Balsamic, 4. Balsamic, 5. Balsamic, 6. Balsamic, 7. Balsamic, 8. Balsamic, 9. Balsamic, 10. Balsamic."}
{"cat": "food", "slot": "smell", "value": "organic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can smell organic. \n        Output: ", "result": "\n            apple, banana, cherry, cinnamon, clove, ginger, lavender, mint, orange, vanilla\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == \"food\" and condition == \"can sm"}
{"cat": "food", "slot": "smell", "value": "aromatic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can smell aromatic. \n        Output: ", "result": "\n            chocolate, vanilla, lavender, rose, jasmine, lemon, orange, cinnamon, peppermint, banana\n    \"\"\"\n    category = \"food\"\n    condition = \"can smell aromatic\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\nThis code will output:\n```\nchocolate, vanilla, lavender, rose, jasmine, lemon, orange, c"}
{"cat": "food", "slot": "smell", "value": "tasty", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can smell tasty. \n        Output: ", "result": "\n            apple, banana, chocolate, coffee, cinnamon, donut, ice cream, pizza, sushi, vanilla\n        \"\"\"\n        category = 'food'\n        condition = 'can smell tasty'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words."}
{"cat": "food", "slot": "smell", "value": "acidic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can smell acidic. \n        Output: ", "result": "1. Lemon, 2. Vinegar, 3. Orange, 4. Tomato, 5. Pickle, 6. Lemonade, 7. Pineapple, 8. Grapefruit, 9. Lime, 10. Tartar sauce.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() == condition.lower():\n            words.append(word)\n   "}
{"cat": "food", "slot": "smell", "value": "fresh", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can smell fresh. \n        Output: ", "result": "\n            apple, bread, cheese, coffee, cinnamon, cookie, egg, garlic, onion, pizza\n    \"\"\"\n    category = \"food\"\n    condition = \"can smell fresh\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition. \n        Desired output: list of words. \n        Category: food. \n"}
{"cat": "food", "slot": "smell", "value": "elegant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can smell elegant. \n        Output: ", "result": "\n        chocolate, vanilla, lavender, jasmine, rose, honeysuckle, orange blossom, ylang-ylang, patchouli, sandalwood\n    \"\"\"\n    category = \"food\"\n    elegant_smells = [\"chocolate\", \"vanilla\", \"lavender\", \"jasmine\", \"rose\", \"honeysuckle\", \"orange blossom\", \"ylang-ylang\", \"patchouli\", \"sandalwood\"]\n    \n    for smell in elegant_smells:\n        if"}
{"cat": "food", "slot": "smell", "value": "varietal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can smell varietal. \n        Output: ", "result": "\n        chocolate, vanilla, strawberry, raspberry, lavender, lemon, orange, peppermint, cinnamon, banana.\n    \"\"\"\n    category = 'food'\n    condition = 'can smell varietal'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Example usage\nprint(find_words(category='food', condition='can taste varietal'))\nprint(find_words(category='food', condition='can smell varietal'))\nprint("}
{"cat": "food", "slot": "material", "value": "wheat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be made of wheat. \n        Output: ", "result": "\n        bread, cake, cookie, dough, flour, pizza, roll, sandwich, toast, wheat\n    \"\"\"\n    food_words = [\n        \"bread\", \"cake\", \"cookie\", \"dough\", \"flour\", \"pizza\", \"roll\", \"sandwich\", \"toast\", \"wheat\"\n    ]\n    wheat_words = [word for word in food_words if \"wheat\" in word]\n    print(\", \".join(wheat_words))\n```\nExample usage:\n```"}
{"cat": "food", "slot": "consistency", "value": "liquid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be liquid. \n        Output: ", "result": "\n            milk, water, juice, soup, broth, tea, coffee, ice cream, soda, beer\n```\n\nExample 2: \nInput: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be domesticated. \n        Output: \n            cat, dog, horse, cow, chicken, pig, sheep, goat, rabbit, turtle\n```\n"}
{"cat": "food", "slot": "consistency", "value": "firm", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be firm. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grapes, kiwi, melon, orange, pear\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"firm\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef get"}
{"cat": "food", "slot": "consistency", "value": "tart", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be tart. \n        Output: ", "result": "\n            apple, cherry, lemon, lime, orange, pineapple, raspberry, strawberry, tangerine, watermelon\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"tart\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n"}
{"cat": "food", "slot": "consistency", "value": "crispy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be crispy. \n        Output: ", "result": "\n            pizza, french fries, onion rings, chicken nuggets, potato chips, tater tots, breaded mushrooms, breaded zucchini, breaded eggplant, breaded shrimp.\n    \"\"\"\n    category = 'food'\n    condition = 'can be crispy'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Example usage\nprint(get_crispy_food_words())\n```\nThe `get_crispy_fo"}
{"cat": "food", "slot": "consistency", "value": "sour", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be sour. \n        Output: ", "result": "\n            apple, cranberry, grapefruit, lemon, lime, orange, pineapple, raspberry, strawberry, tangerine\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"sour\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n        Desired output: a dictionary where the keys are words and the values are the"}
{"cat": "food", "slot": "consistency", "value": "spongy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be spongy. \n        Output: ", "result": "\n            chocolate, cake, sponge, pudding, bread, cookie, muffin, pancake, jelly, toffee \n        \"\"\"\n        category = 'food'\n        condition = 'can be spongy'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_example_1(self):\n        result = self.get_words('food', 'can be spongy')\n        self.assertEqual(result, 'chocolate, cake,"}
{"cat": "food", "slot": "consistency", "value": "rich", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be rich. \n        Output: ", "result": "\n            chocolate, cake, mousse, cheesecake, truffle, rich, decadent, indulgent, luxurious, sumptuous. \n        \"\"\"\n        category = \"food\"\n        condition = \"can be rich\"\n        words = get_words(category, condition)\n        if words:\n            print(\", \".join(words))\n        else:\n            print(\"No words found.\")\n\nif __name__ == '__main__':\n    main()\n"}
{"cat": "food", "slot": "consistency", "value": "edible", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be edible. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grape, orange, pear, plum, strawberry\n    \"\"\"\n    food_words = [\n        \"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"orange\", \"pear\", \"plum\", \"strawberry\"\n    ]\n    edible_words = [word for word in food_words if word.lower() == \"edible\"]\n    if len(edible_words) == 10:\n        return edible_words"}
{"cat": "food", "slot": "consistency", "value": "crisp", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be crisp. \n        Output: ", "result": "\n          carrot, cucumber, radish, celery, lettuce, tomato, onion, bell pepper, broccoli, cauliflower\n    \"\"\"\n    category = \"food\"\n    condition = \"can be crisp\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"food\", \"can be crisp\"))  # Output: carrot, cucumber, radish, celery, lettuce, tomato, onion, bell pepper"}
{"cat": "food", "slot": "consistency", "value": "juicy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be juicy. \n        Output: ", "result": "\n            apple, banana, cherry, juicy, lemon, orange, pear, plum, strawberry, watermelon \n        \"\"\"\n        category = 'food'\n        condition = 'can be juicy'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_fruits(self):\n        self.assertEqual(self.get_words('fruits', 'juicy'), 'apple, banana, cherry, juicy, lemon, orange, p"}
{"cat": "food", "slot": "consistency", "value": "ripe", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be ripe. \n        Output: ", "result": "\n            apple, banana, cherry, fig, grape, kiwi, mango, peach, plum, raspberry\n\"\"\"\n\nword_list = [\"apple\", \"banana\", \"cherry\", \"fig\", \"grape\", \"kiwi\", \"mango\", \"peach\", \"plum\", \"raspberry\"]\nfiltered_list = []\nfor word in word_list:\n    if \"ripe\" in word:\n        filtered_list.append(word)\n\nprint(\", \".join(filtered_list))\n```\n"}
{"cat": "food", "slot": "consistency", "value": "sparkling", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be sparkling. \n        Output: ", "result": "\n        chocolate, soda, champagne, sparkling water, iced tea, lemonade, ginger ale, \n        cola, tonic water, seltzer water.\n    \"\"\"\n    food_words = [\n        \"chocolate\", \"soda\", \"champagne\", \"sparkling water\", \"iced tea\", \"lemonade\", \n        \"ginger ale\", \"cola\", \"tonic water\", \"seltzer water\"\n    ]\n    sparkling_words = [word for word in food_words if word.endswith"}
{"cat": "food", "slot": "consistency", "value": "crunchy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be crunchy. \n        Output: ", "result": "\n            apple, bread, chips, crackers, cucumber, egg, grapes, lettuce, onion, tomato. \n        \"\"\"\n        category = \"food\"\n        condition = \"can be crunchy\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    def test_example_1(self):\n        result = self.get_words(\"food\", \"can be crunchy\")\n        self.assertEqual(result, \"apple, bread, chips, crackers, c"}
{"cat": "food", "slot": "consistency", "value": "juicy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be juicy. \n        Output: ", "result": "\n            apple, banana, cherry, juicy, lemon, orange, pear, plum, strawberry, watermelon \n        \"\"\"\n        category = 'food'\n        condition = 'can be juicy'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_fruits(self):\n        self.assertEqual(self.get_words('fruits', 'juicy'), 'apple, banana, cherry, juicy, lemon, orange, p"}
{"cat": "food", "slot": "shape", "value": "elongated", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be elongated. \n        Output: ", "result": "\n            apple, banana, cherry, date, elongate, fig, grape, kiwi, melon, orange, pear, peach, plum, strawberry, watermelon\n        \"\"\"\n        category = \"food\"\n        condition = \"can be elongated\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n# Test the function\nprint(elongated_words(\"food\", \"can be elongated\"))\n# Output: apple, banana, cherry, date,"}
{"cat": "food", "slot": "shape", "value": "long", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be long. \n        Output: ", "result": "\n        apple, banana, cherry, date, fig, grape, kiwi, mango, orange, pear\n    \"\"\"\n    words = []\n    for word in word_list:\n        if len(word) > 5:\n            words.append(word)\n    return words\n\ndef get_long_words(word_list, category, condition):\n    if category == \"food\":\n        long_words = get_long_words_in_category(word_list, condition)\n        return long_words\n    else:\n        return"}
{"cat": "food", "slot": "shape", "value": "circular", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be circular. \n        Output: ", "result": "\n        apple, banana, cherry, doughnut, egg, fig, grape, honey, ice cream, orange\n    \"\"\"\n    words = []\n    for word in words:\n        if word.lower() == \"apple\":\n            words.append(\"banana\")\n        elif word.lower() == \"banana\":\n            words.append(\"cherry\")\n        elif word.lower() == \"cherry\":\n            words.append(\"doughnut\")\n        elif word.lower() == \"doughnut\":\n            words.append(\"egg"}
{"cat": "food", "slot": "shape", "value": "round", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be round. \n        Output: ", "result": "\n          apple, banana, cherry, orange, pear, plum, round cake, round cookie, round donut, round pizza \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"round\" in word:\n            if \"food\" in word:\n                words.append(word)\n    return words\n\nif __name__ == '__main__':\n    word_list = ['apple', 'banana', 'cherry', 'orange', 'pear', 'plum', 'round cake', '"}
{"cat": "food", "slot": "shape", "value": "thin", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be thin. \n        Output: ", "result": "\n            apple, banana, carrot, celery, cucumber, grape, lemon, lime, orange, strawberry \n\"\"\"\n\nword_list = [\"apple\", \"banana\", \"carrot\", \"celery\", \"cucumber\", \"grape\", \"lemon\", \"lime\", \"orange\", \"strawberry\"]\nthin_words = [word for word in word_list if \"thin\" in word]\nthin_fruits = [word for word in thin_words if word.startswith(\"fruit\")]\n"}
{"cat": "food", "slot": "shape", "value": "conical", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be conical. \n        Output: ", "result": "\n          apple, cake, cone, croissant, doughnut, donut, muffin, pastry, pizza, waffle\n    \"\"\"\n    category = \"food\"\n    condition = \"can be conical\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"food\", \"can be conical\"))\n# Output: apple, cake, cone, croissant, doughnut, donut, muffin, pastry, pizza, waff"}
{"cat": "food", "slot": "shape", "value": "oval", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be oval. \n        Output: ", "result": "\n          apple, cake, cookie, donut, egg, gingerbread, ice cream, jellybean, muffin, pizza \n    \"\"\"\n    category = \"food\"\n    condition = \"can be oval\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"food\", \"can be oval\"))\n# Output: apple, cake, cookie, donut, egg, gingerbread, ice cream, jellybean, m"}
{"cat": "food", "slot": "shape", "value": "oval", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be oval. \n        Output: ", "result": "\n          apple, cake, cookie, donut, egg, gingerbread, ice cream, jellybean, muffin, pizza \n    \"\"\"\n    category = \"food\"\n    condition = \"can be oval\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"food\", \"can be oval\"))\n# Output: apple, cake, cookie, donut, egg, gingerbread, ice cream, jellybean, m"}
{"cat": "food", "slot": "shape", "value": "pointed", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be pointed. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grape, kiwi, melon, orange, pear\n    \"\"\"\n    food_words = [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"kiwi\", \"melon\", \"orange\", \"pear\"]\n    category = \"food\"\n    condition = \"can be pointed\"\n    filtered_words = []\n    for word in food_words:\n        if re.search(condition, word):\n            filtered_words.append(word)\n"}
{"cat": "food", "slot": "material", "value": "grape", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be made of grape. \n        Output: ", "result": "\n            apple, banana, cherry, grape, grapefruit, lemon, orange, peach, plum, strawberry\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"grape\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count"}
{"cat": "food", "slot": "user", "value": "farmer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are used by farmers. \n        Output: ", "result": "\n        apples, bananas, carrots, corn, grapes, lettuce, oranges, peas, potatoes, tomatoes.\n    \"\"\"\n    category = 'food'\n    condition = 'are used by farmers'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Test the function\nprint(get_words('food', 'are used by farmers'))\n# Output: apples, bananas, carrots, corn, grapes, lettuce, oranges, peas,"}
{"cat": "food", "slot": "user", "value": "cook", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are used by cooks. \n        Output: ", "result": "\n            apple, butter, chicken, cinnamon, egg, flour, garlic, onion, salt, sugar\n    \"\"\"\n    food_words = [\n        \"apple\",\n        \"butter\",\n        \"chicken\",\n        \"cinnamon\",\n        \"egg\",\n        \"flour\",\n        \"garlic\",\n        \"onion\",\n        \"salt\",\n        \"sugar\"\n    ]\n    cook_words = [word for word in food_words if \"cook\" in word]\n    return"}
{"cat": "food", "slot": "user", "value": "adult", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are used by adults. \n        Output: ", "result": "\n        chocolate, coffee, ice cream, pizza, soda, wine, beer, cake, cookie, sandwich \n    \"\"\"\n    food_words = [\"chocolate\", \"coffee\", \"ice cream\", \"pizza\", \"soda\", \"wine\", \"beer\", \"cake\", \"cookie\", \"sandwich\"]\n    adult_food_words = [word for word in food_words if \"adult\" in word]\n    return \", \".join(adult_food_words)\n\ndef get_"}
{"cat": "food", "slot": "user", "value": "somellier", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are used by somelliers. \n        Output: ", "result": "\n        chocolate, cream, sugar, eggs, flour, milk, butter, vanilla, whipped cream, pastry \n    \"\"\"\n    food_words = [\n        \"chocolate\", \"cream\", \"sugar\", \"eggs\", \"flour\", \"milk\", \"butter\", \"vanilla\", \"whipped cream\", \"pastry\"\n    ]\n    somelliers_words = [word for word in food_words if \"sommelier\" in word]\n    return somelliers_words\n\ndef"}
{"cat": "food", "slot": "user", "value": "wine grower", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are used by wine growers. \n        Output: ", "result": "\n            apple, barley, chardonnay, grapes, merlot, oak, pinot noir, riesling, sauvignon blanc, syrah\n\"\"\"\n\n# Define the category and condition\ncategory = \"food\"\ncondition = \"are used by wine growers\"\n\n# Split the condition into words\ncondition_words = condition.split()\n\n# Define a list to store the words\nwords = []\n\n# Loop through each word in the condition\nfor word in condition_words:\n    # Check if the word is in the text\n   "}
{"cat": "food", "slot": "accessory", "value": "barrel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with barrel. \n        Output: ", "result": "\n        apple, cider, barrel, malt, oak, whiskey, bourbon, scotch, rum, brandy\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Create an empty list to store the words\n    words = []\n    \n    # Use a for loop to iterate through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if condition(word):\n            # If the word satisfies the condition, add it to the"}
{"cat": "food", "slot": "accessory", "value": "cup", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with cup. \n        Output: ", "result": "\n            apple, cake, coffee, cookie, donut, drink, egg, fruit, juice, milk.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"cup\" in word:\n            if \"food\" in word:\n                words.append(word)\n    return words\n\nif __name__ == '__main__':\n    word_list = ['apple', 'cake', 'coffee', 'cookie', 'donut', 'drink', 'egg', 'fruit', 'juice', 'mil"}
{"cat": "food", "slot": "accessory", "value": "sausage", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with sausage. \n        Output: ", "result": "\n            apple, bread, cheese, egg, ham, onion, pizza, sausage, tomato. \n        \"\"\"\n        category = \"food\"\n        condition = \"may have to do with sausage\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"food\", \"may have to do with sausage\"))  # Output: apple, bread, cheese, egg, ham, onion, pizza, sausage, tomato\nprint("}
{"cat": "food", "slot": "accessory", "value": "meat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with meat. \n        Output: ", "result": "\n            ham, sausage, bacon, steak, chicken, pork, beef, lamb, turkey, \n            hamburger, hot dog. \n        \"\"\"\n        category = 'food'\n        condition = 'may have to do with meat'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n# Sample usage\nprint(get_words('food', 'may have to do with meat'))\n# Output: ham, sausage, bacon, steak, chicken, pork, be"}
{"cat": "food", "slot": "accessory", "value": "barbecue", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with barbecue. \n        Output: ", "result": "\n            apple, barbecue, bbq, charcoal, grill, hamburger, hotdog, ribs, steak, chicken\n        \"\"\"\n        category = 'food'\n        condition = 'may have to do with barbecue'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_with_category_and_condition(self):\n        result = self.get_words('food', 'may have to do with barbecue')\n        self.assert"}
{"cat": "food", "slot": "accessory", "value": "oven", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with oven. \n        Output: ", "result": "\n        chocolate, cake, cookie, muffin, bread, pizza, lasagna, quiche, roast, pie \n    \"\"\"\n    category = \"food\"\n    condition = \"may have to do with oven\"\n    words = []\n    for word in text.split():\n        if word.lower() in category_words[category] and \"oven\" in word.lower():\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n"}
{"cat": "food", "slot": "accessory", "value": "marmalade", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with marmalade. \n        Output: ", "result": "\n            apple, cake, jam, marmalade, orange, pie, \n            biscuit, cookie, scone, toast. \n        \"\"\"\n        category = 'food'\n        condition = 'may have to do with marmalade'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('food', 'may have to do with marmalade'))\n```\n\u8f93\u51fa\uff1a\napple, cake, jam, marmalade, orange, pie, biscuit,"}
{"cat": "food", "slot": "accessory", "value": "cheese", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with cheese. \n        Output: ", "result": "\n        cheddar, mozzarella, brie, gouda, parmesan, blue cheese, goat cheese, feta, ricotta, camembert.\n    \"\"\"\n    cheese_words = [\"cheddar\", \"mozzarella\", \"brie\", \"gouda\", \"parmesan\", \"blue cheese\", \"goat cheese\", \"feta\", \"ricotta\", \"camembert\"]\n    cheese_words = [word for word in cheese_words if \"cheese\" in word]\n    cheese_"}
{"cat": "food", "slot": "accessory", "value": "macaroni", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with macaroni. \n        Output: ", "result": "\n        pasta, macaroni, noodles, lasagna, spaghetti, ravioli, linguini, fettuccine, macaroni and cheese, macaroni salad \n    \"\"\"\n    category = 'food'\n    condition = 'may have to do with macaroni'\n    words = []\n    for word in all_words:\n        if word.lower().startswith(category.lower() + ':'):\n            if 'macaroni' in word:\n                words.append(word)\n    if words:\n"}
{"cat": "food", "slot": "accessory", "value": "bean", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with bean. \n        Output: ", "result": "\n        chickpea, garbanzo, hummus, falafel, bean, lentil, pea, soybean, tofu, edamame. \n    \"\"\"\n    category = 'food'\n    condition = 'may have to do with bean'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Test the function\nprint(find_words('food', 'may have to do with bean'))\n```\nOutput:\nchickpea, garbanzo, hummus, falafel"}
{"cat": "food", "slot": "accessory", "value": "pizza", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with pizza. \n        Output: ", "result": "\n        tomato, cheese, pepperoni, crust, sauce, mozzarella, toppings, pizza, dough, cheese pizza \n    \"\"\"\n    category = Category.objects.get(name='food')\n    condition = 'may have to do with pizza'\n    words = Word.objects.filter(category=category, condition=condition)\n    return words.distinct().order_by('name')\n\ndef get_random_word_from_category(category):\n    \"\"\"\n    Get a random word from a category"}
{"cat": "food", "slot": "accessory", "value": "extractor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with extractor. \n        Output: ", "result": "\n        apple, cake, chocolate, coffee, donut, ice cream, juice, pizza, sandwich, soda.\n    \"\"\"\n    category = \"food\"\n    condition = \"may have to do with extractor\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "food", "slot": "taste", "value": "sweet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be sweet. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grape, honey, ice cream, jam, jelly\n    \"\"\"\n    category = \"food\"\n    condition = \"can be sweet\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n```\n```\nExample:\n    Input: \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated"}
{"cat": "food", "slot": "taste", "value": "hot", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be hot. \n        Output: ", "result": "\n            chili, curry, hot sauce, jalapeno, pepper, salsa, spicy, tabasco, wasabi, zesty. \n        \"\"\"\n        category = 'food'\n        condition = 'can be hot'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('food', 'can be hot'))  # Output: chili, curry, hot sauce, jalapeno, pepper, salsa, spicy, tabasco"}
{"cat": "food", "slot": "smell", "value": "hot", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can smell hot. \n        Output: ", "result": "\n            chili, curry, garlic, hot sauce, jalapeno, onion, pepper, spicy, steak, sushi \n        \"\"\"\n        category = \"food\"\n        condition = \"can smell hot\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words."}
{"cat": "food", "slot": "smell", "value": "varietal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can smell varietal. \n        Output: ", "result": "\n        chocolate, vanilla, strawberry, raspberry, lavender, lemon, orange, peppermint, cinnamon, banana.\n    \"\"\"\n    category = 'food'\n    condition = 'can smell varietal'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Example usage\nprint(find_words(category='food', condition='can taste varietal'))\nprint(find_words(category='food', condition='can smell varietal'))\nprint("}
{"cat": "food", "slot": "accessory", "value": "bottle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with bottle. \n        Output: ", "result": "\n        chardonnay, merlot, riesling, pinot noir, champagne, sauvignon blanc, zinfandel, cabernet sauvignon, pinot grigio, moscato\n    \"\"\"\n    category = 'food'\n    condition = 'may have to do with bottle'\n    words = []\n    for word in all_words:\n        if word.category == category and word.condition == condition:\n            words.append(word.word)\n    return ', '.join(words)\n\n# Test the function\nprint("}
{"cat": "food", "slot": "accessory", "value": "butter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with butter. \n        Output: ", "result": "\n            \n        \"\"\"\n        butter_words = [\"butter\", \"butterfly\", \"buttercup\", \"butternut\", \"butterball\", \"butterfly\", \"buttercup\", \"butternut\", \"butterball\"]\n        return comma_separated_list(butter_words, category='food', condition='may have to do with butter')\n    else:\n        return \"Sorry, I don't know the answer to that question.\"\n\nprint(get_word_list(\"food\", \"may have to do with but"}
{"cat": "food", "slot": "part", "value": "stalk", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  stalk. \n        Output: ", "result": " carrot, radish, beet, turnip, potato, parsnip, rutabaga, celery, asparagus, artichoke \n    \"\"\"\n    food_words = [\"carrot\", \"radish\", \"beet\", \"turnip\", \"potato\", \"parsnip\", \"rutabaga\", \"celery\", \"asparagus\", \"artichoke\"]\n    stalk_words = [word for word in food_words if \"stalk\" in word]\n    return \", \".join(stalk_words)\n\ndef"}
{"cat": "food", "slot": "part", "value": "pip", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  pip. \n        Output: ", "result": "\n        apple, banana, chocolate, coffee, donut, egg, ice cream, orange, pizza, sandwich\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"can have pip\" in word:\n            words.append(word)\n    return words\n\ndef get_longest_word(word_list):\n    \"\"\"\n    Given a list of words, return the length of the longest word.\n    Desired output: length of the longest word.\n    Input: list of words.\n    \"\"\"\n    max"}
{"cat": "food", "slot": "part", "value": "stem", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  stem. \n        Output: ", "result": "\n        apple, banana, cherry, date, fig, grape, kiwi, mango, orange, pear\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"stem\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n    Desired output: a dictionary where the keys are words and the values are the number of vowels in each word."}
{"cat": "food", "slot": "part", "value": "core", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  core. \n        Output: ", "result": "\n        apple, cake, chocolate, coffee, donut, egg, fruit, ice cream, juice, pizza \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"core\" in word:\n            words.append(word)\n    if category == \"food\":\n        result = []\n        for word in words:\n            if \"core\" in word:\n                result.append(word)\n            elif \"food\" in word:\n                result.append(word)\n        print(\", \".join(result"}
{"cat": "food", "slot": "part", "value": "leaf", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  leaf. \n        Output: ", "result": " apple, banana, cherry, date, fig, grape, kiwi, lemon, orange, peach \n    \"\"\"\n    fruits = ['apple', 'banana', 'cherry', 'date', 'fig', 'grape', 'kiwi', 'lemon', 'orange', 'peach']\n    leaf_fruits = [fruit for fruit in fruits if 'leaf' in fruit]\n    return ', '.join(leaf_fruits)\n\nprint(get_fruits_with_leaf(category='food', condition='can have leaf"}
{"cat": "food", "slot": "part", "value": "flesh", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  flesh. \n        Output: ", "result": " apple, banana, cherry, date, fig, grape, orange, peach, plum, strawberry \n    \"\"\"\n    category = \"food\"\n    condition = \"can have flesh\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"fruit\", \"can have seeds\"))\n# Output:  apple, banana, cherry, date, fig, grape, orange, peach, plum, strawberry\nprint(get_words(\"fo"}
{"cat": "food", "slot": "part", "value": "pulp", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  pulp. \n        Output: ", "result": " apple, banana, orange, pear, mango, guava, papaya, kiwi, pineapple, pomegranate \n    \"\"\"\n    fruits = [\"apple\", \"banana\", \"orange\", \"pear\", \"mango\", \"guava\", \"papaya\", \"kiwi\", \"pineapple\", \"pomegranate\"]\n    fruits_with_pulp = [fruit for fruit in fruits if \"pulp\" in str(fruit)]\n    return \", \".join(fruits_with_pulp)\n\n#"}
{"cat": "food", "slot": "part", "value": "husk", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  husk. \n        Output: ", "result": " rice, wheat, corn, oats, barley, rye, maize, sorghum, millet, rice husk. \n    \"\"\"\n    food_words = [\"rice\", \"wheat\", \"corn\", \"oats\", \"barley\", \"rye\", \"maize\", \"sorghum\", \"millet\"]\n    valid_words = [word for word in food_words if \"husk\" in word]\n    return \", \".join(valid_words)\n\ndef get_category(word):\n    \"\"\"\n    Given a word,"}
{"cat": "food", "slot": "part", "value": "skin", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  skin. \n        Output: ", "result": " apple, banana, cherry, grape, lemon, orange, peach, plum, strawberry, watermelon \n    \"\"\"\n    fruits = ['apple', 'banana', 'cherry', 'grape', 'lemon', 'orange', 'peach', 'plum', 'strawberry', 'watermelon']\n    skin_fruits = [fruit for fruit in fruits if 'skin' in fruit]\n    return ', '.join(skin_fruits)\n\ndef get_fruits_with_"}
{"cat": "food", "slot": "part", "value": "fructose", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  fructose. \n        Output: ", "result": " apple, banana, cherry, date, fig, grape, honey, pear, plum, raspberry \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"fructose\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef"}
{"cat": "food", "slot": "part", "value": "glucose", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  glucose. \n        Output: ", "result": " banana, bread, cake, cookie, donut, fruit, jelly, juice, pasta, rice. \n    \"\"\"\n    category = \"food\"\n    condition = \"can have glucose\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition. \n        Desired output: list of words. \n        Category: food. \n"}
{"cat": "food", "slot": "part", "value": "orange peel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  orange peel. \n        Output: ", "result": " apple, banana, carrot, orange, orange peel, pear, peach, plum, raspberry, strawberry \n    \"\"\"\n    fruits = [\"apple\", \"banana\", \"carrot\", \"orange\", \"pear\", \"peach\", \"plum\", \"raspberry\", \"strawberry\"]\n    fruits_with_peel = [fruit for fruit in fruits if \"peel\" in fruit]\n    fruits_with_orange_peel = [fruit for fruit in fruits_with_peel"}
{"cat": "food", "slot": "part", "value": "spinach", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  spinach. \n        Output: ", "result": " spinach, broccoli, kale, lettuce, mustard, onion, pea, radish, spinach, turnip \n    \"\"\"\n    category = \"food\"\n    condition = \"can have spinach\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as f:\n        for line in f:\n            line = line.strip()\n            if category in line and condition in"}
{"cat": "food", "slot": "part", "value": "curd", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  curd. \n        Output: ", "result": " paneer, curd, yogurt, cheese, butter, ghee, cream, lassi, raita, doodh.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"curd\" in word:\n            words.append(word)\n    return words\n\nif __name__ == '__main__':\n    word_list = ['paneer', 'curd', 'yogurt', 'cheese', 'butter', 'ghee', 'cream', 'lassi',"}
{"cat": "food", "slot": "part", "value": "sweet corn plant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  sweet corn plant. \n        Output: ", "result": "\n            apple, banana, carrot, cucumber, eggplant, grapes, lettuce, onion, pea, sweet corn\n        \"\"\"\n        category = \"food\"\n        condition = \"can have sweet corn plant\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"food\", \"can have apple\"))\nprint(get_words(\"food\", \"can have banana\"))\nprint(get_words(\"food\", \"can have"}
{"cat": "food", "slot": "part", "value": "onion", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  onion. \n        Output: ", "result": "\n            apple, banana, carrot, cucumber, eggplant, onion, pear, potato, tomato, zucchini \n        \"\"\"\n        category = \"food\"\n        condition = \"can have onion\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    def test_get_words_with_onion(self):\n        self.assertEqual(get_words(\"food\", \"can have onion\"), \"apple, banana, carrot, cucumber, eggplant"}
{"cat": "food", "slot": "part", "value": "orange rind", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  orange rind. \n        Output: ", "result": " orange, rind, juice, zest, peel, pulp, segments, fruit, citrus."}
{"cat": "food", "slot": "part", "value": "chou", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  chou. \n        Output: ", "result": "\n            chocolate, cake, cheese, chou, chicken, coffee, cookie, croissant, cream, cake.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"chou\" in word:\n            words.append(word)\n    return words\n\ndef get_longest_word(word_list):\n    \"\"\"\n    Given a list of words, return the length of the longest word.\n    Desired output: length of the longest word.\n    \"\"\"\n    max_length = 0\n   "}
{"cat": "food", "slot": "part", "value": "cheese rind", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  cheese rind. \n        Output: ", "result": " pizza, cheese, rind, bread, tomato, sauce, topping, dough, cheese rind. \n        \"\"\"\n        category = 'food'\n        condition = 'can have cheese rind'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_category_and_condition(self):\n        self.assertEqual(self.get_words('food', 'can have cheese rind'), 'pizza, cheese, rind, bread, tomato, sauce"}
{"cat": "food", "slot": "part", "value": "sugar corn", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  sugar corn. \n        Output: ", "result": " sugar, corn \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"sugar\" in word and \"corn\" in word:\n            words.append(word)\n    return \", \".join(words)\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_consonants(word):\n    conson"}
{"cat": "food", "slot": "part", "value": "Zea saccharata", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  Zea saccharata. \n        Output: ", "result": "\n```\nbread, cake, cookie, donut, muffin, pasta, pizza, rice, sugar, Zea saccharata\n```\nExplanation: The words that belong to the category `food` and can have `Zea saccharata` are `bread`, `cake`, `cookie`, `donut`, `muffin`, `pasta`, `pizza`, `rice`, `sugar`, and `Zea saccharata`.\n```"}
{"cat": "food", "slot": "part", "value": "breadstuff", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  breadstuff. \n        Output: ", "result": "\n          apple, bread, butter, cake, cheese, egg, fish, milk, pizza, sandwich \n    \"\"\"\n    category = \"food\"\n    condition = \"can have breadstuff\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"food\", \"can have breadstuff\"))\n```\nOutput:\n```\napple, bread, butter, cake, cheese, egg, fish, milk, pizza, sandwich\n```"}
{"cat": "food", "slot": "part", "value": "jacket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  jacket. \n        Output: ", "result": " apple, cake, chocolate, coffee, donut, egg, ice cream, juice, pizza, sandwich \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"jacket\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef"}
{"cat": "food", "slot": "part", "value": "tomato", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  tomato. \n        Output: ", "result": "\n            apple, banana, carrot, cucumber, eggplant, garlic, onion, potato, tomato, zucchini. \n        \"\"\"\n        category = 'food'\n        condition = 'can have tomato'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def example_2():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. "}
{"cat": "food", "slot": "part", "value": "Zea mays rugosa", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  Zea mays rugosa. \n        Output: ", "result": " corn, maize, Zea mays rugosa. \n    \"\"\"\n    words = []\n    for word in words:\n        if \"Zea mays rugosa\" in word:\n            words.append(word)\n    return \", \".join(words)\n\nprint(get_corn_words([\"corn\", \"maize\", \"Zea mays rugosa\", \"corn on the cob\", \"corn flakes\", \"corn chips\", \"corn\", \"maize\", \"Zea mays rugosa\", \"corn\", \"ma"}
{"cat": "food", "slot": "part", "value": "cabbage", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  cabbage. \n        Output: ", "result": " cabbage, broccoli, cauliflower, brussels sprouts, kale, collard greens, bok choy, kohlrabi, mustard greens, turnip greens. \n        \"\"\"\n        category = 'food'\n        condition = 'can have cabbage'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_with_cabbage(self):\n        self.assertEqual(get_words('food', 'can have cabbage'), '"}
{"cat": "food", "slot": "part", "value": "tannin", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  tannin. \n        Output: ", "result": " wine, tea, grape, berries, oak, chocolate, coffee, grapes, tea leaves, tannins. \n    \"\"\"\n    category = \"food\"\n    condition = \"can have tannin\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n```\nExample:\n```\nrun_example(\"Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n"}
{"cat": "food", "slot": "part", "value": "staff of life", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  staff of life. \n        Output: ", "result": " bread, cake, cheese, chicken, coffee, egg, fish, fruit, milk, pizza \n    \"\"\"\n    category = \"food\"\n    condition = \"can have staff of life\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "food", "slot": "part", "value": "cuke", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  cuke. \n        Output: ", "result": "\n            apple, banana, cherry, cupcake, donut, \n            eggplant, fig, grape, honeydew, kiwi. \n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"cup\" in word and \"ke\" in word:\n                words.append(word)\n        return words\n\nprint(find_food_words(\"apple, banana, cherry, cupcake, donut, eggplant, fig, grape, honeydew, kiwi\"))\n# Output: "}
{"cat": "food", "slot": "part", "value": "shell", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  shell. \n        Output: ", "result": "\n          apple, banana, cherry, coconut, date, fig, grape, olive, pecan, walnut \n    \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"shell\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n        Desired output: a list of numbers, where the i-th number is the number of vow"}
{"cat": "food", "slot": "part", "value": "cucumber", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  cucumber. \n        Output: ", "result": " cucumber, tomato, lettuce, onion, carrot, potato, eggplant, bell pepper, broccoli, cauliflower. \n        \"\"\"\n        category = Category.objects.get(name='food')\n        words = Word.objects.filter(category=category)\n        cucumber_word = Word.objects.get(name='cucumber')\n        words = [word.name for word in words if word.name != cucumber_word.name]\n        if cucumber_word.name in words:\n           "}
{"cat": "food", "slot": "part", "value": "isothiocyanate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  isothiocyanate. \n        Output: ", "result": "\n        asparagus, broccoli, brussels sprouts, cauliflower, eggplant, garlic, onion, peppers, soy sauce, wasabi.\n    \"\"\"\n    food_words = [\"asparagus\", \"broccoli\", \"brussels sprouts\", \"cauliflower\", \"eggplant\", \"garlic\", \"onion\", \"peppers\", \"soy sauce\", \"wasabi\"]\n    isothiocyanate_words = [word for word in food_words if \"isothiocyan"}
{"cat": "food", "slot": "part", "value": "dough", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  dough. \n        Output: ", "result": " bread, cake, cookie, dough, pastry, pizza, roll, cookie, cake, bread \n    \"\"\"\n    category = 'food'\n    condition = 'can have dough'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Test the function with sample inputs\nprint(get_words('food', 'can have meat'))\nprint(get_words('food', 'can have cheese'))\nprint(get_words('food', 'can have fruit'))\nprint(get_words"}
{"cat": "food", "slot": "product", "value": "sauce", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make sauce. \n        Output: ", "result": "\n          - tomato \n          - ketchup \n          - mustard \n          - mayonnaise \n          - barbecue \n          - teriyaki \n          - hoisin \n          - sriracha \n          - garlic \n          - soy sauce \n    \"\"\"\n    category = \"food\"\n    condition = \"can be used to make sauce\"\n    words = [\n        \"tomato\",\n        \"ketchup\",\n        \"mustard\",\n        \"mayonnaise\",\n        \"bar"}
{"cat": "food", "slot": "product", "value": "cake", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make cake. \n        Output: ", "result": "\n            flour, sugar, eggs, butter, baking powder, baking soda, salt, vanilla extract, milk, chocolate chips \n        \"\"\"\n        category = Category.objects.get(name='food')\n        condition = Condition.objects.get(name='can be used to make cake')\n        words = Word.objects.filter(category=category, condition=condition)\n        return ', '.join(words)\n"}
{"cat": "food", "slot": "product", "value": "syrup", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make syrup. \n        Output: ", "result": "1. Honey, 2. Maple Syrup, 3. Sugar, 4. Syrup, 5. Molasses, 6. Golden Syrup, 7. Treacle, 8. Pancake Syrup, 9. Aunt Jemima Syrup, 10. Grade B Maple Syrup.\n    \"\"\"\n    category = \"food\"\n    condition = \"can be used to make syrup\"\n    words = []\n    for word in synonyms:\n        if any(word in syn for syn in synonym"}
{"cat": "food", "slot": "product", "value": "compote", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make compote. \n        Output: ", "result": "\n            apple, blueberry, cherry, cranberry, currant, elderberry, grape, \n            huckleberry, loganberry, raspberry, strawberry. \n        \"\"\"\n        category = 'food'\n        condition = 'can be used to make compote'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n# Sample usage\ncompote_words = get_words('food', 'can be used to make compote')\nprint(compote_words)\n```\nOutput"}
{"cat": "food", "slot": "product", "value": "juice", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make juice. \n        Output: ", "result": "\n            apple, orange, grape, pear, banana, lemon, lime, grapefruit, cranberry, pomegranate \n        \"\"\"\n        category = 'food'\n        condition = 'can be used to make juice'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('food', 'can be used to make juice'))  # Output: apple, orange, grape, pear, banana, lemon, lime, grapefruit"}
{"cat": "food", "slot": "product", "value": "puree", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make puree. \n        Output: ", "result": "\n            apple, banana, carrot, sweet potato, pear, avocado, squash, pea, butternut squash, puree \n        \"\"\"\n        category = \"food\"\n        condition = \"can be used to make puree\"\n        words = [\n            \"apple\",\n            \"banana\",\n            \"carrot\",\n            \"sweet potato\",\n            \"pear\",\n            \"avocado\",\n            \"squash\",\n            \"pea\",\n            \"butternut squash\",\n            \"p"}
{"cat": "food", "slot": "product", "value": "cornflake", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make cornflake. \n        Output: ", "result": "\n          corn, milk, sugar, flour, baking powder, butter, eggs, vanilla extract, salt, cereal \n    \"\"\"\n    category = 'food'\n    condition = 'can be used to make cornflake'\n    words = get_words(category, condition)\n    print(', '.join(words))\n\nif __name__ == '__main__':\n    main()\n```\n```"}
{"cat": "food", "slot": "product", "value": "biofuel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make biofuel. \n        Output: ", "result": "\n            1. Corn\n            2. Soybeans\n            3. Sugar cane\n            4. Palm oil\n            5. Rapeseed\n            6. Sunflower\n            7. Wheat\n            8. Barley\n            9. Rice\n            10. Sugar beet\n        \"\"\"\n        food_words = [\"corn\", \"soybeans\", \"sugar cane\", \"palm oil\", \"rapeseed\", \"sunflower\", \"wheat\", \"barley\", \"rice\", \"sugar beet\"]\n"}
{"cat": "food", "slot": "product", "value": "bioethanol", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make bioethanol. \n        Output: ", "result": "\n            1. Corn\n            2. Sugarcane\n            3. Wheat\n            4. Barley\n            5. Rice\n            6. Potatoes\n            7. Maize\n            8. Sorghum\n            9. Millet\n            10. Soybeans\n        \"\"\"\n        food_words = [\"corn\", \"sugarcane\", \"wheat\", \"barley\", \"rice\", \"potatoes\", \"maize\", \"sorghum\", \"millet\", \"soybeans\"]\n        bioethanol_words = [word for"}
{"cat": "food", "slot": "product", "value": "whiskey", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make whiskey. \n        Output: ", "result": "\n            apple, barley, corn, honey, oak, rye, sugar, water, wheat, whiskey\n\"\"\"\nprint(\"Comma separated list of 10 words that belong to the category 'food' and satisfy the condition 'can be used to make whiskey':\")\n\nfood_words = [\n\"apple\",\n\"barley\",\n\"corn\",\n\"honey\",\n\"oak\",\n\"rye\",\n\"sugar\",\n\"water\",\n\"wheat\",\n\"whiskey\"\n]\n\n"}
{"cat": "food", "slot": "product", "value": "biodiesel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make biodiesel. \n        Output: ", "result": "\n        methanol, ethanol, soybean oil, palm oil, rapeseed oil, mustard oil, sunflower oil, canola oil, castor oil, coconut oil\n    \"\"\"\n    category = \"food\"\n    condition = \"can be used to make biodiesel\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "food", "slot": "product", "value": "wine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make wine. \n        Output: ", "result": "\n            apple, grape, berry, juice, ferment, distill, barrel, vintage, harvest, crush\n    \"\"\"\n    food_words = [\"apple\", \"grape\", \"berry\", \"juice\", \"wine\", \"ferment\", \"distill\", \"barrel\", \"vintage\", \"harvest\", \"crush\"]\n    for word in food_words:\n        if \"can be used to make\" in word:\n            if \"wine\" in word:\n                print(word)\n                break\n    else:"}
{"cat": "food", "slot": "product", "value": "cob", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make cob. \n        Output: ", "result": "\n        bread, flour, milk, eggs, sugar, butter, salt, baking powder, baking soda, yeast.\n    \"\"\"\n    food_words = [\n        \"bread\",\n        \"flour\",\n        \"milk\",\n        \"eggs\",\n        \"sugar\",\n        \"butter\",\n        \"salt\",\n        \"baking powder\",\n        \"baking soda\",\n        \"yeast\"\n    ]\n\n    category = \"food\"\n    condition = \"can be used to make"}
{"cat": "food", "slot": "product", "value": "gluten", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make gluten. \n        Output: ", "result": "\n            1. Barley\n            2. Rice\n            3. Wheat\n            4. Oats\n            5. Corn\n            6. Rye\n            7. Malt\n            8. Triticale\n            9. Buckwheat\n            10. Quinoa\n        \"\"\"\n        words = [\n            \"Barley\",\n            \"Rice\",\n            \"Wheat\",\n            \"Oats\",\n            \"Corn\",\n            \"Rye\",\n            \"Malt\",\n            \"Triticale\",\n            \"Buckw"}
{"cat": "food", "slot": "product", "value": "chowder", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make chowder. \n        Output: ", "result": "\n            clam, potato, onion, celery, salt, pepper, broth, milk, bacon, garlic \n\"\"\"\n\nword_list = [\"clam\", \"potato\", \"onion\", \"celery\", \"salt\", \"pepper\", \"broth\", \"milk\", \"bacon\", \"garlic\"]\nfiltered_list = []\nfor word in word_list:\n    if \"can be used to make\" in word:\n        filtered_list.append(word)\n\nprint(\", \".join(filtered_list))"}
{"cat": "food", "slot": "product", "value": "pie", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make pie. \n        Output: ", "result": "\n            apple, cherry, blueberry, blackberry, strawberry, raspberry, plum, peach, pear, apricot\n        \"\"\"\n        category = 'food'\n        condition = 'can be used to make pie'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('food', 'can be used to make pie'))  # Output: apple, cherry, blueberry, blackberry, strawberry, raspberry, plum, peach, pear"}
{"cat": "food", "slot": "product", "value": "tortilla", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make tortilla. \n        Output: ", "result": "\n            avocado, flour, eggs, water, salt, vegetable oil, sugar, baking powder, cornmeal, yeast\n    \"\"\"\n    food_words = [\"avocado\", \"flour\", \"eggs\", \"water\", \"salt\", \"vegetable oil\", \"sugar\", \"baking powder\", \"cornmeal\", \"yeast\"]\n    food_words = [word for word in food_words if \"tortilla\" in word]\n    return \", \".join(food_words)\n\ndef get_"}
{"cat": "food", "slot": "product", "value": "pancake", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make pancake. \n        Output: ", "result": "\n        sugar, flour, eggs, milk, butter, baking powder, salt, lemon juice, maple syrup, pancake mix.\n    \"\"\"\n    food_words = [\"sugar\", \"flour\", \"eggs\", \"milk\", \"butter\", \"baking powder\", \"salt\", \"lemon juice\", \"maple syrup\", \"pancake mix\"]\n    for word in food_words:\n        if \"can be used to make\" in word and \"pancake\" in word:\n            print("}
{"cat": "food", "slot": "product", "value": "crumb", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make crumb. \n        Output: ", "result": "\n            bread, flour, sugar, butter, eggs, milk, yeast, salt, water, crumb\n\"\"\"\n\n# Define the function\ndef get_food_ingredients(category, condition):\n    # Create an empty list to store the ingredients\n    ingredients = []\n    \n    # Loop through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if condition(word):\n            # If it does, add it to the list of ingredients"}
{"cat": "food", "slot": "colorPattern", "value": "yellow", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be yellow. \n        Output: ", "result": "\n            apple, banana, corn, lemon, mango, orange, papaya, pineapple, yellow, zucchini \n\"\"\"\n\nword_list = [\"apple\", \"banana\", \"corn\", \"lemon\", \"mango\", \"orange\", \"papaya\", \"pineapple\", \"yellow\", \"zucchini\"]\nfiltered_word_list = []\nfor word in word_list:\n    if \"yellow\" in word:\n        filtered_word_list.append(word)\n\nprint(\", \".join(filtered"}
{"cat": "food", "slot": "colorPattern", "value": "yellow", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be yellow. \n        Output: ", "result": "\n            apple, banana, corn, lemon, mango, orange, papaya, pineapple, yellow, zucchini \n\"\"\"\n\nword_list = [\"apple\", \"banana\", \"corn\", \"lemon\", \"mango\", \"orange\", \"papaya\", \"pineapple\", \"yellow\", \"zucchini\"]\nfiltered_word_list = []\nfor word in word_list:\n    if \"yellow\" in word:\n        filtered_word_list.append(word)\n\nprint(\", \".join(filtered"}
{"cat": "food", "slot": "colorPattern", "value": "red", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be red. \n        Output: ", "result": "\n            apple, banana, cherry, cranberry, dragon fruit, eggplant, fig, grape, kiwi, mango, papaya, pear, plum, raspberry, strawberry, watermelon, blueberry, blackberry, boysenberry, currant, gooseberry, huckleberry, loganberry, mulberry, olive, passion fruit, pomegranate, quince, raspberry, red currant, red raspberry, red grape, red plum, red strawberry, red watermelon"}
{"cat": "food", "slot": "colorPattern", "value": "yellowish", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be yellowish. \n        Output: ", "result": "\n            banana, butter, cheese, egg, lemon, mustard, papaya, pineapple, saffron, yolk \n\"\"\"\n\nword_list = [\"apple\", \"banana\", \"butter\", \"cheese\", \"egg\", \"lemon\", \"mustard\", \"papaya\", \"pineapple\", \"saffron\", \"yolk\"]\nyellowish_words = []\nfor word in word_list:\n    if \"yellowish\" in word:\n        yellowish_words.append(word)\n\nprint(\", \"."}
{"cat": "food", "slot": "colorPattern", "value": "yellowish", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be yellowish. \n        Output: ", "result": "\n            banana, butter, cheese, egg, lemon, mustard, papaya, pineapple, saffron, yolk \n\"\"\"\n\nword_list = [\"apple\", \"banana\", \"butter\", \"cheese\", \"egg\", \"lemon\", \"mustard\", \"papaya\", \"pineapple\", \"saffron\", \"yolk\"]\nyellowish_words = []\nfor word in word_list:\n    if \"yellowish\" in word:\n        yellowish_words.append(word)\n\nprint(\", \"."}
{"cat": "food", "slot": "colorPattern", "value": "orange", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be orange. \n        Output: ", "result": "\n            apple, banana, carrot, orange, orange juice, pear, pomegranate, raspberry, strawberry, tangerine\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"orange\" in word:\n            words.append(word)\n    if len(words) == 0:\n        print(\"No words found that can be orange.\")\n    else:\n        print(\", \".join(words))\n```\nExample:\n```\nword_list = [\"apple\", \"banana\", \"carrot"}
{"cat": "food", "slot": "colorPattern", "value": "green", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be green. \n        Output: ", "result": "\n            apple, broccoli, celery, cucumber, eggplant, green beans, kale, lettuce, spinach, zucchini. \n        \"\"\"\n        category = \"food\"\n        condition = \"can be green\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    @staticmethod\n    def example_2():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words."}
{"cat": "food", "slot": "colorPattern", "value": "orange", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be orange. \n        Output: ", "result": "\n            apple, banana, carrot, orange, orange juice, pear, pomegranate, raspberry, strawberry, tangerine\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"orange\" in word:\n            words.append(word)\n    if len(words) == 0:\n        print(\"No words found that can be orange.\")\n    else:\n        print(\", \".join(words))\n```\nExample:\n```\nword_list = [\"apple\", \"banana\", \"carrot"}
{"cat": "food", "slot": "colorPattern", "value": "brown", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be brown. \n        Output: ", "result": "\n            apple, banana, chocolate, cinnamon, coffee, eggplant, fig, grape, olive, pear\n    \"\"\"\n    brown_words = [\n        \"apple\", \"banana\", \"chocolate\", \"cinnamon\", \"coffee\", \"eggplant\", \"fig\", \"grape\", \"olive\", \"pear\"\n    ]\n    brown_words = [word for word in brown_words if word.lower() == \"can be brown\"]\n    return \", \".join(brown_words)\n\n"}
{"cat": "food", "slot": "colorPattern", "value": "brown", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be brown. \n        Output: ", "result": "\n            apple, banana, chocolate, cinnamon, coffee, eggplant, fig, grape, olive, pear\n    \"\"\"\n    brown_words = [\n        \"apple\", \"banana\", \"chocolate\", \"cinnamon\", \"coffee\", \"eggplant\", \"fig\", \"grape\", \"olive\", \"pear\"\n    ]\n    brown_words = [word for word in brown_words if word.lower() == \"can be brown\"]\n    return \", \".join(brown_words)\n\n"}
{"cat": "food", "slot": "colorPattern", "value": "white", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be white. \n        Output: ", "result": "\n            apple, banana, cheese, chicken, cucumber, egg, grapes, ice cream, milk, yogurt \n\"\"\"\n\nword_list = [\"apple\", \"banana\", \"cheese\", \"chicken\", \"cucumber\", \"egg\", \"grapes\", \"ice cream\", \"milk\", \"yogurt\"]\nfiltered_list = []\nfor word in word_list:\n    if \"white\" in word:\n        filtered_list.append(word)\n\nprint(\", \".join(filtered"}
{"cat": "food", "slot": "colorPattern", "value": "white", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be white. \n        Output: ", "result": "\n            apple, banana, cheese, chicken, cucumber, egg, grapes, ice cream, milk, yogurt \n\"\"\"\n\nword_list = [\"apple\", \"banana\", \"cheese\", \"chicken\", \"cucumber\", \"egg\", \"grapes\", \"ice cream\", \"milk\", \"yogurt\"]\nfiltered_list = []\nfor word in word_list:\n    if \"white\" in word:\n        filtered_list.append(word)\n\nprint(\", \".join(filtered"}
{"cat": "food", "slot": "colorPattern", "value": "green", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be green. \n        Output: ", "result": "\n            apple, broccoli, celery, cucumber, eggplant, green beans, kale, lettuce, spinach, zucchini. \n        \"\"\"\n        category = \"food\"\n        condition = \"can be green\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    @staticmethod\n    def example_2():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words."}
{"cat": "food", "slot": "colorPattern", "value": "red", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be red. \n        Output: ", "result": "\n            apple, banana, cherry, cranberry, dragon fruit, eggplant, fig, grape, kiwi, mango, papaya, pear, plum, raspberry, strawberry, watermelon, blueberry, blackberry, boysenberry, currant, gooseberry, huckleberry, loganberry, mulberry, olive, passion fruit, pomegranate, quince, raspberry, red currant, red raspberry, red grape, red plum, red strawberry, red watermelon"}
{"cat": "food", "slot": "colorPattern", "value": "rose", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be rose. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grape, honey, jam, orange, raspberry\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"rose\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_con"}
{"cat": "food", "slot": "colorPattern", "value": "pink", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be pink. \n        Output: ", "result": "\n          apple, banana, cherry, grape, lemon, orange, pear, plum, raspberry, strawberry\n    \"\"\"\n    category = \"food\"\n    condition = \"can be pink\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "food", "slot": "colorPattern", "value": "pink", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be pink. \n        Output: ", "result": "\n          apple, banana, cherry, grape, lemon, orange, pear, plum, raspberry, strawberry\n    \"\"\"\n    category = \"food\"\n    condition = \"can be pink\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "food", "slot": "colorPattern", "value": "glossy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be glossy. \n        Output: ", "result": "\n        chocolate, glaze, glossy, icing, luster, shine, sheen, varnish, wax, polish\n    \"\"\"\n    food_words = [\"chocolate\", \"glaze\", \"icing\", \"luster\", \"shine\", \"sheen\", \"varnish\", \"wax\", \"polish\"]\n    glossy_words = [word for word in food_words if \"glossy\" in word]\n    return \", \".join(glossy_words)\n\nprint(get_glossy"}
{"cat": "food", "slot": "colorPattern", "value": "shiny", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be shiny. \n        Output: ", "result": "\n          apple, banana, cherry, diamond, emerald, gold, jewel, pearl, ruby, sapphire\n    \"\"\"\n    category = \"food\"\n    condition = \"can be shiny\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "food", "slot": "place", "value": "supermarket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in supermarkets. \n        Output: ", "result": "\n        apple, banana, bread, cheese, cereal, milk, orange, pasta, rice, sugar\n    \"\"\"\n    food_words = [\n        \"apple\", \"banana\", \"bread\", \"cheese\", \"cereal\", \"milk\", \"orange\", \n        \"pasta\", \"rice\", \"sugar\"\n    ]\n    supermarket_words = [\n        \"apple\", \"banana\", \"bread\", \"cheese\", \"cereal\", \"milk\", \"orange\", \n        \"pasta"}
{"cat": "food", "slot": "place", "value": "garden", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in gardens. \n        Output: ", "result": "\n        beet, carrot, cucumber, eggplant, lettuce, onion, pea, radish, tomato, zucchini \n    \"\"\"\n    category = \"food\"\n    condition = \"can be found or used in gardens\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\nprint(get_words(\"food\", \"can be found or used in gardens\"))  # Output: beet, carrot, cucumber, eggplant, lettuce, onion, pea,"}
{"cat": "food", "slot": "place", "value": "USA", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in USAs. \n        Output: ", "result": "\n        apple, cake, pizza, hamburger, ice cream, hot dog, sandwich, french fries, soda, milkshake.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"usa\" in word:\n            if \"can\" in word or \"found\" in word or \"use\" in word:\n                words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n   "}
{"cat": "food", "slot": "place", "value": "France", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in Frances. \n        Output: ", "result": "\n        chocolate, croissant, cr\u00e8me br\u00fbl\u00e9e, \u00e9clair, g\u00e2teau, macaroon, madeleine, muffin, pain au chocolat, tarte Tatin \n    \"\"\"\n    category = 'food'\n    condition = 'can be found or used in Frances'\n    words = []\n    for word in all_words:\n        if word.lower() in frances_words:\n            words.append(word)\n    if words:\n        print(', '.join(words))\n    else:\n        print(\"No"}
{"cat": "food", "slot": "place", "value": "restaurant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in restaurants. \n        Output: ", "result": "\n        chips, salsa, guacamole, enchilada, burrito, taco, quesadilla, margarita, nachos, fajita\n```\n\n```"}
{"cat": "food", "slot": "place", "value": "underground", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in undergrounds. \n        Output: ", "result": "\n            1. Cave\n            2. Mine\n            3. Subway\n            4. Basement\n            5. Bunker\n            6. Tunnel\n            7. Sewer\n            8. Underground\n            9. Cellar\n            10. Catacomb\n        \"\"\"\n        words = [\n            \"Cave\",\n            \"Mine\",\n            \"Subway\",\n            \"Basement\",\n            \"Bunker\",\n            \"Tunnel\",\n            \"Sewer\",\n            \"Underground\",\n            \"Cellar\",\n            \"Cata"}
{"cat": "food", "slot": "place", "value": "field", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in fields. \n        Output: ", "result": "\n        apple, bread, cheese, corn, egg, field, grain, milk, rice, wheat\n    \"\"\"\n    food_words = [\n        \"apple\",\n        \"bread\",\n        \"cheese\",\n        \"corn\",\n        \"egg\",\n        \"field\",\n        \"grain\",\n        \"milk\",\n        \"rice\",\n        \"wheat\"\n    ]\n    category = \"food\"\n    condition = \"can be found or used in fields\"\n    result = [word for word in food_words"}
{"cat": "food", "slot": "place", "value": "Britain", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in Britains. \n        Output: ", "result": "\n        bread, butter, cheese, jam, milk, sugar, tea, toast, eggs\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"britain\" in word:\n            if \"found\" in word or \"used\" in word:\n                if \"in\" in word:\n                    words.append(word)\n    return words\n\nif __name__ == '__main__':\n    word_list = ['bread', 'butter', 'cheese', 'jam', 'milk', 'sugar"}
{"cat": "food", "slot": "place", "value": "grocery", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in groceries. \n        Output: ", "result": "\n        apple, bread, cheese, cereal, eggs, fruit, milk, pasta, rice, sugar\n    \"\"\"\n    food_words = [\n        \"apple\",\n        \"bread\",\n        \"cheese\",\n        \"cereal\",\n        \"eggs\",\n        \"fruit\",\n        \"milk\",\n        \"pasta\",\n        \"rice\",\n        \"sugar\"\n    ]\n    grocery_words = [word for word in food_words if \"grocery\" in word]\n    return \", \"."}
{"cat": "food", "slot": "place", "value": "plantation", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in plantations. \n        Output: ", "result": "\n            1. Orange\n            2. Lemon\n            3. Grape\n            4. Apple\n            5. Banana\n            6. Pineapple\n            7. Mango\n            8. Papaya\n            9. Avocado\n            10. Cucumber\n        \"\"\"\n        category = \"food\"\n        condition = \"can be found or used in plantations\"\n        words = [\n            \"Orange\",\n            \"Lemon\",\n            \"Grape\",\n            \"Apple\",\n            \"Banana\",\n            \"P"}
{"cat": "food", "slot": "place", "value": "bar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in bars. \n        Output: ", "result": "\n        chocolate, martini, cosmopolitan, mojito, margarita, whiskey, scotch, bourbon, gin, vodka.\n    \"\"\"\n    food_words = [\"chocolate\", \"whiskey\", \"scotch\", \"bourbon\", \"gin\", \"vodka\"]\n    bar_words = [\"martini\", \"cosmopolitan\", \"mojito\", \"margarita\"]\n    result = set(food_words).intersection(set(bar_words))\n    return \", \".join("}
{"cat": "food", "slot": "place", "value": "vineyard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in vineyards. \n        Output: ", "result": "\n        wine, grape, vine, vineyard, harvest, crush, ferment, barrel, oak, tannins\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in text:\n        if word.lower() in category.lower() and word.lower() in condition.lower():\n            words.append(word.lower())\n    print(\", \".join(words))\n```\nExample:\n```\npython find_words.py food can be found or used"}
{"cat": "food", "slot": "place", "value": "tree", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in trees. \n        Output: ", "result": "\n        apple, banana, cherry, date, fig, grape, olive, pear, plum, walnut \n    \"\"\"\n    tree_words = [\n        \"apple\",\n        \"banana\",\n        \"cherry\",\n        \"date\",\n        \"fig\",\n        \"grape\",\n        \"olive\",\n        \"pear\",\n        \"plum\",\n        \"walnut\"\n    ]\n    tree_words = [word for word in tree_words if \"tree\" in word]\n    return tree_words\n\n"}
{"cat": "food", "slot": "place", "value": "shop", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in shops. \n        Output: ", "result": "\n        chocolate, cookie, cake, ice cream, bread, pasta, pizza, candy, soda, juice.\n    \"\"\"\n    category = Category.objects.get(name='food')\n    condition = 'can be found or used in shops'\n    words = Word.objects.filter(category=category, condition=condition).values_list('word', flat=True).distinct()\n    return ', '.join(words)\n\ndef get_random_word_from_category(category):\n    \"\"\"\n    Get a random word"}
{"cat": "food", "slot": "place", "value": "store", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in stores. \n        Output: ", "result": "\n        chocolate, cookie, cake, ice cream, bread, pasta, pizza, candy, soda, juice\n\"\"\"\n\nword_list = []\nfor word in words:\n    if \"store\" in word:\n        if \"can\" in word:\n            if \"found\" in word or \"used\" in word:\n                word_list.append(word)\n        else:\n            word_list.append(word)\n\nprint(\", \".join(word_list))\n"}
{"cat": "food", "slot": "place", "value": "bakery", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in bakeries. \n        Output: ", "result": "\n        bread, cake, flour, sugar, butter, eggs, milk, yeast, vanilla, chocolate \n    \"\"\"\n    category = \"food\"\n    condition = \"can be found or used in bakeries\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of 10 words that belong to that category.\n        Desired output: comma separated list of words. \n        Category"}
{"cat": "food", "slot": "part", "value": "seed", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  seed. \n        Output: ", "result": "\n          apple, banana, cherry, date, fig, grape, melon, orange, pear, seedless\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"seed\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_con"}
{"cat": "food", "slot": "user", "value": "fruiterer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are used by fruiterers. \n        Output: ", "result": "\n        apple, banana, cherry, date, fig, grape, kiwi, melon, orange, pear\n    \"\"\"\n    fruits = [\n        \"apple\",\n        \"banana\",\n        \"cherry\",\n        \"date\",\n        \"fig\",\n        \"grape\",\n        \"kiwi\",\n        \"melon\",\n        \"orange\",\n        \"pear\"\n    ]\n    fruits_used_by_fruiterers = [word for word in fruits if \"fruiterer\" in word]\n"}
{"cat": "food", "slot": "user", "value": "greengrocer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are used by greengrocers. \n        Output: ", "result": "\n            apple, banana, carrot, celery, grapes, lettuce, onion, peach, pear, plum\n\"\"\"\n\nword_list = ['apple', 'banana', 'carrot', 'celery', 'grapes', 'lettuce', 'onion', 'peach', 'pear', 'plum']\nfiltered_word_list = []\nfor word in word_list:\n    if 'greengrocer' in word:\n        filtered_word_list.append(word)\n\nprint(filtered_"}
{"cat": "food", "slot": "part", "value": "root", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  root. \n        Output: ", "result": "\n        apple, banana, cherry, date, fig, grape, kiwi, mango, orange, pear\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"root\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_con"}
{"cat": "food", "slot": "product", "value": "cider", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make cider. \n        Output: ", "result": "\n            apple, cider, ferment, juice, press, pulp, sugar, yeast, crush\n\"\"\"\nprint(find_words(\"food\", \"can be used to make cider\"))\n```\n\nOutput:\n```\napple, cider, ferment, juice, press, pulp, sugar, yeast, crush\n```"}
{"cat": "food", "slot": "material", "value": "fruit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be made of fruit. \n        Output: ", "result": "\n          apple, banana, cherry, date, fig, grape, orange, peach, plum, strawberry\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"fruit\" in word:\n            words.append(word)\n    return \", \".join(words)\n\ndef get_longest_word(word_list):\n    \"\"\"\n    Given a list of words, return the length of the longest word.\n    Desired output: the length of the longest word.\n    Input: a list of words.\n"}
{"cat": "food", "slot": "material", "value": "flour", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be made of flour. \n        Output: ", "result": "\n          bread, cake, cookie, dough, flour, pancake, pastry, roll, scone, \n          biscuit, bun, muffin, pie crust, croissant, cinnamon roll.\n    \"\"\"\n    category = 'food'\n    flour_words = [\n        'bread', 'cake', 'cookie', 'dough', 'flour', 'pancake', 'pastry', \n        'roll', 'scone', 'biscuit', 'bun', 'muffin"}
{"cat": "food", "slot": "place", "value": "orchard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in orchards. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grape, orange, peach, plum, apricot\n        \"\"\"\n        category = \"food\"\n        condition = \"can be found or used in orchards\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    def test_apple(self):\n        self.assertEqual(self.get_word(\"apple\"), \"apple\")\n\n    def test_banana(self):\n        self.assertEqual(self.get_word(\"banana"}
{"cat": "food", "slot": "product", "value": "popcorn", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make popcorn. \n        Output: ", "result": "\n            butter, corn, kernel, microwave, oil, popper, popcorn, seasoning, unpopped\n\"\"\"\npopcorn_words = [\n\"butter\",\n\"corn\",\n\"kernel\",\n\"microwave\",\n\"oil\",\n\"popper\",\n\"popcorn\",\n\"seasoning\",\n\"unpopped\"\n]\nprint(popcorn_words)"}
{"cat": "food", "slot": "accessory", "value": "rice", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with rice. \n        Output: ", "result": "\n            1. Rice\n            2. Sushi\n            3. Fried\n            4. Rice\n            5. Rice\n            6. Rice\n            7. Rice\n            8. Rice\n            9. Rice\n            10. Rice"}
{"cat": "food", "slot": "accessory", "value": "burger", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with burger. \n        Output: ", "result": "\n            hamburger, cheeseburger, bun, patty, lettuce, tomato, onion, ketchup, mustard, pickle \n        \"\"\"\n        category = Category.objects.get(name='food')\n        condition = 'may have to do with burger'\n        words = Word.objects.filter(category=category, condition=condition).values_list('word', flat=True).distinct()\n        return words\n\n    def get_random_word_from_category(self, category):\n        \"\"\"\n        Get a random"}
{"cat": "food", "slot": "accessory", "value": "bottle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with bottle. \n        Output: ", "result": "\n        chardonnay, merlot, riesling, pinot noir, champagne, sauvignon blanc, zinfandel, cabernet sauvignon, pinot grigio, moscato\n    \"\"\"\n    category = 'food'\n    condition = 'may have to do with bottle'\n    words = []\n    for word in all_words:\n        if word.category == category and word.condition == condition:\n            words.append(word.word)\n    return ', '.join(words)\n\n# Test the function\nprint("}
{"cat": "food", "slot": "accessory", "value": "cooler", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with cooler. \n        Output: ", "result": "\n        chocolate, ice cream, popsicle, slushie, frozen yogurt, iced coffee, iced tea, lemonade, smoothie, milkshake.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"cooler\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n        Desired output: a list of numbers"}
{"cat": "food", "slot": "accessory", "value": "cellar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with cellar. \n        Output: ", "result": "\n        apple, cider, barrel, cellar, ferment, brew, distill, malt, hops, yeast\n    \"\"\"\n    category = 'food'\n    condition = 'may have to do with cellar'\n    words = []\n    for word in text.split():\n        if word.lower() in category_words[category] and 'cellar' in word.lower():\n            words.append(word)\n    if words:\n        print(', '.join(words))\n    else:\n        print(\"No words found.\")\n\n"}
{"cat": "food", "slot": "accessory", "value": "glass", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with glass. \n        Output: ", "result": "\n        apple, cake, glass, ice, juice, milk, pizza, soda, water, wine\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"glass\" in word and \"food\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"cat": "food", "slot": "colorPattern", "value": "rose", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be rose. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grape, honey, jam, orange, raspberry\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"rose\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_con"}
{"cat": "food", "slot": "product", "value": "pastry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make pastry. \n        Output: ", "result": " flour, sugar, butter, eggs, milk, salt, vanilla, yeast, shortening, pie crust.\n    \"\"\"\n    food_words = [\"flour\", \"sugar\", \"butter\", \"eggs\", \"milk\", \"salt\", \"vanilla\", \"yeast\", \"shortening\", \"pie crust\"]\n    for word in food_words:\n        if \"can be used to make pastry\" in word.lower():\n            pastry_words.append(word)\n    return \", \".join(pastry_words)\n"}
{"cat": "food", "slot": "product", "value": "sandwich", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make sandwich. \n        Output: ", "result": "\n        bread, cheese, ham, lettuce, tomato, onion, mayonnaise, mustard, pickle, avocado \n    \"\"\"\n    category = Category.objects.get(name='food')\n    condition = 'can be used to make sandwich'\n    words = Word.objects.filter(category=category, condition=condition).values_list('word', flat=True).distinct()\n    return ', '.join(words)\n\ndef get_random_word_from_category(category):\n    \"\"\"\n    Get a random word from"}
{"cat": "food", "slot": "product", "value": "salad", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make salad. \n        Output: ", "result": "\n            apple, celery, cucumber, dressing, grapes, lettuce, onion, parsley, ranch, vinaigrette \n        \"\"\"\n        category = 'food'\n        condition = 'can be used to make salad'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_salad_ingredients(self):\n        self.assertEqual(self.get_salad_ingredients(), 'apple, celery, cucumber, dressing,"}
{"cat": "food", "slot": "product", "value": "flour", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make flour. \n        Output: ", "result": "\n            1. Wheat\n            2. Barley\n            3. Rice\n            4. Corn\n            5. Oats\n            6. Maize\n            7. Millet\n            8. Sorghum\n            9. Buckwheat\n            10. Teff\n        \"\"\"\n        food_words = [\"wheat\", \"barley\", \"rice\", \"corn\", \"oats\", \"maize\", \"millet\", \"sorghum\", \"buckwheat\", \"teff\"]\n        flour_words = [word for word in"}
{"cat": "food", "slot": "product", "value": "soup", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make soup. \n        Output: ", "result": "\n            carrots, celery, onion, chicken, broth, noodles, parsley, bay leaves, thyme, salt, pepper\n        \"\"\"\n        category = \"food\"\n        condition = \"can be used to make soup\"\n        words = []\n        for word in all_words:\n            if word.lower() in category.lower() and word.lower() in condition.lower():\n                words.append(word)\n        if words:\n            print(\", \".join(words))\n        else:\n            print(\"No words found"}
{"cat": "food", "slot": "product", "value": "vinegar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make vinegar. \n        Output: ", "result": "\n            apple cider vinegar, cider vinegar, vinegar, malt vinegar, balsamic vinegar, rice vinegar, red wine vinegar, white wine vinegar, distilled vinegar, apple cider vinegar, cider vinegar, vinegar, malt vinegar, balsamic vinegar, rice vinegar, red wine vinegar, white wine vinegar, distilled vinegar, apple cider vinegar, cider vinegar, vinegar, m"}
{"cat": "food", "slot": "consistency", "value": "sweet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be sweet. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grape, honey, ice cream, jam, jelly\n    \"\"\"\n    category = \"food\"\n    condition = \"can be sweet\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n```\n```\nExample:\n    Input: \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated"}
{"cat": "food", "slot": "accessory", "value": "soup", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with soup. \n        Output: ", "result": "\n            carrot, celery, onion, potato, tomato, broth, noodle, spoon, bowl, ladle \n        \"\"\"\n        soup_words = [\"soup\", \"spoon\", \"bowl\", \"ladle\", \"broth\", \"noodle\", \"carrot\", \"celery\", \"onion\", \"potato\"]\n        soup_words = [word for word in soup_words if \"soup\" in word or \"spoon\" in word or \"bowl\" in word or \"ladle\" in word or \"bro"}
{"cat": "food", "slot": "accessory", "value": "vinegar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with vinegar. \n        Output: ", "result": "\n            apple, cider, malt, pickle, salad, sauce, sour, tart, vinegar, \n            vinegar, vinegar, vinegar, vinegar, vinegar, vinegar, vinegar, \n            vinegar, vinegar, vinegar, vinegar, vinegar, vinegar, vinegar, \n            vinegar, vinegar, vinegar, vinegar, vinegar, vinegar, vinegar, \n            vinegar,"}
{"cat": "food", "slot": "accessory", "value": "corn", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with corn. \n        Output: ", "result": "\n        corn, popcorn, maize, cob, kernels, silk, husk, stalk, ear, cob\n    \"\"\"\n    category = \"food\"\n    condition = \"may have to do with corn\"\n    words = []\n    for word in all_words:\n        if word.lower().startswith(category.lower() + \":\"):\n            if \"corn\" in word.lower():\n                words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\""}
{"cat": "food", "slot": "accessory", "value": "dish", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with dish. \n        Output: ", "result": "\n        pizza, pasta, lasagna, spaghetti, garlic, tomato, cheese, bread, salad, meatball.\n    \"\"\"\n    category = 'food'\n    condition = 'may have to do with dish'\n    words = []\n    for word in all_words:\n        if word.startswith(category) and word.endswith(condition):\n            words.append(word)\n    if words:\n        print(', '.join(words))\n    else:\n        print(\"No words found.\")\n\n# Test the function"}
{"cat": "food", "slot": "accessory", "value": "maize", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with maize. \n        Output: ", "result": "\n            1. Corn\n            2. Maize\n            3. Cornmeal\n            4. Cornstarch\n            5. Corn oil\n            6. Corn cob\n            7. Corn on the cob\n            8. Corn husk\n            9. Corn silk\n            10. Corn kernels\n        \"\"\"\n        maize_words = [\n            \"corn\",\n            \"maize\",\n            \"cornmeal\",\n            \"cornstarch\",\n            \"corn oil\",\n            \"corn cob\",\n            \"c"}
{"cat": "food", "slot": "accessory", "value": "pasta", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with pasta. \n        Output: ", "result": "\n        spaghetti, ravioli, lasagna, fettuccine, macaroni, penne, pappardelle, gnocchi, rigatoni, tagliatelle.\n    \"\"\"\n    category = 'food'\n    condition = 'may have to do with pasta'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words_with_numbers(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of 10 words that belong to the"}
{"cat": "food", "slot": "accessory", "value": "bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with bread. \n        Output: ", "result": "\n        bread, roll, bun, loaf, slice, toast, biscuit, muffin, croissant, baguette\n\nExample 2: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: color. \n        Condition: may have to do with blue. \n        Output: \n        blue, sky, ocean, robin's egg, denim, baby blue, royal blue, navy blue, sky blue,"}
{"cat": "food", "slot": "accessory", "value": "grape", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with grape. \n        Output: ", "result": "\n            1. Grape\n            2. Grapefruit\n            3. Grapevine\n            4. Grapeseed\n            5. Grapeshot\n            6. Grapeseed oil\n            7. Grapeseed extract\n            8. Grapeseed flour\n            9. Grapeseed powder\n            10. Grapeseed butter\n    \"\"\"\n    grape_words = [\"Grape\", \"Grapefruit\", \"Grapevine\", \"Grapeseed\", \"Grapeseed oil"}
{"cat": "food", "slot": "howToUse", "value": "cook", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for cook. \n        Output: ", "result": "\n            apple, banana, carrot, egg, flour, honey, onion, potato, salt, sugar\n    \"\"\"\n    food_words = [\n        \"apple\", \"banana\", \"carrot\", \"egg\", \"flour\", \"honey\", \"onion\", \"potato\", \"salt\", \"sugar\"\n    ]\n    cook_words = [word for word in food_words if \"cook\" in word]\n    return \", \".join(cook_words) if cook_words else \"No words found.\"\n\nprint("}
{"cat": "food", "slot": "howToUse", "value": "cut", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for cut. \n        Output: ", "result": "\n            apple, cake, cut, cutter, dessert, fruit, kitchen, knife, pastry, slice\n    \"\"\"\n    category = 'food'\n    condition = 'can be used for cut'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Test the function\nprint(get_words('food', 'can be used for cut'))\n```\nOutput:\napple, cake, cut, cutter, dessert, fruit, kitchen, knife, pastry, slice\n```"}
{"cat": "food", "slot": "howToUse", "value": "eat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for eat. \n        Output: ", "result": "\n          apple, bread, cheese, chicken, coffee, cake, donut, egg, fish, fruit \n    \"\"\"\n    category = 'food'\n    condition = 'can be used for eat'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Test the function with sample inputs\nprint(get_words('food', 'can be used for eat'))  # Output: apple, bread, cheese, chicken, coffee, cake, donut, egg, fish, fruit\nprint(get_words"}
{"cat": "food", "slot": "howToUse", "value": "stew", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for stew. \n        Output: ", "result": "\n            apple, carrot, celery, onion, potato, thyme, bay leaf, rosemary, parsley, sage.\n    \"\"\"\n    food_words = [\n        \"apple\", \"carrot\", \"celery\", \"onion\", \"potato\", \"thyme\", \"bay leaf\", \"rosemary\", \"parsley\", \"sage\"\n    ]\n    can_be_used_for_stew_words = [\n        \"apple\", \"carrot\", \"celery\", \"onion\", \"potato\"\n   "}
{"cat": "food", "slot": "howToUse", "value": "boil", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for boil. \n        Output: ", "result": "\n            apple, bread, butter, cheese, egg, milk, onion, potato, rice, soup \n        \"\"\"\n        category = 'food'\n        condition = 'can be used for boil'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n# Test the function with sample inputs\nprint(get_words('food', 'can be used for boil'))  # Output: apple, bread, butter, cheese, egg, milk, onion, potato, rice, soup\nprint(get"}
{"cat": "food", "slot": "howToUse", "value": "slice", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for slice. \n        Output: ", "result": "\n        apple, bread, cheese, cake, egg, fish, fruit, meat, pizza, sandwich \n    \"\"\"\n    food_words = [\n        \"apple\", \"bread\", \"cheese\", \"cake\", \"egg\", \"fish\", \"fruit\", \"meat\", \"pizza\", \"sandwich\"\n    ]\n    slice_words = [word for word in food_words if word.endswith(\"e\")]\n    return \", \".join(slice_words)\n\nprint(get_slice_words(\"food\", \"can"}
{"cat": "food", "slot": "howToUse", "value": "harvest", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for harvest. \n        Output: ", "result": "\n          apple, banana, cherry, corn, cucumber, eggplant, fig, grapes, melon, pear\n    \"\"\"\n    category = \"food\"\n    condition = \"can be used for harvest\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "food", "slot": "howToUse", "value": "dry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for dry. \n        Output: ", "result": "\n          apple, bread, cake, cookie, cracker, dry, flour, sugar, water, yeast\n    \"\"\"\n    food_words = [\n        \"apple\", \"bread\", \"cake\", \"cookie\", \"cracker\", \"dry\", \"flour\", \"sugar\", \"water\", \"yeast\"\n    ]\n    category = \"food\"\n    condition = \"can be used for dry\"\n    filtered_words = []\n    for word in food_words:\n        if word.lower() == condition.lower():\n            filtered"}
{"cat": "food", "slot": "howToUse", "value": "pick", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for pick. \n        Output: ", "result": "\n          apple, bread, cheese, chicken, coffee, cucumber, egg, fish, garlic, ginger.\n    \"\"\"\n    category = 'food'\n    condition = 'can be used for pick'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Test the function with sample inputs\nprint(pick_words(category='food', condition='can be used for pick'))  # should print 'apple, bread, cheese, chicken, coffee, cucumber, egg, fish, garlic,"}
{"cat": "food", "slot": "howToUse", "value": "harvest", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for harvest. \n        Output: ", "result": "\n          apple, banana, cherry, corn, cucumber, eggplant, fig, grapes, melon, pear\n    \"\"\"\n    category = \"food\"\n    condition = \"can be used for harvest\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "food", "slot": "howToUse", "value": "bake", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for bake. \n        Output: ", "result": "\n          apple, cake, flour, sugar, butter, eggs, vanilla, baking powder, baking soda, salt\n    \"\"\"\n    food_words = [\"apple\", \"cake\", \"flour\", \"sugar\", \"butter\", \"eggs\", \"vanilla\", \"baking powder\", \"baking soda\", \"salt\"]\n    bake_words = [word for word in food_words if \"bake\" in word]\n    return \", \".join(bake_words) if bake_words else \"No words"}
{"cat": "food", "slot": "howToUse", "value": "grow", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for grow. \n        Output: ", "result": "\n          apple, banana, carrot, cucumber, eggplant, grape, lettuce, melon, onion, pea\n    \"\"\"\n    food_words = [\"apple\", \"banana\", \"carrot\", \"cucumber\", \"eggplant\", \"grape\", \"lettuce\", \"melon\", \"onion\", \"pea\"]\n    grow_words = [word for word in food_words if \"grow\" in word]\n    return \", \".join(grow_words) if grow_words else \"No words found.\"\n\n#"}
{"cat": "food", "slot": "howToUse", "value": "roast", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for roast. \n        Output: ", "result": "\n            chicken, beef, lamb, pork, potatoes, carrots, onions, garlic, rosemary, thyme\n    \"\"\"\n    category = \"food\"\n    condition = \"can be used for roast\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n```\n```\nExample:\n    Input: \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category:"}
{"cat": "food", "slot": "howToUse", "value": "wash", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for wash. \n        Output: ", "result": "\n            apple, bread, cheese, egg, fish, milk, onion, potato, water, yogurt\n    \"\"\"\n    food_words = [\n        \"apple\", \"bread\", \"cheese\", \"egg\", \"fish\", \"milk\", \"onion\", \"potato\", \"water\", \"yogurt\"\n    ]\n    wash_words = [word for word in food_words if \"wash\" in word]\n    return \", \".join(wash_words)\n\n# Test the function\nprint(get_wash_"}
{"cat": "food", "slot": "howToUse", "value": "press", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for press. \n        Output: ", "result": "\n        apple, bread, cheese, coffee, egg, ham, juice, milk, pizza, sandwich \n    \"\"\"\n    food_words = [\n        \"apple\", \"bread\", \"cheese\", \"coffee\", \"egg\", \"ham\", \"juice\", \"milk\", \"pizza\", \"sandwich\"\n    ]\n    press_words = [\n        \"apple\", \"bread\", \"cheese\", \"coffee\", \"egg\", \"ham\", \"juice\", \"milk\", \"pizza\", \"sand"}
{"cat": "food", "slot": "howToUse", "value": "steam", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for steam. \n        Output: ", "result": "\n            apple, broccoli, carrot, cauliflower, eggplant, garlic, mushroom, onion, pea, potato\n    \"\"\"\n    food_words = [\"apple\", \"broccoli\", \"carrot\", \"cauliflower\", \"eggplant\", \"garlic\", \"mushroom\", \"onion\", \"pea\", \"potato\"]\n    for word in food_words:\n        if \"can be used for steam\" in word.lower():\n            print(word)\n            break\n    else:\n        print(\""}
{"cat": "food", "slot": "howToUse", "value": "spiced", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for spiced. \n        Output: ", "result": "\n        chili, curry, garlic, ginger, jalapeno, paprika, pepper, saffron, turmeric, cumin\n    \"\"\"\n    food_words = [\"chili\", \"curry\", \"garlic\", \"ginger\", \"jalapeno\", \"paprika\", \"pepper\", \"saffron\", \"turmeric\", \"cumin\"]\n    spiced_words = [word for word in food_words if \"spiced\" in word]\n    return \", \".join(spiced_words)\n"}
{"cat": "food", "slot": "howToUse", "value": "peel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for peel. \n        Output: ", "result": "\n            apple, banana, citrus, lemon, orange, pear, peel, skin, tangerine, tomato \n        Explanation: \n            apple, banana, citrus, lemon, orange, pear, peel, skin, tangerine, tomato all belong to the food category and can be used for peel. \n        \"\"\"\n        category = Category.objects.get(name='food')\n        words = Word.objects.filter(category=category, definition__icontains='peel').distinct()\n        return"}
{"cat": "food", "slot": "howToUse", "value": "fry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for fry. \n        Output: ", "result": "\n            apple, bread, cheese, egg, fish, french fries, onion, potato, rice, tomato \n\"\"\"\n\nword_list = [\"apple\", \"bread\", \"cheese\", \"egg\", \"fish\", \"french fries\", \"onion\", \"potato\", \"rice\", \"tomato\"]\ncategory = \"food\"\ncondition = \"can be used for fry\"\n\nfiltered_list = [word for word in word_list if word.lower().startswith(category.lower() + \" can be used for"}
{"cat": "food", "slot": "howToUse", "value": "braise", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for braise. \n        Output: ", "result": "\n            beef, chicken, pork, lamb, onion, garlic, carrot, celery, thyme, rosemary\n    \"\"\"\n    food_words = [\n        \"beef\", \"chicken\", \"pork\", \"lamb\", \"onion\", \"garlic\", \"carrot\", \"celery\", \"thyme\", \"rosemary\"\n    ]\n    braise_words = [word for word in food_words if \"braise\" in word]\n    return \", \".join(braise_words)\n\ndef get_"}
{"cat": "food", "slot": "howToUse", "value": "grind", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for grind. \n        Output: ", "result": "\n          apple, bread, cheese, coffee, egg, flour, garlic, onion, sugar, tomato \n    \"\"\"\n    category = 'food'\n    condition = 'can be used for grind'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Test the function\nprint(get_words('food', 'can be used for grind'))\n```\nOutput:\n```\napple, bread, cheese, coffee, egg, flour, garlic, onion, sugar, tomato\n"}
{"cat": "food", "slot": "howToUse", "value": "caramelize", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for caramelize. \n        Output: ", "result": "\n        caramel, caramelize, caramelized, caramelization, caramelize, caramelized, caramelizing, caramelized, caramelizing, caramelized\n    \"\"\"\n    category = 'food'\n    condition = 'can be used for caramelize'\n    words = [word for word in suggestions if word.lower().startswith(category) and word.lower().endswith(condition)]\n    print(', '.join(words))\n```\nExample:\n```\npython suggestions.py\n```"}
{"cat": "food", "slot": "howToUse", "value": "knead", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for knead. \n        Output: ", "result": "\n        bread, dough, knead, flour, yeast, rise, pizza, roll, cookie, cake\n    \"\"\"\n    food_words = [\n        \"bread\",\n        \"dough\",\n        \"knead\",\n        \"flour\",\n        \"yeast\",\n        \"rise\",\n        \"pizza\",\n        \"roll\",\n        \"cookie\",\n        \"cake\"\n    ]\n    food_words = [word for word in food_words if word.lower().startswith(\"knead\")]\n    return"}
{"cat": "food", "slot": "howToUse", "value": "chop", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for chop. \n        Output: ", "result": "\n            apple, bread, cheese, chicken, coffee, cucumber, egg, ham, ice cream, pizza \n        \"\"\"\n        category = 'food'\n        condition = 'can be used for chop'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('food', 'can be used for chop'))\n```\n\u8f93\u51fa\uff1a\napple, bread, cheese, chicken, coffee, cucumber, egg, ham, ice cream, pizza\n```"}
{"cat": "food", "slot": "howToUse", "value": "break", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for break. \n        Output: ", "result": "\n            apple, bread, cheese, coffee, egg, fruit, jam, juice, milk, toast \n        \"\"\"\n        category = 'food'\n        condition = 'can be used for break'\n        words = get_words(category, condition)\n        if words:\n            print(', '.join(words))\n        else:\n            print(\"No words found.\")\n\nif __name__ == '__main__':\n    main()\n"}
{"cat": "food", "slot": "howToUse", "value": "cultivate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for cultivate. \n        Output: ", "result": "\n          apple, banana, carrot, cucumber, eggplant, grape, lettuce, onion, pea, potato\n    \"\"\"\n    category = \"food\"\n    condition = \"can be used for cultivate\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"food\", \"can be used for cultivate\"))\n```\nOutput:\napple, banana, carrot, cucumber, eggplant, grape, lettuce, onion"}
{"cat": "food", "slot": "howToUse", "value": "dip", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for dip. \n        Output: ", "result": "\n          - salsa \n          - guacamole \n          - hummus \n          - tzatziki \n          - ranch \n          - blue cheese \n          - honey mustard \n          - balsamic vinaigrette \n          - chutney \n          - aioli \n    \"\"\"\n    category = \"food\"\n    condition = \"can be used for dip\"\n    words = [\n        \"salsa\",\n        \"guacamole\",\n        \"hummus\",\n        \"tz"}
{"cat": "food", "slot": "howToUse", "value": "sprout", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for sprout. \n        Output: ", "result": "\n            arugula, broccoli, cauliflower, celery, cucumber, eggplant, lettuce, pea, radish, spinach\n    \"\"\"\n    food_words = [\"arugula\", \"broccoli\", \"cauliflower\", \"celery\", \"cucumber\", \"eggplant\", \"lettuce\", \"pea\", \"radish\", \"spinach\"]\n    sprout_words = [word for word in food_words if word.lower().startswith(\"sprout\")]\n    return \", \".join(sprout_"}
{"cat": "food", "slot": "howToUse", "value": "glaze", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for glaze. \n        Output: ", "result": "\n            chutney, curry, glaze, marinade, pickle, preserve, relish, sauce, seasoning, \n            dressing, dip, gravy, salsa, condiment, seasoning blend, seasoned salt, \n            spice blend, spice mix, spice rub, herb and spice mix, herb and spice blend, \n            herb and spice mix, herb and spice rub, herb and spice blend, herb and spice mix, \n            herb and spice"}
{"cat": "food", "slot": "howToUse", "value": "cream", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for cream. \n        Output: ", "result": "\n            chocolate, ice cream, whipped cream, sour cream, cream cheese, heavy cream, half and half, crema, cr\u00e8me fra\u00eeche, cr\u00e8me anglaise \n        \"\"\"\n        category = 'food'\n        condition = 'can be used for cream'\n        words = []\n        for word in get_words(category, condition):\n            if 'cream' in word:\n                words.append(word)\n        result = ', '.join(words)\n        print(result)\n```\nExplan"}
{"cat": "food", "slot": "howToUse", "value": "melt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for melt. \n        Output: ", "result": "\n        chocolate, ice cream, caramel, candy, fudge, marshmallow, whipped cream, butter, cheese, yogurt \n    \"\"\"\n    food_words = [\"chocolate\", \"ice cream\", \"caramel\", \"candy\", \"fudge\", \"marshmallow\", \"whipped cream\", \"butter\", \"cheese\", \"yogurt\"]\n    melt_words = [word for word in food_words if \"melt\" in word]\n    print(\", \".join"}
{"cat": "food", "slot": "howToUse", "value": "slice", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for slice. \n        Output: ", "result": "\n        apple, bread, cheese, cake, egg, fish, fruit, meat, pizza, sandwich \n    \"\"\"\n    food_words = [\n        \"apple\", \"bread\", \"cheese\", \"cake\", \"egg\", \"fish\", \"fruit\", \"meat\", \"pizza\", \"sandwich\"\n    ]\n    slice_words = [word for word in food_words if word.endswith(\"e\")]\n    return \", \".join(slice_words)\n\nprint(get_slice_words(\"food\", \"can"}
{"cat": "food", "slot": "howToUse", "value": "taste", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for taste. \n        Output: ", "result": "\n            chocolate, vanilla, strawberry, raspberry, lemon, orange, pineapple, coconut, \n            caramel, coffee, cinnamon\n    \"\"\"\n    category = 'food'\n    condition = 'can be used for taste'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Test the function\nprint(get_words('food', 'can be used for taste'))\n```\nOutput:\nchocolate, vanilla, strawberry, rasp"}
{"cat": "food", "slot": "howToUse", "value": "dip", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for dip. \n        Output: ", "result": "\n          - salsa \n          - guacamole \n          - hummus \n          - tzatziki \n          - ranch \n          - blue cheese \n          - honey mustard \n          - balsamic vinaigrette \n          - chutney \n          - aioli \n    \"\"\"\n    category = \"food\"\n    condition = \"can be used for dip\"\n    words = [\n        \"salsa\",\n        \"guacamole\",\n        \"hummus\",\n        \"tz"}
{"cat": "food", "slot": "howToUse", "value": "soak", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for soak. \n        Output: ", "result": "\n          apple, bread, milk, onion, potato, rice, soup, sugar, tea, water\n    \"\"\"\n    food_words = [\"apple\", \"bread\", \"milk\", \"onion\", \"potato\", \"rice\", \"soup\", \"sugar\", \"tea\", \"water\"]\n    can_be_soaked_words = [word for word in food_words if word.lower().startswith(\"can be soaked\")]\n    return can_be_soaked_words"}
{"cat": "food", "slot": "howToUse", "value": "toast", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for toast. \n        Output: ", "result": "\n          apple, bread, butter, cheese, egg, ham, jam, milk, toast, yogurt \n    \"\"\"\n    category = 'food'\n    condition = 'can be used for toast'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Test the function with sample inputs.\nprint(get_words('food', 'can be used for breakfast'))\nprint(get_words('food', 'can be used in a sandwich'))\nprint(get_words('food', '"}
{"cat": "food", "slot": "howToUse", "value": "leaven", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for leaven. \n        Output: ", "result": "\n            bread, flour, yeast, raise, leaven, dough, knead, rise, proof, ferment\n        \"\"\"\n        category = \"food\"\n        condition = \"can be used for leaven\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n# Test the function\nprint(find_leavening_words(\"food\", \"can be used for leaven\"))\n# Output: bread, flour, yeast, raise, leaven, dough, knead, rise, proof, ferment"}
{"cat": "food", "slot": "howToUse", "value": "pickle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for pickle. \n        Output: ", "result": "\n            pickle, brine, cucumber, dill, garlic, jalapeno, mustard, onion, vinegar, dill pickle \n        \"\"\"\n        category = 'food'\n        condition = 'can be used for pickle'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_pickle_words(self):\n        self.assertEqual(self.pickle_words(), 'pickle, brine, cucumber, dill, garlic, jal"}
{"cat": "food", "slot": "howToUse", "value": "steam", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for steam. \n        Output: ", "result": "\n            apple, broccoli, carrot, cauliflower, eggplant, garlic, mushroom, onion, pea, potato\n    \"\"\"\n    food_words = [\"apple\", \"broccoli\", \"carrot\", \"cauliflower\", \"eggplant\", \"garlic\", \"mushroom\", \"onion\", \"pea\", \"potato\"]\n    for word in food_words:\n        if \"can be used for steam\" in word.lower():\n            print(word)\n            break\n    else:\n        print(\""}
{"cat": "food", "slot": "howToUse", "value": "crumble", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for crumble. \n        Output: ", "result": "\n            apple, cinnamon, crumble, dessert, fruit, \n            pie, topping, baked, sweet. \n        \"\"\"\n        category = 'food'\n        condition = 'can be used for crumble'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('food', 'can be used for crumble'))\n```\n\u8f93\u51fa\uff1a\napple, cinnamon, crumble, dessert, fruit, pie, topping, baked, sweet.\n"}
{"cat": "food", "slot": "howToUse", "value": "dice", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for dice. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grape, lemon, orange, pear, plum\n    \"\"\"\n    category = \"food\"\n    words = [\n        \"apple\",\n        \"banana\",\n        \"cherry\",\n        \"date\",\n        \"fig\",\n        \"grape\",\n        \"lemon\",\n        \"orange\",\n        \"pear\",\n        \"plum\"\n    ]\n\n    for word in words:\n        if \"dice\" in word:\n            print(word)\n"}
{"cat": "food", "slot": "howToUse", "value": "grate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for grate. \n        Output: ", "result": "\n            apple, cake, grate, great, grape, grater, gratitude, gratefully, \n            gratitude, gratefully. \n        \"\"\"\n        category = 'food'\n        condition = 'can be used for grate'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('food', 'can be used for grate'))\n```\n\u8f93\u51fa\uff1a\napple, cake, grate, great, grape, grater, gratitude, grate"}
{"cat": "food", "slot": "howToUse", "value": "taste", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for taste. \n        Output: ", "result": "\n            chocolate, vanilla, strawberry, raspberry, lemon, orange, pineapple, coconut, \n            caramel, coffee, cinnamon\n    \"\"\"\n    category = 'food'\n    condition = 'can be used for taste'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Test the function\nprint(get_words('food', 'can be used for taste'))\n```\nOutput:\nchocolate, vanilla, strawberry, rasp"}
{"cat": "food", "slot": "howToUse", "value": "wilt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for wilt. \n        Output: ", "result": "\n          apple, bread, cheese, cider, egg, fish, fruit, ham, milk, potato \n    \"\"\"\n    category = 'food'\n    condition = 'can be used for wilt'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Test the function with sample inputs\nprint(get_words('food', 'can be used for wilt'))  # should print 'apple, bread, cheese, cider, egg, fish, fruit, ham, milk, potato'\nprint(get"}
{"cat": "food", "slot": "part", "value": "sweet corn", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  sweet corn. \n        Output: ", "result": "\n        sweet, corn, corn, corn, corn, corn, corn, corn, corn, corn. \n        \"\"\"\n        category = Category.objects.get(name='food')\n        words = Word.objects.filter(category=category)\n        filtered_words = []\n        for word in words:\n            if 'sweet corn' in word.text:\n                filtered_words.append(word)\n        filtered_words_list = ', '.join(filtered_words)\n        return filtered_words_list\n\n    def get_random_word(self"}
{"cat": "food", "slot": "part", "value": "green corn", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  green corn. \n        Output: ", "result": " avocado, cucumber, green bean, green pea, green salad, green apple, green tea, green smoothie, green juice, green salad dressing. \n        \"\"\"\n        category = 'food'\n        condition = 'can have green corn'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_category_and_condition_1(self):\n        result = self.get_words('food', 'can have tomato')\n        self.assertEqual(result, 'tom"}
{"cat": "food", "slot": "part", "value": "shuck", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  shuck. \n        Output: ", "result": "\n          apple, banana, cherry, cucumber, eggplant, fig, grape, honeydew, mango, nectarine, orange, peach, pear, plum, raspberry, strawberry, watermelon, blueberry, blackberry, boysenberry, cranberry, currant, elderberry, gooseberry, huckleberry, loganberry, mulberry, olive, papaya, passionfruit, pineapple, pomegranate, quince, raspberry, sour cherry, tanger"}
{"cat": "food", "slot": "product", "value": "yield", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make yield. \n        Output: ", "result": "\n            apple, bread, cake, cookie, dough, egg, flour, milk, sugar, yeast \n        \"\"\"\n        category = 'food'\n        condition = 'can be used to make yield'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_fruit(self):\n        self.assertEqual(self.get_words('fruit'), 'apple, banana, cherry, date, fig, grape, guava, kiwi, mango, orange,"}
{"cat": "food", "slot": "product", "value": "loaf", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make loaf. \n        Output: ", "result": "\n```\nbread, flour, yeast, sugar, salt, water, milk, eggs, dough, knead\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can fly. \n        Output: \n```\nbird, eagle, hawk, sparrow, swallow, hummingbird, butterfly, bee, mosquito, dragonfly\n"}
{"cat": "food", "slot": "product", "value": "yield", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make yield. \n        Output: ", "result": "\n            apple, bread, cake, cookie, dough, egg, flour, milk, sugar, yeast \n        \"\"\"\n        category = 'food'\n        condition = 'can be used to make yield'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_fruit(self):\n        self.assertEqual(self.get_words('fruit'), 'apple, banana, cherry, date, fig, grape, guava, kiwi, mango, orange,"}
{"cat": "food", "slot": "smell", "value": "sweet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can smell sweet. \n        Output: ", "result": "\n            apple, banana, cherry, cinnamon, cookie, flower, fruit, honey, jam, lemon. \n        \"\"\"\n        category = 'food'\n        condition = 'can smell sweet'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_apple(self):\n        self.assertEqual(self.get_word('apple'), 'apple')\n\n    def test_banana(self):\n        self.assertEqual(self.get_word('banana'), '"}
{"cat": "food", "slot": "place", "value": "greengrocer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in greengrocers. \n        Output: ", "result": "\n            apple, banana, carrot, celery, grapes, lettuce, onion, peach, pear, tomato.\n        \"\"\"\n        category = 'food'\n        condition = 'can be found or used in greengrocers'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of"}
{"cat": "food", "slot": "place", "value": "fruiterer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in fruiterers. \n        Output: ", "result": "\n        apple, banana, cherry, date, fig, grape, kiwi, melon, orange, pear\n    \"\"\"\n    fruits = [\n        \"apple\",\n        \"banana\",\n        \"cherry\",\n        \"date\",\n        \"fig\",\n        \"grape\",\n        \"kiwi\",\n        \"melon\",\n        \"orange\",\n        \"pear\"\n    ]\n    words = []\n    for fruit in fruits:\n        if \"fruiterers\" in fruit:\n            words.append(f"}
{"cat": "food", "slot": "place", "value": "glass", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in glasses. \n        Output: ", "result": "\n            1. Glass \n            2. Cocktail \n            3. Wine \n            4. Beer \n            5. Soda \n            6. Water \n            7. Juice \n            8. Milk \n            9. Coffee \n            10. Tea \n        \"\"\"\n        words = [\n            \"Glass\",\n            \"Cocktail\",\n            \"Wine\",\n            \"Beer\",\n            \"Soda\",\n            \"Water\",\n            \"Juice\",\n            \"Mil"}
{"cat": "food", "slot": "place", "value": "bottle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in bottles. \n        Output: ", "result": "\n        chardonnay, merlot, pinot noir, riesling, sangiovese, sauvignon blanc, zinfandel, cabernet sauvignon, pinot grigio, gew\u00fcrztraminer\n    \"\"\"\n    category = 'food'\n    condition = 'can be found or used in bottles'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to"}
{"cat": "food", "slot": "place", "value": "cellar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in cellars. \n        Output: ", "result": "\n```\nwine, cheese, bread, olive oil, honey, chocolate, salt, spices, vinegar, mustard\n```\n\n### Example 2:\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found or used in zoos. \n        Output: \n```\nlion, tiger, elephant, giraffe, zebra, monkey"}
{"cat": "food", "slot": "generalization", "value": "nutrient", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are nutrient. \n        Output: ", "result": "\n        apples, bananas, carrots, eggs, fish, milk, oranges, peanuts, spinach, yogurt\n    \"\"\"\n    food_words = [\n        \"apple\", \"banana\", \"carrot\", \"egg\", \"fish\", \"milk\", \"orange\", \"peanut\", \"spinach\", \"yogurt\"\n    ]\n    nutrient_words = [\n        \"apple\", \"banana\", \"carrot\", \"egg\", \"fish\", \"milk\", \"orange\", \"peanut"}
{"cat": "food", "slot": "generalization", "value": "drink", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are drink. \n        Output: ", "result": "\n        coffee, tea, milk, juice, soda, water, beer, wine, cocktail, smoothie\n    \"\"\"\n    category = 'food'\n    condition = 'are drink'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition within the category.\n    \"\"\"\n    words = []\n    if category == 'all':\n        words = get_all_words"}
{"cat": "food", "slot": "generalization", "value": "food", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are food. \n        Output: ", "result": "\n        chocolate, cookie, cake, ice cream, pizza, sandwich, sushi, burger, french fries, donut\n    \"\"\"\n    food_words = [\"chocolate\", \"cookie\", \"cake\", \"ice cream\", \"pizza\", \"sandwich\", \"sushi\", \"burger\", \"french fries\", \"donut\"]\n    food_words = [word for word in food_words if word.lower() == \"are\"]\n    food_words = [word for word in food_words if word."}
{"cat": "food", "slot": "generalization", "value": "vegetable", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are vegetable. \n        Output: ", "result": "\n        carrot, cucumber, eggplant, lettuce, onion, pea, pumpkin, spinach, tomato, zucchini. \n    \"\"\"\n    food_words = [\"carrot\", \"cucumber\", \"eggplant\", \"lettuce\", \"onion\", \"pea\", \"pumpkin\", \"spinach\", \"tomato\", \"zucchini\"]\n    vegetable_words = [word for word in food_words if \"vegetable\" in word]\n    print(\", \".join(vegetable_words"}
{"cat": "food", "slot": "generalization", "value": "foodstuff", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are foodstuff. \n        Output: ", "result": "\n        chocolate, cookie, cake, bread, pizza, ice cream, fruit, vegetable, soup, sandwich \n    \"\"\"\n    category = 'food'\n    condition = 'are foodstuff'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: food. \n        Output"}
{"cat": "food", "slot": "generalization", "value": "food product", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are food product. \n        Output: ", "result": "\n        chocolate, cookie, cake, ice cream, pizza, bread, fruit, vegetable, soup, sandwich \n    \"\"\"\n    food_words = [\"chocolate\", \"cookie\", \"cake\", \"ice cream\", \"pizza\", \"bread\", \"fruit\", \"vegetable\", \"soup\", \"sandwich\"]\n    food_words = [word for word in food_words if word.endswith(\".food\")]\n    return \", \".join(food_words)\n\nprint(get_food_words_"}
{"cat": "food", "slot": "generalization", "value": "substance", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are substance. \n        Output: ", "result": "\n        apple, bread, cheese, chicken, coffee, egg, fish, milk, pizza, rice\n    \"\"\"\n    food_words = [\n        \"apple\", \"bread\", \"cheese\", \"chicken\", \"coffee\", \"egg\", \"fish\", \"milk\", \"pizza\", \"rice\"\n    ]\n    substance_words = [\n        \"apple\", \"bread\", \"cheese\", \"chicken\", \"coffee\", \"egg\", \"fish\", \"milk\", \"pizza\", \"rice\"\n    ]"}
{"cat": "food", "slot": "generalization", "value": "green groceries", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are green groceries. \n        Output: ", "result": "\n            apple, banana, celery, cucumber, green beans, kale, lettuce, spinach, tomato, zucchini. \n        \"\"\"\n        category = 'food'\n        condition = 'are green groceries'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_fruits(self):\n        result = self.get_words('fruits')\n        self.assertEqual(result, 'apple, banana, cherry, date, fig"}
{"cat": "food", "slot": "generalization", "value": "staple food", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are staple food. \n        Output: ", "result": "\n        rice, bread, potato, corn, soybean, wheat, rice, bread, potato, corn\n    \"\"\"\n    food_category = Category.objects.get(name='food')\n    staple_food = Food.objects.filter(food_category=food_category, is_staple=True)\n    staple_words = [f.name for f in staple_food]\n    if staple_words:\n        return staple_words[0]\n    else:\n        return"}
{"cat": "food", "slot": "generalization", "value": "green goods", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are green goods. \n        Output: ", "result": "\n        asparagus, broccoli, celery, cucumber, green beans, kale, lettuce, pea, spinach, zucchini \n    \"\"\"\n    food_words = [\"asparagus\", \"broccoli\", \"celery\", \"cucumber\", \"green beans\", \"kale\", \"lettuce\", \"pea\", \"spinach\", \"zucchini\"]\n    green_goods_words = [\"asparagus\", \"broccoli\", \"celery\", \"cucumber\", \"green be"}
{"cat": "food", "slot": "generalization", "value": "garden truck", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are garden truck. \n        Output: ", "result": "\n        carrot, cucumber, eggplant, pea, pumpkin, radish, squash, tomato, zucchini.\n    \"\"\"\n    category = \"food\"\n    condition = \"are garden truck\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition. \n        Desired output: a list of words. \n       "}
{"cat": "food", "slot": "generalization", "value": "produce", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are produce. \n        Output: ", "result": "\n```\napple, banana, carrot, cucumber, eggplant, fig, grape, lemon, melon, orange\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are meat. \n        Output: \n```\nbeef, chicken, pork, lamb, salmon, shrimp, steak, turkey, veal, venison\n"}
{"cat": "food", "slot": "generalization", "value": "reproductive structure", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are reproductive structure. \n        Output: ", "result": " apple, banana, cherry, date, fig, grape, melon, orange, pear, pomegranate \n    \"\"\"\n    fruits = ['apple', 'banana', 'cherry', 'date', 'fig', 'grape', 'melon', 'orange', 'pear', 'pomegranate']\n    reproductive_structures = ['apple', 'banana', 'cherry', 'date', 'fig', 'grape', 'melon', 'orange', 'pear', 'pomegranate']\n    common_words"}
{"cat": "food", "slot": "generalization", "value": "liquid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are liquid. \n        Output: ", "result": "\n        apple juice, \n        orange juice, \n        milk, \n        cola, \n        lemonade, \n        tea, \n        coffee, \n        water, \n        ice tea.\n    \"\"\"\n    food_words = [\n        \"apple juice\",\n        \"orange juice\",\n        \"milk\",\n        \"cola\",\n        \"lemonade\",\n        \"tea\",\n        \"coffee\",\n        \"water\",\n        \"ice tea\"\n    ]\n    liquid_words ="}
{"cat": "food", "slot": "generalization", "value": "herbaceous plant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are herbaceous plant. \n        Output: ", "result": "\n        asparagus, broccoli, cauliflower, celery, lettuce, onion, pea, radish, spinach, watercress\n    \"\"\"\n    food_words = [\"asparagus\", \"broccoli\", \"cauliflower\", \"celery\", \"lettuce\", \"onion\", \"pea\", \"radish\", \"spinach\", \"watercress\"]\n    herbaceous_plants = [\"asparagus\", \"broccoli\", \"cauliflower\", \"celery\", \"lettuce\","}
{"cat": "food", "slot": "generalization", "value": "tracheophyte", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are tracheophyte. \n        Output: ", "result": "\n        apple, banana, carrot, cucumber, eggplant, lettuce, onion, pea, potato, tomato. \n        \"\"\"\n        category = 'food'\n        condition = 'are tracheophyte'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def example_2():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. "}
{"cat": "food", "slot": "generalization", "value": "tuber", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are tuber. \n        Output: ", "result": "\n            carrot, potato, sweet potato, yam, parsnip, turnip, rutabaga, \n            beet, garlic, onion. \n        \"\"\"\n        category = 'food'\n        condition = 'are tuber'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list"}
{"cat": "food", "slot": "generalization", "value": "vascular plant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are vascular plant. \n        Output: ", "result": "\n```\napple, banana, carrot, celery, cucumber, eggplant, lettuce, onion, pea, potato\n```"}
{"cat": "food", "slot": "generalization", "value": "herb", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are herb. \n        Output: ", "result": "\n        asparagus, basil, cilantro, dill, fennel, mint, oregano, rosemary, thyme, tarragon\n    \"\"\"\n    herb_words = [\"basil\", \"cilantro\", \"dill\", \"mint\", \"oregano\", \"rosemary\", \"thyme\", \"tarragon\"]\n    food_words = [\"asparagus\", \"cilantro\", \"dill\", \"fennel\", \"mint\", \"oregano\", \"rosemary\", \"thyme\","}
{"cat": "food", "slot": "generalization", "value": "fluid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are fluid. \n        Output: ", "result": "\n        milk, water, juice, soup, broth, tea, coffee, ice cream, yogurt, gelato\n```\n\nExample 2: \nInput: \n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammals. \n        Output: \n        dog, cat, cow, pig, horse, elephant, giraffe, whale, dolphin"}
{"cat": "food", "slot": "generalization", "value": "starches", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are starches. \n        Output: ", "result": "\n        rice, bread, pasta, potato, corn, cassava, yam, sweet potato, tapioca, \n        flour, noodle.\n    \"\"\"\n    food_starches = [\"rice\", \"bread\", \"pasta\", \"potato\", \"corn\", \"cassava\", \"yam\", \"sweet potato\", \"tapioca\", \"flour\", \"noodle\"]\n    food_starches = [word for word in food_starches if \"starch\" in word]\n    food_"}
{"cat": "food", "slot": "generalization", "value": "nutriment", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are nutriment. \n        Output: ", "result": "\n        apples, bananas, carrots, eggs, fish, grapes, lettuce, milk, oranges, pears\n    \"\"\"\n    food_words = [\n        \"apple\", \"banana\", \"carrot\", \"egg\", \"fish\", \"grape\", \"lettuce\", \"milk\", \"orange\", \"pear\"\n    ]\n    nutrient_words = [\n        \"apple\", \"banana\", \"carrot\", \"egg\", \"fish\", \"grapes\", \"lettuce\", \"milk\", \"orange"}
{"cat": "food", "slot": "generalization", "value": "street drug", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are street drug. \n        Output: ", "result": "\n```\ncrack, meth, heroin, cocaine, speed, ecstasy, acid, LSD, shrooms, weed\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: have wings. \n        Output: \n```\nbird, butterfly, hummingbird, pterodactyl, bat, dragonfly, bee,"}
{"cat": "food", "slot": "generalization", "value": "plant life", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are plant life. \n        Output: ", "result": "\n```\napple, banana, carrot, celery, cucumber, eggplant, lettuce, pea, potato, tomato\n```"}
{"cat": "food", "slot": "generalization", "value": "matter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are matter. \n        Output: ", "result": "\n        apple, bread, cheese, chicken, coffee, egg, fish, milk, water, yogurt\n    \"\"\"\n    food_words = [\n        \"apple\", \"bread\", \"cheese\", \"chicken\", \"coffee\", \"egg\", \"fish\", \"milk\", \"water\", \"yogurt\"\n    ]\n    matter_words = [\n        \"apple\", \"bread\", \"cheese\", \"chicken\", \"coffee\", \"egg\", \"fish\", \"milk\", \"water\", \"yogurt\"\n"}
{"cat": "food", "slot": "generalization", "value": "solid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are solid. \n        Output: ", "result": "\n        apple, bread, cake, cheese, chocolate, cookie, crackers, donut, egg, pizza \n    \"\"\"\n    food_words = [\"apple\", \"bread\", \"cake\", \"cheese\", \"chocolate\", \"cookie\", \"crackers\", \"donut\", \"egg\", \"pizza\"]\n    solid_food_words = [word for word in food_words if \"solid\" in word]\n    return \", \".join(solid_food_words)\n\nprint(find_solid_fo"}
{"cat": "food", "slot": "generalization", "value": "sustenance", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are sustenance. \n        Output: ", "result": "\n        bread, cheese, eggs, fruit, grains, meat, milk, potatoes, rice, vegetables \n    \"\"\"\n    category = 'food'\n    condition = 'are sustenance'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Test the function\nprint(get_words('food', 'are sustenance'))\n```\nOutput:\nbread, cheese, eggs, fruit, grains, meat, milk, potatoes, rice, vegetables\n```"}
{"cat": "food", "slot": "generalization", "value": "food grain", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are food grain. \n        Output: ", "result": "\n        rice, wheat, corn, barley, oats, rye, millet, sorghum, maize, rice, wheat, corn, barley, oats, rye, millet, sorghum, maize\n    \"\"\"\n    food_words = [\"rice\", \"wheat\", \"corn\", \"barley\", \"oats\", \"rye\", \"millet\", \"sorghum\", \"maize\"]\n    food_grain_words = [word for word in food_words if \"grain\" in word]\n    return \","}
{"cat": "food", "slot": "generalization", "value": "alimentation", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are alimentation. \n        Output: ", "result": "\n        chocolate, cake, cookie, ice cream, pizza, sandwich, sushi, burger, french fries, pasta\n    \"\"\"\n    food_words = [\"chocolate\", \"cake\", \"cookie\", \"ice cream\", \"pizza\", \"sandwich\", \"sushi\", \"burger\", \"french fries\", \"pasta\"]\n    alimentation_words = [\"chocolate\", \"cake\", \"cookie\", \"ice cream\", \"pizza\", \"sandwich\", \"sushi\", \"burger"}
{"cat": "food", "slot": "generalization", "value": "nourishment", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are nourishment. \n        Output: ", "result": "\n        apple, banana, carrot, egg, fish, grape, honey, milk, oat, potato \n    \"\"\"\n    food_words = [\n        \"apple\", \"banana\", \"carrot\", \"egg\", \"fish\", \"grape\", \"honey\", \"milk\", \"oat\", \"potato\"\n    ]\n    nourishment_words = [word for word in food_words if \"nourishment\" in word]\n    if len(nourishment_words) == 10:\n        return nourishment"}
{"cat": "food", "slot": "generalization", "value": "plant part", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are plant part. \n        Output: ", "result": "\n        carrot, celery, cucumber, eggplant, lettuce, onion, pea, potato, tomato, zucchini \n    \"\"\"\n    plant_parts = [\"carrot\", \"celery\", \"cucumber\", \"eggplant\", \"lettuce\", \"onion\", \"pea\", \"potato\", \"tomato\", \"zucchini\"]\n    food_plant_parts = [word for word in plant_parts if word.endswith((\"e\", \"y\"))]\n    return \", \".join(food_plant"}
{"cat": "food", "slot": "generalization", "value": "plant structure", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are plant structure. \n        Output: ", "result": "\n        apple, banana, carrot, celery, cucumber, eggplant, lettuce, onion, pea, potato\n    \"\"\"\n    plant_words = [\"apple\", \"banana\", \"carrot\", \"celery\", \"cucumber\", \"eggplant\", \"lettuce\", \"onion\", \"pea\", \"potato\"]\n    food_words = [\"apple\", \"banana\", \"carrot\", \"celery\", \"cucumber\", \"eggplant\", \"lettuce\", \"onion\", \"pea\", \"potato\"]"}
{"cat": "food", "slot": "generalization", "value": "drug of abuse", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are drug of abuse. \n        Output: ", "result": "\n        chocolate, cocaine, crack, ecstasy, heroin, marijuana, methamphetamine, morphine, oxycodone, peyote\n    \"\"\"\n    category = 'food'\n    condition = 'are drug of abuse'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category"}
{"cat": "food", "slot": "generalization", "value": "aliment", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are aliment. \n        Output: ", "result": "\n        chocolate, cookie, cake, ice cream, pizza, sandwich, sushi, burger, french fries, donut \n    \"\"\"\n    category = \"food\"\n    condition = \"are aliment\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as f:\n        for line in f:\n            line = line.strip()\n            if line.starts"}
{"cat": "food", "slot": "generalization", "value": "victuals", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are victuals. \n        Output: ", "result": "\n            apple, bread, cheese, chicken, coffee, cucumber, egg, fish, fruit, \n            hamburger, ice cream, jam, juice, kebab, lemonade, milk, muffin, \n            noodle, oatmeal, onion, orange, pizza, potato, pudding, rice, salad, \n            sandwich, soup, spaghetti, steak, sushi, tea, tomato, vegetable, \n            water, yogurt, zucchini.\n"}
{"cat": "food", "slot": "generalization", "value": "plant organ", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are plant organ. \n        Output: ", "result": "\n        apple, banana, carrot, cucumber, eggplant, lettuce, pea, potato, tomato, zucchini\n    \"\"\"\n    plant_organ_words = [\"apple\", \"banana\", \"carrot\", \"cucumber\", \"eggplant\", \"lettuce\", \"pea\", \"potato\", \"tomato\", \"zucchini\"]\n    food_plant_organ_words = []\n    for word in plant_organ_words:\n        if word.endswith(\".plant\"):\n            food_plant_organ_"}
{"cat": "food", "slot": "generalization", "value": "grain", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are grain. \n        Output: ", "result": "\n        bread, rice, pasta, cereal, corn, wheat, oats, barley, rye, millet\n    \"\"\"\n    food_words = [\"bread\", \"rice\", \"pasta\", \"cereal\", \"corn\", \"wheat\", \"oats\", \"barley\", \"rye\", \"millet\"]\n    grain_words = [\"rice\", \"pasta\", \"cereal\", \"corn\", \"wheat\", \"oats\", \"barley\", \"rye\", \"millet\"]\n    grain_"}
{"cat": "food", "slot": "generalization", "value": "nutrition", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are nutrition. \n        Output: ", "result": "\n        apples, bananas, carrots, eggs, fish, green beans, \n        lettuce, oranges, peaches, spinach, tomatoes.\n    \"\"\"\n    food_words = [\n        \"apple\", \"banana\", \"carrot\", \"egg\", \"fish\", \"green bean\",\n        \"lettuce\", \"orange\", \"peach\", \"spinach\", \"tomato\"\n    ]\n    nutrition_words = [word for word in food_words if \"nutrition\" in word]\n    return nutr"}
{"cat": "food", "slot": "generalization", "value": "plant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are plant. \n        Output: ", "result": "\n```\napple, banana, carrot, celery, cucumber, eggplant, lettuce, pea, potato, tomato\n```"}
{"cat": "food", "slot": "generalization", "value": "flora", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are flora. \n        Output: ", "result": "\n```\napple, banana, cherry, date, fig, grape, kiwi, melon, orange, pear\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are fruits. \n        Output: \n```\napple, banana, cherry, date, fig, grape, kiwi, melon, orange, pear\n```\n"}
{"cat": "food", "slot": "generalization", "value": "melon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are melon. \n        Output: ", "result": "\n            apple, banana, cantaloupe, honeydew, kiwi, watermelon, pear, grapes, strawberry, melon\n\"\"\"\n\nword_list = ['apple', 'banana', 'cantaloupe', 'honeydew', 'kiwi', 'watermelon', 'pear', 'grapes', 'strawberry', 'melon']\ncategory = 'food'\ncondition = 'are melon'\nfiltered_word_list = [word for word in word_list if word.lower"}
{"cat": "food", "slot": "generalization", "value": "solanaceous vegetable", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are solanaceous vegetable. \n        Output: ", "result": "\n        tomato, eggplant, pepper, potato,\n```"}
{"cat": "food", "slot": "generalization", "value": "baked goods", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are baked goods. \n        Output: ", "result": "\n```\nbread, cake, cookie, muffin, pastry, pizza, roll, biscuit, scone\n```\nExplanation: The words that belong to the category \"food\" and satisfy the condition \"are baked goods\" are: bread, cake, cookie, muffin, pastry, pizza, roll, biscuit, scone.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category:"}
{"cat": "food", "slot": "generalization", "value": "vine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are vine. \n        Output: ", "result": "\n```\napple, banana, cherry, grape, kiwi, lemon, orange, peach, pear, strawberry\n```\nExplanation: The words that belong to the category \"food\" and satisfy the condition \"are vine\" are apple, banana, cherry, grape, kiwi, lemon, orange, peach, pear, and strawberry.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n       "}
{"cat": "food", "slot": "generalization", "value": "citrous fruit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are citrous fruit. \n        Output: ", "result": "\n        orange, lemon, lime, \n        grapefruit, mandarin, \n        clementine, tangerine, \n        pomelo, bergamot, \n        kumquat.\n    \"\"\"\n    fruits = ['orange', 'lemon', 'lime', 'grapefruit', 'mandarin', 'clementine', 'tangerine', 'pomelo', 'bergamot', 'kumquat']\n    citrus_fruits = [fruit for fruit in fruits if 'citrus' in fruit"}
{"cat": "food", "slot": "generalization", "value": "graminaceous plant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are graminaceous plant. \n        Output: ", "result": "\n        rice, wheat, corn, oats, barley, rye, sorghum, millet, triticale, spelt\n    \"\"\"\n    category = 'food'\n    condition = 'are graminaceous plant'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of 10 words that belong to that category.\n        Desired output: comma separated list of words. \n        Category:"}
{"cat": "food", "slot": "generalization", "value": "liliaceous plant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are liliaceous plant. \n        Output: ", "result": "\n            asparagus, broccoli, cauliflower, celery, lettuce, onion, pea, radish, spinach, zucchini. \n        \"\"\"\n        category = \"food\"\n        condition = \"are liliaceous plant\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output:"}
{"cat": "food", "slot": "generalization", "value": "dairy product", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are dairy product. \n        Output: ", "result": "\n        milk, cheese, yogurt, butter, cream, ice cream, sour cream, cream cheese, buttermilk, cottage cheese.\n    \"\"\"\n    category = 'food'\n    condition = 'are dairy product'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words"}
{"cat": "food", "slot": "generalization", "value": "grass", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are grass. \n        Output: ", "result": "\n```\nlettuce, spinach, wheat, barley, oats, rye, corn, rice, millet, sorghum\n```\nExplanation: The words that belong to the category `food` and satisfy the condition `are grass` are `lettuce`, `spinach`, `wheat`, `barley`, `oats`, `rye`, `corn`, `rice`, `millet`, and `sorghum`.\n```"}
{"cat": "food", "slot": "generalization", "value": "legume", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are legume. \n        Output: ", "result": "\n        pea, bean, lentil, chickpea, soybean, kidney bean,\n```"}
{"cat": "food", "slot": "generalization", "value": "alliaceous plant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are alliaceous plant. \n        Output: ", "result": "\n```\ngarlic, onion, leek, chives, shallot, radish, wasabi, horseradish, mustard, mustard greens\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine"}
{"cat": "food", "slot": "generalization", "value": "root vegetable", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are root vegetable. \n        Output: ", "result": "\n```\ncarrot, potato, beet, turnip, parsnip, rutabaga, yam, sweet potato, cassava, taro\n```\nExplanation:\n```\n1. carrot\n2. potato\n3. beet\n4. turnip\n5. parsnip\n6. rutabaga\n7. yam\n8. sweet potato\n9. cassava\n10. taro\n```"}
{"cat": "food", "slot": "generalization", "value": "melon vine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are melon vine. \n        Output: ", "result": "\n        apple, banana, cantaloupe, honeydew, kiwi, melon, pear, watermelon, zucchini\n    \"\"\"\n    melon_vine_words = [\n        \"apple\",\n        \"banana\",\n        \"cantaloupe\",\n        \"honeydew\",\n        \"kiwi\",\n        \"melon\",\n        \"pear\",\n        \"watermelon\",\n        \"zucchini\"\n    ]\n    return \", \".join(melon_vine_words)\n"}
{"cat": "food", "slot": "generalization", "value": "gourd vine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are gourd vine. \n        Output: ", "result": "\n        pumpkin, zucchini, cucumber, squash, gourd, melon, watermelon, cantaloupe, pumpkin, butternut \n    \"\"\"\n    food_words = [\"pumpkin\", \"zucchini\", \"cucumber\", \"squash\", \"gourd\", \"melon\", \"watermelon\", \"cantaloupe\", \"pumpkin\", \"butternut\"]\n    gourd_vine_words = [word for word in food_words if \"gourd\" in word or \"v"}
{"cat": "food", "slot": "generalization", "value": "cruciferous plant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cruciferous plant. \n        Output: ", "result": "\n        arugula, broccoli, brussels sprouts, cabbage, cauliflower, kale, mustard greens, radish, wasabi, watercress\n    \"\"\"\n    category = \"food\"\n    condition = \"are cruciferous plant\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n```\n```\nExample:\n```\n```\nInput: \n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired"}
{"cat": "food", "slot": "generalization", "value": "citrus fruit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are citrus fruit. \n        Output: ", "result": "\n            orange, lemon, lime, \n            grapefruit, tangerine, \n            clementine, mandarin, \n            blood orange, pomelo, \n            grapefruit, tangerine, \n            clementine, mandarin, \n            blood orange, pomelo, \n            grapefruit, tangerine, \n            clementine, mandarin, \n            blood orange, pomelo, \n            grapefruit, tangerine, \n            clementine, mandarin, \n           "}
{"cat": "food", "slot": "generalization", "value": "brewage", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are brewage. \n        Output: ", "result": "\n```\nbeer, ale, lager, porter, stout, IPA, cider, mead, wine, whiskey\n```\nExplanation: The words that belong to the category \"food\" and satisfy the condition \"are brewage\" are beer, ale, lager, porter, stout, IPA, cider, mead, wine, and whiskey.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category"}
{"cat": "food", "slot": "generalization", "value": "snack food", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are snack food. \n        Output: ", "result": "\n        chips, crackers, popcorn, pretzels, candy, cookies, ice cream, cake, donuts, pizza \n    \"\"\"\n    snack_foods = [\n        \"chips\",\n        \"crackers\",\n        \"popcorn\",\n        \"pretzels\",\n        \"candy\",\n        \"cookies\",\n        \"ice cream\",\n        \"cake\",\n        \"donuts\",\n        \"pizza\"\n    ]\n    snack_foods = [word for word in snack"}
{"cat": "food", "slot": "generalization", "value": "bulbous plant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are bulbous plant. \n        Output: ", "result": "\n            asparagus, broccoli, brussels sprouts, cauliflower, celery, elephant ear, kohlrabi, onion, garlic, leek\n        \"\"\"\n        category = \"food\"\n        condition = \"are bulbous plant\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"food\", \"are bulbous plant\"))  # should print \"asparagus, broccoli, bruss"}
{"cat": "food", "slot": "generalization", "value": "crucifer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are crucifer. \n        Output: ", "result": "\n        arugula, broccoli, brussels sprouts, cabbage, cauliflower, kale, mustard greens, radish, wasabi, watercress\n    \"\"\"\n    food_words = [\"arugula\", \"broccoli\", \"brussels sprouts\", \"cabbage\", \"cauliflower\", \"kale\", \"mustard greens\", \"radish\", \"wasabi\", \"watercress\"]\n    crucifer_words = [word for word in food_words if \"crucifer\" in word]\n"}
{"cat": "food", "slot": "generalization", "value": "drug", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are drug. \n        Output: ", "result": "\n```\nchocolate, caffeine, aspirin, paracetamol, ibuprofen, codeine, morphine, diazepam, valium, xanax\n```\nExplanation: The words that belong to the category \"food\" and satisfy the condition \"are drug\" are chocolate, caffeine, aspirin, paracetamol, ibuprofen, codeine, morphine, diazepam, valium, and xanax.\n```\nProvide a list of 10 words that"}
{"cat": "food", "slot": "generalization", "value": "brew", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are brew. \n        Output: ", "result": "\n    \"\"\"\n    food_words = [\"beer\", \"brew\", \"ale\", \"malt\", \"hops\", \"barley\", \"yeast\", \"lager\", \"stout\", \"pilsner\"]\n    food_words = [word for word in food_words if word.startswith(\"brew\")]\n    print(\", \".join(food_words))\n```\nExplanation:\n\n* We define a list `food_words` that contains 10 words that belong to the category \"food\" and satisfy the condition \"are brew\"."}
{"cat": "food", "slot": "generalization", "value": "citrus", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are citrus. \n        Output: ", "result": "\n            orange, lemon, lime, \n            grapefruit, tangerine, \n            clementine, mandarin, \n            blood orange, pomelo, \n            grapefruit, tangerine, \n            clementine, mandarin, \n            blood orange, pomelo, \n            grapefruit, tangerine, \n            clementine, mandarin, \n            blood orange, pomelo, \n            grapefruit, tangerine, \n            clementine, mandarin, \n           "}
{"cat": "food", "slot": "generalization", "value": "gramineous plant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are gramineous plant. \n        Output: ", "result": "\n        rice, wheat, corn, barley, oats, rye, sorghum, millet, triticale, spelt\n    \"\"\"\n    category = 'food'\n    condition = 'are gramineous plant'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Example usage\nprint(get_words('fruit', 'are citrus'))\n# Output: orange, lemon, lime, grapefruit\nprint(get_words('drink', 'contain caffeine'))"}
{"cat": "food", "slot": "howToUse", "value": "dry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used when dry. \n        Output: ", "result": "\n            apple, bread, cheese, coffee, cereal, crackers, eggs, fruit, milk, toast \n        \"\"\"\n        category = \"food\"\n        condition = \"can be used when dry\"\n        words = [\n            \"apple\",\n            \"bread\",\n            \"cheese\",\n            \"coffee\",\n            \"cereal\",\n            \"crackers\",\n            \"eggs\",\n            \"fruit\",\n            \"milk\",\n            \"toast\"\n        ]\n        return \", \".join(words)"}
{"cat": "food", "slot": "accessory", "value": "milk", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with milk. \n        Output: ", "result": "\n            chocolate, ice cream, milkshake, yogurt, cheese, butter, sour cream, whipped cream, buttermilk, pudding\n        \"\"\"\n        category = 'food'\n        words = []\n        for word in all_words:\n            if 'milk' in word:\n                if word not in words:\n                    words.append(word)\n        if words:\n            print(', '.join(words))\n        else:\n            print(\"No words found.\")\n```\nExample:\n```\n"}
{"cat": "food", "slot": "accessory", "value": "sandwich", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with sandwich. \n        Output: ", "result": "\n        bread, cheese, meat, lettuce, tomato, onion, pickle, mustard, mayonnaise, ketchup\n```\n\n```\nDescribe a scenario where the input is a list of words and the output should be a single word that is the most frequently occurring word in the input list. \n        Desired output: single word. \n        Input: \n        [apple, banana, cherry, orange]\n        Output: \n        cherry\n```\n\n```\nDescribe a scenario where the input is a list of words and the"}
{"cat": "food", "slot": "generalization", "value": "fruit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are fruit. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grape, orange, peach, plum, strawberry\n    \"\"\"\n    fruits = ['apple', 'banana', 'cherry', 'date', 'fig', 'grape', 'orange', 'peach', 'plum', 'strawberry']\n    fruits_that_are_fruit = [word for word in fruits if word.lower() in ['apple', 'banana', 'cherry', 'date', 'fig', 'grape', 'orange', 'peach',"}
{"cat": "food", "slot": "generalization", "value": "pome", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are pome. \n        Output: ", "result": "\n        apple, cherry, pear, plum, quince, apricot, peach, nectarine, prune, cherry plum\n\"\"\"\n\nword_list = [\"apple\", \"cherry\", \"pear\", \"plum\", \"quince\", \"apricot\", \"peach\", \"nectarine\", \"prune\", \"cherry plum\"]\ncategory = \"food\"\ncondition = \"are pome\"\nfiltered_list = [word for word in word_list if word.startswith(category) and word.ends"}
{"cat": "food", "slot": "consistency", "value": "dry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be dry. \n        Output: ", "result": "\n          apple, bread, cake, cookie, crackers, dry-roasted peanuts, granola, oatmeal, rice, pasta\n\"\"\"\n\nword_list = []\nfor word in word_list:\n    if \"dry\" in word:\n        word_list.remove(word)\n\nfor word in word_list:\n    if \"dry\" not in word:\n        word_list.append(word)\n\nprint(\", \".join(word_list))\n```\nExplanation:\n\n1. Create an empty list"}
{"cat": "food", "slot": "generalization", "value": "edible fruit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are edible fruit. \n        Output: ", "result": " apple, banana, cherry, date, fig, grape, kiwi, mango, orange, peach\n    \"\"\"\n    fruits = []\n    for word in words:\n        if 'edible' in word and 'fruit' in word:\n            fruits.append(word)\n    return ', '.join(fruits)\n\n# Test the function\nprint(get_fruits_edible_fruit())\n```\nOutput:\napple, banana, cherry, date, fig, grape, kiwi, mango, orange, peach"}
{"cat": "food", "slot": "part", "value": "peel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  peel. \n        Output: ", "result": " apple, banana, orange, lemon, grape, pear, mango, papaya, kiwi, avocado \n    \"\"\"\n    fruits = ['apple', 'banana', 'orange', 'lemon', 'grape', 'pear', 'mango', 'papaya', 'kiwi', 'avocado']\n    fruits_with_peel = [fruit for fruit in fruits if 'peel' in fruit]\n    return ', '.join(fruits_with_peel)\n\nprint(get_fruits_"}
{"cat": "food", "slot": "part", "value": "pasta", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  pasta. \n        Output: ", "result": "\n        pasta, lasagna, spaghetti, macaroni, ravioli, penne, fettuccine, linguine, rigatoni, pappardelle \n    \"\"\"\n    food_words = [\"pasta\", \"lasagna\", \"spaghetti\", \"macaroni\", \"ravioli\", \"penne\", \"fettuccine\", \"linguine\", \"rigatoni\", \"pappardelle\"]\n    food_words = [word for word in food_words if word.lower().startswith(\"pasta\") and word."}
{"cat": "food", "slot": "part", "value": "wheat berry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  wheat berry. \n        Output: ", "result": "\n        bread, cake, cookie, donut, muffin, pasta, pizza, roll, sandwich, wheat berry \n    \"\"\"\n    category = \"food\"\n    condition = \"can have wheat berry\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition. \n        Desired output: a list of words. \n"}
{"cat": "food", "slot": "part", "value": "bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  bread. \n        Output: ", "result": " bread, butter, toast, roll, baguette, croissant, pita, naan, sourdough, bun. \n        \"\"\"\n        category = Category.objects.get(name='food')\n        condition = Condition.objects.get(name='can have')\n        words = Word.objects.filter(category=category, condition=condition)\n        return [word.name for word in words]\n\n    def get_random_word(self):\n        \"\"\"\n        Retrieve a random word from the database. \n        \"\"\"\n       "}
{"cat": "food", "slot": "product", "value": "bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make bread. \n        Output: ", "result": "\n        bread, flour, yeast, salt, sugar, water, milk, eggs, oven, knead\n```\n\n```\nDescribe a category and provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make bread. \n        Output: \n        bread, flour, yeast, salt, sugar, water, milk, eggs, oven, knead\n```\n\n```\nDescribe a category"}
{"cat": "food", "slot": "product", "value": "pasta", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make pasta. \n        Output: ", "result": "\n            tomato, basil, cheese, pasta, sauce, garlic, onion, olive oil, parmesan, spaghetti \n\"\"\"\n\nword_list = [\"spaghetti\", \"pasta\", \"sauce\", \"basil\", \"cheese\", \"garlic\", \"onion\", \"olive oil\", \"tomato\", \"parmesan\"]\ncategory = \"food\"\ncondition = \"can be used to make pasta\"\n\nfiltered_list = [word for word in word_list if word.lower().starts"}
{"cat": "food", "slot": "product", "value": "crop", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make crop. \n        Output: ", "result": "\n          apple, banana, carrot, corn, cucumber, eggplant, lettuce, onion, pea, potato\n    \"\"\"\n    food_words = [\"apple\", \"banana\", \"carrot\", \"corn\", \"cucumber\", \"eggplant\", \n                  \"lettuce\", \"onion\", \"pea\", \"potato\"]\n    for word in food_words:\n        if word.endswith(\".crop\"):\n            print(word)\n            break\n    else:\n        print(\"No words found.\")\n```"}
{"cat": "food", "slot": "generalization", "value": "cereal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cereal. \n        Output: ", "result": "\n```\ncereal, oats, wheat, rice, corn, barley, millet, rye, sorghum, spelt\n```\nExplanation: The words that belong to the category \"food\" and satisfy the condition \"are cereal\" are: cereal, oats, wheat, rice, corn, barley, millet, rye, sorghum, spelt.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words."}
{"cat": "food", "slot": "place", "value": "grape", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in grapes. \n        Output: ", "result": "1. grape, 2. seed, 3. skin, 4. juice, 5. pulp, 6. flavor, 7. aroma, 8. tartness, 9. sweetness, 10. texture.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in text:\n        if word.lower() in category.lower() and word.lower() in condition.lower():\n            words.append(word)\n    print(\", \"."}
{"cat": "food", "slot": "generalization", "value": "inebriant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are inebriant. \n        Output: ", "result": " beer, wine, whiskey, vodka, gin, rum, champagne, sake, tequila, brandy. \n        \"\"\"\n        category = 'food'\n        condition = 'inebriant'\n        result = []\n        for word in words:\n            if word.lower() in category_map[category] and category_map[category][word.lower()].lower() in condition_map[condition]:\n                result.append(word)\n        return result\n"}
{"cat": "food", "slot": "generalization", "value": "alcoholic beverage", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are alcoholic beverage. \n        Output: ", "result": "1. Beer, 2. Wine, 3. Vodka, 4. Gin, 5. Rum, 6. Whiskey, 7. Brandy, 8. Cider, 9. Mead, 10. Absinthe\n    \"\"\"\n    alcoholic_beverage_words = [\n        \"Beer\", \"Wine\", \"Vodka\", \"Gin\", \"Rum\", \"Whiskey\", \"Brandy\", \"Cider\", \"Mead\", \"Absinthe\"\n    ]\n   "}
{"cat": "food", "slot": "generalization", "value": "crop", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are crop. \n        Output: ", "result": "\n        apple, banana, carrot, corn, cucumber, eggplant, lettuce, onion, pea, potato\n    \"\"\"\n    food_words = [\n        \"apple\",\n        \"banana\",\n        \"carrot\",\n        \"corn\",\n        \"cucumber\",\n        \"eggplant\",\n        \"lettuce\",\n        \"onion\",\n        \"pea\",\n        \"potato\"\n    ]\n    crop_words = [word for word in food_words if \"crop\" in word]\n"}
{"cat": "food", "slot": "generalization", "value": "alcoholic drink", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are alcoholic drink. \n        Output: ", "result": "1. Beer, 2. Wine, 3. Vodka, 4. Gin, 5. Rum, 6. Whiskey, 7. Brandy, 8. Cider, 9. Mead, 10. Absinthe\n    \"\"\"\n    alcoholic_drink_words = [\n        \"Beer\", \"Wine\", \"Vodka\", \"Gin\", \"Rum\", \"Whiskey\", \"Brandy\", \"Cider\", \"Mead\", \"Absinthe\"\n    ]\n   "}
{"cat": "food", "slot": "generalization", "value": "intoxicant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are intoxicant. \n        Output: ", "result": "\n        beer, wine, whiskey, vodka, gin, rum, tequila, brandy, liqueur, champagne.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"intoxicant\" in word:\n            words.append(word)\n    return words\n\nif __name__ == '__main__':\n    word_list = ['beer', 'wine', 'whiskey', 'vodka', 'gin', 'rum', 'tequila', 'brandy', 'liqueur', '"}
{"cat": "food", "slot": "generalization", "value": "alcohol", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are alcohol. \n        Output: ", "result": "\n```\nwine, beer, whiskey, vodka, gin, rum, brandy, champagne, sake, tequila\n```\n\nExplanation:\n```\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Desired output: comma separated list of words.\n3. Category: food.\n4. Condition: are alcohol.\n5. Output: wine, beer, whiskey, vodka, gin, rum, brandy, champagne, sake, tequila."}
{"cat": "food", "slot": "generalization", "value": "maize", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are maize. \n        Output: ", "result": "\n        corn,maize,cornmeal,cornflour,maizeflour,cornstarch,cornbread,cornchips,cornflakes,cornmeal,maize\n```\n\n```\nQuestion 2: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are fruits. \n        Output: \n        apple,banana,orange,"}
{"cat": "food", "slot": "generalization", "value": "dish", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are dish. \n        Output: ", "result": "\n        chicken, pasta, pizza, lasagna, risotto, ravioli, spaghetti, fettuccine, gnocchi, tortellini.\n    \"\"\"\n    category = 'food'\n    condition = 'are dish'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Example usage\nprint(get_words_in_category(category='books', condition='are genre'))\nprint(get_words_in_category(category='movies', condition='are director'))\nprint"}
{"cat": "food", "slot": "accessory", "value": "salad", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with salad. \n        Output: ", "result": "\n            arugula, basil, cucumber, dill, feta, garlic, \n            mozzarella, olive oil, parmesan, ranch. \n        \"\"\"\n        category = 'food'\n        condition = 'may have to do with salad'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('food', 'may have to do with salad'))\n```\n\u8f93\u51fa\uff1a\narugula, basil, cucumber, d"}
{"cat": "food", "slot": "specialization", "value": "barley", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are barley. \n        Output: ", "result": "\n        bread, cereal, flour, grain, malt, oat, pasta, rice, wheat, barley\n    \"\"\"\n    food_words = [\"bread\", \"cereal\", \"flour\", \"grain\", \"malt\", \"oat\", \"pasta\", \"rice\", \"wheat\", \"barley\"]\n    barley_words = [word for word in food_words if \"barley\" in word]\n    return \", \".join(barley_words) if barley_words else \"No words found.\"\n\n"}
{"cat": "food", "slot": "specialization", "value": "grist", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are grist. \n        Output: ", "result": "\n    \"\"\"\n    food_words = [\n        \"grist\",\n        \"flour\",\n        \"grain\",\n        \"bread\",\n        \"cereal\",\n        \"pasta\",\n        \"rice\",\n        \"corn\",\n        \"wheat\",\n        \"barley\"\n    ]\n    return \", \".join(food_words)\n\ndef get_category(category):\n    \"\"\"\n    Given a category, return a list of 10 words that belong to that category. \n        Desired output: comma separated list"}
{"cat": "food", "slot": "specialization", "value": "wild rice", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are wild rice. \n        Output: ", "result": "\n        wild,rice,wild,rice,wild,rice,wild,rice,wild,rice,wild,rice,wild,rice,wild,rice,wild,rice,wild,rice,wild,rice,wild,rice,wild,rice,wild,rice,wild,rice,wild,rice,wild,rice,wild,rice,wild,rice,wild,rice,wild,rice,wild,rice,wild,rice,wild,rice,wild,rice,wild"}
{"cat": "food", "slot": "specialization", "value": "barleycorn", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are barleycorn. \n        Output: ", "result": "\n            apple, bread, cheese, corn, cucumber, egg, fish, milk, oat, potato \n\"\"\"\n\nword_list = [\"apple\", \"bread\", \"cheese\", \"corn\", \"cucumber\", \"egg\", \"fish\", \"milk\", \"oat\", \"potato\"]\nfiltered_list = []\nfor word in word_list:\n    if \"barleycorn\" in word:\n        filtered_list.append(word)\n\nprint(\", \".join(filtered_list))\n```\n\n"}
{"cat": "food", "slot": "specialization", "value": "breadstick", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are breadstick. \n        Output: ", "result": "\n        pizza, breadstick, garlic bread, calzone, stromboli, focaccia, ciabatta, baguette, crostini, bruschetta.\n    \"\"\"\n    food_words = [\"pizza\", \"breadstick\", \"garlic bread\", \"calzone\", \"stromboli\", \"focaccia\", \"ciabatta\", \"baguette\", \"crostini\", \"bruschetta\"]\n    breadstick_words = [word for word in food_words if \"breadstick\" in word]\n"}
{"cat": "food", "slot": "specialization", "value": "Indian rice", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Indian rice. \n        Output: ", "result": "\n```\nbasmati, biryani, idli, dosa, naan, roti, chapati, paratha, pulao\n```\nExplanation:\n```\n1. basmati\n2. biryani\n3. idli\n4. dosa\n5. naan\n6. roti\n7. chapati\n8. paratha\n9. pulao\n```"}
{"cat": "food", "slot": "specialization", "value": "buckwheat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are buckwheat. \n        Output: ", "result": "\n        beechnut, buckwheat, buckwheat honey, buckwheat groats, \n        buckwheat flour, buckwheat noodles, buckwheat cake, \n        buckwheat pancake, buckwheat crackers\n    \"\"\"\n    category = 'food'\n    condition = 'are buckwheat'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Example usage\nprint("}
{"cat": "food", "slot": "specialization", "value": "ciabatta", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are ciabatta. \n        Output: ", "result": "\n```\nbread, ciabatta, dough, flour, Italian, kneaded, olive oil, salt, yeast\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammals. \n        Output: \n```\ncat, dog, cow, elephant, giraffe, horse, kangaroo, whale, dolph"}
{"cat": "food", "slot": "specialization", "value": "malt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are malt. \n        Output: ", "result": "\n        bread, cake, cookie, donut, muffin, pastry, roll, scone, biscuit, croissant \n    \"\"\"\n    category = \"food\"\n    condition = \"are malt\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition within the category.\n    \"\"\"\n    words = []\n    if category == \"animals\":\n       "}
{"cat": "food", "slot": "specialization", "value": "oat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are oat. \n        Output: ", "result": "\n            oatmeal, oat bran, oat cereal, oat flakes, oat milk, oat muffin, oat scone, oatmeal cookie, oat bran muffin, oat bran cookie.\n    \"\"\"\n    category = 'food'\n    condition = 'are oat'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the"}
{"cat": "food", "slot": "specialization", "value": "edible corn", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are edible corn. \n        Output: ", "result": "\n        corn, popcorn, maize, sweet corn, cornmeal, cornstarch, corn oil, corn syrup, corn flakes, corn nuts\n    \"\"\"\n    food_category = Category.objects.get(name='food')\n    edible_corn_category = Category.objects.get(name='edible corn')\n    edible_corn_products = Product.objects.filter(category=edible_corn_category)\n    edible_corn_words = [product.name for product in edible_corn_products"}
{"cat": "food", "slot": "specialization", "value": "brown bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are brown bread. \n        Output: ", "result": "\n```\nbrown, bread, whole, grain, rye, wheat, oat, sourdough, ciabatta, pumpernickel\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: have wings. \n        Output: \n```\neagle, butterfly, hummingbird, bat, pterodactyl, dragonfly"}
{"cat": "food", "slot": "specialization", "value": "millet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are millet. \n        Output: ", "result": "1. Ragi, 2. Jowar, 3. Bajra, 4. Little millet, 5. Kodo millet, 6. Barnyard millet, 7. Proso millet, 8. Foxtail millet, 9. Pearl millet, 10. Kulthi.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"mil\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):"}
{"cat": "food", "slot": "specialization", "value": "groats", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are groats. \n        Output: ", "result": "\n        */\n        public List<string> GetWords(string category, string condition)\n        {\n            List<string> words = new List<string>();\n\n            using (SqlConnection connection = new SqlConnection(connectionString))\n            {\n                connection.Open();\n\n                using (SqlCommand command = new SqlCommand(\"GetWords\", connection))\n                {\n                    command.CommandType = CommandType.StoredProcedure;\n                    command.Parameters.AddWithValue(\"@Category\", category);\n                    command.Parameters.AddWithValue(\"@Condition\", condition"}
{"cat": "food", "slot": "specialization", "value": "baguette", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are baguette. \n        Output: ", "result": "\n```\nbaguette, croissant, pain, brioche, pain au chocolat, pain de mie, baguette, brioche, croissant, pain au chocolat\n```\nExplanation: The words that belong to the category \"food\" and satisfy the condition \"are baguette\" are: baguette, croissant, pain, brioche, pain au chocolat, pain de mie, baguette, brioche, croissant, pain au chocolat.\n```\nProvide a list of 10"}
{"cat": "food", "slot": "specialization", "value": "polished rice", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are polished rice. \n        Output: ", "result": "1. Rice, 2. Polished, 3. Rice, 4. Polished, 5. Rice, 6. Polished, 7. Rice, 8. Polished, 9. Rice, 10. Polished.\n    \"\"\"\n    polished_words = []\n    for word in words:\n        if \"polished\" in word and \"rice\" in word:\n            polished_words.append(word)\n    return \", \".join(polished_words)\n\ndef count_vowels(word):"}
{"cat": "food", "slot": "specialization", "value": "flatbread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are flatbread. \n        Output: ", "result": "\n        pizza, naan, tortilla, crepe, flatbread, pancake, arepas, chapati, roti, paratha\n    \"\"\"\n    food_words = [\"pizza\", \"naan\", \"tortilla\", \"crepe\", \"flatbread\", \"pancake\", \"arepas\", \"chapati\", \"roti\", \"paratha\"]\n    flatbread_words = [word for word in food_words if \"flatbread\" in word]\n    print(\", \".join(flatbread_words))\n```"}
{"cat": "food", "slot": "specialization", "value": "table wine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are table wine. \n        Output: ", "result": "\n```\nChardonnay, Cabernet Sauvignon, Merlot, Pinot Noir, Sauvignon Blanc, Syrah, Zinfandel, Pinot Grigio, Sangiovese, Riesling\n```\n```"}
{"cat": "food", "slot": "specialization", "value": "garlic bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are garlic bread. \n        Output: ", "result": "\n```\ngarlic,bread,breadsticks,rolls,oven,oven-roasted,oven-ready,oven-warmed,oven-fresh,oven-baked\n```\n```\nDesired output: comma separated list of words. \n        Category: food. \n        Condition: are chocolate. \n        Output: \n```\nchocolate,chocolate-chip,chocolate-covered,chocolate-dipped,chocolate-flavored,chocolate-hazelnut,choc"}
{"cat": "food", "slot": "specialization", "value": "Armerican cheddar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Armerican cheddar. \n        Output: ", "result": "\n        cheese, cheddar, american, cheese, cheddar, american, cheese, cheddar, american, cheese, cheddar, american, cheese, cheddar, american, cheese, cheddar, american, cheese, cheddar, american, cheese, cheddar, american, cheese, cheddar, american, cheese, cheddar, american, cheese, cheddar, american, cheese, cheddar, american, cheese, cheddar"}
{"cat": "food", "slot": "specialization", "value": "rowanberry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are rowanberry. \n        Output: ", "result": "\n        blackberry, blueberry, cranberry, currant, gooseberry, \n        huckleberry, loganberry, raspberry, strawberry, \n        redcurrant, blackcurrant, redberry, blueberry, \n        blackberry, blueberry, cranberry, currant, gooseberry, \n        huckleberry, loganberry, raspberry, strawberry, \n        blackberry, blueberry, cranberry, currant, gooseberry, \n        huckleberry, loganberry,"}
{"cat": "food", "slot": "specialization", "value": "torpedo", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are torpedo. \n        Output: ", "result": "\n    \"\"\"\n    food_words = [\"pizza\", \"hamburger\", \"ice cream\", \"sandwich\", \"taco\", \"sushi\", \"burger\", \"pasta\", \"salad\", \"soup\"]\n    torpedo_words = [\"torpedo\", \"torpedoes\", \"torpedoed\", \"torpedoing\", \"torpedoed\", \"torpedoing\", \"torpedo\", \"torpedoes\", \"torpedoed\", \"torpedoing\", \"torpedoed\", \"torpedo"}
{"cat": "food", "slot": "specialization", "value": "durum", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are durum. \n        Output: ", "result": "\n```\nbread, pasta, durum, semolina, spaghetti, macaroni, couscous, bulgur, farro, quinoa\n```\nExplanation: The words that belong to the category \"food\" and satisfy the condition \"are durum\" are bread, pasta, durum, semolina, spaghetti, macaroni, couscous, bulgur, farro, and quinoa.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. "}
{"cat": "food", "slot": "specialization", "value": "herbal tea", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are herbal tea. \n        Output: ", "result": "\n```\nchamomile, peppermint, lavender, rooibos, hibiscus, rosehip, ginger, lemongrass, yerba mate, dandelion\n```\nExplanation:\n\n1. The category is food.\n2. The condition is that the words belong to the category of herbal tea.\n3. The output is a comma-separated list of 10 words that satisfy the condition.\n4. The words in the output are chamomile, peppermint, lavender, rooibos, h"}
{"cat": "food", "slot": "specialization", "value": "Red Delicious", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Red Delicious. \n        Output: ", "result": "\n        apple, banana, cherry, date, grapes, honeydew, kiwi, melon, orange, pear\n    \"\"\"\n    words = []\n    for word in word_list:\n        if word.startswith(\"Red Delicious\"):\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n        Desired output: a list of numbers, where the i-th number is the number"}
{"cat": "food", "slot": "specialization", "value": "Dubonnet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Dubonnet. \n        Output: ", "result": "\n```\napricot, blackberry, cherry, currant, elderberry, gooseberry, huckleberry, loganberry, raspberry, strawberry\n```\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\nlemon, lime, orange, grapefruit, tangerine, clementine, mandarin,"}
{"cat": "food", "slot": "specialization", "value": "Cabernet Sauvignon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Cabernet Sauvignon. \n        Output: ", "result": "\n```\ncabernet, sauvignon, merlot, pinot, noir, zinfandel, syrah, grenache, moscato, sangiovese\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: movies. \n        Condition: are comedies. \n        Output: \n```\ncomedy, romantic, action, adventure, drama, horror, thriller"}
{"cat": "food", "slot": "specialization", "value": "home-fried potatoes", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are home-fried potatoes. \n        Output: ", "result": "\n        french fries, mashed potatoes, home fries, potato chips, roasted potatoes, baked potatoes, hash browns, potato wedges, potato pancakes, potato dumplings.\n    \"\"\"\n    category = 'food'\n    condition = 'are home-fried potatoes'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the"}
{"cat": "food", "slot": "specialization", "value": "Gouda cheese", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Gouda cheese. \n        Output: ", "result": "\n        cheddar, brie, gouda, mozzarella, parmesan, provolone, \n        fontina, blue cheese, goat cheese, camembert.\n    \"\"\"\n    category = 'food'\n    condition = 'are Gouda cheese'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Test the function\nprint(get_words('food', 'are Gouda cheese'))\n```\nOutput:\ncheddar, brie, gou"}
{"cat": "food", "slot": "specialization", "value": "brick cheese", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are brick cheese. \n        Output: ", "result": "\n```\nbrie, cheddar, gouda, mozzarella, parmesan, provolone, romano, swiss, fontina, gorgonzola\n```\nExplanation:\n\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Category: food.\n3. Condition: are brick cheese.\n4. Output: brie, cheddar, gouda, mozzarella, parmesan, provolone, romano, swiss, fontina,"}
{"cat": "food", "slot": "specialization", "value": "plonk", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are plonk. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grape, honeydew, kiwi, melon, nectarine, orange, peach, pear, plum, raspberry, strawberry, watermelon\n        \"\"\"\n        category = \"food\"\n        condition = \"are plonk\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"food\", \"are fruits\"))\nprint(get_words(\""}
{"cat": "food", "slot": "specialization", "value": "gravy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are gravy. \n        Output: ", "result": "\n            chicken, mushroom, onion, beef, gravy, biscuit, potato, sausage, corn, tomato \n        \"\"\"\n        category = 'food'\n        condition = 'are gravy'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_with_category_and_condition(self):\n        self.assertEqual(get_words('food', 'are gravy'), 'chicken, mushroom, onion, beef, grav"}
{"cat": "food", "slot": "specialization", "value": "demitasse", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are demitasse. \n        Output: ", "result": "\n        coffee, espresso, cappuccino, latte, macchiato, mocha, caf\u00e9, Americano, Mocha Frappuccino, Caffe Mocha.\n    \"\"\"\n    category = 'food'\n    condition = 'are demitasse'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Example usage\nprint(get_word_list('food', 'are fruits'))\nprint(get_word_list('food', 'are vegetables'))\n"}
{"cat": "food", "slot": "specialization", "value": "hamburger", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are hamburger. \n        Output: ", "result": "\n```\nburger, meat, patty, bun, cheese, lettuce, tomato, onion, ketchup, mustard\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammals. \n        Output: \n```\ncat, dog, cow, pig, elephant, giraffe, whale, dolphin, horse, sheep\n"}
{"cat": "food", "slot": "specialization", "value": "hoagie", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are hoagie. \n        Output: ", "result": "\n        ham, turkey, cheese, lettuce, tomato, onion, pickle, mayonnaise, ketchup, mustard \n    \"\"\"\n    food_words = [\"ham\", \"turkey\", \"cheese\", \"lettuce\", \"tomato\", \"onion\", \"pickle\", \"mayonnaise\", \"ketchup\", \"mustard\"]\n    hoagie_words = [word for word in food_words if \"hoagie\" in word]\n    if len(hoagie_words) == 0:\n        print(\""}
{"cat": "food", "slot": "specialization", "value": "cubeb", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cubeb. \n        Output: ", "result": "\n    \"\"\"\n    cubeb_words = [\"cubeb\", \"cubeb oil\", \"cubeb berries\", \"cubeb powder\", \"cubeb seeds\", \"cubeb extract\", \"cubeb essential oil\", \"cubeb spice\", \"cubeb herb\"]\n    cubeb_words = [word for word in cubeb_words if word.lower() == \"cubeb\" or word.lower() == \"cubeb oil\" or word.lower() == \"cubeb berries\" or word.lower() == \""}
{"cat": "food", "slot": "specialization", "value": "cappuccino coffee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cappuccino coffee. \n        Output: ", "result": "\n```\nespresso, cappuccino, latte, mocha, caffe, coffee, macchiato, Americano, Mocha Frappuccino, Caffe Mocha\n```\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are big cats. \n        Output: \n```\nlion, tiger, leopard, jaguar, cheet"}
{"cat": "food", "slot": "specialization", "value": "quandong", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are quandong. \n        Output: ", "result": "\n    \"\"\"\n    food_words = [\"quandong\", \"plum\", \"date\", \"prune\", \"peach\", \"apricot\", \"fig\", \"kiwi\", \"berry\", \"berry fruit\"]\n    food_words = [word for word in food_words if word.lower() == \"quandong\"]\n    print(\", \".join(food_words))\n```\nExplanation:\n\n1. First, we define a list of 10 words that belong to the category \"food\" and satisfy the condition that they are \"quandong\"."}
{"cat": "food", "slot": "specialization", "value": "hero", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are hero. \n        Output: ", "result": "\n        chocolate, cookie, cake, ice cream, pizza, burger, sandwich, sushi, taco, pudding\n    \"\"\"\n    category = \"food\"\n    words = [\n        \"chocolate\",\n        \"cookie\",\n        \"cake\",\n        \"ice cream\",\n        \"pizza\",\n        \"burger\",\n        \"sandwich\",\n        \"sushi\",\n        \"taco\",\n        \"pudding\"\n    ]\n    hero_words = [word for word in words"}
{"cat": "food", "slot": "specialization", "value": "tuna fish salad", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are tuna fish salad. \n        Output: ", "result": "\n        tuna, salad, fish, canned, protein, healthy, seafood, sandwich, ingredients, lunch \n    \"\"\"\n    food_words = [\"tuna\", \"salad\", \"fish\", \"canned\", \"protein\", \"healthy\", \"seafood\", \"sandwich\", \"ingredients\", \"lunch\"]\n    tuna_salad_words = [word for word in food_words if \"tuna\" in word or \"salad\" in word]\n    if \"tuna\" in tuna"}
{"cat": "food", "slot": "specialization", "value": "pretzel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are pretzel. \n        Output: ", "result": "\n          bagel, croissant, donut, muffin, pretzel, roll, scone, cookie, bread, pastry\n```\n\n```\nDescribe a scenario where the input is a list of strings, where each string is a word that belongs to a specific category. \n        The words are sorted in alphabetical order. \n        The goal is to find the k-th word in the list, where k is a positive integer. \n        Return the index of the k-th word in the list. \n        If the k-th word is not found, return"}
{"cat": "food", "slot": "specialization", "value": "Triticum spelta", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Triticum spelta. \n        Output: ", "result": "\n        Wheat, Spelt, Barley, Rye, Triticale, Emmer, Khorasan Wheat, Kamut, Durum, Semolina\n    \"\"\"\n    category = \"food\"\n    condition = \"are Triticum spelta\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n"}
{"cat": "food", "slot": "specialization", "value": "pod", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are pod. \n        Output: ", "result": "\n        apple, banana, cherry, date, fig, grape, kiwi, peach, plum, strawberry\n    \"\"\"\n    food_words = [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"kiwi\", \"peach\", \"plum\", \"strawberry\"]\n    pod_words = [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"kiwi\", \"peach\", \"plum\", \"strawberry\"]\n    common_words = set("}
{"cat": "food", "slot": "specialization", "value": "farm cheese", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are farm cheese. \n        Output: ", "result": "\n        cheddar, mozzarella, brie, gouda, parmesan, feta, goat cheese, blue cheese, camembert, ricotta\n    \"\"\"\n    cheese_words = [\"cheddar\", \"mozzarella\", \"brie\", \"gouda\", \"parmesan\", \"feta\", \"goat cheese\", \"blue cheese\", \"camembert\", \"ricotta\"]\n    farm_cheese_words = [word for word in cheese_words if \"farm\" in word]\n    return farm"}
{"cat": "food", "slot": "specialization", "value": "hero sandwich", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are hero sandwich. \n        Output: ", "result": "\n        ham, cheese, bread, lettuce, tomato, onion, pickle, mustard, mayonnaise, ketchup \n    \"\"\"\n    category = Category.objects.get(name='food')\n    condition = Condition.objects.get(name='are hero sandwich')\n    words = Word.objects.filter(category=category, condition=condition)\n    return [word.word for word in words]\n\ndef get_random_word_from_category(category):\n    \"\"\"\n    Retrieve a random word from the given category"}
{"cat": "food", "slot": "specialization", "value": "yellow berry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are yellow berry. \n        Output: ", "result": "\n            apple, banana, cherry, lemon, lime, orange, peach, pear, plum, apricot\n    \"\"\"\n    category = \"food\"\n    condition = \"are yellow berry\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_with_length(category, length):\n    \"\"\"\n    Given a category and a length, return a list of words from that category that have the specified length.\n        Desired output: a list of words. \n        Category"}
{"cat": "food", "slot": "specialization", "value": "pyxis", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are pyxis. \n        Output: ", "result": "\n    \"\"\"\n    food_words = [\n        \"pyxis\",\n        \"pyxis\",\n        \"pyxis\",\n        \"pyxis\",\n        \"pyxis\",\n        \"pyxis\",\n        \"pyxis\",\n        \"pyxis\",\n        \"pyxis\",\n        \"pyxis\"\n    ]\n    return \", \".join(food_words)\n\nprint(find_pyxis_words(category='food', condition='are pyxis'))\n```\nOutput:\npyxis, pyxis, pyxis, pyxis, pyxis,"}
{"cat": "food", "slot": "specialization", "value": "Liederkranz", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Liederkranz. \n        Output: ", "result": "\n        apple, cake, chocolate, cookie, donut, bread, ice cream, pizza, sandwich, \n        Category: food. \n        Condition: are Liederkranz. \n        Output: \n        apple, cake, chocolate, cookie, donut, bread, ice cream, pizza, sandwich, \n        Category: food. \n        Condition: are Liederkranz. \n        Output: \n        apple, cake, chocolate, cookie, donut, bread, ice cre"}
{"cat": "food", "slot": "specialization", "value": "cheddar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cheddar. \n        Output: ", "result": "\n        cheddar,cheddar,cheddar,cheddar,cheddar,cheddar,cheddar,cheddar,cheddar,cheddar. \n        \"\"\"\n        category = 'food'\n        condition = 'are cheddar'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_1(self):\n        self.assertEqual(self.func(self.category, self.condition), 'cheddar,cheddar,cheddar,cheddar,cheddar,cheddar,cheddar,ched"}
{"cat": "food", "slot": "specialization", "value": "processed cheese", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are processed cheese. \n        Output: ", "result": "\n        cheddar, processed, cheese, cheese, cheese, cheese, cheese, cheese, cheese, cheese. \n        \"\"\"\n        category = 'food'\n        condition = 'are processed cheese'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_category_and_condition(self):\n        self.assertEqual(self.get_words('food', 'are processed cheese'), 'cheddar, processed, cheese, cheese, cheese, cheese"}
{"cat": "food", "slot": "specialization", "value": "ale", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are ale. \n        Output: ", "result": "\n        beer, ale, lager, malt, hops, yeast, barley, malted barley, malted wheat, malted rye \n    \"\"\"\n    food_words = [\"beer\", \"ale\", \"lager\", \"malt\", \"hops\", \"yeast\", \"barley\", \"malted barley\", \"malted wheat\", \"malted rye\"]\n    ale_words = [word for word in food_words if \"ale\" in word]\n    print(\", \".join(ale_words"}
{"cat": "food", "slot": "specialization", "value": "sun tea", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are sun tea. \n        Output: ", "result": "iced tea, lemonade, iced coffee, iced green tea, iced chai tea, iced hibiscus tea, iced raspberry tea, iced peach tea, iced mango tea, iced ginger tea.\n    \"\"\"\n    category = 'food'\n    condition = 'are sun tea'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition"}
{"cat": "food", "slot": "specialization", "value": "tossed salad", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are tossed salad. \n        Output: ", "result": "\n```\nlettuce, tomato, onion, cucumber, carrot, bell pepper, celery, ranch dressing, croutons, cheese\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: have fur. \n        Output: \n```\ncat, dog, bear, rabbit, fox, sheep, goat, raccoon,"}
{"cat": "food", "slot": "specialization", "value": "hard wheat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are hard wheat. \n        Output: ", "result": "\n        bread, roll, bun, cracker, cookie, cake, pastry, muffin, biscuit, croissant \n    \"\"\"\n    food_words = [\"bread\", \"roll\", \"bun\", \"cracker\", \"cookie\", \"cake\", \"pastry\", \"muffin\", \"biscuit\", \"croissant\"]\n    hard_wheat_words = [word for word in food_words if \"hard\" in word and \"wheat\" in word]\n    return \", \".join(hard_wheat_words)"}
{"cat": "food", "slot": "specialization", "value": "American cheese", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are American cheese. \n        Output: ", "result": "\n        cheddar, swiss, american, mozzarella, provolone, gouda, colby, monterey jack, brie, blue cheese.\n    \"\"\"\n    category = \"food\"\n    cheese_list = [\"cheddar\", \"swiss\", \"american\", \"mozzarella\", \"provolone\", \"gouda\", \"colby\", \"monterey jack\", \"brie\", \"blue cheese\"]\n    cheese_list = [word for word in cheese_list if word.startswith(category"}
{"cat": "food", "slot": "specialization", "value": "cracker", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cracker. \n        Output: ", "result": "\n            crackers, bread, cookie, cake, biscuit, roll, toast, muffin, bagel, pastry \n        \"\"\"\n        category = 'food'\n        condition = 'are cracker'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_with_category_and_condition(self):\n        self.assertEqual(get_words('food', 'are cracker'), 'crackers, bread, cookie, cake, biscuit, roll"}
{"cat": "food", "slot": "specialization", "value": "matzoh", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are matzoh. \n        Output: ", "result": "\n```\nmatzoh, matzoh-balls, matzoh-meal, matzoh-cracker, matzoh-brei, matzoh-pizza, matzoh-tortilla, matzoh-cake, matzoh-brie, matzoh-hamantaschen\n```\n\nExplanation:\n```\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Desired output: comma separated list of words.\n3. Category: food.\n4. Cond"}
{"cat": "food", "slot": "specialization", "value": "decaffeinated coffee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are decaffeinated coffee. \n        Output: ", "result": "\n        decaffeinated, coffee, caffeine, espresso, latte, mocha, Americano, cappuccino, coffee beans, instant coffee.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() == condition.lower():\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n"}
{"cat": "food", "slot": "specialization", "value": "bun", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are bun. \n        Output: ", "result": "\n```\nbread, roll, bun, loaf, hamburger, hotdog, sandwich, baguette, croissant, bunny\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: color. \n        Condition: are blue. \n        Output: \n```\nred, blue, purple, pink, green, yellow, orange, brown, black, white\n```\n\nExample:"}
{"cat": "food", "slot": "specialization", "value": "Riesling", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Riesling. \n        Output: ", "result": "1. Riesling, 2. Riesling, 3. Riesling, 4. Riesling, 5. Riesling, 6. Riesling, 7. Riesling, 8. \n```"}
{"cat": "food", "slot": "specialization", "value": "zep", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are zep. \n        Output: ", "result": "\n    \"\"\"\n    zep_foods = [\"zep\", \"zeppelin\", \"zeppelins\", \"zepp\", \"zepplin\", \"zepplins\", \"zeppling\", \"zeppling\", \"zeppling\", \"zeppling\", \"zeppling\", \"zeppling\", \"zeppling\", \"zeppling\", \"zeppling\", \"zeppling\", \"zeppling\", \"zeppling\", \"zeppling\", \"zeppling\", \"zeppling\", \"zeppling\", \"zeppling\", \"zepp"}
{"cat": "food", "slot": "specialization", "value": "coffee substitute", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are coffee substitute. \n        Output: ", "result": "\n```\nespresso, mocha, latte, cappuccino, macchiato, americano, frappuccino, \nmocha-frappuccino, latte-mocha, cappuccino-mocha\n```\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: have wings. \n        Output: \n```\nbird, butterfly"}
{"cat": "food", "slot": "specialization", "value": "wild emmer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are wild emmer. \n        Output: ", "result": "\n        */\n        public List<string> GetWords(string category, string condition)\n        {\n            List<string> words = new List<string>();\n\n            using (MySqlConnection connection = new MySqlConnection(connectionString))\n            {\n                connection.Open();\n\n                using (MySqlCommand command = new MySqlCommand(\"SELECT word FROM words WHERE category = @category AND condition = @condition\", connection))\n                {\n                    command.Parameters.AddWithValue(\"@category\", category);\n                    command.Parameters.AddWithValue(\"@condition\", condition);"}
{"cat": "food", "slot": "specialization", "value": "bitter orange", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are bitter orange. \n        Output: ", "result": "\n            artichoke, burdock, dandelion, hibiscus, juniper, licorice, nasturtium, quince, sarsaparilla, yarrow \n    \"\"\"\n    category = \"food\"\n    bitter_orange_words = [\n        \"artichoke\",\n        \"burdock\",\n        \"dandelion\",\n        \"hibiscus\",\n        \"juniper\",\n        \"licorice\",\n        \"nasturtium\",\n        \"quince\",\n        \"sarsapar"}
{"cat": "food", "slot": "specialization", "value": "sourdough bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are sourdough bread. \n        Output: ", "result": "\n```\nbaguette, ciabatta, rye, sourdough, pain au chocolat, pain aux raisins, pain de mie, brioche, croissant, pain de campagne\n```\nExplanation: \n        The words that belong to the category \"food\" and satisfy the condition \"are sourdough bread\" are: \n        baguette, ciabatta, rye, sourdough, pain au chocolat, pain aux raisins, pain de mie, brioche, croissant, pain de campagne. \n       "}
{"cat": "food", "slot": "specialization", "value": "Rhone wine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Rhone wine. \n        Output: ", "result": "\n            Chateauneuf-du-Pape, Cotes-du-Rhone, Gigondas, Tavel,\n            Vacqueyras, Beaumes-de-Venise, Crozes-Hermitage,\n            Hermitage, Saint-Joseph. \n        \"\"\"\n        category = \"food\"\n        condition = \"are Rhone wine\"\n        words = []\n        for word in product(categories, repeat=2):\n            if word[0] == category and word[1] == condition:\n                words.append("}
{"cat": "food", "slot": "specialization", "value": "double Gloucester", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are double Gloucester. \n        Output: ", "result": "\n        cheddar, double, gloucester, gouda, mozzarella, parmesan, provolone, swiss, brie, gorgonzola \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"double\" in word and \"Gloucester\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n    Desired"}
{"cat": "food", "slot": "specialization", "value": "seckel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are seckel. \n        Output: ", "result": "\n        apple, banana, cherry, date, fig, grape, kiwi, melon, orange, pear\n    \"\"\"\n    food_words = [\n        \"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"kiwi\", \"melon\", \"orange\", \"pear\"\n    ]\n    seckel_words = [\n        \"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"kiwi\", \"melon\", \"orange\", \"pear\"\n"}
{"cat": "food", "slot": "specialization", "value": "Triticum aestivum spelta", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Triticum aestivum spelta. \n        Output: ", "result": "\n```\nwheat, spelt, flour, grain, bread, pasta, cereal, dough, kernel, wheatberries\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine, clementine, mandarin,"}
{"cat": "food", "slot": "specialization", "value": "Triticum aestivum", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Triticum aestivum. \n        Output: ", "result": "\n```\nwheat, flour, bread, pasta, cereal, grain, durum, semolina, bulgur, cracked wheat\n```\nExplanation: The words that belong to the category \"food\" and satisfy the condition \"are Triticum aestivum\" are: wheat, flour, bread, pasta, cereal, grain, durum, semolina, bulgur, and cracked wheat.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition"}
{"cat": "food", "slot": "specialization", "value": "soybean", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are soybean. \n        Output: ", "result": "\n        chickpea, lentil, tofu, tempeh, edamame, soy milk, soy yogurt, soy protein, soy lecithin, soy sauce \n    \"\"\"\n    category = \"food\"\n    soybean_words = [\"chickpea\", \"lentil\", \"tofu\", \"tempeh\", \"edamame\", \"soy milk\", \"soy yogurt\", \"soy protein\", \"soy lecithin\", \"soy sauce\"]\n    common_words"}
{"cat": "food", "slot": "specialization", "value": "chicken sandwich", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are chicken sandwich. \n        Output: ", "result": "1. Chicken 2. Sandwich 3. Nuggets 4. Wings 5. Fried 6. Crispy 7. Breaded 8. Buttermilk 9. Hot 10. Sandwiches\n    \"\"\"\n    category = 'food'\n    condition = 'are chicken sandwich'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition"}
{"cat": "food", "slot": "specialization", "value": "iced tea", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are iced tea. \n        Output: ", "result": "iced tea, lemonade, iced coffee, iced cocoa, iced tea latte, iced tea frappuccino, iced tea mocha, iced tea latte macchiato, iced tea frappuccino ice, iced tea latte ice, iced tea frappuccino ice, iced tea latte ice, iced tea frappuccino ice, iced tea latte ice, iced tea frappuccino ice, iced tea latte ice, iced tea frappuccino ice, iced tea lat"}
{"cat": "food", "slot": "specialization", "value": "lime juice", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are lime juice. \n        Output: ", "result": "1. lime, 2. juice, 3. limon, 4. limette, 5. limo, 6. limonade, 7. limoncello, 8. limeade, 9. limey, 10. limey. \n        \"\"\"\n        category = 'food'\n        condition = 'are lime juice'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_with_category_and_condition("}
{"cat": "food", "slot": "specialization", "value": "ricotta", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are ricotta. \n        Output: ", "result": "\n```\ncheese, ricotta, cream, cottage, whey, mozzarella, mascarpone, gorgonzola, burrata, fontina\n```\nExplanation:\n\n1. The category is food.\n2. The condition is that the words belong to the category and satisfy the condition.\n3. The words that satisfy the condition are: cheese, ricotta, cream, cottage, whey, mozzarella, mascarpone, gorgonzola, burrata, fontina.\n"}
{"cat": "food", "slot": "specialization", "value": "soft drink", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are soft drink. \n        Output: ", "result": "\n        Coca-Cola, Pepsi, Sprite, 7Up, Dr Pepper, Mountain Dew, Ginger Ale, Root Beer, Lemonade, Iced Tea.\n    \"\"\"\n    category = 'food'\n    condition = 'are soft drink'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Test the function with sample inputs\nprint(get_words('food', 'are fruits'))\nprint(get_words('food', 'are vegetables'))\nprint(get_"}
{"cat": "food", "slot": "specialization", "value": "home fries", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are home fries. \n        Output: ", "result": "\n        french fries, mashed potatoes, baked potatoes, sweet potatoes, potato chips, potato skins, potato pancakes, potato gnocchi, potato salad, potato soup.\n    \"\"\"\n    food_words = [\"french fries\", \"mashed potatoes\", \"baked potatoes\", \"sweet potatoes\", \"potato chips\", \"potato skins\", \"potato pancakes\", \"potato gnocchi\", \"potato salad\", \"potato soup\"]\n    home_fries"}
{"cat": "food", "slot": "specialization", "value": "spelt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are spelt. \n        Output: ", "result": "\n        chocolate, cookie, cake, ice cream, pizza, bread, milk, apple, orange, banana.\n    \"\"\"\n    category = 'food'\n    condition = 'are spelt'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Test the function with sample inputs.\nprint(get_words('food', 'is a fruit'))\nprint(get_words('food', 'starts with a'))\nprint(get_words('food', 'contains a'))\nprint(get"}
{"cat": "food", "slot": "specialization", "value": "herb tea", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are herb tea. \n        Output: ", "result": "\n            chai, green tea, herbal tea, matcha, oolong tea, peppermint tea, rooibos tea, yerba mate, yakult, yogurt. \n        \"\"\"\n        category = 'food'\n        condition = 'are herb tea'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_1(self):\n        result = self.get_words('food', 'are herb tea')\n        self.assertEqual(result, 'chai"}
{"cat": "food", "slot": "specialization", "value": "ice coffee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are ice coffee. \n        Output: ", "result": "iced, coffee, frappuccino, mocha, latte, cappuccino, espresso, iced-coffee, iced-frappuccino, iced-mocha\n```\n\n```"}
{"cat": "food", "slot": "specialization", "value": "raisin bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are raisin bread. \n        Output: ", "result": "\n        raisin,bread,raisin,bread,raisin,bread,raisin,bread,raisin,bread,raisin,bread.\n    \"\"\"\n    words = []\n    for word in category:\n        if word.lower() == condition.lower():\n            words.append(word)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"food\", \"raisin bread\"))\n```\nOutput: raisin, bread, raisin, bread, raisin, bread, ra"}
{"cat": "food", "slot": "specialization", "value": "draught beer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are draught beer. \n        Output: ", "result": "\n```\nbeer, lager, ale, stout, pilsner, porter, wheat, beer, beer, beer\n```\nExplanation: The words that belong to the category \"food\" and satisfy the condition \"are draught beer\" are \"beer\", \"lager\", \"ale\", \"stout\", \"pilsner\", \"porter\", \"wheat\", \"beer\", \"beer\", \"beer\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n"}
{"cat": "food", "slot": "specialization", "value": "smoothie", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are smoothie. \n        Output: ", "result": "1. Berry, 2. Orange, 3. Yogurt, 4. Mango, 5. Banana, 6. Strawberry, 7. Pineapple, 8. Ice, 9. Milk, 10. Spinach.\n    \"\"\"\n    category = 'food'\n    condition = 'are smoothie'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a"}
{"cat": "food", "slot": "specialization", "value": "wild wheat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are wild wheat. \n        Output: ", "result": "\n        bread, flour, dough, wheat, wheatgrass, spelt, kamut, durum, semolina, farro\n\"\"\"\n\n# Define the function\ndef get_wild_wheat_words(category: str, condition: str) -> list:\n    \"\"\"\n    Get a list of words that belong to the specified category and satisfy the condition.\n\n    Args:\n        category (str): The category of the words.\n        condition (str): The condition that the words must satisfy.\n\n    Returns:\n        A list"}
{"cat": "food", "slot": "specialization", "value": "light bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are light bread. \n        Output: ", "result": "\n```\nbaguette, croissant, sourdough, pain au chocolat, brioche, muffin, bagel, roll, English muffin, pain aux raisins\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, cherry, strawberry, raspberry, plum, red delicious"}
{"cat": "food", "slot": "specialization", "value": "Tokay", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Tokay. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grape, orange, peach, plum, raisin. \n        \"\"\"\n        category = 'food'\n        condition = 'are Tokay'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food."}
{"cat": "food", "slot": "specialization", "value": "club sandwich", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are club sandwich. \n        Output: ", "result": "\n        ham, bacon, lettuce, tomato, mayonnaise, bread, cheese, pickles, onions,\n```"}
{"cat": "food", "slot": "specialization", "value": "cuppa", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cuppa. \n        Output: ", "result": "\n        chai, coffee, tea, latte, cappuccino, espresso, mocha, hot chocolate, \n        tea bag, coffee beans.\n    \"\"\"\n    category = 'food'\n    condition = 'are cuppa'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words_in_sentence(sentence):\n    words = sentence.split()\n    words = [word for word in words if word.isalpha()]\n    return words\n\ndef"}
{"cat": "food", "slot": "specialization", "value": "mulled wine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are mulled wine. \n        Output: ", "result": "\n        apple, cinnamon, cloves, ginger, honey, nutmeg, oranges, spices, sugar, wine \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"mulled wine\" in word:\n            words.append(word)\n    return words\n\n# Your Mulled Wine Word Finder function\ndef mulled_wine_word_finder(word_list, category, condition):\n    mulled_wine_words = []\n    for word in word_list:\n        if"}
{"cat": "food", "slot": "specialization", "value": "durum wheat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are durum wheat. \n        Output: ", "result": "\n```\npasta, bread, couscous, semolina, spaghetti, durum, bulgur, cracked wheat, farro, grains\n```\nExplanation:\n\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Desired output: comma separated list of words.\n3. Category: food.\n4. Condition: are durum wheat.\n5. Output: pasta, bread, couscous, semolina, spaghetti, durum, bulg"}
{"cat": "food", "slot": "specialization", "value": "Parmesan", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Parmesan. \n        Output: ", "result": "\n        cheese,parmesan,parmigiano,parmesan,parmesan,parmesan,parmesan,parmesan,parmesan. \n        \"\"\"\n        category = 'food'\n        condition = 'are Parmesan'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list"}
{"cat": "food", "slot": "specialization", "value": "dark bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are dark bread. \n        Output: ", "result": "\n        */\n        public List<string> GetWords(string category, string condition)\n        {\n            List<string> words = new List<string>();\n\n            using (MySqlConnection connection = new MySqlConnection(connectionString))\n            {\n                connection.Open();\n\n                using (MySqlCommand command = new MySqlCommand(\"SELECT word FROM words WHERE category = @category AND condition = @condition\", connection))\n                {\n                    command.Parameters.AddWithValue(\"@category\", category);\n                    command.Parameters.AddWithValue(\"@condition\", condition);"}
{"cat": "food", "slot": "specialization", "value": "triple-decker", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are triple-decker. \n        Output: ", "result": "\n        sandwich, triple-decker, club, bacon, cheese, lettuce, tomato, mayonnaise, pickle, onion\n    \"\"\"\n    category = \"food\"\n    condition = \"are triple-decker\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"food\", \"end with e\"))\nprint(get_words(\"food\", \"start with f\"))\nprint(get_words(\"food\", \"contain a\"))\n"}
{"cat": "food", "slot": "specialization", "value": "wild strawberry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are wild strawberry. \n        Output: ", "result": "\n        wild,strawberry,berry,fruit,wild,strawberry,berry,fruit,wild,strawberry,berry,fruit,wild,strawberry,berry,fruit,wild,strawberry,berry,fruit,wild,strawberry,berry,fruit,wild,strawberry,berry,fruit,wild,strawberry,berry,fruit,wild,strawberry,berry,fruit,wild,strawberry,berry,fruit,wild,strawberry,"}
{"cat": "food", "slot": "specialization", "value": "Brie", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Brie. \n        Output: ", "result": "\n        cheese,brie,brie cheese,brie with cheese,brie and cheese,brie cheese and cheese,brie cheese,brie with cheese and cheese,brie cheese with cheese,brie cheese and cheese with cheese,brie cheese with cheese and cheese. \n        \"\"\"\n        brie_words = [\"brie\", \"brie cheese\", \"brie with cheese\", \"brie and cheese\", \"brie cheese and cheese\", \"brie cheese\", \"brie with cheese and cheese\", \"brie cheese with cheese\","}
{"cat": "food", "slot": "specialization", "value": "lemon juice", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are lemon juice. \n        Output: ", "result": "\n        lemons, juice, lemonade, limoncello, lemon meringue, lemon zest, lemon oil, lemon curd, lemon drops, lemon meringue pie\n```\n\n```"}
{"cat": "food", "slot": "specialization", "value": "hagberry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are hagberry. \n        Output: ", "result": "\n        chocolate,hagberry,hagberry,hagberry,hagberry,hagberry,hagberry,hagberry,hagberry,hagberry. \n        \"\"\"\n        words = []\n        for word in word_list:\n            if word.lower() == \"hagberry\":\n                words.append(word)\n        return words\n\n    def get_hagberry_words(self, word_list):\n        \"\"\"\n        Given a list of words, return a list of words that are hagberry. \n       "}
{"cat": "food", "slot": "specialization", "value": "ham sandwich", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are ham sandwich. \n        Output: ", "result": "\n        ham, bread, filling, meat, cheese, lettuce, tomato, onion, mayonnaise, sandwich\n```\n\n```\nDescribe a scenario where the input is a list of 10 strings, where each string is a word that belongs to one of the following categories: food, clothing, or electronics. \n        The first string in the list is \"ham\", which belongs to the food category. \n        The second string in the list is \"sandwich\", which also belongs to the food category. \n        The third string in the list is \""}
{"cat": "food", "slot": "specialization", "value": "matzo", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are matzo. \n        Output: ", "result": "\n```\nmatzo, bread, cracker, unleavened, Passover, Jewish, flat, leavened, egg, chametz\n```\nExplanation: \n        The word \"matzo\" belongs to the category \"food\" and satisfies the condition \"are matzo\". \n        The word \"bread\" also belongs to the category \"food\" and satisfies the condition \"are matzo\". \n        The word \"cracker\" also belongs to the category \"food\" and satisfies the condition \"are matzo\". \n        The word \"unleavened"}
{"cat": "food", "slot": "specialization", "value": "dessert apple", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are dessert apple. \n        Output: ", "result": "\n            Granny Smith, Red Delicious, Gala, Pink Lady, Golden Delicious, Cox's Orange Pippin, Bramley's Seedling, Spartan, Discovery, Jonagold\n        \"\"\"\n        category = \"food\"\n        condition = \"are dessert apple\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    def test_apple_dessert_words(self):\n        self.assertEqual(self.apple_dessert_words(), \"Granny Smith, Red"}
{"cat": "food", "slot": "specialization", "value": "Bordeaux", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Bordeaux. \n        Output: ", "result": "\n        wine, grape, vineyard, ch\u00e2teau, red, white, sweet, dry, merlot, cabernet \n    \"\"\"\n    words = []\n    for word in words:\n        if word.lower() in ['bordeaux', 'wine', 'grape', 'vineyard', 'ch\u00e2teau', 'red', 'white', 'sweet', 'dry', 'merlot', 'cabernet']:\n            words.append(word)\n    return ', '.join(words)\n\n# Test the function\nprint(find_borde"}
{"cat": "food", "slot": "specialization", "value": "sweet orange", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are sweet orange. \n        Output: ", "result": "\n            apple, banana, cherry, orange, pear, plum, strawberry, tangerine, watermelon, grape\n        \"\"\"\n        category = 'food'\n        condition = 'are sweet orange'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category"}
{"cat": "food", "slot": "specialization", "value": "cinnamon bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cinnamon bread. \n        Output: ", "result": "\n        cinnamon,bread,cinnamon,bread,cinnamon,bread,cinnamon,bread,\n```"}
{"cat": "food", "slot": "specialization", "value": "rye bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are rye bread. \n        Output: ", "result": "\n```\nrye,bread,rye,bread,rye,bread,rye,bread,rye,bread,rye,bread\n```\n\n```python\n\n```\nrye,bread,rye,bread,rye,bread,rye,bread"}
{"cat": "food", "slot": "specialization", "value": "draft beer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are draft beer. \n        Output: ", "result": "\n```\nbeer, ale, lager, draft, microbrew, brewpub, craft beer, beer garden, beer festival, beer tasting\n```\nExplanation:\nThe words that belong to the category \"food\" and satisfy the condition \"are draft beer\" are: beer, ale, lager, draft, microbrew, brewpub, craft beer, beer garden, beer festival, beer tasting.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition."}
{"cat": "food", "slot": "specialization", "value": "poor boy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are poor boy. \n        Output: ", "result": "\n        bread, beef, cheese, eggs, french fries, ham, onions, potatoes, salami, sausage \n    \"\"\"\n    food_words = [\"bread\", \"beef\", \"cheese\", \"eggs\", \"french fries\", \"ham\", \"onions\", \"potatoes\", \"salami\", \"sausage\"]\n    poor_boy_words = [word for word in food_words if \"poor boy\" in word]\n    return \", \".join(poor_boy_words)\n\n# Test the function\n"}
{"cat": "food", "slot": "specialization", "value": "stone fruit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are stone fruit. \n        Output: ", "result": "\n        peach, plum, apricot, cherry, nectarine, almond, pear, apple, apricot, cherry\n\"\"\"\n\nword_list = [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"kiwi\", \"mango\", \"orange\", \"peach\", \"plum\", \"apricot\"]\ncategory = \"food\"\ncondition = \"are stone fruit\"\nfiltered_list = [word for word in word_list if word.startswith(category) and word"}
{"cat": "food", "slot": "specialization", "value": "salad nicoise", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are salad nicoise. \n        Output: ", "result": "\n```\nlettuce, tomato, onion, bell pepper, hard-boiled egg, canned tuna, black olives, green beans, red wine vinegar, olive oil\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: movies. \n        Condition: are from the 1990s. \n        Output: \n```\nForrest Gump,"}
{"cat": "food", "slot": "specialization", "value": "quark cheese", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are quark cheese. \n        Output: ", "result": "\n        cheese, curd, cottage cheese, quark, ricotta, yogurt, sour cream, cream cheese, paneer, mozzarella \n    \"\"\"\n    category = 'food'\n    condition = 'are quark cheese'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Test the function\nprint(get_words('food', 'are quark cheese'))\n```\nOutput:\ncheese, curd, cottage cheese,"}
{"cat": "food", "slot": "specialization", "value": "generic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are generic. \n        Output: ", "result": "\n        chocolate, cookie, cake, bread, pizza, ice cream, fruit, vegetable, sandwich, soup\n```\n\n```"}
{"cat": "food", "slot": "specialization", "value": "bartlett pear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are bartlett pear. \n        Output: ", "result": "\n        apple, banana, cherry, date, fig, grape, honeydew, kiwi, pear, watermelon\n    \"\"\"\n    food_words = [\n        \"apple\",\n        \"banana\",\n        \"cherry\",\n        \"date\",\n        \"fig\",\n        \"grape\",\n        \"honeydew\",\n        \"kiwi\",\n        \"pear\",\n        \"watermelon\"\n    ]\n\n    bartlett_pear_words = [\n        \"apple\",\n        \""}
{"cat": "food", "slot": "specialization", "value": "beach strawberry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are beach strawberry. \n        Output: ", "result": "\n            apple, banana, cherry, coconut, grape, honey, ice cream, orange, pineapple, strawberry\n        \"\"\"\n        category = 'food'\n        condition = 'are beach strawberry'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def example_2():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n"}
{"cat": "food", "slot": "specialization", "value": "white wine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are white wine. \n        Output: ", "result": "\n            Chardonnay, Sauvignon Blanc, Pinot Grigio, Riesling, Vermentino, Viognier, Moscato, Sauvignon Blanc, Pinot Grigio, Riesling, \n        \"\"\"\n        category = \"food\"\n        condition = \"are white wine\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n# Example usage\nword_list = get_words(\"food\", \"are fruits\")\nprint(word_list)\n```\nOutput:\n"}
{"cat": "food", "slot": "specialization", "value": "Pinot Noir", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Pinot Noir. \n        Output: ", "result": "\n        chardonnay, merlot, pinot grigio, pinot noir, riesling, sangiovese, sauvignon blanc, syrah, tempranillo, zinfandel\n    \"\"\"\n    category = \"food\"\n    condition = \"are Pinot Noir\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as f:\n        for line in f:\n"}
{"cat": "food", "slot": "specialization", "value": "common wheat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are common wheat. \n        Output: ", "result": "\n        bread, flour, dough, wheat, wheat flour, wheat bread, wheat dough, wheat flour bread, wheat flour dough, wheat flour bread dough.\n    \"\"\"\n    category = 'food'\n    condition = 'are common wheat'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n   "}
{"cat": "food", "slot": "specialization", "value": "Gouda", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Gouda. \n        Output: ", "result": "\n        cheese, cheddar, gouda, mozzarella, parmesan, provolone, brie, blue cheese, goat cheese, feta. \n        \"\"\"\n        category = 'food'\n        condition = 'are Gouda'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_no_words(self):\n        with self.assertRaises(IndexError):\n            words = get_words('category', 'condition')\n"}
{"cat": "food", "slot": "specialization", "value": "process cheese", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are process cheese. \n        Output: ", "result": " cheddar, mozzarella, parmesan, brie, gouda, fontina, provolone, ricotta, blue cheese, goat cheese. \n    \"\"\"\n    cheese_words = [\"cheddar\", \"mozzarella\", \"parmesan\", \"brie\", \"gouda\", \"fontina\", \"provolone\", \"ricotta\", \"blue cheese\", \"goat cheese\"]\n    cheese_words = [word for word in cheese_words if word.endswith(\". cheese\")]\n    return \", \"."}
{"cat": "food", "slot": "specialization", "value": "cultivated strawberry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cultivated strawberry. \n        Output: ", "result": "1. Strawberry, 2. Cultivated, 3. Fruit, 4. Berry, 5. Red, 6. Juicy, 7. Sweet, 8. Delicious, 9. Fragrant, 10. Yummy.\n```\n\n```"}
{"cat": "food", "slot": "specialization", "value": "crouton", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are crouton. \n        Output: ", "result": "\n```\nbread, crouton, toast, cracker, slice, breadstick, croissant, roll, biscuit, cracker\n```\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammal. \n        Output: \n```\ncat, dog, cow, pig, horse, elephant, giraffe, whale, dolphin, seal\n```"}
{"cat": "food", "slot": "specialization", "value": "lager beer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are lager beer. \n        Output: ", "result": "\n```\nbeer, lager, brew, ale, malt, hops, barley, yeast, fermentation, craft\n```\nExplanation:\nThe words that belong to the category \"food\" and satisfy the condition \"are lager beer\" are: beer, lager, brew, ale, malt, hops, barley, yeast, fermentation, craft.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words."}
{"cat": "food", "slot": "specialization", "value": "decaf", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are decaf. \n        Output: ", "result": "\n            chocolate, coffee, decaf, espresso, latte, mocha, cappuccino, tea, vanilla, hazelnut\n        \"\"\"\n        category = \"food\"\n        condition = \"are decaf\"\n        words = []\n        for word in text.split():\n            if word.lower() in category_words[category] and word.lower() not in condition_words[condition]:\n                words.append(word)\n        result = \", \".join(words)\n        print(result)\n```\nExplan"}
{"cat": "food", "slot": "specialization", "value": "altar wine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are altar wine. \n        Output: ", "result": "\n```\nChardonnay, Merlot, Pinot Noir, Sauvignon Blanc, Syrah, Zinfandel, Cabernet Sauvignon, Pinot Grigio, Riesling, Sangiovese\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are fruits. \n        Output: \n```\nApple, Banana, Cherry, Grape,"}
{"cat": "food", "slot": "specialization", "value": "wafer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are wafer. \n        Output: ", "result": "\n        chocolate, cookie, cake, biscuit, wafer, pizza, ice cream, candy, donut, muffin \n    \"\"\"\n    category = \"food\"\n    condition = \"are wafer\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"food\", \"are fruits\"))\nprint(get_words(\"food\", \"are vegetables\"))\nprint(get_words(\"food\", \"are meat"}
{"cat": "food", "slot": "specialization", "value": "Chardonnay", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Chardonnay. \n        Output: ", "result": "\n```\nChardonnay,Chablis,Meursault,Pouilly-Fum\u00e9,Sancerre,Sauvignon Blanc,Fum\u00e9 Blanc,Pinot Grigio,Verdejo,Gew\u00fcrztraminer\n```\nExample:\n```\n\n```\n"}
{"cat": "food", "slot": "specialization", "value": "red hot", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are red hot. \n        Output: ", "result": "\n            apple, cherry, cinnamon, dragon, ember, flame, hot, \n            pepper, red, ruby. \n        \"\"\"\n        category = 'food'\n        condition = 'are red hot'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('food', 'are red hot'))\n```\n\u8f93\u51fa\uff1a\napple, cherry, cinnamon, dragon, ember, flame, hot, pepper, red, ruby.\n"}
{"cat": "food", "slot": "specialization", "value": "pseudocarp", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are pseudocarp. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grape, kiwi, mango, orange, pear\n    \"\"\"\n    category = \"food\"\n    pseudocarp_words = [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"kiwi\", \"mango\", \"orange\", \"pear\"]\n    pseudocarp_words = [word for word in pseudocarp_words if word.startswith(\"pseudocarp_\")]\n    pseudocarp_words = [word for word in pseudoc"}
{"cat": "food", "slot": "specialization", "value": "coleslaw", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are coleslaw. \n        Output: ", "result": "\n            coleslaw, cabbage, slaw, dressing, mayonnaise, vinegar, shredded, salad, vegetable, creamy \n        \"\"\"\n        category = \"food\"\n        coleslaw_words = [\"coleslaw\", \"cabbage\", \"slaw\", \"dressing\", \"mayonnaise\", \"vinegar\", \"shredded\", \"salad\", \"vegetable\", \"creamy\"]\n        coleslaw_words = [word for word in coleslaw_words if word.startswith(category +"}
{"cat": "food", "slot": "specialization", "value": "grinder", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are grinder. \n        Output: ", "result": "\n        apple, bread, cheese, chicken, coffee, cucumber, egg, ham, ice cream, pizza \n    \"\"\"\n    category = 'food'\n    condition = 'are grinder'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    words = []\n    if category == 'food':\n        if condition =="}
{"cat": "food", "slot": "specialization", "value": "whole meal bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are whole meal bread. \n        Output: ", "result": "\n        bread, roll, bun, loaf, baguette, ciabatta, pita, naan, brioche, croissant \n    \"\"\"\n    food_words = [\"bread\", \"roll\", \"bun\", \"loaf\", \"baguette\", \"ciabatta\", \"pita\", \"naan\", \"brioche\", \"croissant\"]\n    whole_meal_words = [word for word in food_words if \"whole\" in word or \"meal\" in word]\n    return \", \".join(whole_meal"}
{"cat": "food", "slot": "specialization", "value": "Sauvignon Blanc", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Sauvignon Blanc. \n        Output: ", "result": "\n        chardonnay, merlot, pinot noir, riesling, sauvignon blanc, zinfandel, cabernet sauvignon, pinot grigio, gew\u00fcrztraminer, moscato.\n    \"\"\"\n    category = 'food'\n    condition = 'are Sauvignon Blanc'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Example usage\nprint(find_words(category='food', condition='are Sauvignon Blanc'))\n# Output: chard"}
{"cat": "food", "slot": "specialization", "value": "rose wine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are rose wine. \n        Output: ", "result": "\n```\nChampagne, Pinot Noir, Merlot, Cabernet Sauvignon, Syrah, Zinfandel, Sauvignon Blanc, Pinot Grigio, Riesling, Sangiovese\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: movies. \n        Condition: are based on true events. \n        Output: \n```\nSchindler's List, Titanic"}
{"cat": "food", "slot": "specialization", "value": "Seville orange", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Seville orange. \n        Output: ", "result": "\n        orange, marmalade, bitter, peel, rind, preserve, juice, zest, syrup, marmalade. \n    \"\"\"\n    category = \"food\"\n    condition = \"are Seville orange\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"fruit\", \"are apple\"))\nprint(get_words(\"fruit\", \"are banana\"))\nprint(get_words(\"fruit\", \"are orange\"))\nprint(get_words"}
{"cat": "food", "slot": "specialization", "value": "Fuji", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Fuji. \n        Output: ", "result": "\n        apple, banana, cherry, date, fig, grape, kiwi, mango, orange, peach\n    \"\"\"\n    fruits = ['apple', 'banana', 'cherry', 'date', 'fig', 'grape', 'kiwi', 'mango', 'orange', 'peach']\n    fruits_fuji = [fruit for fruit in fruits if fruit.lower() == 'fuji']\n    return ', '.join(fruits_fuji) if fruits_fuji else 'No fruits are Fuji.'\n\n"}
{"cat": "food", "slot": "specialization", "value": "Italian sandwich", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Italian sandwich. \n        Output: ", "result": "\n        ham, salami, mortadella, provolone, mozzarella, pizza, lasagna, cannoli, tiramisu, gelato\n```\n\n```"}
{"cat": "food", "slot": "specialization", "value": "quark", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are quark. \n        Output: ", "result": "\n        cheese, curd, cottage cheese, quark, ricotta, yogurt, sour cream, cream cheese, paneer, mozzarella. \n        \"\"\"\n        category = 'food'\n        quark_words = ['cheese', 'curd', 'cottage cheese', 'quark', 'ricotta', 'yogurt', 'sour cream', 'cream cheese', 'paneer', 'mozzarella']\n        quark_words = [word for word in quark"}
{"cat": "food", "slot": "specialization", "value": "marasca", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are marasca. \n        Output: ", "result": "\n    \"\"\"\n    food_words = [\n        \"maraschino\",\n        \"cherry\",\n        \"cherry liqueur\",\n        \"cherry brandy\",\n        \"cherry cordial\",\n        \"cherry schnapps\",\n        \"cherry liqueur\",\n        \"cherry brandy\",\n        \"cherry cordial\",\n        \"cherry schnapps\"\n    ]\n    marasca_words = [word for word in food_words if word.lower() == \"marasca\"]\n    return \", \".join"}
{"cat": "food", "slot": "specialization", "value": "near beer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are near beer. \n        Output: ", "result": "\n```\nbeer, ale, lager, malt, hops, barley, brew, brewery, microbrew, craft beer\n```\nExplanation:\nThe words that belong to the category \"food\" and satisfy the condition \"are near beer\" are: beer, ale, lager, malt, hops, barley, brew, brewery, microbrew, craft beer.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma"}
{"cat": "food", "slot": "specialization", "value": "Fragaria vesca", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Fragaria vesca. \n        Output: ", "result": "\n        strawberry,fragaria,vesca,berry,red,fruit,plant,indigenous,wild,\n```"}
{"cat": "food", "slot": "specialization", "value": "mocha coffee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are mocha coffee. \n        Output: ", "result": "\n        chocolate, cocoa, mocha, coffee, espresso, latte, cappuccino, hot chocolate, mocha frappuccino, mocha cappuccino \n    \"\"\"\n    category = 'food'\n    condition = 'are mocha coffee'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    words = []\n    with open('words.txt', 'r') as f:\n        for line in f:"}
{"cat": "food", "slot": "specialization", "value": "Golden Delicious", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Golden Delicious. \n        Output: ", "result": "\n        apple, banana, cherry, date, fig, grapes, honey, orange, peach, plum \n    \"\"\"\n    fruits = [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grapes\", \"honey\", \"orange\", \"peach\", \"plum\"]\n    golden = [\"Golden Delicious\"]\n    result = []\n    for fruit in fruits:\n        if fruit in golden:\n            result.append(fruit)\n    print(\", \".join(result))\n\n# Test"}
{"cat": "food", "slot": "specialization", "value": "bap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are bap. \n        Output: ", "result": "\n        apple, bread, cake, chicken, egg, fish, french fries, hamburger, ice cream, pizza \n    \"\"\"\n    food_words = [\n        \"apple\", \"bread\", \"cake\", \"chicken\", \"egg\", \"fish\", \"french fries\", \"hamburger\", \"ice cream\", \"pizza\"\n    ]\n    bap_words = [\n        \"apple\", \"bread\", \"cake\", \"chicken\", \"egg\", \"fish\", \"french fries\", \""}
{"cat": "food", "slot": "specialization", "value": "oil nut", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are oil nut. \n        Output: ", "result": "\n            oil, nut, salad, dressing, bread, butter, mayonnaise, margarine, olive, avocado \n    \"\"\"\n    category = \"food\"\n    condition = \"are oil nut\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    words = []\n    if category == \"animals\":\n       "}
{"cat": "food", "slot": "specialization", "value": "hominy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are hominy. \n        Output: ", "result": "\n            corn, hominy, grits, masa, nixtamal, tamale, tortilla, pozole, atole.\n    \"\"\"\n    food_words = [\"corn\", \"hominy\", \"grits\", \"masa\", \"nixtamal\", \"tamale\", \"tortilla\", \"pozole\", \"atole\"]\n    hominy_words = [word for word in food_words if \"hominy\" in word]\n    print(\", \".join(hominy_words))\n```\nExample:\n    Input: \n       "}
{"cat": "food", "slot": "specialization", "value": "Limburger", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Limburger. \n        Output: ", "result": "1. Limburger, 2. Brie, 3. Blue, 4. Camembert, 5. Gorgonzola, 6. Roquefort, 7. Stilton, 8. Cheddar, 9. Mozzarella, 10. Parmesan\n```\n\n```"}
{"cat": "food", "slot": "specialization", "value": "instant coffee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are instant coffee. \n        Output: ", "result": "\n        Coffee, Instant, Espresso, Cappuccino, Latte, Mocha, Americano, Cafe, Decaffeinated, French Roast \n    \"\"\"\n    category = \"food\"\n    condition = \"are instant coffee\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition.\n    \"\"\"\n    if category =="}
{"cat": "food", "slot": "specialization", "value": "drinking water", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are drinking water. \n        Output: ", "result": "\n            1. Orange\n            2. Lemon\n            3. Ginger\n            4. Lime\n            5. Water\n            6. Tea\n            7. Coffee\n            8. Milk\n            9. Juice\n            10. Coconut\n        \"\"\"\n        food_words = [\"Orange\", \"Lemon\", \"Ginger\", \"Lime\", \"Water\", \"Tea\", \"Coffee\", \"Milk\", \"Juice\", \"Coconut\"]\n        filtered_words = [word for word in food_words if"}
{"cat": "food", "slot": "specialization", "value": "simnel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are simnel. \n        Output: ", "result": "\n    \"\"\"\n    words = [\"simnel cake\", \"simnel pudding\", \"simnel beer\", \"simnel ale\",\n             \"simnel loaf\", \"simnel bread\", \"simnel biscuit\", \"simnel cookie\",\n             \"simnel muffin\", \"simnel tart\"]\n    return \", \".join(words)\n\ndef get_category(word):\n    \"\"\"\n    Given a word, return the category it belongs to.\n\n    Parameters:\n    word (str): The word to determine the category for.\n\n    Returns"}
{"cat": "food", "slot": "specialization", "value": "three-decker", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are three-decker. \n        Output: ", "result": "\n        apple, cake, donut, fish, fry, ice cream, pizza, sandwich, steak, toast \n    \"\"\"\n    words = []\n    for word in word_list:\n        if len(word) == 3 and word.isalpha():\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += "}
{"cat": "food", "slot": "specialization", "value": "scarlet strawberry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are scarlet strawberry. \n        Output: ", "result": "\n            apple, cherry, orange, pear, plum, raspberry, strawberry, tomato, watermelon\n    \"\"\"\n    category = \"food\"\n    words = [\n        \"apple\",\n        \"cherry\",\n        \"orange\",\n        \"pear\",\n        \"plum\",\n        \"raspberry\",\n        \"strawberry\",\n        \"tomato\",\n        \"watermelon\"\n    ]\n    condition = \"are scarlet\"\n    filtered_words = [word for word in words"}
{"cat": "food", "slot": "specialization", "value": "BLT", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are BLT. \n        Output: ", "result": "\n```\nbread, lettuce, tomato, bacon, mayonnaise, onion, sandwich, toast, pickle, ketchup\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: have wings. \n        Output: \n```\neagle, butterfly, hummingbird, bat, pterodactyl, dragonfly,"}
{"cat": "food", "slot": "specialization", "value": "paddy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are paddy. \n        Output: ", "result": "\n        rice, noodle, pasta, bread, cereal, potato, corn, pasta, rice, noodle. \n    \"\"\"\n    category = \"food\"\n    condition = \"are paddy\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"food\", \"are paddy\"))\n```\nOutput:\nrice, noodle, pasta, bread, cereal, potato, corn, pasta, rice, noodle"}
{"cat": "food", "slot": "specialization", "value": "achene", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are achene. \n        Output: ", "result": "\n        apple, cherry, plum, peach, apricot, pear, quince, medlar, walnut, hazelnut.\n    \"\"\"\n    food_words = [\n        \"apple\", \"cherry\", \"plum\", \"peach\", \"apricot\", \"pear\", \"quince\", \"medlar\", \"walnut\", \"hazelnut\"\n    ]\n    achene_words = [word for word in food_words if \"achene\" in word]\n    return \", \".join(achene_words)\n\n"}
{"cat": "food", "slot": "specialization", "value": "cafe noir", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cafe noir. \n        Output: ", "result": "\n        chocolate, espresso, mocha, latte, cappuccino, vanilla, caramel, hazelnut, macchiato, frappuccino.\n    \"\"\"\n    category = 'food'\n    condition = 'are cafe noir'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    words = []\n    with open('words.txt', 'r') as f:\n        for line in f:\n            line"}
{"cat": "food", "slot": "specialization", "value": "fruit salad", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are fruit salad. \n        Output: ", "result": " apple, banana, cherry, date, fig, grape, kiwi, mango, orange, pineapple \n    \"\"\"\n    words = []\n    for word in word_list:\n        if word.is_fruit_salad():\n            words.append(word)\n    return words\n\ndef is_fruit_salad(word):\n    \"\"\"\n    Determine if the word is a fruit salad.\n    \"\"\"\n    if \"salad\" in word:\n        return True\n    else:\n        return False\n\nword_"}
{"cat": "food", "slot": "specialization", "value": "sour orange", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are sour orange. \n        Output: ", "result": "\n        lemon, lime, orange, grapefruit, tangerine, clementine, pomelo, mandarin, limequat, kumquat \n    \"\"\"\n    words = []\n    for word in word_list:\n        if word.is_sour_orange():\n            words.append(word)\n    return words\n\ndef is_sour_orange(word):\n    return 'sour' in word and 'orange' in word and 'sour' not in word and 'orange' not in word\n\n"}
{"cat": "food", "slot": "specialization", "value": "aggregate fruit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are aggregate fruit. \n        Output: ", "result": " apple, banana, cherry, date, fig, grape, orange, peach, plum, apricot. \n    \"\"\"\n    fruits = ['apple', 'banana', 'cherry', 'date', 'fig', 'grape', 'orange', 'peach', 'plum', 'apricot']\n    category = 'food'\n    condition = 'are aggregate fruit'\n    filtered_fruits = [word for word in fruits if word.startswith(category) and word.endswith(condition)]\n    return ', '.join("}
{"cat": "food", "slot": "specialization", "value": "caraway seed bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are caraway seed bread. \n        Output: ", "result": "\n        caraway, seed, bread, rye, whole, wheat, pumpernickel, black, sesame, poppy, \n        Category: food. \n        Condition: are chocolate chip cookies. \n        Output: \n        chocolate, chip, cookies, oatmeal, peanut, butter, sugar, flour, vanilla, \n        Category: food. \n        Condition: are cheese pizza. \n        Output: \n        cheese, pizza, tomato, mozzarella"}
{"cat": "food", "slot": "specialization", "value": "iced coffee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are iced coffee. \n        Output: ", "result": "iced, coffee, frappuccino, mocha, latte, cappuccino, espresso, iced-coffee, iced-frappuccino, iced-mocha \n```\n\n```"}
{"cat": "food", "slot": "specialization", "value": "chocolate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are chocolate. \n        Output: ", "result": "\n        chocolate, cocoa, chocolate, chocolate, chocolate, chocolate, chocolate, chocolate, chocolate, chocolate. \n        \"\"\"\n        category = Category.objects.get(name='food')\n        condition = Condition.objects.get(name='are chocolate')\n        words = Word.objects.filter(category=category, condition=condition)\n        return [word.name for word in words]\n\n    def get_random_word(self):\n        \"\"\"\n        Retrieve"}
{"cat": "food", "slot": "specialization", "value": "Irish coffee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Irish coffee. \n        Output: ", "result": "\n```\ncoffee, whiskey, chocolate, cream, sugar, cinnamon, caramel, Bailey's, espresso, Guinness\n```\nExplanation:\nThe words that belong to the category \"food\" and satisfy the condition \"are Irish coffee\" are: coffee, whiskey, chocolate, cream, sugar, cinnamon, caramel, Bailey's, espresso, Guinness.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition"}
{"cat": "food", "slot": "specialization", "value": "Triticum durum", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Triticum durum. \n        Output: ", "result": "\n        wheat, durum, semolina, spelt, farro, kamut, durum wheat, durum semolina, durum flour, durum pasta \n    \"\"\"\n    category = \"food\"\n    condition = \"are Triticum durum\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"food\", \"are Triticum durum\"))\n```\nOutput:\n```\nwheat, durum, semolina"}
{"cat": "food", "slot": "specialization", "value": "drinking chocolate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are drinking chocolate. \n        Output: ", "result": "\n        chocolate,cake,dessert,drink,sweet,chocoholic,indulgence,mocha,hot,drink \n    \"\"\"\n    category = 'food'\n    condition = 'are drinking chocolate'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition.\n    \"\"\"\n    if category == '"}
{"cat": "food", "slot": "specialization", "value": "maconnais", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are maconnais. \n        Output: ", "result": "\n        chocolat, cr\u00e8me br\u00fbl\u00e9e, croissant, \u00e9clair, g\u00e2teau, macaroon, madeleine, mille-feuille, p\u00e2tisserie, tarte.\n    \"\"\"\n    maconnais_words = [\n        \"chocolat\",\n        \"cr\u00e8me br\u00fbl\u00e9e\",\n        \"croissant\",\n        \"\u00e9clair\",\n        \"g\u00e2teau\",\n        \"macaroon\",\n        \"madeleine\",\n        \"mille-feuille\",\n        \"p\u00e2tisserie"}
{"cat": "food", "slot": "specialization", "value": "capitulum", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are capitulum. \n        Output: ", "result": "1. Almond, 2. Walnut, 3. Pecan, 4. Cashew, 5. Macadamia, 6. Filbert, 7. Brazil nut, 8. Pistachio, 9. Hickory nut, 10. Chestnut.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"capitulum\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given"}
{"cat": "food", "slot": "specialization", "value": "gyro", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are gyro. \n        Output: ", "result": "\n        pita, meat, cheese, tomato, cucumber, onion, tzatziki, yogurt, fries, garlic.\n    \"\"\"\n    category = 'food'\n    condition = 'are gyro'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition within the category.\n    \"\"\"\n    words = []\n    if category == 'food"}
{"cat": "food", "slot": "specialization", "value": "herring salad", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are herring salad. \n        Output: ", "result": "\n            capers, dill, lemon, mayonnaise, onion, parsley, pickle, salt, tarragon, vinegar \n\"\"\"\n\nword_list = [\"capers\", \"dill\", \"lemon\", \"mayonnaise\", \"onion\", \"parsley\", \"pickle\", \"salt\", \"tarragon\", \"vinegar\"]\nherring_salad_words = [word for word in word_list if \"herring salad\" in word]\nprint(herring_salad_words)\n```"}
{"cat": "food", "slot": "specialization", "value": "suds", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are suds. \n        Output: ", "result": "\n    \"\"\"\n    food_words = [\"soup\", \"sandwich\", \"steak\", \"sushi\", \"salad\", \"scone\", \"sauce\", \"syrup\", \"salsa\", \"shrimp\"]\n    suds_words = [\"beer\", \"soda\", \"coffee\", \"tea\", \"milk\"]\n    result = \", \".join(filter(lambda x: x.startswith(\"suds\"), food_words))\n    print(result)\n```\nOutput: \n```\nsoda,"}
{"cat": "food", "slot": "specialization", "value": "open-face sandwich", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are open-face sandwich. \n        Output: ", "result": "\n        ham, cheese, bread, lettuce, tomato, onion, mayonnaise, ketchup, mustard, pickle \n    \"\"\"\n    category = \"food\"\n    condition = \"are open-face sandwich\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition. \n        Desired output: a list of words. \n"}
{"cat": "food", "slot": "specialization", "value": "varietal wine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are varietal wine. \n        Output: ", "result": "\n```\nChardonnay, Pinot Noir, Merlot, Cabernet Sauvignon, Sauvignon Blanc, Zinfandel, Syrah, Pinot Grigio, Riesling, Sangiovese\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: movies. \n        Condition: are directed by Quentin Tarantino. \n        Output: \n```\nPulp Fiction, Res"}
{"cat": "food", "slot": "specialization", "value": "blue cheese", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are blue cheese. \n        Output: ", "result": "\n        blue,cheese,brie,gorgonzola,roquefort,stilton,bleu,cheddar,gorgonzola,roquefort,stilton\n\"\"\"\n\nword_list = [\"blue cheese\", \"brie\", \"gorgonzola\", \"roquefort\", \"stilton\", \"bleu\", \"cheddar\", \"gorgonzola\", \"roquefort\", \"stilton\"]\nfiltered_list = []\nfor word in word_list:\n    if \"blue\" in word and \"cheese"}
{"cat": "food", "slot": "specialization", "value": "white rice", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are white rice. \n        Output: ", "result": "\n        rice, pasta, bread, potato, noodle, crackers, cake, cookie, breadstick, pastry\n```\n\n```\nDescribe a scenario where the input is a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: a list of 10 words. \n        Category: food. \n        Condition: are white rice. \n        Input: \n        rice, pasta, bread, potato, noodle, crackers, cake, cookie, breadstick, pas"}
{"cat": "food", "slot": "specialization", "value": "prairie gourd", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are prairie gourd. \n        Output: ", "result": "\n        pumpkin, squash, gourd, zucchini, cucumber, melon, rutabaga, turnip, beet, carrot\n    \"\"\"\n    category = \"food\"\n    condition = \"are prairie gourd\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"food\", \"is a fruit\"))\nprint(get_words(\"food\", \"is a vegetable\"))\nprint(get_words(\"food\", \""}
{"cat": "food", "slot": "specialization", "value": "Fragaria ananassa", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Fragaria ananassa. \n        Output: ", "result": "\n        strawberry \n        raspberry \n        blackberry \n        blueberry \n        redcurrant \n        gooseberry \n        blackcurrant \n        loganberry \n        boysenberry \n        currant \n    \"\"\"\n    words = [\n        \"strawberry\",\n        \"raspberry\",\n        \"blackberry\",\n        \"blueberry\",\n        \"redcurrant\",\n        \"gooseberry\",\n        \"blackcurrant\",\n        \"loganberry\",\n        \"boysenberry\",\n"}
{"cat": "food", "slot": "specialization", "value": "multiple fruit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are multiple fruit. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grape, melon, orange, peach, plum \n        \"\"\"\n        fruits = ['apple', 'banana', 'cherry', 'date', 'fig', 'grape', 'melon', 'orange', 'peach', 'plum']\n        words = [fruit for fruit in fruits if fruit in ['apple', 'banana', 'cherry', 'date', 'fig', 'grape', 'melon', 'orange', 'peach', 'plum']]\n       "}
{"cat": "food", "slot": "specialization", "value": "crabapple", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are crabapple. \n        Output: ", "result": "\n        apple, crab, apple, crab, apple, crab, apple, crab, apple, crab. \n        \"\"\"\n        words = []\n        for word in word_list:\n            if word.lower() == \"crabapple\":\n                words.append(word)\n        return words\n\n# Define the function\ndef get_crabapple_words(word_list):\n    crabapple_words = []\n    for word in word_list:\n        if word.lower() == \"crabapple\":\n            crabapple_words"}
{"cat": "food", "slot": "specialization", "value": "brown rice", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are brown rice. \n        Output: ", "result": "\n```\nbrown, rice, grain, cooked, healthy, whole, complex, carbohydrate, gluten-free, versatile, nutritious\n```\nExplanation:\nThe words that belong to the category \"food\" and satisfy the condition \"are brown rice\" are:\n- brown\n- rice\n- grain\n- cooked\n- healthy\n- whole\n- complex\n- carbohydrate\n- gluten-free\n- versatile\n- nutritious\n\nNote: The words are sorted in alphabetical order.\n"}
{"cat": "food", "slot": "specialization", "value": "pan gravy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are pan gravy. \n        Output: ", "result": "\n            chicken, cream, onion, flour, mushroom, gravy, butter, thyme, sage, garlic \n        \"\"\"\n        category = 'food'\n        condition = 'are pan gravy'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_with_category_and_condition(self):\n        self.assertEqual(get_words('food', 'are pan gravy'), 'chicken, cream, onion, flour,"}
{"cat": "food", "slot": "specialization", "value": "Host", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Host. \n        Output: ", "result": "\n        apple, banana, cherry, date, fig, grape, honeydew, kiwi, mango, nectarine, orange, peach, pear, plum, raspberry, strawberry, watermelon, blueberry, blackberry, cranberry, elderberry, grapefruit, lemon, lime, orange, pineapple, pomegranate, raspberry, tangerine, apricot, cherry, currant, elderberry, gooseberry, huckleberry, loganberry, mulberry"}
{"cat": "food", "slot": "specialization", "value": "Uruguay potato", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Uruguay potato. \n        Output: ", "result": "\n        chips, french fries, mashed potatoes, baked potatoes, potato chips, potato salad, roasted potatoes, potato skins, potato gnocchi, potato gratin\n    \"\"\"\n    food_words = [\"chips\", \"french fries\", \"mashed potatoes\", \"baked potatoes\", \"potato chips\", \"potato salad\", \"roasted potatoes\", \"potato skins\", \"potato gnocchi\", \"potato gratin\"]\n    uruguay_potato_words ="}
{"cat": "food", "slot": "specialization", "value": "goa bean", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are goa bean. \n        Output: ", "result": "\n        apple, banana, cherry, date, fig, grape, kiwi, mango, orange, peach\n    \"\"\"\n    category = \"food\"\n    condition = \"are goa bean\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in the given category.\n    \"\"\"\n    if category == \"books\":\n        words = [word for word in BOOK"}
{"cat": "food", "slot": "specialization", "value": "onion bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are onion bread. \n        Output: ", "result": "\n        onion,bread,onion bread,onions,breads,onion breads,onions breads,onion breads,breads onion,breads onion. \n        \"\"\"\n        category = Category.objects.get(name='food')\n        words = Word.objects.filter(category=category, text__contains='onion') | \\\n                 Word.objects.filter(category=category, text__contains='bread') | \\\n                 Word.objects.filter(category=category, text__contains='onion bread"}
{"cat": "food", "slot": "specialization", "value": "western sandwich", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are western sandwich. \n        Output: ", "result": "\n        ham, cheese, bread, lettuce, tomato, onion, pickle, mustard, mayonnaise, ketchup \n    \"\"\"\n    category = \"food\"\n    words = [\"ham\", \"cheese\", \"bread\", \"lettuce\", \"tomato\", \"onion\", \"pickle\", \"mustard\", \"mayonnaise\", \"ketchup\"]\n    for word in words:\n        if \"sandwich\" in word:\n            if category == \"food\":\n                print(\", \".join(words))\n                break\n"}
{"cat": "food", "slot": "specialization", "value": "mozzarella", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are mozzarella. \n        Output: ", "result": "\n        pizza, cheese, mozzarella, lasagna, burrata, mozzarella di bufala, mozzarella fior di latte, mozzarella sticks, mozzarella balls, mozzarella and tomato. \n        \"\"\"\n        category = Category.objects.get(name='food')\n        mozzarella_queryset = Mozzarella.objects.filter(category=category)\n        mozzarella_words = [word.name for word in mozz"}
{"cat": "food", "slot": "specialization", "value": "Edam", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Edam. \n        Output: ", "result": "\n            apple, banana, cherry, date, elderberry, fig, grape, honeydew, kiwi, mango, nectarine, orange, peach, pear, plum, raspberry, strawberry, watermelon, apricot, blueberry, boysenberry, cranberry, currant, elderberry, gooseberry, huckleberry, loganberry, mulberry, olive, passion fruit, pomegranate, quince, sour cherry, tangerine, vanilla, yogurt\n\"\""}
{"cat": "food", "slot": "specialization", "value": "anjou", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are anjou. \n        Output: ", "result": "\n            apple, apricot, cherry, currant, damson, elderberry, gooseberry, plum, sour cherry, strawberry. \n        \"\"\"\n        fruits = [\n            \"apple\", \"apricot\", \"cherry\", \"currant\", \"damson\", \"elderberry\", \"gooseberry\", \"plum\", \"sour cherry\", \"strawberry\"\n        ]\n        anjou_fruits = [fruit for fruit in fruits if \"anjou\" in fruit]\n        return \", \".join(an"}
{"cat": "food", "slot": "specialization", "value": "soy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are soy. \n        Output: ", "result": "\n```\nsoy, tofu, tempeh, edamame, soy milk, soy sauce, soy protein, soy nuts, soy lecithin\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\norange, lemon, lime, grapefruit,"}
{"cat": "food", "slot": "specialization", "value": "oenomel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are oenomel. \n        Output: ", "result": "\n        apple, banana, cherry, date, fig, grape, honeydew, kiwi, melon, nectarine, orange, peach, pear, plum, raspberry, strawberry, watermelon\n    \"\"\"\n    category = \"food\"\n    condition = \"are oenomel\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that"}
{"cat": "food", "slot": "specialization", "value": "mocha", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are mocha. \n        Output: ", "result": "\n        coffee, chocolate, mocha, cocoa, espresso, latte, hot chocolate, mocha cake, mocha ice cream, mocha frappuccino \n    \"\"\"\n    category = 'food'\n    condition = 'are mocha'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    words = []\n    with open('words.txt', 'r') as f:\n        for line in f:\n            line ="}
{"cat": "food", "slot": "specialization", "value": "cafe au lait", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cafe au lait. \n        Output: ", "result": "\n```\ncafe, au, lait, espresso, macchiato, cappuccino, latte, mocha, americano, caffe\n```\nExplanation: The words that belong to the category \"food\" and satisfy the condition \"are cafe au lait\" are \"cafe, au, lait, espresso, macchiato, cappuccino, latte, mocha, americano, caffe\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. "}
{"cat": "food", "slot": "specialization", "value": "wedge", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are wedge. \n        Output: ", "result": "\n```\napple, cake, pizza, pie, bread, cookie, ice cream, sandwich, salad\n```\nExplanation: \n        The words that belong to the category \"food\" and satisfy the condition \"are wedge\" are: apple, cake, pizza, pie, bread, cookie, ice cream, sandwich, salad.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: color. \n       "}
{"cat": "food", "slot": "specialization", "value": "butty", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are butty. \n        Output: ", "result": "\n    \"\"\"\n    food_words = [\n        \"bacon\",\n        \"sausage\",\n        \"toast\",\n        \"butter\",\n        \"jam\",\n        \"eggs\",\n        \"sandwich\",\n        \"tea\",\n        \"coffee\",\n        \"cereal\"\n    ]\n\n    butty_words = [\n        \"bacon\",\n        \"sausage\",\n        \"toast\",\n        \"butter\",\n        \"jam\",\n        \"eggs\",\n        \"sand"}
{"cat": "food", "slot": "specialization", "value": "Triticum dicoccum dicoccoides", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Triticum dicoccum dicoccoides. \n        Output: ", "result": "\n```\nwheat, spelt, kamut, durum, emmer, einkorn, barley, rye, oats, triticale\n```\n\nExample 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: have 4 legs. \n        Output: \n```\ncat, dog, horse, cow, pig, sheep, goat, chicken, turkey,"}
{"cat": "food", "slot": "specialization", "value": "Triticum dicoccum", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Triticum dicoccum. \n        Output: ", "result": "\n```\nwheat, spelt, kamut, durum, emmer, einkorn, barley, rye, oats, triticale\n```\n\nExample 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine, clementine,"}
{"cat": "food", "slot": "specialization", "value": "cracked-wheat bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cracked-wheat bread. \n        Output: ", "result": "\n        cracked-wheat bread, cracked-wheat, wheat, bread, cracked, cracked-wheat, cracked-wheat bread, cracked-wheat loaf, cracked-wheat roll, cracked-wheat bun\n    \"\"\"\n    cracked_wheat_bread = [\"cracked-wheat bread\", \"cracked-wheat\", \"wheat\", \"bread\", \"cracked\", \"cracked-wheat\", \"cracked-w"}
{"cat": "food", "slot": "specialization", "value": "Cripps Pink", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Cripps Pink. \n        Output: ", "result": "\n        strawberry, raspberry, blackberry, blueberry, cherry, plum, apricot, peach, orange, lemon. \n        \"\"\"\n        category = 'food'\n        condition = 'are Cripps Pink'\n        words = get_words(category, condition)\n        pink_words = [word for word in words if word.lower() == 'cripps pink']\n        return ', '.join(pink_words)\n\n    print(get_pink_words('food', 'are Cri"}
{"cat": "food", "slot": "specialization", "value": "vermouth", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are vermouth. \n        Output: ", "result": "\n```\nmartini, vermouth, gin, olive, cocktail, shaken, stirred, garnish, aperitif, fortified\n```\nExplanation: The words that belong to the category \"food\" and satisfy the condition \"are vermouth\" are: martini, vermouth, gin, olive, cocktail, shaken, stirred, garnish, aperitif, fortified.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma"}
{"cat": "food", "slot": "specialization", "value": "ginger beer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are ginger beer. \n        Output: ", "result": "\n        ginger, beer, gingerbeer, gingerbrew, gingerbread, gingersnap, \n        gingerale, gingerroot, gingerbreadman, gingerbreadwoman \n    \"\"\"\n    category = 'food'\n    condition = 'are ginger beer'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that\n    satisfy the condition"}
{"cat": "food", "slot": "specialization", "value": "naan", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are naan. \n        Output: ", "result": "\n            apple, bread, cake, cookie, donut, naan, pizza, roll, sandwich\n    \"\"\"\n    food_words = [\"apple\", \"bread\", \"cake\", \"cookie\", \"donut\", \"naan\", \"pizza\", \"roll\", \"sandwich\"]\n    naan_words = [word for word in food_words if \"naan\" in word]\n    print(\", \".join(naan_words))\n```\nExample:\n    Input:\n        Provide a list of 10 words that belong to the category and"}
{"cat": "food", "slot": "specialization", "value": "coffee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are coffee. \n        Output: ", "result": "\n```\ncoffee, cappuccino, latte, mocha, espresso, macchiato, frappuccino, Americano, caffe, espresso shot\n```\nExplanation:\n```\nThe words that belong to the category \"food\" and satisfy the condition \"are coffee\" are:\n- coffee\n- cappuccino\n- latte\n- mocha\n- espresso\n- macchiato\n- frappuccino\n- Americano\n- caffe\n- espresso shot\n```"}
{"cat": "food", "slot": "specialization", "value": "jug wine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are jug wine. \n        Output: ", "result": "\n```\nwine, grape, vintage, fermentation, barrel, varietal, harvest, blend, estate, vineyard\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: movies. \n        Condition: are based on true events. \n        Output: \n```\nSchindler's List, Titanic, The Pianist, The Shawshank Redemption"}
{"cat": "food", "slot": "specialization", "value": "wood strawberry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are wood strawberry. \n        Output: ", "result": "\n        apple, banana, cherry, date, fig, grape, kiwi, melon, orange, strawberry\n    \"\"\"\n    category = \"food\"\n    condition = \"are wood strawberry\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "food", "slot": "specialization", "value": "unleavened bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are unleavened bread. \n        Output: ", "result": "\n        pita, matzo, cracker, flatbread, unleavened, bread, biscuit, wafer, tortilla, blini \n    \"\"\"\n    food_words = [\"pita\", \"matzo\", \"cracker\", \"flatbread\", \"unleavened\", \"bread\", \"biscuit\", \"wafer\", \"tortilla\", \"blini\"]\n    unleavened_bread_words = [word for word in food_words if \"unleavened\" in word]\n    if \"bread\""}
{"cat": "food", "slot": "specialization", "value": "Camembert", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Camembert. \n        Output: ", "result": "\n        brie, camembert, cheddar, gouda, gruyere, mozzarella, parmesan, provolone, romano, swiss. \n        \"\"\"\n        category = 'food'\n        condition = 'are Camembert'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_with_category_and_condition(self):\n        self.assertEqual(get_words('food', 'are Camembert'), 'brie, cam"}
{"cat": "food", "slot": "specialization", "value": "chokecherry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are chokecherry. \n        Output: ", "result": "\n        cherry\n        chokecherry\n        chokecherry\n        chokecherry\n        chokecherry\n        chokecherry\n        chokecherry\n        chokecherry\n        chokecherry\n    \"\"\"\n    category = \"food\"\n    condition = \"are chokecherry\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in"}
{"cat": "food", "slot": "specialization", "value": "Velveeta", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Velveeta. \n        Output: ", "result": "\n        pepperoni, pizza, macaroni, cheese, lasagna, ravioli, spaghetti, cheeseburger, cheesecake, nachos\n```\n\n```"}
{"cat": "food", "slot": "specialization", "value": "french fries", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are french fries. \n        Output: ", "result": "\n```\nfrench, fries, potato, spud, tuber, chip, snack, side, dish, fast, food\n```\nExplanation: The words that belong to the category \"food\" and satisfy the condition \"are french fries\" are \"french fries\", \"potato\", \"spud\", \"tuber\", \"chip\", \"snack\", \"side\", \"dish\", \"fast food\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output:"}
{"cat": "food", "slot": "specialization", "value": "garden strawberry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are garden strawberry. \n        Output: ", "result": "1. Strawberry, 2. Strawberry, 3. Strawberry, 4. Strawberry, 5. Strawberry, 6. Strawberry, 7. Strawberry, 8. Strawberry, 9. Strawberry, 10. Strawberry. \n    \"\"\"\n    strawberry_words = ['Strawberry', 'Strawberry', 'Strawberry', 'Strawberry', 'Strawberry', 'Strawberry', 'Strawberry', 'Strawberry', 'Strawberry', '"}
{"cat": "food", "slot": "specialization", "value": "soft wheat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are soft wheat. \n        Output: ", "result": "\n        bread, roll, pastry, cake, cookie, muffin, biscuit, croissant, scone, bun\n```\n\n```\nDescribe a scenario where the input is a list of 10 strings, where each string is a word that belongs to a different category. \n        The categories are: food, clothing, transportation, and technology. \n        For each category, provide the number of words in the category. \n        Desired output: a list of 10 strings, where each string is a word that belongs to a different category,"}
{"cat": "food", "slot": "specialization", "value": "cream cheese", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cream cheese. \n        Output: ", "result": "\n```\ncheese, sour cream, whipped cream, cream cheese frosting, cream cheese bagel, cream cheese dip, cream cheese frosting recipe, cream cheese pound cake, cream cheese frosting recipe\n```\n```"}
{"cat": "food", "slot": "specialization", "value": "tomato juice", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are tomato juice. \n        Output: ", "result": "\n        tomato, juice, ketchup, pasta, salad, sauce, salsa, soup, spaghetti, vinaigrette \n    \"\"\"\n    category = \"food\"\n    condition = \"are tomato juice\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition. \n        Desired output: a list of"}
{"cat": "food", "slot": "specialization", "value": "farmer's cheese", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are farmer's cheese. \n        Output: ", "result": "\n        brie, cheddar, gouda, mozzarella, parmesan, provolone, ricotta, feta, blue cheese, goat cheese.\n    \"\"\"\n    category = \"food\"\n    condition = \"are farmer's cheese\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as file:\n        for line in file:\n            line"}
{"cat": "food", "slot": "specialization", "value": "baked potato", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are baked potato. \n        Output: ", "result": "\n```\nbaked, potato, spud, tater, roastie, jacket, oven, mash, chip, skin\n```\nExplanation: The words that belong to the category \"food\" and satisfy the condition \"are baked potato\" are \"baked, potato, spud, tater, roastie, jacket, oven, mash, chip, skin\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. "}
{"cat": "food", "slot": "specialization", "value": "bacon-lettuce-tomato sandwich", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are bacon-lettuce-tomato sandwich. \n        Output: ", "result": "\n        bacon,lettuce,tomato,sandwich,bacon-lettuce-tomato,bacon-lettuce-tomato-sandwich,bacon-lettuce-tomato-sandwiches,bacon-lettuce-tomato-sandwiches,bacon-lettuce-tomato-sandwiches,bacon-lettuce-tomato-sandwiches,bacon-lettuce-tomato-sandwiches,bacon-lettuce-tomato-sandwiches,bacon-lettuce-tom"}
{"cat": "food", "slot": "specialization", "value": "bleu", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are bleu. \n        Output: ", "result": "\n        chocolate, cheese, blueberry, blue, blueberry pie, blueberry muffin, blueberry yogurt, blue cheese, blue cheese dressing, blue cheese burger.\n    \"\"\"\n    category = 'food'\n    condition = 'are bleu'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition within the category.\n    \"\"\"\n   "}
{"cat": "food", "slot": "specialization", "value": "fruit juice", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are fruit juice. \n        Output: ", "result": "1. Apple, 2. Orange, 3. Grape, 4. Pineapple, 5. Mango, 6. Peach, 7. Berry, 8. Cranberry, 9. Pomegranate, 10. Tangerine.\n    \"\"\"\n    fruits = ['apple', 'orange', 'grape', 'pineapple', 'mango', 'peach', 'berry', 'cranberry', 'pomegranate', 'tangerine']\n    category = 'food'\n    condition = 'are fruit"}
{"cat": "food", "slot": "specialization", "value": "carrot juice", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are carrot juice. \n        Output: ", "result": "\n        carrot, juice, carrot, juice, carrot, juice, carrot, juice, \n        carrot, juice, carrot, juice, carrot, juice, carrot, juice, \n        carrot, juice, carrot, juice, carrot, juice, carrot, juice, \n        carrot, juice, carrot, juice, carrot, juice, carrot, juice, \n        carrot, juice, carrot, juice, carrot, juice,"}
{"cat": "food", "slot": "specialization", "value": "Burgundy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Burgundy. \n        Output: ", "result": "\n```\nbeef, chicken, pork, lamb, duck, salmon, shrimp, scallops, lobster\n```\nExplanation:\n\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Desired output: comma separated list of words.\n3. Category: food.\n4. Condition: are Burgundy.\n5. Output: beef, chicken, pork, lamb, duck, salmon, shrimp, scallops, lobster."}
{"cat": "food", "slot": "specialization", "value": "pot cheese", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are pot cheese. \n        Output: ", "result": "\n```\ncheddar, gouda, brie, mozzarella, provolone, gruyere, parmesan, cheddar, gouda, brie, mozzarella, provolone, gruyere, parmesan\n```\nExplanation: \n        The words that belong to the category \"food\" and satisfy the condition \"are pot cheese\" are: \n        cheddar, gouda, brie, mozzarella, provolone, gruyere, parmesan, cheddar,"}
{"cat": "food", "slot": "specialization", "value": "papaya juice", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are papaya juice. \n        Output: ", "result": "1. papaya, 2. juice, 3. papaya, 4. juice, 5. papaya, 6. juice, 7. papaya, 8. juice, 9. papaya, 10. juice"}
{"cat": "food", "slot": "specialization", "value": "fortified wine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are fortified wine. \n        Output: ", "result": "\n            Chianti, Sherry, Port, Madeira, Marsala, Vermouth, Claret, Tokay, Sherry, Sauternes\n    \"\"\"\n    fortified_wine_words = [\n        \"Chianti\", \"Sherry\", \"Port\", \"Madeira\", \"Marsala\", \"Vermouth\", \"Claret\", \"Tokay\", \"Sauternes\"\n    ]\n    fortified_wine_words = [word for word in fortified_wine_words if word.startswith(\"fortified wine\")]\n   "}
{"cat": "food", "slot": "specialization", "value": "submarine sandwich", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are submarine sandwich. \n        Output: ", "result": "\n        ham, salami, bologna, turkey, chicken, tuna, salmon, shrimp, egg, bacon.\n    \"\"\"\n    sub_sandwich_words = [\"ham\", \"salami\", \"bologna\", \"turkey\", \"chicken\", \"tuna\", \"salmon\", \"shrimp\", \"egg\", \"bacon\"]\n    sub_sandwich_words = [word for word in sub_sandwich_words if word.endswith(\"a\")]\n    sub_sandwich_words = ["}
{"cat": "food", "slot": "specialization", "value": "wrap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are wrap. \n        Output: ", "result": "\n        chips, salsa, taco, wrap, burrito, enchilada, quesadilla, guacamole, salsa \n    \"\"\"\n    food_words = [\"taco\", \"burrito\", \"enchilada\", \"quesadilla\", \"guacamole\", \"salsa\"]\n    wrap_words = [\"wrap\", \"burrito\", \"enchilada\", \"quesadilla\", \"guacamole\", \"salsa\"]\n\n    category = \"food\"\n    condition = \"are wrap\"\n"}
{"cat": "food", "slot": "specialization", "value": "Merlot", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Merlot. \n        Output: ", "result": "\n```\nmerlot,cabernet,syrah,pinot,grigio,chardonnay,zinfandel,malbec,burgundy,shiraz\n```\nExplanation: The words that belong to the category \"food\" and satisfy the condition \"are Merlot\" are \"merlot\", \"cabernet\", \"syrah\", \"pinot\", \"grigio\", \"chardonnay\", \"zinfandel\", \"malbec\", \"burgundy\", and \"shiraz\"."}
{"cat": "food", "slot": "specialization", "value": "triple creme", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are triple creme. \n        Output: ", "result": "\n        brie, gorgonzola, roquefort, blue, camembert, cheddar, gouda, mozzarella, parmesan, reblochon \n    \"\"\"\n    category = \"food\"\n    condition = \"are triple creme\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"fruit\", \"are red\"))\nprint(get_words(\"color\", \"are blue\"))\nprint(get_words(\"food\","}
{"cat": "food", "slot": "specialization", "value": "beefburger", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are beefburger. \n        Output: ", "result": "\n        beefburger, hamburger, steak, burger, meatloaf, roast, chili, t-bone, sirloin, filet mignon \n    \"\"\"\n    category = 'food'\n    condition = 'are beefburger'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of 10 words that belong to that category.\n        Desired output: comma separated list of words"}
{"cat": "food", "slot": "specialization", "value": "anadama bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are anadama bread. \n        Output: ", "result": "\n```\nbread, flour, yeast, sugar, salt, butter, eggs, milk, anadama, cornbread\n```\nExplanation:\n\n1. bread, flour, yeast, sugar, salt, butter, eggs, milk, anadama, cornbread\n2. bread, flour, yeast, sugar, salt, butter, eggs, milk, anadama, cornbread\n3. bread, flour, yeast, sugar, salt, butter, eggs, milk, anadama, cornbread\n4."}
{"cat": "food", "slot": "specialization", "value": "Chilean strawberry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Chilean strawberry. \n        Output: ", "result": "\n        chilean, strawberry, fruit, red, juicy, sweet, fragrant, delicious, succulent, aromatic \n    \"\"\"\n    chilean_strawberry_words = [\n        \"chilean\",\n        \"strawberry\",\n        \"fruit\",\n        \"red\",\n        \"juicy\",\n        \"sweet\",\n        \"fragrant\",\n        \"delicious\",\n        \"succulent\",\n        \"aromatic\"\n    ]\n    return chilean_strawberry"}
{"cat": "food", "slot": "specialization", "value": "cooking apple", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cooking apple. \n        Output: ", "result": "\n            apple, cinnamon, caramel, pie, crumble, tart, sauce, muffin, galette, crisp \n        \"\"\"\n        category = 'food'\n        condition = 'are cooking apple'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_apple_cooking_words(self):\n        self.assertEqual(self.apple_cooking_words(), 'apple, cinnamon, caramel, pie, crumble, tart, sauce,"}
{"cat": "food", "slot": "specialization", "value": "sub", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are sub. \n        Output: ", "result": "\n        chocolate, cake, cookie, ice cream, pizza, bread, sandwich, soup, salad, pasta \n    \"\"\"\n    category = \"food\"\n    condition = \"are sub\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"food\", \"are sub\"))\n```\nOutput:\nchocolate, cake, cookie, ice cream, pizza, bread, sandwich, soup, salad, pasta\n```\n"}
{"cat": "food", "slot": "specialization", "value": "red wine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are red wine. \n        Output: ", "result": "\n```\ncabernet, merlot, pinot noir, zinfandel, syrah, grenache, mourvedre, sangiovese, tempranillo, malbec\n```\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are sweet. \n        Output: \n```\napple, banana, mango, pineapple, strawberry, blueberry,"}
{"cat": "food", "slot": "specialization", "value": "pyxidium", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are pyxidium. \n        Output: ", "result": "\n    \"\"\"\n    food_pyxidium_words = [\n        \"pyxidium\",\n        \"pyxidium\",\n        \"pyxidium\",\n        \"pyxidium\",\n        \"pyxidium\",\n        \"pyxidium\",\n        \"pyxidium\",\n        \"pyxidium\",\n        \"pyxidium\",\n        \"pyxidium\"\n    ]\n    return food_pyxidium_words"}
{"cat": "food", "slot": "specialization", "value": "java", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are java. \n        Output: ", "result": "\n        chocolate, coffee, donut, ice cream, jelly, juice, latte, muffin, scone, tea\n    \"\"\"\n    category = 'food'\n    condition = 'are java'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    words = []\n    if category == 'food':\n       "}
{"cat": "food", "slot": "specialization", "value": "emmer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are emmer. \n        Output: ", "result": "\n        */\n        public List<string> GetWords(string category, string condition)\n        {\n            List<string> words = new List<string>();\n            using (SqlConnection connection = new SqlConnection(connectionString))\n            {\n                connection.Open();\n\n                using (SqlCommand command = new SqlCommand(\"GetWords\", connection))\n                {\n                    command.CommandType = CommandType.StoredProcedure;\n                    command.Parameters.AddWithValue(\"@Category\", category);\n                    command.Parameters.AddWithValue(\"@Condition\", condition);"}
{"cat": "food", "slot": "specialization", "value": "Reuben", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Reuben. \n        Output: ", "result": "\n        bread, dressing, meat, cheese, sauce, vegetables, topping, sandwich, deli \n    \"\"\"\n    category = 'food'\n    condition = 'are Reuben'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    words = []\n    if category == 'food':\n        if condition == 'are Re"}
{"cat": "food", "slot": "specialization", "value": "loaf of bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are loaf of bread. \n        Output: ", "result": "\n        bread, roll, bun, loaf, slice, baguette, brioche, hamburger bun, hot dog bun, pita bread\n```\n\n```"}
{"cat": "food", "slot": "specialization", "value": "sparkling wine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are sparkling wine. \n        Output: ", "result": "\n        champagne, prosecco, cava, sparkling wine, fizz, bubbly, seltzer, soda water, tonic water, tonic water. \n        \"\"\"\n        category = 'food'\n        condition = 'are sparkling wine'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition within the category.\n    \"\"\"\n    words = []\n"}
{"cat": "food", "slot": "specialization", "value": "french-fried potatoes", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are french-fried potatoes. \n        Output: ", "result": "\n```\nfrench-fried,potatoes,chips,crisps,fries,hashbrowns,tater-tots,pommes-frites,papas-fritas,patatas-fritas\n```\nExplanation: The words that belong to the category \"food\" and satisfy the condition \"are french-fried potatoes\" are french-fried, potatoes, chips, crisps, fries, hashbrowns, tater-tots, pommes-frites, papas-fritas, and"}
{"cat": "food", "slot": "specialization", "value": "blue fig", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are blue fig. \n        Output: ", "result": "\n            apple, blueberry, cherry, fig, grape, \n            kiwi, plum, raspberry, strawberry, \n            watermelon.\n        \"\"\"\n        category = 'food'\n        condition = 'are blue fig'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_category_and_condition(self):\n        self.assertEqual(self.get_words('food', 'are blue fig'), 'apple, blueberry, cherry, fig, gra"}
{"cat": "food", "slot": "specialization", "value": "Muenster", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Muenster. \n        Output: ", "result": "\n        cheddar, swiss, gouda, brie, muenster, colby, fontina, provolone, \n        edam, gorgonzola\n    \"\"\"\n    category = \"food\"\n    condition = \"are Muenster\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"food\", \"are Muenster\"))\n```\nOutput:\ncheddar, swiss, gouda, brie, muenster,"}
{"cat": "food", "slot": "specialization", "value": "Sloppy Joe", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Sloppy Joe. \n        Output: ", "result": "\n            chili, beef, tomato, onion, ketchup, bread, cheese, mustard, pickle, relish\n\"\"\"\n\n# Define the function\ndef get_sloppy_joe_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Iterate over the words in the condition\n    for word in condition_words:\n"}
{"cat": "food", "slot": "specialization", "value": "grated cheese", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are grated cheese. \n        Output: ", "result": "\n        cheddar, mozzarella, parmesan, gouda, gruyere, fontina, provolone, \n        emmental, asiago, romano. \n        \"\"\"\n        category = 'food'\n        condition = 'are grated cheese'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_1(self):\n        self.assertEqual(self.get_word_list('food', 'are grated cheese'), 'cheddar, m"}
{"cat": "food", "slot": "specialization", "value": "ice tea", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are ice tea. \n        Output: ", "result": "iced tea, icedtea, icedtea, icedtea, icedtea, icedtea, icedtea, icedtea, icedtea. \n    \"\"\"\n    category = 'food'\n    condition = 'are ice tea'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition.\n    \"\"\"\n   "}
{"cat": "food", "slot": "specialization", "value": "quick bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are quick bread. \n        Output: ", "result": "\n            apple, banana, blueberry, cinnamon, coffee, doughnut, egg, honey, orange, pumpkin \n        \"\"\"\n        category = \"food\"\n        condition = \"are quick bread\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category:"}
{"cat": "food", "slot": "specialization", "value": "eating apple", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are eating apple. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grapes, orange, pear, plum, strawberry. \n        \"\"\"\n        category = \"food\"\n        condition = \"are eating apple\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    print(get_words(\"food\", \"are eating apple\"))\n```\n\u8f93\u51fa:\napple, banana, cherry, date, fig, grapes, orange, pear, plum, strawberry.\n```"}
{"cat": "food", "slot": "specialization", "value": "hip", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are hip. \n        Output: ", "result": "\n        chia, avocado, quinoa, acai, kale, pomegranate, almond, coconut, turmeric, ginger \n    \"\"\"\n    category = \"food\"\n    condition = \"are hip\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "food", "slot": "specialization", "value": "two-grain spelt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are two-grain spelt. \n        Output: ", "result": "\n        */\n        public List<string> GetWords(string category, string condition)\n        {\n            List<string> words = new List<string>();\n\n            using (SqlConnection connection = new SqlConnection(connectionString))\n            {\n                connection.Open();\n\n                using (SqlCommand command = new SqlCommand(\"GetWords\", connection))\n                {\n                    command.CommandType = CommandType.StoredProcedure;\n                    command.Parameters.AddWithValue(\"@Category\", category);\n                    command.Parameters.AddWithValue(\"@Condition\", condition"}
{"cat": "food", "slot": "specialization", "value": "ear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are ear. \n        Output: ", "result": "\n        beef, cheese, chicken, corn, ear, lettuce, onion, potato, tomato, wheat \n    \"\"\"\n    food_words = [\"beef\", \"cheese\", \"chicken\", \"corn\", \"ear\", \"lettuce\", \"onion\", \"potato\", \"tomato\", \"wheat\"]\n    ear_words = [word for word in food_words if \"ear\" in word]\n    print(\", \".join(ear_words))\n```\nExample:\n    Input: \n        Provide a list of"}
{"cat": "food", "slot": "specialization", "value": "coffee royal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are coffee royal. \n        Output: ", "result": "\n```\ncoffee, espresso, cappuccino, latte, mocha, macchiato, Americano, flat white, cortado, affogato\n```\nExplanation: The words that belong to the category \"food\" and satisfy the condition \"are coffee royal\" are \"coffee, espresso, cappuccino, latte, mocha, macchiato, Americano, flat white, cortado, affogato\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition."}
{"cat": "food", "slot": "specialization", "value": "Swiss cheese", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Swiss cheese. \n        Output: ", "result": "\n        chocolate, fondue, raclette, gruyere, emmental, swiss, cheese, muenster, gouda, brie \n    \"\"\"\n    category = 'food'\n    condition = 'are Swiss cheese'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Test the function\nprint(get_words('food', 'are Swiss cheese'))\n# Output: chocolate, fondue, raclette, gruyere, emmental, swiss, cheese"}
{"cat": "food", "slot": "specialization", "value": "syncarp", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are syncarp. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grape, orange, pear, plum, strawberry\n    \"\"\"\n    fruits = [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"orange\", \"pear\", \"plum\", \"strawberry\"]\n    syncarp_fruits = [fruit for fruit in fruits if fruit.endswith(\"berry\")]\n    return \", \".join(syncarp_fruits)\n\nprint(get_syncarp_fruits(\"food\", \"are"}
{"cat": "food", "slot": "specialization", "value": "Fragaria virginiana", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Fragaria virginiana. \n        Output: ", "result": "\n        strawberry \n        Fragaria \n        virginiana \n        plant \n        fruit \n        red \n        juicy \n        delicious \n        nutritious \n        \"\"\"\n    words = [\n        \"strawberry\",\n        \"Fragaria\",\n        \"virginiana\",\n        \"plant\",\n        \"fruit\",\n        \"red\",\n        \"juicy\",\n        \"delicious\",\n        \"nutritious\",\n    ]\n    for word in words:\n        if word.startswith(\""}
{"cat": "food", "slot": "specialization", "value": "potato salad", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are potato salad. \n        Output: ", "result": "\n```\npotato, salad, spud, mash, bake, boiled, roast, chips, wedges, fries\n```\nExplanation: The words that belong to the category `food` and satisfy the condition `are potato salad` are `potato, salad, spud, mash, bake, boiled, roast, chips, wedges, fries`.\n```python\ndef get_words(category, condition):\n    words = []\n    for word in category:\n        if condition.search(word):\n"}
{"cat": "food", "slot": "specialization", "value": "mixer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are mixer. \n        Output: ", "result": "\n        chocolate, cake, ice cream, cookie, brownie, pizza, candy, donut, milkshake, sandwich \n    \"\"\"\n    category = 'food'\n    condition = 'are mixer'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition. \n        Desired output: list of words. \n        Category"}
{"cat": "food", "slot": "specialization", "value": "schizocarp", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are schizocarp. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grape, kiwi, mango, orange, peach\n    \"\"\"\n    fruits = [\n        \"apple\",\n        \"banana\",\n        \"cherry\",\n        \"date\",\n        \"fig\",\n        \"grape\",\n        \"kiwi\",\n        \"mango\",\n        \"orange\",\n        \"peach\"\n    ]\n    schizocarps = [\n        \"apple\",\n        \"banana\",\n        \"cherry\",\n        \"date\",\n"}
{"cat": "food", "slot": "specialization", "value": "tabooli", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are tabooli. \n        Output: ", "result": "\n        apple, banana, cherry, date, fig, grape, kiwi, mango, orange, pear\n    \"\"\"\n    food_words = [\n        \"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"kiwi\", \"mango\", \"orange\", \"pear\"\n    ]\n    tabooli_words = [\n        \"tabooli\", \"tabooli\", \"tabooli\", \"tabooli\", \"tabooli\", \"tabooli\", \"tabooli\", \"tabool"}
{"cat": "food", "slot": "specialization", "value": "buffalo nut", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are buffalo nut. \n        Output: ", "result": "\n```\nbuffalo, nut, buffalo nut, buffalo nuts, buffalo nutrient, buffalo nutrients, buffalo nutrient, buffalo nutrients, buffalo nutrient, buffalo nutrients, buffalo nutrient, buffalo nutrients, buffalo nutrient, buffalo nutrients, buffalo nutrient, buffalo nutrients, buffalo nutrient, buffalo nutrients, buffalo nutrient, buffalo nutrients, buffalo nutrient, buffalo nutrients, buffalo nut"}
{"cat": "food", "slot": "specialization", "value": "nan", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are nan. \n        Output: ", "result": "\n        nan, nan, nan, nan, nan, nan, nan, nan, nan, \n        nan, nan, nan, nan, nan, nan, nan, nan, nan, \n        nan, nan, nan, nan, nan, nan, nan, nan, nan, \n        nan, nan, nan, nan, nan, nan, nan, nan, nan, \n        nan, nan, nan, nan, nan, nan, nan, nan, nan, \n        nan, nan, nan, nan, nan, nan, nan, nan, nan, \n       "}
{"cat": "food", "slot": "specialization", "value": "retsina", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are retsina. \n        Output: ", "result": "\n    \"\"\"\n    category = 'food'\n    condition = 'are retsina'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    words = []\n    if category == 'food':\n        if condition == 'are fruits':\n            words.append('apple')\n            words.append('banana')\n            words.append('"}
{"cat": "food", "slot": "specialization", "value": "Gala", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Gala. \n        Output: ", "result": "\n        apple, banana, cherry, date, fig, gala, honeydew, kiwi, melon, nectarine \n    \"\"\"\n    fruits = [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"gala\", \"honeydew\", \"kiwi\", \"melon\", \"nectarine\"]\n    gala_fruits = [fruit for fruit in fruits if \"Gala\" in fruit]\n    return \", \".join(gala_fruits)\n\nprint(get_gala_f"}
{"cat": "food", "slot": "specialization", "value": "bosc", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are bosc. \n        Output: ", "result": "\n        apple, banana, cherry, date, fig, grape, honeydew, kiwi, mango, nectarine, orange, peach, pear, plum, raspberry, strawberry, watermelon, blueberry, blackberry, cranberry, elderberry, grapefruit, lemon, lime, orange, pineapple, pomegranate, raspberry, tangerine, apricot, cherry, currant, elderberry, gooseberry, huckleberry, loganberry, mulberry"}
{"cat": "food", "slot": "specialization", "value": "slaw", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are slaw. \n        Output: ", "result": "\n            coleslaw, slaw, slaw, slaw, slaw, slaw, slaw, slaw, slaw\n    \"\"\"\n    category = \"food\"\n    condition = \"are slaw\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"food\", \"are slaw\"))  # Output: coleslaw, slaw, slaw, slaw, slaw, slaw, slaw, slaw, slaw\nprint(get_words"}
{"cat": "food", "slot": "specialization", "value": "spike", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are spike. \n        Output: ", "result": "\n    \"\"\"\n    food_words = [\"pizza\", \"hamburger\", \"ice cream\", \"sushi\", \"taco\"]\n    spike_food_words = [word for word in food_words if \"spike\" in word]\n    return \", \".join(spike_food_words)\n\nprint(find_spike_food_words(category=\"food\", condition=\"are spike\"))\n```\nOutput: \n```\npizza, hamburger, ice cream, sushi, taco\n```"}
{"cat": "food", "slot": "specialization", "value": "lager", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are lager. \n        Output: ", "result": "\n        apple, banana, cherry, date, fig, grape, honeydew, kiwi, mango, nectarine, orange, peach, pear, plum, prune, raspberry, strawberry, watermelon, blueberry, blackberry, cranberry, elderberry, grapefruit, lemon, lime, orange, pineapple, raspberry, tangerine, apricot, cherry, currant, elderflower, elderberry, gooseberry, honeysuckle, jasmine"}
{"cat": "food", "slot": "specialization", "value": "rose hip", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are rose hip. \n        Output: ", "result": "\n    \"\"\"\n    food_words = [\"raspberry\", \"strawberry\", \"blackberry\", \"blueberry\", \"cranberry\", \"gooseberry\", \"huckleberry\", \"loganberry\", \"redcurrant\", \"blackcurrant\"]\n    rose_hip_words = [word for word in food_words if \"rose hip\" in word]\n    return \", \".join(rose_hip_words)\n\nprint(get_category_and_condition_words(\"food\", \"are rose hip\"))\n```\nOutput: \nraspberry,"}
{"cat": "food", "slot": "specialization", "value": "tea", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are tea. \n        Output: ", "result": "\n        chai, milk, sugar, tea, tea bag, tea leaves, tea pot, tea cup, tea infuser, tea strainer \n    \"\"\"\n    category = 'food'\n    condition = 'are tea'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: food. \n        Output:"}
{"cat": "food", "slot": "specialization", "value": "generic wine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are generic wine. \n        Output: ", "result": "\n        chardonnay, merlot, pinot grigio, riesling, sauvignon blanc, zinfandel, cabernet sauvignon, pinot noir, sangiovese, moscato \n    \"\"\"\n    category = 'food'\n    condition = 'are generic wine'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition within the category.\n"}
{"cat": "food", "slot": "specialization", "value": "roll", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are roll. \n        Output: ", "result": "\n        apple, bread, cake, cookie, donut, pizza, roll, sandwich, sushi\n    \"\"\"\n    category = 'food'\n    condition = 'are roll'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: food. \n        Output: \n        apple, bread"}
{"cat": "food", "slot": "specialization", "value": "macon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are macon. \n        Output: ", "result": "\n    \"\"\"\n    macon_words = [\"macon\", \"macon\", \"macon\", \"macon\", \"macon\", \"macon\", \"macon\", \"macon\", \"macon\", \"macon\"]\n    food_words = [\"peach\", \"peach\", \"peach\", \"peach\", \"peach\", \"peach\", \"peach\", \"peach\", \"peach\", \"peach\", \"peach\", \"peach\", \"peach\", \"peach\", \"peach\", \"peach\", \"peach\", \"peach\","}
{"cat": "food", "slot": "specialization", "value": "Triticum turgidum", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Triticum turgidum. \n        Output: ", "result": "\n```\nwheat, flour, bread, pasta, cereal, durum, semolina, spaghetti, pizza, crackers\n```\nExplanation: The words that belong to the category \"food\" and satisfy the condition \"are Triticum turgidum\" are: wheat, flour, bread, pasta, cereal, durum, semolina, spaghetti, pizza, and crackers.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n       "}
{"cat": "food", "slot": "specialization", "value": "false fruit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are false fruit. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grape, kiwi, mango, orange, pear\n    \"\"\"\n    fruits = ['apple', 'banana', 'cherry', 'date', 'fig', 'grape', 'kiwi', 'mango', 'orange', 'pear']\n    fruits_false = ['apple', 'banana', 'cherry', 'date', 'fig', 'grape', 'kiwi', 'mango', 'orange', 'pear']\n    fruits_false = [word for word in"}
{"cat": "food", "slot": "specialization", "value": "herbal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are herbal. \n        Output: ", "result": "\n```\nbasil, chamomile, fennel, ginger, lavender, mint, rosemary, sage, thyme\n```\nExplanation: \n\n* The category is food.\n* The condition is that the words are herbal.\n* The output is a comma-separated list of 10 words that belong to the category and satisfy the condition.\n```python\ndef get_herbal_food_words(category: str, condition: str) -> list:\n    words = []\n    for word in category.split(\",\"):\n"}
{"cat": "food", "slot": "specialization", "value": "Fragaria chiloensis", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Fragaria chiloensis. \n        Output: ", "result": "\n```\nstrawberry, Chilean strawberry, Fragaria chiloensis, wild strawberry, garden strawberry, red strawberry, fragrant strawberry, baby strawberry, hull-less strawberry, Chilean wild strawberry\n```\nExplanation: The words that belong to the category \"food\" and satisfy the condition \"are Fragaria chiloensis\" are: strawberry, Chilean strawberry, Fragaria chiloensis, wild strawberry, garden strawberry, red strawberry, fragr"}
{"cat": "food", "slot": "specialization", "value": "hot chocolate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are hot chocolate. \n        Output: ", "result": "\n        hot, chocolate, drink, warm, sweet, indulgent, comforting, delicious, rich, frothy \n    \"\"\"\n    category = 'food'\n    condition = 'are hot chocolate'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Example usage\nprint(get_word_list('fruits', 'are red'))\nprint(get_word_list('vegetables', 'are green'))\nprint(get_word_list('food', 'are hot chocolate'))"}
{"cat": "food", "slot": "specialization", "value": "drip coffee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are drip coffee. \n        Output: ", "result": "\n```\ncoffee, espresso, cappuccino, latte, mocha, macchiato, Americano, flat white, cortado, affogato\n```\nExplanation: The words that belong to the category \"food\" and satisfy the condition \"are drip coffee\" are: coffee, espresso, cappuccino, latte, mocha, macchiato, Americano, flat white, cortado, and affogato.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition."}
{"cat": "food", "slot": "specialization", "value": "Boston brown bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Boston brown bread. \n        Output: ", "result": "\n        bread,cake,cookie,donut,muffin,pasta,pizza,sandwich,soup,vegetable\n\"\"\"\n\nword_list = [\"bread\", \"cake\", \"cookie\", \"donut\", \"muffin\", \"pasta\", \"pizza\", \"sandwich\", \"soup\", \"vegetable\"]\ncategory = \"food\"\ncondition = \"are Boston brown bread\"\n\nfiltered_list = [word for word in word_list if word.lower().startswith(category.lower() + \""}
{"cat": "food", "slot": "specialization", "value": "Bordeaux wine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Bordeaux wine. \n        Output: ", "result": "\n            chardonnay, merlot, cabernet, sauvignon, pinot, grenache, malbec, sauvignon blanc, cabernet sauvignon, bordeaux \n        \"\"\"\n        category = 'food'\n        condition = 'are Bordeaux wine'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition within the category.\n    \"\"\"\n   "}
{"cat": "food", "slot": "specialization", "value": "berry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are berry. \n        Output: ", "result": "\n            apple, blueberry, cherry, currant, gooseberry, huckleberry, loganberry, cranberry, raspberry, strawberry\n\"\"\"\n\nword_list = [\"apple\", \"blueberry\", \"cherry\", \"currant\", \"gooseberry\", \"huckleberry\", \"loganberry\", \"cranberry\", \"raspberry\", \"strawberry\"]\ncategory = \"food\"\ncondition = \"are berry\"\n\nif category == \"food\" and condition == \"are berry\":\n    print(\","}
{"cat": "food", "slot": "specialization", "value": "barmbrack", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are barmbrack. \n        Output: ", "result": "\n        apple, barmbrack, cake, chocolate, cookie, donut, eggnog, fruitcake, pudding, scone \n    \"\"\"\n    category = \"food\"\n    condition = \"are barmbrack\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "food", "slot": "specialization", "value": "coffee cappuccino", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are coffee cappuccino. \n        Output: ", "result": "\n        coffee, cappuccino, espresso, latte, mocha, caffe, macchiato, Americano, Mocha Frappuccino, Caffe Mocha. \n        \"\"\"\n        category = 'food'\n        condition = 'are coffee, cappuccino, espresso, latte, mocha, caffe, macchiato, Americano, Mocha Frappuccino, Caffe Mocha'\n        words = []\n        for word in condition.split(','):\n           "}
{"cat": "food", "slot": "specialization", "value": "May apple", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are May apple. \n        Output: ", "result": "\n            apple, crabapple, quince, pear, plum, cherry, apricot, blackberry, raspberry, strawberry \n        \"\"\"\n        category = \"food\"\n        condition = \"are May apple\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"food\", \"are May apple\"))  # Output: apple, crabapple, quince, pear, plum, cherry, apricot, blackberry"}
{"cat": "food", "slot": "specialization", "value": "ade", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are ade. \n        Output: ", "result": "\n    \"\"\"\n    food_words = [\n        \"ade\",\n        \"baked\",\n        \"chocolate\",\n        \"cookie\",\n        \"dessert\",\n        \"pastry\",\n        \"sweet\",\n        \"treat\",\n        \"yum\",\n        \"delicious\"\n    ]\n    return \", \".join(food_words) if len(food_words) > 0 else \"No words found.\"\n\nprint(find_words(\"food\", \"are ade\"))"}
{"cat": "food", "slot": "specialization", "value": "submarine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are submarine. \n        Output: ", "result": "\n        bread, cheese, ham, salami, tuna, turkey, chicken, salmon, sardines, anchovy \n    \"\"\"\n    category = \"food\"\n    submarine_words = [\n        \"bread\",\n        \"cheese\",\n        \"ham\",\n        \"salami\",\n        \"tuna\",\n        \"turkey\",\n        \"chicken\",\n        \"salmon\",\n        \"sardines\",\n        \"anchovy\"\n    ]\n    submarine_words = [word for word in submarine"}
{"cat": "food", "slot": "specialization", "value": "cocoa", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cocoa. \n        Output: ", "result": "\n        chocolate, cocoa, cocoa powder, cocoa butter, cocoa mass, cocoa beans, cocoa nibs, cocoa paste, cocoa liquor, cocoa solids\n    \"\"\"\n    category = \"food\"\n    condition = \"are cocoa\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition within the category.\n    \"\"\"\n"}
{"cat": "food", "slot": "specialization", "value": "chevre", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are chevre. \n        Output: ", "result": "\n        chevre, goat cheese, chevre cheese, chevre cheese, chevre cheese, chevre cheese, chevre cheese, chevre cheese, chevre cheese, chevre cheese. \n        \"\"\"\n        category = 'food'\n        condition = 'are chevre'\n        words = []\n        for word in text.split():\n            if word.lower() in category_words[category] and word.lower() in condition_words[condition]:\n                words.append(word)\n        return ', '.join(words)"}
{"cat": "food", "slot": "specialization", "value": "Burgundy wine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Burgundy wine. \n        Output: ", "result": "\n            Chateauneuf-du-Pape, Pinot Noir, Syrah, Merlot, Cabernet Sauvignon, Cabernet Franc, Grenache, Mourv\u00e8dre, C\u00f4te-R\u00f4tie, Hermitage \n        \"\"\"\n        category = \"food\"\n        condition = \"are Burgundy wine\"\n        words = []\n        for word in product(categories, repeat=2):\n            if word[0] == category and word[1] == condition:\n                words.append(word[0])\n        print(\","}
{"cat": "food", "slot": "specialization", "value": "salmagundi", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are salmagundi. \n        Output: ", "result": "\n    \"\"\"\n    food_words = [\n        \"salmagundi\",\n        \"amuse-bouche\",\n        \"hors d'oeuvre\",\n        \"entree\",\n        \"main\",\n        \"dessert\",\n        \"appetizer\",\n        \"antipasto\",\n        \"starter\",\n        \"snack\"\n    ]\n\n    salmagundi_words = [word for word in food_words if word.startswith(\"salmagundi\")]\n\n    return \", \".join(salmagundi_words"}
{"cat": "food", "slot": "specialization", "value": "Virginia strawberry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Virginia strawberry. \n        Output: ", "result": "\n        strawberry,jam,dessert,fruit,Virginia,summer,red,berry,sweet,tasty\n\"\"\"\n\nword_list = ['strawberry', 'jam', 'dessert', 'fruit', 'Virginia', 'summer', 'red', 'berry', 'sweet', 'tasty']\nfiltered_word_list = []\nfor word in word_list:\n    if 'Virginia' in word:\n        filtered_word_list.append(word)\n\nprint"}
{"cat": "food", "slot": "specialization", "value": "hot dog", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are hot dog. \n        Output: ", "result": "\n        hot dog, sausage, frankfurter, wiener, weenie, dog, bun, snack, delicacy, treat. \n    \"\"\"\n    category = \"food\"\n    condition = \"are hot dog\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition.\n    \"\"\"\n    if category == \"all\":\n        return"}
{"cat": "food", "slot": "specialization", "value": "Honeycrisp", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Honeycrisp. \n        Output: ", "result": "\n        apple, cider, crisp, honey, sweet, tart, juicy, crunchy, crispy, delicious \n    \"\"\"\n    words = []\n    for word in word_list:\n        if word.startswith(\"Honeycrisp\"):\n            words.append(word)\n    return \", \".join(words)\n\nprint(find_honeycrisp_words(\"apple, cider, crisp, honey, sweet, tart, juicy, crunchy, crispy, delicious\"))\n# Output: apple"}
{"cat": "food", "slot": "specialization", "value": "accessory fruit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are accessory fruit. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grape, kiwi, mango, orange, pear\n    \"\"\"\n    fruits = []\n    for word in words:\n        if \"accessory\" in word and \"fruit\" in word:\n            fruits.append(word)\n    return \", \".join(fruits)\n\nprint(get_fruits(\"food\", \"accessory fruit\"))\n```\nOutput:\napple, banana, cherry, date, fig, grape, kiwi, mango, orange, pear\n"}
{"cat": "food", "slot": "specialization", "value": "tabbouleh", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are tabbouleh. \n        Output: ", "result": "\n        cucumber, tomato, parsley, mint, bulgur, lemon, onion, olive oil, salt, pepper\n\"\"\"\n\n# Define the function\ndef get_tabbouleh_words(category, condition):\n    # Create an empty list to store the words\n    words = []\n    \n    # Loop through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if word.category == category and word.satisfies(condition):\n"}
{"cat": "food", "slot": "specialization", "value": "Cuban sandwich", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Cuban sandwich. \n        Output: ", "result": "\n        ham, pork, Swiss cheese, pickles, mustard, bread, butter, dill pickle, roast pork, salami \n    \"\"\"\n    cuban_sandwich_words = [\n        \"ham\",\n        \"pork\",\n        \"Swiss cheese\",\n        \"pickles\",\n        \"mustard\",\n        \"bread\",\n        \"butter\",\n        \"dill pickle\",\n        \"roast pork\",\n        \"salami\"\n    ]\n    return \", \".join(cuban"}
{"cat": "food", "slot": "specialization", "value": "Cheshire cheese", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Cheshire cheese. \n        Output: ", "result": "\n        apple, cheese, cheddar, dairy, gouda, mozzarella, parmesan, queso, swiss, \n        brie, camembert, cheddar, gouda, mozzarella, parmesan, queso, swiss, \n        brie, camembert, cheddar, gouda, mozzarella, parmesan, queso, swiss, \n        brie, camembert, cheddar, gouda, mozzarella, parmes"}
{"cat": "food", "slot": "specialization", "value": "hotdog", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are hotdog. \n        Output: ", "result": "\n        hotdog, frankfurter, wiener, sausage, weenie, dog, tube, roll, bun, frank \n    \"\"\"\n    category = \"food\"\n    condition = \"are hotdog\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition within the category.\n    \"\"\"\n    words = []\n    if category == \"animals\":\n"}
{"cat": "food", "slot": "specialization", "value": "sour bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are sour bread. \n        Output: ", "result": "\n        bread, vinegar, sourdough, sour dough, sourdough bread, sour rye, sour rye bread, sourdough starter, sourdough starter bread, sour rye starter, sour rye starter bread\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"sour\" in word and \"bread\" in word:\n            words.append(word)\n    return words\n\nif __name__ == \"__main__\":\n    word_list = [\n        \""}
{"cat": "food", "slot": "specialization", "value": "matzah", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are matzah. \n        Output: ", "result": "\n          matzah, bread, cracker, unleavened, passover, leaven, chametz, matzah-ball, matzah-brigade, matzah-meal \n    \"\"\"\n    category = \"food\"\n    condition = \"are matzah\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category. \n        Desired output:"}
{"cat": "food", "slot": "specialization", "value": "triple cream", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are triple cream. \n        Output: ", "result": "\n        brie, camembert, gorgonzola, roquefort, stilton, blue cheese, cheddar, gouda, mozzarella, parmesan \n    \"\"\"\n    category = 'food'\n    condition = 'are triple cream'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Test the function\nprint(get_words('food', 'are triple cream'))\n```\nOutput:\nbrie, camembert, gorgonzola,"}
{"cat": "food", "slot": "specialization", "value": "bomber", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are bomber. \n        Output: ", "result": "\n        chocolate, cookie, cake, pizza, ice cream, burger, sandwich, bread, pasta, sushi \n    \"\"\"\n    category = \"food\"\n    condition = \"are bomber\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as f:\n        for line in f:\n            line = line.strip()\n            if category in line and condition"}
{"cat": "food", "slot": "specialization", "value": "V-8 juice", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are V-8 juice. \n        Output: ", "result": "\n            apple, orange, grape, lemon, lime, cranberry, blueberry, strawberry, raspberry, watermelon\n        \"\"\"\n        category = 'food'\n        condition = 'are V-8 juice'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_fruits(self):\n        self.assertEqual(self.get_words('food', 'are fruits'), 'apple, orange, grape, lemon, lime,"}
{"cat": "food", "slot": "specialization", "value": "white bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are white bread. \n        Output: ", "result": "\n        white, bread, baguette, roll, loaf, sliced, hamburger, sandwich, bun, croissant \n    \"\"\"\n    category = \"food\"\n    condition = \"are white bread\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition within the category.\n    \"\"\"\n    words = []\n    if category == \"animals\":\n       "}
{"cat": "food", "slot": "specialization", "value": "soya bean", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are soya bean. \n        Output: ", "result": "\n        chickpea, lentil, soybean, tofu, tempeh, edamame, soy milk, soy yogurt, soy cheese, soy protein.\n    \"\"\"\n    category = \"food\"\n    condition = \"are soya bean\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"food\", \"are chicken\"))\nprint(get_words(\"food\", \"are beef\"))\nprint(get_"}
{"cat": "food", "slot": "specialization", "value": "vintage", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are vintage. \n        Output: ", "result": "\n            chocolate, cookie, cake, ice cream, soda, pie, bread, pizza, candy, donut\n\"\"\"\n\n# Define the function\ndef get_vintage_food_words(category: str, condition: str) -> list:\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Loop through each word in the condition\n    for word in"}
{"cat": "food", "slot": "specialization", "value": "sacramental wine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are sacramental wine. \n        Output: ", "result": "1. Communion, 2. Eucharist, 3. Consecration, 4. Transubstantiation, 5. Host, 6. Chalice, 7. Precious Blood, 8. Blood of Christ, 9. Holy Thursday, 10. Maundy Thursday.\n    \"\"\"\n    category = 'food'\n    condition = 'are sacramental wine'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n"}
{"cat": "food", "slot": "specialization", "value": "pasta salad", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are pasta salad. \n        Output: ", "result": "\n            spaghetti, ravioli, lasagna, fettuccine, macaroni, penne, rigatoni, tortellini, gnocchi, pappardelle \n    \"\"\"\n    food_words = [\"spaghetti\", \"ravioli\", \"lasagna\", \"fettuccine\", \"macaroni\", \"penne\", \"rigatoni\", \"tortellini\", \"gnocchi\", \"pappardelle\"]\n    pasta_salad_words = [word for word in food_words if \"salad\" in"}
{"cat": "food", "slot": "specialization", "value": "olive", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are olive. \n        Output: ", "result": "\n        olives, olive, olive, olive, olive, olive, olive, olive, olive \n    \"\"\"\n    olives = [\"olive\"]\n    for word in olives:\n        if \"olive\" in word:\n            print(word, end=\", \")\n    print()\n\n# Test the function\ntest_category(\"food\", \"are olive\")"}
{"cat": "food", "slot": "specialization", "value": "refresher", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are refresher. \n        Output: ", "result": "\n        chocolate, ice cream, soda, lemonade, iced tea, coffee, water, juice, smoothie, slushie\n```\n\n```"}
{"cat": "food", "slot": "specialization", "value": "tunaburger", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are tunaburger. \n        Output: ", "result": "\n```\ntunaburger, cheeseburger, hamburger, bacon, bun, lettuce, tomato, pickle, ketchup, mustard\n```\nExplanation: \n        The words that belong to the category \"food\" and satisfy the condition \"are tunaburger\" are: \n        tunaburger, cheeseburger, hamburger, bacon, bun, lettuce, tomato, pickle, ketchup, mustard. \n        The words are sorted in alphabetical order.\n```\nProvide a"}
{"cat": "food", "slot": "specialization", "value": "molded salad", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are molded salad. \n        Output: ", "result": "\n```\nlettuce, tomato, cucumber, onion, carrot, bell pepper, mushroom, broccoli, cauliflower, spinach\n```\nExplanation: The words that belong to the category food and satisfy the condition of being molded salad are lettuce, tomato, cucumber, onion, carrot, bell pepper, mushroom, broccoli, cauliflower, and spinach.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n       "}
{"cat": "food", "slot": "specialization", "value": "hallah", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are hallah. \n        Output: ", "result": "\u05d7\u05dc\u05d1, \u05d7\u05dc\u05d1, \u05d7\u05dc\u05d1, \u05d7\u05dc\u05d1, \u05d7\u05dc\u05d1, \u05d7\u05dc\u05d1, \u05d7\u05dc\u05d1, \u05d7\u05dc\u05d1, \u05d7\u05dc\u05d1."}
{"cat": "food", "slot": "specialization", "value": "English muffin", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are English muffin. \n        Output: ", "result": "\n            blueberry, cinnamon, crumb, dough, egg, fruit, glaze, maple, muffin, streusel\n    \"\"\"\n    category = \"food\"\n    condition = \"are English muffin\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as f:\n        for line in f:\n            line = line.strip()\n            if line.starts"}
{"cat": "food", "slot": "specialization", "value": "starch wheat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are starch wheat. \n        Output: ", "result": "\n        bread, rice, pasta, potato, cereal, flour, noodle, corn, pastries, crackers. \n    \"\"\"\n    food_words = [\"bread\", \"rice\", \"pasta\", \"potato\", \"cereal\", \"flour\", \"noodle\", \"corn\", \"pastries\", \"crackers\"]\n    starch_wheat_words = [word for word in food_words if \"starch\" in word and \"wheat\" in word]\n    return \", \".join(starch"}
{"cat": "food", "slot": "specialization", "value": "crab Louis", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are crab Louis. \n        Output: ", "result": "\n```\ncrab, Louis, Maryland, seafood, dish, recipe, steamed, salad, ingredients, crabby\n```\n\nExplanation: The word \"crab\" belongs to the category \"food\" and satisfies the condition of being a \"crab Louis\" which is a dish made with steamed crab meat and served as a salad with ingredients such as crabby, lettuce, tomato, and mayonnaise.\n\n1. Provide a list of 10 words that belong to the category and satisfy the condition"}
{"cat": "food", "slot": "specialization", "value": "potion", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are potion. \n        Output: ", "result": "\n        chocolate, \n        potion, \n        elixir, \n        brew, \n        concoction, \n        potion, \n        elixir, \n        brew, \n        concoction.\n    \"\"\"\n    potion_words = [\n        \"chocolate\",\n        \"potion\",\n        \"elixir\",\n        \"brew\",\n        \"concoction\",\n        \"potion\",\n        \"elixir\",\n        \"brew\",\n        \"concoction\""}
{"cat": "food", "slot": "specialization", "value": "elk nut", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are elk nut. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grape, kiwi, melon, orange, pear\n    \"\"\"\n    food_words = [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"kiwi\", \"melon\", \"orange\", \"pear\"]\n    elk_nut_words = []\n    for word in food_words:\n        if \"elk\" in word and \"nut\" in word:\n            elk_nut_words.append(word)\n    return elk_nut"}
{"cat": "food", "slot": "specialization", "value": "chicken salad", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are chicken salad. \n        Output: ", "result": "\n        chicken, salad, chicken, salad, chicken, salad, chicken, salad, \n        chicken, salad, chicken, salad. \n        \"\"\"\n        category = 'food'\n        condition = 'are chicken salad'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n# Test the function with sample inputs.\nprint(get_words('food', 'are chicken salad'))  # Output: chicken, salad, chicken, salad,"}
{"cat": "food", "slot": "specialization", "value": "fruitlet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are fruitlet. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grape, kiwi, mango, orange, peach\n    \"\"\"\n    fruits = ['apple', 'banana', 'cherry', 'date', 'fig', 'grape', 'kiwi', 'mango', 'orange', 'peach']\n    fruits_fruitlet = [fruit for fruit in fruits if 'fruitlet' in fruit]\n    print(fruits_fruitlet)\n```\n\u8f93\u51fa\uff1a\n```\n['apple', 'banana', 'cherry"}
{"cat": "food", "slot": "specialization", "value": "hydromel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are hydromel. \n        Output: ", "result": "\n        apple, cider, honey, mead, melomel, perry, pyment,\n```"}
{"cat": "food", "slot": "specialization", "value": "string cheese", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are string cheese. \n        Output: ", "result": "\n        cheddar, mozzarella, brie, gouda, fontina, parmesan, blue cheese, goat cheese, feta, camembert\n\"\"\"\nprint(\"Comma separated list of 10 words that belong to the category 'food' and satisfy the condition 'are string cheese':\")\ncheese_list = [\"cheddar\", \"mozzarella\", \"brie\", \"gouda\", \"fontina\", \"parmesan\", \"blue cheese\", \"goat cheese\", \"feta\", \"camembert"}
{"cat": "food", "slot": "specialization", "value": "fruit drink", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are fruit drink. \n        Output: ", "result": "7up, lemonade, sprite, ginger ale, pineapple juice, orange juice, grapefruit juice, cranberry juice, mango juice.\n    \"\"\"\n    fruits = [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"kiwi\", \"lemon\", \"orange\", \"peach\", \"plum\", \"watermelon\"]\n    drinks = [\"7up\", \"lemonade\", \"sprite\", \"ginger ale\", \"pineapple juice\", \"or"}
{"cat": "food", "slot": "specialization", "value": "California wine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are California wine. \n        Output: ", "result": "\n```\nChardonnay, Cabernet Sauvignon, Merlot, Pinot Noir, Zinfandel, Sauvignon Blanc, Syrah, Pinot Grigio, Sangiovese, Riesling\n```\n```"}
{"cat": "food", "slot": "specialization", "value": "macaroni wheat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are macaroni wheat. \n        Output: ", "result": "\n        spaghetti, macaroni, lasagna, noodle, pasta, linguine, fettuccine, rigatoni, penne, elbow macaroni, rotini.\n    \"\"\"\n    food_words = [\"spaghetti\", \"macaroni\", \"lasagna\", \"noodle\", \"pasta\", \"linguine\", \"fettuccine\", \"rigatoni\", \"penne\", \"elbow macaroni\", \"rotini\"]\n    macaroni_wheat_words = [word for word in food_"}
{"cat": "food", "slot": "specialization", "value": "goat cheese", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are goat cheese. \n        Output: ", "result": "1. goat cheese, 2. chevre, 3. ch\u00e8vre, 4. cheese, 5. fromage, 6. roquefort, 7. gorgonzola, 8. blue cheese, 9. gouda, 10. brie. \n        \"\"\"\n        category = 'food'\n        condition = 'are goat cheese'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_1(self):\n        self.assert"}
{"cat": "food", "slot": "specialization", "value": "tuna salad", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are tuna salad. \n        Output: ", "result": "\n        tuna, salad, can, mayonnaise, onion, celery, salt, pepper, water, olive oil \n    \"\"\"\n    food_words = [\"tuna\", \"salad\", \"can\", \"mayonnaise\", \"onion\", \"celery\", \"salt\", \"pepper\", \"water\", \"olive oil\"]\n    tuna_salad_words = [word for word in food_words if \"tuna\" in word or \"salad\" in word]\n    if \"tuna\" in tuna_salad_words"}
{"cat": "food", "slot": "specialization", "value": "espresso", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are espresso. \n        Output: ", "result": "\n```\nespresso, cappuccino, latte, mocha, macchiato, Americano, caffe, coffee, espresso shot, espresso machine\n```\n```\nDesired output: comma separated list of words. \nCategory: food. \nCondition: are fruits. \nOutput: \n```\napple, banana, cherry, date, fig, grape, kiwi, mango, orange, pear\n```\n```\nDesired output: comma separated list of words. \nCategory: food. \nCondition:"}
{"cat": "food", "slot": "specialization", "value": "crab apple", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are crab apple. \n        Output: ", "result": "\n            apple, crab, juicy, tart, crunchy, sweet, aromatic, healthy, low-calorie, high-antioxidants\n        \"\"\"\n        crab_apple_words = [\n            \"apple\", \"crab\", \"juicy\", \"tart\", \"crunchy\", \"sweet\", \"aromatic\", \"healthy\", \"low-calorie\", \"high-antioxidants\"\n        ]\n        crab_apple_words = [word for word in crab_apple_words if word.starts"}
{"cat": "food", "slot": "specialization", "value": "juniper berry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are juniper berry. \n        Output: ", "result": "\n        juniper,berry,juniperberry,juniperberry,juniperberry,juniperberry,juniperberry,juniperberry,juniperberry,juniperberry. \n        \"\"\"\n        category = 'food'\n        condition = 'are juniper berry'\n        words = []\n        for word in text.split():\n            if word.lower() == 'juniper berry':\n                words.append(word)\n        if words:\n            result = ', '.join(words)\n        else:\n           "}
{"cat": "food", "slot": "specialization", "value": "dessert wine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are dessert wine. \n        Output: ", "result": "1. Port, 2. Sherry, 3. Madeira, 4. Sauternes, 5. Tokaji, 6. Moscato d'Asti, 7. Riesling Beerenauslese, 8. Ice wine, 9. Vermouth, 10. Marsala.\n    \"\"\"\n    category = 'food'\n    condition = 'are dessert wine'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n"}
{"cat": "food", "slot": "specialization", "value": "cyder", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cyder. \n        Output: ", "result": "\n            apple, cherry, cider, cyder, elderberry, elderflower, grape, honey, plum, raspberry\n        \"\"\"\n        category = \"food\"\n        condition = \"are cyder\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category:"}
{"cat": "food", "slot": "specialization", "value": "salt-rising bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are salt-rising bread. \n        Output: ", "result": "\n```\nsalt, yeast, flour, milk, sugar, butter, eggs, water, salt-rising, fermentation\n```\nExplanation: The words that belong to the category \"food\" and satisfy the condition \"are salt-rising bread\" are \"salt\", \"yeast\", \"flour\", \"milk\", \"sugar\", \"butter\", \"eggs\", \"water\", \"salt-rising\" and \"fermentation\".\n```\nProvide a list of 10 words that belong to the category and satisfy the"}
{"cat": "food", "slot": "specialization", "value": "fizz", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are fizz. \n        Output: ", "result": "\n    \"\"\"\n    fizz_buzz_words = []\n    for i in range(1, 101):\n        if \"fizz\" in str(i) and \"buzz\" in str(i):\n            fizz_buzz_words.append(i)\n    print(\", \".join(fizz_buzz_words))\n```\nExample:\n```\nInput: \n    Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category"}
{"cat": "food", "slot": "specialization", "value": "blush wine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are blush wine. \n        Output: ", "result": "\n            apple, berry, cherry, currant, grape, plum, raspberry, strawberry, wine\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"blush\" in word and \"wine\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n"}
{"cat": "food", "slot": "specialization", "value": "fries", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are fries. \n        Output: ", "result": "\n        fries,chips,crisps,french fries,potato chips,chips,crisps,chips,chips,chips. \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() == condition.lower():\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n# Example"}
{"cat": "food", "slot": "specialization", "value": "gluten bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are gluten bread. \n        Output: ", "result": "\n        bread, roll, bun, loaf, wrap, pita, bagel, muffin, croissant, baguette\n    \"\"\"\n    gluten_bread_words = [\n        \"bread\",\n        \"roll\",\n        \"bun\",\n        \"loaf\",\n        \"wrap\",\n        \"pita\",\n        \"bagel\",\n        \"muffin\",\n        \"croissant\",\n        \"baguette\"\n    ]\n    gluten_bread_words = [word for word in gluten_bread_"}
{"cat": "food", "slot": "specialization", "value": "whole wheat bread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are whole wheat bread. \n        Output: ", "result": "\n        whole, wheat, bread, flour, grain, fiber, nutritious, healthy, wholemeal, brown. \n        \"\"\"\n        category = 'food'\n        condition = 'are whole wheat bread'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_example_1(self):\n        result = self.get_words('food', 'are whole wheat bread')\n        self.assertEqual(result, 'whole, wheat, bread, fiber,"}
{"cat": "food", "slot": "specialization", "value": "fruit crush", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are fruit crush. \n        Output: ", "result": " apple, banana, cherry, date, fig, grape, kiwi, mango, orange, peach\n    \"\"\"\n    fruits = []\n    for word in text.split():\n        if \"fruit\" in word and \"crush\" in word:\n            fruits.append(word)\n    return \", \".join(fruits)\n\ndef count_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in text:\n        if char in vowels:\n           "}
{"cat": "food", "slot": "specialization", "value": "Cotes de Provence", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Cotes de Provence. \n        Output: ", "result": "\n        apple, apricot, blackberry, blueberry, cherry, currant, elderberry, gooseberry, huckleberry, loganberry \n    \"\"\"\n    fruits = []\n    for word in words:\n        if \"Cotes de Provence\" in word:\n            fruits.append(word)\n    return \", \".join(fruits)\n\n# Test the function\nwords = [\"apple\", \"apricot\", \"blackberry\", \"blueberry\", \"cherry\", \"currant\", \"elderberry\", \"gooseberry\", \""}
{"cat": "food", "slot": "specialization", "value": "pink wine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are pink wine. \n        Output: ", "result": "\n            Merlot, Pinot Noir, Syrah, Zinfandel, Gamay, Sangiovese, Grenache, Mourv\u00e8dre, Cabernet Sauvignon, Cabernet Franc\n    \"\"\"\n    category = \"food\"\n    condition = \"are pink wine\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as f:\n        for line in f:\n"}
{"cat": "food", "slot": "specialization", "value": "cheddar cheese", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cheddar cheese. \n        Output: ", "result": "\n        cheddar,cheese,cheddar cheese,cheddar cheese,cheddar cheese,cheddar cheese,cheddar cheese,cheddar cheese,cheddar cheese,cheddar cheese. \n        \"\"\"\n        category = 'food'\n        condition = 'are cheddar cheese'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n# Test the function with sample inputs\nprint(get_words('food', 'are apples'))\nprint(get_words('food',"}
{"cat": "food", "slot": "specialization", "value": "brioche", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are brioche. \n        Output: ", "result": "\n            brioche, croissant, pain au chocolat, muffin, scone, baguette, brioche, croissant, pain au chocolat, muffin, \n            scone, baguette, croissant, pain au chocolat, muffin, scone, brioche, croissant, pain au chocolat, muffin, \n            scone, baguette, croissant, pain au chocolat, muffin, scone, brioche, croissant"}
{"cat": "food", "slot": "specialization", "value": "hoagy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are hoagy. \n        Output: ", "result": "\n    \"\"\"\n    category = \"food\"\n    condition = \"are hoagy\"\n    words = [\n        \"hoagie\",\n        \"sub\",\n        \"grinder\",\n        \"hero\",\n        \"torpedo\",\n        \"po'boy\",\n        \"wraps\",\n        \"sandwich\",\n        \"wrap\",\n        \"grilled cheese\"\n    ]\n    return \", \".join(filter(lambda x: x.lower() == condition.lower(), words))\n\nprint(find_words(category=category,"}
{"cat": "food", "slot": "specialization", "value": "cambric tea", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cambric tea. \n        Output: ", "result": "\n        apple, bread, butter, cheese, egg, ham, milk, orange, sugar, tea. \n    \"\"\"\n    food_words = [\"apple\", \"bread\", \"butter\", \"cheese\", \"egg\", \"ham\", \"milk\", \"orange\", \"sugar\", \"tea\"]\n    cambric_tea_words = [word for word in food_words if \"cambric\" in word or \"tea\" in word]\n    return \", \".join(cambric_tea_words)\n\ndef get_"}
{"cat": "food", "slot": "specialization", "value": "Granny Smith", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Granny Smith. \n        Output: ", "result": "\n        apple, cake, cookie, donut, granola, ice cream, juice, muffin, pie, scone \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"Granny Smith\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n    Desired output: a dictionary where the keys are words and the values are the number of"}
{"cat": "food", "slot": "specialization", "value": "cottage cheese", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cottage cheese. \n        Output: ", "result": "\n        cottage cheese, cream cheese, sour cream, yogurt, paneer, queso fresco, fromage blanc, ricotta, mascarpone, greek yogurt\n    \"\"\"\n    food_words = [\"cottage cheese\", \"cream cheese\", \"sour cream\", \"yogurt\", \"paneer\", \"queso fresco\", \"fromage blanc\", \"ricotta\", \"mascarpone\", \"greek yogurt\"]\n    category = \"food\"\n    condition = \"are"}
{"cat": "food", "slot": "specialization", "value": "drupe", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are drupe. \n        Output: ", "result": "1. Apricot, 2. Cherry, 3. Peach, 4. Plum, 5. Date, 6. Olive, 7. Walnut, 8. Almond, 9. Cashew, 10. Pistachio.\n    \"\"\"\n    fruits = [\"Apricot\", \"Cherry\", \"Peach\", \"Plum\", \"Date\", \"Olive\", \"Walnut\", \"Almond\", \"Cashew\", \"Pistachio\"]\n    drupe_fruits = [fruit"}
{"cat": "food", "slot": "specialization", "value": "challah", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are challah. \n        Output: ", "result": "\n        apple, bread, cake, cookie, donut, muffin, pasta, pizza, roll, toast \n    \"\"\"\n    category = \"food\"\n    condition = \"are challah\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as f:\n        for line in f:\n            line = line.strip()\n            if category in line and condition in line:"}
{"cat": "food", "slot": "specialization", "value": "open sandwich", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are open sandwich. \n        Output: ", "result": "\n        ham, cheese, bread, lettuce, tomato, cucumber, onion, pickle, mustard, mayonnaise \n    \"\"\"\n    category = Category.objects.get(name='food')\n    condition = Condition.objects.get(name='are open sandwich')\n    words = Word.objects.filter(category=category, condition=condition)\n    return [word.word for word in words]\n\ndef get_random_word_from_category(category):\n    \"\"\"\n    Retrieve a random word from the given category"}
{"cat": "food", "slot": "specialization", "value": "acorn", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are acorn. \n        Output: ", "result": "\n    \"\"\"\n    words = [\"acorn\", \"oak\", \"tree\", \"kernel\", \"corn\", \"squirrel\", \"bird\", \"forest\", \"mushroom\", \"hickory\"]\n    acorn_words = [word for word in words if \"acorn\" in word]\n    if \"acorn\" in acorn_words:\n        print(\", \".join(acorn_words))\n    else:\n        print(\"No words found.\")\n```\nExample:\n    Input: \n    Provide a list of 10 words that belong"}
{"cat": "food", "slot": "specialization", "value": "cafe royale", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cafe royale. \n        Output: ", "result": "\n        chocolate, mocha, latte, cappuccino, espresso, macchiato, frappuccino, \n        caramel, vanilla, hazelnut\n    \"\"\"\n    category = 'food'\n    condition = 'are cafe royale'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Example usage\nprint(get_words('food', 'are cafe royale'))  # Output: chocolate, mocha, latte, cappuccino"}
{"cat": "food", "slot": "specialization", "value": "buckthorn berry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are buckthorn berry. \n        Output: ", "result": "1. Buckthorn, 2. Berry, 3. Buckthorn, 4. Berry, 5. Buckthorn, 6. Berry, 7. Buckthorn, 8. Berry, 9. Buckthorn, 10. Berry. \n    \"\"\"\n    words = []\n    for word in words:\n        if word.lower() == \"buckthorn\" and \"berry\" in word:\n            words.append(word)\n    return \", \".join(words)\n\ndef count_vowels("}
{"cat": "food", "slot": "specialization", "value": "Turkish coffee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are Turkish coffee. \n        Output: ", "result": "\u00e7ay, espresso, cappuccino, latte, macchiato, mocha, coffee, espresso, cappuccino, latte\n    \"\"\"\n    category = 'food'\n    condition = 'are Turkish coffee'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    words = []\n    if category == '"}
{"cat": "food", "slot": "specialization", "value": "seckel pear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are seckel pear. \n        Output: ", "result": "1. Seckel, 2. Pear, 3. Seckel, 4. Pear, 5. Seckel, 6. Pear, 7. Seckel, 8. \n```"}
{"cat": "food", "slot": "specialization", "value": "chips", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are chips. \n        Output: ", "result": "\n          potato, french, sour, cajun, cheese, onion, barbecue, ranch, seafood, honey mustard\n    \"\"\"\n    category = 'food'\n    chips = ['potato', 'french', 'sour', 'cajun', 'cheese', 'onion', 'barbecue', 'ranch', 'seafood', 'honey mustard']\n    words = [word for word in chips if word.startswith(category + '-')]\n    return ', '.join(words)"}
{"cat": "food", "slot": "specialization", "value": "seedpod", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are seedpod. \n        Output: ", "result": "\n            alfalfa, clover, lentil, pea, radish, safflower, soybean, sunflower, \n            tamarind, teff\n    \"\"\"\n    food_words = [\"alfalfa\", \"clover\", \"lentil\", \"pea\", \"radish\", \"safflower\", \"soybean\", \"sunflower\", \"tamarind\", \"teff\"]\n    seedpod_words = [word for word in food_words if \"seedpod\" in word]\n    return \", \".join(seedpod"}
{"cat": "food", "slot": "specialization", "value": "hand cheese", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are hand cheese. \n        Output: ", "result": "\n        cheddar, brie, gouda, mozzarella, provolone, fontina, goat cheese, blue cheese, camembert, \n        Roquefort, gorgonzola\n    \"\"\"\n    category = \"food\"\n    condition = \"are hand cheese\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition within the category"}
{"cat": "food", "slot": "specialization", "value": "mate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are mate. \n        Output: ", "result": "\n        */\n        public List<string> GetWords(string category, string condition)\n        {\n            List<string> words = new List<string>();\n\n            using (SqlConnection connection = new SqlConnection(connectionString))\n            {\n                connection.Open();\n\n                using (SqlCommand command = new SqlCommand(\"GetWords\", connection))\n                {\n                    command.CommandType = CommandType.StoredProcedure;\n                    command.Parameters.AddWithValue(\"@Category\", category);\n                    command.Parameters.AddWithValue(\"@Condition\", condition"}
{"cat": "food", "slot": "specialization", "value": "bartlett", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are bartlett. \n        Output: ", "result": "\n    \"\"\"\n    food_words = [\"apple\", \"banana\", \"orange\", \"grape\", \"peach\", \"plum\", \"kiwi\", \"strawberry\", \"blueberry\", \"raspberry\"]\n    bartlett_words = [\"bartlett\", \"pear\", \"pear\", \"pear\", \"pear\", \"pear\", \"pear\", \"pear\", \"pear\", \"pear\"]\n    result = \", \".join(filter(lambda x: x in bartlett_words, food_words))\n    print("}
{"cat": "food", "slot": "specialization", "value": "soya", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are soya. \n        Output: ", "result": "\n        chickpea, lentil, soybean, tofu, tempeh, edamame, soy milk, soy yogurt, soy protein, soy lecithin \n    \"\"\"\n    food_words = [\"chickpea\", \"lentil\", \"soybean\", \"tofu\", \"tempeh\", \"edamame\", \"soy milk\", \"soy yogurt\", \"soy protein\", \"soy lecithin\"]\n    soya_words = [word for word in food_words if word"}
{"cat": "food", "slot": "specialization", "value": "wild cherry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are wild cherry. \n        Output: ", "result": " cherry, pie, cherrystone, cherryoak, cherryblossom, cherrycola, cherryvanilla, cherrychocolate, cherrychip, cherrycake\n    \"\"\"\n    category = \"food\"\n    condition = \"are wild cherry\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if"}
{"cat": "food", "slot": "specialization", "value": "temple orange", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are temple orange. \n        Output: ", "result": "\n            1. Orange\n            2. Temple\n            3. Orange\n            4. Temple\n            5. Orange\n            6. Temple\n            7. Orange\n            8. Temple\n            9. Orange\n            10. Temple\n        \"\"\"\n        food_words = [\"orange\", \"temple\", \"orange\", \"temple\", \"orange\", \"temple\", \"orange\", \"temple\", \"orange\", \"temple\"]\n        orange_words = [\"orange\", \"temple\", \"orange\", \"temple\", \"orange\", \"tem"}
{"cat": "food", "slot": "specialization", "value": "common bean", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are common bean. \n        Output: ", "result": "\n        beans, chickpeas, lentils, kidney beans, black beans, pinto beans,\n```"}
{"cat": "food", "slot": "specialization", "value": "cappuccino", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cappuccino. \n        Output: ", "result": "\n        coffee, milk, foam, espresso, caffeine, latte, mocha, cappuccino, barista, espresso machine. \n        \"\"\"\n        category = 'food'\n        condition = 'are cappuccino'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_no_words(self):\n        with self.assertRaises(ValueError):\n            get_words('category', 'condition')\n\n    def test"}
{"cat": "food", "slot": "specialization", "value": "wish-wash", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are wish-wash. \n        Output: ", "result": "\n        chocolate, cake, ice cream, pizza, cookie, candy, donut, sandwich, soda, fruit.\n    \"\"\"\n    category = \"food\"\n    condition = \"are wish-wash\"\n    words = get_wish_wash_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\nThis code will output:\n```\nchocolate, cake, ice cream, pizza, cookie, candy, don"}
{"cat": "food", "slot": "specialization", "value": "mashed potato", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are mashed potato. \n        Output: ", "result": "\n        potato, mash, spud, tater, hash, roast, bake, boil, peel, masher\n\"\"\"\n\nword_list = [\"potato\", \"mash\", \"spud\", \"tater\", \"hash\", \"roast\", \"bake\", \"boil\", \"peel\", \"masher\"]\ncategory = \"food\"\ncondition = \"are mashed potato\"\nfiltered_list = [word for word in word_list if word.startswith(condition)]\nprint(filtered_list)\n"}
{"cat": "food", "slot": "specialization", "value": "western", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are western. \n        Output: ", "result": "\n        chocolate, cookie, cake, ice cream, pizza, hamburger, taco, burrito, sandwich, french fries\n    \"\"\"\n    category = \"food\"\n    words = [\n        \"chocolate\",\n        \"cookie\",\n        \"cake\",\n        \"ice cream\",\n        \"pizza\",\n        \"hamburger\",\n        \"taco\",\n        \"burrito\",\n        \"sandwich\",\n        \"french fries\"\n    ]\n\n    for word in words:\n"}
{"cat": "food", "slot": "specialization", "value": "cupper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cupper. \n        Output: ", "result": "\n    \"\"\"\n    food_words = [\"coffee\", \"tea\", \"chocolate\", \"sugar\", \"cinnamon\", \"vanilla\", \"milk\", \"eggs\", \"bread\", \"butter\"]\n    cupper_words = [word for word in food_words if \"cupper\" in word]\n    return \", \".join(cupper_words)\n\nprint(find_cupper_words(\"food\", \"are cupper\"))\n```\nOutput:\n```\ncomma separated list of words.\n```"}
{"cat": "food", "slot": "specialization", "value": "tea-like drink", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are tea-like drink. \n        Output: ", "result": "\n        chai, \n        tea, \n        tisane, \n        herbal tea, \n        mate, \n        yerba, \n        rooibos, \n        puerh, \n        oolong.\n    \"\"\"\n    category = \"food\"\n    condition = \"are tea-like drink\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words"}
{"cat": "food", "slot": "specialization", "value": "rosehip", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are rosehip. \n        Output: ", "result": "\n    \"\"\"\n    food_words = [\n        \"raspberry\",\n        \"strawberry\",\n        \"blueberry\",\n        \"blackberry\",\n        \"cranberry\",\n        \"gooseberry\",\n        \"blackcurrant\",\n        \"redcurrant\",\n        \"yoghurt\",\n        \"ice cream\"\n    ]\n    rosehip_words = [\n        \"raspberry\",\n        \"strawberry\",\n        \"blackberry\",\n        \"cranberry\",\n        \"gooseberry\",\n        \"black"}
{"cat": "food", "slot": "howToUse", "value": "peel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for peel. \n        Output: ", "result": "\n            apple, banana, citrus, lemon, orange, pear, peel, skin, tangerine, tomato \n        Explanation: \n            apple, banana, citrus, lemon, orange, pear, peel, skin, tangerine, tomato all belong to the food category and can be used for peel. \n        \"\"\"\n        category = Category.objects.get(name='food')\n        words = Word.objects.filter(category=category, definition__icontains='peel').distinct()\n        return"}
{"cat": "food", "slot": "howToUse", "value": "yield", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for yield. \n        Output: ", "result": "\n          apple, banana, cherry, date, fig, grape, kiwi, melon, orange, peach\n    \"\"\"\n    food_words = [\n        \"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"kiwi\", \"melon\", \"orange\", \"peach\"\n    ]\n    yield_words = [word for word in food_words if word.endswith(\"yield\")]\n    return \", \".join(yield_words)\n\nprint(get_yield_words(\"food\","}
{"cat": "food", "slot": "howToUse", "value": "toast", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for toast. \n        Output: ", "result": "\n          apple, bread, butter, cheese, egg, ham, jam, milk, toast, yogurt \n    \"\"\"\n    category = 'food'\n    condition = 'can be used for toast'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Test the function with sample inputs.\nprint(get_words('food', 'can be used for breakfast'))\nprint(get_words('food', 'can be used in a sandwich'))\nprint(get_words('food', '"}
{"cat": "food", "slot": "howToUse", "value": "shuck", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for shuck. \n        Output: ", "result": "\n          apple, bread, cheese, corn, egg, grapes, lettuce, onion, pear, potato\n    \"\"\"\n    food_words = [\"apple\", \"bread\", \"cheese\", \"corn\", \"egg\", \"grapes\", \"lettuce\", \"onion\", \"pear\", \"potato\"]\n    shuck_words = [word for word in food_words if word.endswith(\"uck\")]\n    return \", \".join(shuck_words)\n\n# Test the function\nprint(get_shuck_words(\""}
{"cat": "food", "slot": "howToUse", "value": "yield", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for yield. \n        Output: ", "result": "\n          apple, banana, cherry, date, fig, grape, kiwi, melon, orange, peach\n    \"\"\"\n    food_words = [\n        \"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"kiwi\", \"melon\", \"orange\", \"peach\"\n    ]\n    yield_words = [word for word in food_words if word.endswith(\"yield\")]\n    return \", \".join(yield_words)\n\nprint(get_yield_words(\"food\","}
{"cat": "food", "slot": "part", "value": "pastry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  pastry. \n        Output: ", "result": " cookie, cake, pie, tart, pastry, muffin, bread, pizza, croissant, donut \n    \"\"\"\n    category = 'food'\n    condition = 'can have pastry'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition. \n        Desired output: list of words. \n        Category: food. \n       "}
{"cat": "food", "slot": "part", "value": "water", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  water. \n        Output: ", "result": " apple, banana, carrot, cucumber, grape, lemon, orange, pear, strawberry, watermelon \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"water\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"cat": "food", "slot": "place", "value": "bottle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in bottles. \n        Output: ", "result": "\n        chardonnay, merlot, pinot noir, riesling, sangiovese, sauvignon blanc, zinfandel, cabernet sauvignon, pinot grigio, gew\u00fcrztraminer\n    \"\"\"\n    category = 'food'\n    condition = 'can be found or used in bottles'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to"}
{"cat": "food", "slot": "generalization", "value": "gourd", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are gourd. \n        Output: ", "result": "\n        pumpkin, squash, zucchini, cucumber, melon, watermelon, gourd, bottle gourd, luffa, calabash.\n    \"\"\"\n    food_words = [\"pumpkin\", \"squash\", \"zucchini\", \"cucumber\", \"melon\", \"watermelon\", \"gourd\", \"bottle gourd\", \"luffa\", \"calabash\"]\n    gourd_words = [word for word in food_words if \"gourd\" in word]\n   "}
{"cat": "food", "slot": "accessory", "value": "cereal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: may have to do with cereal. \n        Output: ", "result": "\n        milk, cereal, oatmeal, cornflakes, toast, bread, muffin, pancake, waffle, biscuit \n    \"\"\"\n    cereal_words = [\n        \"cereal\",\n        \"oatmeal\",\n        \"cornflakes\",\n        \"toast\",\n        \"bread\",\n        \"muffin\",\n        \"pancake\",\n        \"waffle\",\n        \"biscuit\"\n    ]\n    food_words = [word for word"}
{"cat": "food", "slot": "product", "value": "wheat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make wheat. \n        Output: ", "result": "\n        bread, flour, wheat, dough, yeast, knead, rise, bake, pita, naan\n    \"\"\"\n    category = \"food\"\n    words = [\n        \"bread\",\n        \"flour\",\n        \"wheat\",\n        \"dough\",\n        \"yeast\",\n        \"knead\",\n        \"rise\",\n        \"bake\",\n        \"pita\",\n        \"naan\"\n    ]\n    condition = \"can be used to make wheat\"\n    filtered_words"}
{"cat": "food", "slot": "specialization", "value": "wheat berry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are wheat berry. \n        Output: ", "result": "\n        Wheat, Berry, Flour, Grain, Bread, Cereal, Pasta, Pizza, Crackers, Roll.\n    \"\"\"\n    wheat_words = [\"Wheat\", \"Berry\", \"Flour\", \"Grain\", \"Bread\", \"Cereal\", \"Pasta\", \"Pizza\", \"Crackers\", \"Roll\"]\n    wheat_words = [word for word in wheat_words if word.startswith(\"Wheat\")]\n    return \", \".join(wheat_words)\n\ndef"}
{"cat": "food", "slot": "specialization", "value": "corn", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are corn. \n        Output: ", "result": "\n        corn, popcorn, cornmeal, cornstarch, cornhusk, corn silk, corn oil, corn flakes, corn nuts, corn on the cob.\n    \"\"\"\n    corn_words = [\"corn\", \"popcorn\", \"cornmeal\", \"cornstarch\", \"cornhusk\", \"corn silk\", \"corn oil\", \"corn flakes\", \"corn nuts\", \"corn on the cob\"]\n    corn_words = [word for word in corn_words if word.startswith(\""}
{"cat": "food", "slot": "product", "value": "peel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make peel. \n        Output: ", "result": "\n            apple, banana, citrus, lemon, orange, pear, peel, skin, tangerine, zest\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Create an empty list to store the words\n    words = []\n    \n    # Use a for loop to iterate through all the words in the vocabulary\n    for word in vocabulary:\n        # Use the str.startswith() method to check if the word starts with the given condition\n        if word.startswith(condition):\n           "}
{"cat": "food", "slot": "part", "value": "flour", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can have  flour. \n        Output: ", "result": " bread, cake, cookie, dough, flour, pancake, pastry, roll, sponge, toast. \n        \"\"\"\n        category = \"food\"\n        condition = \"can have flour\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    def test_example_1(self):\n        result = self.example_1()\n        self.assertEqual(result, \"bread, cake, cookie, dough, flour, pancake, pastry, roll, sp"}
{"cat": "food", "slot": "product", "value": "orchard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make orchard. \n        Output: ", "result": "\n            apple, cherry, plum, pear, apricot, peach, nectarine, orange, lemon, lime\n        Explanation: \n            apple, cherry, plum, pear, apricot, peach, nectarine, orange, lemon, lime all belong to the food category and can be used to make orchard. \n        \"\"\"\n        category = Category.objects.get(name='food')\n        words = Word.objects.filter(category=category, definition__icontains='orchard')"}
{"cat": "food", "slot": "product", "value": "cereal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used to make cereal. \n        Output: ", "result": "\n        milk, sugar, cereal, flour, oats, cornflakes, muesli, granola, cereal flakes, cereal bars.\n    \"\"\"\n    food_words = [\"milk\", \"sugar\", \"cereal\", \"flour\", \"oats\", \"cornflakes\", \"muesli\", \"granola\", \"cereal flakes\", \"cereal bars\"]\n    for word in food_words:\n        if \"can be used to make\" in word and \"cereal\" in"}
{"cat": "food", "slot": "specialization", "value": "rice", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are rice. \n        Output: ", "result": "\n```\nrice, pasta, noodle, bread, crackers, cereal, risotto, paella, sushi, pizza \n```\nExplanation: \n        The words that belong to the category \"food\" and satisfy the condition \"are rice\" are: \n        rice, pasta, noodle, bread, crackers, cereal, risotto, paella, sushi, pizza.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output"}
{"cat": "food", "slot": "specialization", "value": "burger", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are burger. \n        Output: ", "result": "\n            hamburger, cheeseburger, bacon, lettuce, tomato, bun, meat, onion, ketchup, mustard \n        \"\"\"\n        category = 'food'\n        condition = 'are burger'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_no_words(self):\n        with self.assertRaises(IndexError):\n            get_words('category', 'condition')\n\n    def test_get_words_no_"}
{"cat": "food", "slot": "specialization", "value": "cooler", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cooler. \n        Output: ", "result": "\n        chocolate, \n        ice cream, \n        popsicle, \n        slushie, \n        frozen yogurt, \n        sorbet, \n        gelato, \n        frozen pizza, \n        ice cream cake, \n        ice cream sandwich.\n    \"\"\"\n    cool_words = [\"chocolate\", \"ice cream\", \"popsicle\", \"slushie\", \"frozen yogurt\", \"sorbet\", \"gelato\", \"frozen pizza\", \""}
{"cat": "food", "slot": "specialization", "value": "green corn", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are green corn. \n        Output: ", "result": "\n        asparagus, broccoli, corn, green beans, green peas, kale, lettuce, spinach, zucchini.\n    \"\"\"\n    category = \"food\"\n    condition = \"are green corn\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"food\", \"are green\"))  # comma separated list of words\nprint(get_words(\"food\", \"are green beans\"))  # comma separated list of words\nprint("}
{"cat": "food", "slot": "specialization", "value": "gourd", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are gourd. \n        Output: ", "result": "\n        pumpkin, squash, zucchini, cucumber, melon, watermelon, gourd, bottle gourd, luffa, calabash.\n    \"\"\"\n    food_words = [\"pumpkin\", \"squash\", \"zucchini\", \"cucumber\", \"melon\", \"watermelon\", \"gourd\", \"bottle gourd\", \"luffa\", \"calabash\"]\n    gourd_words = [word for word in food_words if \"gourd\" in word]\n   "}
{"cat": "food", "slot": "specialization", "value": "loaf", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are loaf. \n        Output: ", "result": "\n```\nbread, roll, loaf, slice, bake, knead, rise, dough, hearth, oven\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: have fur. \n        Output: \n```\ncat, dog, bear, fox, rabbit, sheep, goat, raccoon, otter, mink\n```\n\nExample:\n"}
{"cat": "food", "slot": "specialization", "value": "sweet corn", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are sweet corn. \n        Output: ", "result": "\n        sweet, corn, kernels, cob, juicy, succulent, buttery, tender, flavorful, aromatic \n    \"\"\"\n    sweet_corn_words = [\n        \"sweet\",\n        \"corn\",\n        \"kernels\",\n        \"cob\",\n        \"juicy\",\n        \"succulent\",\n        \"buttery\",\n        \"tender\",\n        \"flavorful\",\n        \"aromatic\"\n    ]\n    return \", \".join(sweet_corn_words"}
{"cat": "food", "slot": "specialization", "value": "varietal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are varietal. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grape, melon, orange, peach, plum\n    \"\"\"\n    food_words = [\n        \"apple\",\n        \"banana\",\n        \"cherry\",\n        \"date\",\n        \"fig\",\n        \"grape\",\n        \"melon\",\n        \"orange\",\n        \"peach\",\n        \"plum\"\n    ]\n    varietal_words = [word for word in food_words if \"varietal\" in word]\n    return \", \".join(vari"}
{"cat": "food", "slot": "specialization", "value": "toast", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are toast. \n        Output: ", "result": "\n            apple, bread, butter, cheese, egg, ham, jam, milk, toast, yogurt \n        \"\"\"\n        category = 'food'\n        condition = 'are toast'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_with_category_and_condition(self):\n        self.assertEqual(get_words('food', 'are toast'), 'apple, bread, butter, cheese, egg, ham, jam, milk, toast"}
{"cat": "food", "slot": "howToUse", "value": "butter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be used for butter. \n        Output: ", "result": "\n          milk, butter, cheese, cream, ice cream, yogurt, sour cream, whipped cream, cream cheese, heavy cream.\n    \"\"\"\n    food_words = [\"milk\", \"butter\", \"cheese\", \"cream\", \"ice cream\", \"yogurt\", \"sour cream\", \"whipped cream\", \"cream cheese\", \"heavy cream\"]\n    butter_words = [word for word in food_words if word.startswith(\"butter\")]\n    return \", \"."}
{"cat": "food", "slot": "specialization", "value": "wheat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are wheat. \n        Output: ", "result": "\n        bread, cake, cookie, dough, flour, pizza, roll, sandwich, toast, wheat\n    \"\"\"\n    food_words = [\"bread\", \"cake\", \"cookie\", \"dough\", \"flour\", \"pizza\", \"roll\", \"sandwich\", \"toast\", \"wheat\"]\n    wheat_words = [word for word in food_words if \"wheat\" in word]\n    return wheat_words\n\ndef get_anagrams(word):\n    \"\"\"\n    Given a word,"}
{"cat": "food", "slot": "specialization", "value": "alcoholic beverage", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are alcoholic beverage. \n        Output: ", "result": "1. Beer, 2. Wine, 3. Vodka, 4. Gin, 5. Rum, 6. Whiskey, 7. Brandy, 8. Cider, 9. Mead, 10. Absinthe\n    \"\"\"\n    alcoholic_beverage_words = [\n        \"Beer\", \"Wine\", \"Vodka\", \"Gin\", \"Rum\", \"Whiskey\", \"Brandy\", \"Cider\", \"Mead\", \"Absinthe\"\n    ]\n   "}
{"cat": "food", "slot": "specialization", "value": "inebriant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are inebriant. \n        Output: ", "result": " beer, wine, whiskey, vodka, gin, rum, champagne, sake, tequila, brandy. \n        \"\"\"\n        category = 'food'\n        condition = 'inebriant'\n        result = []\n        for word in words:\n            if word.lower() in category_map[category] and category_map[category][word.lower()].lower() in condition_map[condition]:\n                result.append(word)\n        return result\n"}
{"cat": "food", "slot": "specialization", "value": "alcoholic drink", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are alcoholic drink. \n        Output: ", "result": "1. Beer, 2. Wine, 3. Vodka, 4. Gin, 5. Rum, 6. Whiskey, 7. Brandy, 8. Cider, 9. Mead, 10. Absinthe\n    \"\"\"\n    alcoholic_drink_words = [\n        \"Beer\", \"Wine\", \"Vodka\", \"Gin\", \"Rum\", \"Whiskey\", \"Brandy\", \"Cider\", \"Mead\", \"Absinthe\"\n    ]\n   "}
{"cat": "food", "slot": "specialization", "value": "alcohol", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are alcohol. \n        Output: ", "result": "\n```\nwine, beer, whiskey, vodka, gin, rum, brandy, champagne, sake, tequila\n```\n\nExplanation:\n```\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Desired output: comma separated list of words.\n3. Category: food.\n4. Condition: are alcohol.\n5. Output: wine, beer, whiskey, vodka, gin, rum, brandy, champagne, sake, tequila."}
{"cat": "food", "slot": "specialization", "value": "intoxicant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are intoxicant. \n        Output: ", "result": "\n        beer, wine, whiskey, vodka, gin, rum, tequila, brandy, liqueur, champagne.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"intoxicant\" in word:\n            words.append(word)\n    return words\n\nif __name__ == '__main__':\n    word_list = ['beer', 'wine', 'whiskey', 'vodka', 'gin', 'rum', 'tequila', 'brandy', 'liqueur', '"}
{"cat": "food", "slot": "place", "value": "salad", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: can be found or used in salads. \n        Output: ", "result": "\n        arugula, basil, cucumber, dill, feta, garlic, mint, onion, parsley, tomato \n    \"\"\"\n    category = \"food\"\n    condition = \"can be found or used in salads\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n"}
{"cat": "food", "slot": "specialization", "value": "milk", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are milk. \n        Output: ", "result": "\n        chocolate, ice cream, milk, cheese, yogurt, butter, cream, sour cream, buttermilk, whey\n```\n\n```"}
{"cat": "food", "slot": "generalization", "value": "root", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are root. \n        Output: ", "result": "\n        apple, banana, carrot, orange, pear, potato, radish, spinach, tomato, turnip.\n    \"\"\"\n    root_words = [\"apple\", \"banana\", \"carrot\", \"orange\", \"pear\", \"potato\", \"radish\", \"spinach\", \"tomato\", \"turnip\"]\n    root_words = [word for word in root_words if word.is_root()]\n    return \", \".join(root_words)\n\ndef is_root(word: str) -> bool:\n   "}
{"cat": "food", "slot": "specialization", "value": "edible fruit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are edible fruit. \n        Output: ", "result": " apple, banana, cherry, date, fig, grape, kiwi, mango, orange, peach\n    \"\"\"\n    fruits = []\n    for word in words:\n        if 'edible' in word and 'fruit' in word:\n            fruits.append(word)\n    return ', '.join(fruits)\n\n# Test the function\nprint(get_fruits_edible_fruit())\n```\nOutput:\napple, banana, cherry, date, fig, grape, kiwi, mango, orange, peach"}
{"cat": "food", "slot": "specialization", "value": "rose", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are rose. \n        Output: ", "result": "\n            apple, banana, cherry, plum, raspberry, strawberry, watermelon, blueberry, orange, lemon.\n    \"\"\"\n    category = \"food\"\n    condition = \"are rose\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == \"animals\":\n        if condition == \""}
{"cat": "food", "slot": "specialization", "value": "popcorn", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are popcorn. \n        Output: ", "result": "\n```\npopcorn, popcorn kernel, popcorn machine, popcorn box, popcorn bag, popcorn seasoning, popcorn salt, popcorn butter, popcorn cheddar, popcorn caramel\n```\nExplanation: \n        The words that belong to the category \"food\" and satisfy the condition \"are popcorn\" are: \n        popcorn, popcorn kernel, popcorn machine, popcorn box, popcorn bag, popcorn seasoning, popcorn salt,"}
{"cat": "food", "slot": "specialization", "value": "pome", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are pome. \n        Output: ", "result": "\n        apple, cherry, pear, plum, quince, apricot, peach, nectarine, prune, cherry plum\n\"\"\"\n\nword_list = [\"apple\", \"cherry\", \"pear\", \"plum\", \"quince\", \"apricot\", \"peach\", \"nectarine\", \"prune\", \"cherry plum\"]\ncategory = \"food\"\ncondition = \"are pome\"\nfiltered_list = [word for word in word_list if word.startswith(category) and word.ends"}
{"cat": "food", "slot": "specialization", "value": "cider", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are cider. \n        Output: ", "result": "\n        apple, cider, hard, sweet, fermented, alcoholic, non-alcoholic, carbonated, non-carbonated, sparkling \n    \"\"\"\n    food_words = [\"apple\", \"cider\", \"hard\", \"sweet\", \"fermented\", \"alcoholic\", \"non-alcoholic\", \"carbonated\", \"non-carbonated\", \"sparkling\"]\n    cider_words = [word for word in food_words if \"cider\" in word]\n    result = \", \".join(c"}
{"cat": "food", "slot": "specialization", "value": "seed", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: food. \n        Condition: are seed. \n        Output: ", "result": "\n            apple, banana, cherry, date, fig, grape, oat, pea, pumpkin, sunflower\n    \"\"\"\n    food_words = [\n        \"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"oat\", \"pea\", \"pumpkin\", \"sunflower\"\n    ]\n    seed_words = [\n        \"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"oat\", \"pea\", \"pumpkin\", \""}
{"cat": "vehicles", "slot": "time", "value": "holiday", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be consumed or used during holiday. \n        Output: ", "result": "4th of July, fireworks, picnic, barbecue, hot dog, hamburger, apple pie, ice cream, lemonade, watermelon. \n        \"\"\"\n        category = \"vehicles\"\n        condition = \"can be consumed or used during holiday\"\n        words = []\n        for word in synonyms:\n            if word.lower() in category_map[category] and \"holiday\" in word.lower():\n                words.append(word)\n        if words:\n            print(\", \".join(words))\n       "}
{"cat": "vehicles", "slot": "accessory", "value": "cargo trailer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: may have to do with cargo trailer. \n        Output: ", "result": "\n            1. Trailer\n            2. Hitch\n            3. Coupler\n            4. Brakes\n            5. Wiring\n            6. Lights\n            7. Tires\n            8. Wheels\n            9. Suspension\n            10. Axle\n        \"\"\"\n        category = \"vehicles\"\n        condition = \"may have to do with cargo trailer\"\n        words = [\n            \"Trailer\",\n            \"Hitch\",\n            \"Coupler\",\n            \"Brakes\",\n            \"Wiring\",\n           "}
{"cat": "vehicles", "slot": "accessory", "value": "mower", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: may have to do with mower. \n        Output: ", "result": "\n            1. Lawn\n            2. Mower\n            3. Blade\n            4. Trimmer\n            5. Hedge\n            6. Cut\n            7. String\n            8. Power\n            9. Cord\n            10. Reel\n        \"\"\"\n        category = \"vehicles\"\n        condition = \"may have to do with mower\"\n        words = [\n            \"Lawn\",\n            \"Mower\",\n            \"Blade\",\n            \"Trimmer\",\n            \"Hedge\",\n            \"Cut\",\n            \"String"}
{"cat": "vehicles", "slot": "accessory", "value": "seeder", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: may have to do with seeder. \n        Output: ", "result": "4x4, pickup, truck, SUV, off-road, all-terrain, all-wheel-drive, 4x4 off-road, 4x4 pickup truck, 4x4 SUV, 4x4 all-terrain, 4x4 all-wheel-drive, 4x4 pickup truck, 4x4 SUV, 4x4 all-terrain, 4x4 all-wheel-drive, 4x4 pickup truck, 4x4 SUV, 4x"}
{"cat": "vehicles", "slot": "accessory", "value": "trailer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: may have to do with trailer. \n        Output: ", "result": "\n            1. Trailer\n            2. Hitch\n            3. Coupler\n            4. Brakes\n            5. Wiring\n            6. Lights\n            7. Tires\n            8. Braking\n            9. Suspension\n            10. Steering\n        \"\"\"\n        category = \"vehicles\"\n        condition = \"may have to do with trailer\"\n        words = []\n        for word in product_category_vehicles:\n            if \"trailer\" in word or \"trailers\" in word:\n                words."}
{"cat": "vehicles", "slot": "accessory", "value": "scraper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: may have to do with scraper. \n        Output: ", "result": "4x4, off-road, all-terrain, rugged, SUV, Jeep, pickup, truck, trailer, tow.\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"may have to do with scraper\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "vehicles", "slot": "accessory", "value": "plough", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: may have to do with plough. \n        Output: ", "result": "\n        tractor, plow, cultivator, ploughman, ploughshare, ploughing, ploughed, ploughing, ploughman, ploughshare\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"may have to do with plough\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"may have to do with wheels\"))\n# Output: car, truck, bus, van, bike, motorcycle,"}
{"cat": "vehicles", "slot": "content", "value": "luggage", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: contain luggage. \n        Output: ", "result": "\n            car, van, truck, trailer, suitcase, bag, backpack, duffle, briefcase, luggage\n        \"\"\"\n        category = \"vehicles\"\n        condition = \"contain luggage\"\n        words = []\n        for word in get_words(category, condition):\n            if \"luggage\" in word:\n                words.append(word)\n        result = \", \".join(words)\n        print(result)\n```\nExplanation:\n\n1. First, we define the category and condition using the `"}
{"cat": "vehicles", "slot": "content", "value": "goods", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: contain goodss. \n        Output: ", "result": "\n        car, good, goods, goodss, goodie, goodies, goodie, goodies, goodie, goodies\n    \"\"\"\n    words = []\n    for word in re.findall(r'\\b(good|goodss|goodie|goodies|goodie|goodies)\\b', \" \".join(category_words)):\n        words.append(word)\n    return words\n\nif __name__ == '__main__':\n    # Example usage\n    category_words = ['car', 'good', 'goodss', 'goodie', 'good"}
{"cat": "vehicles", "slot": "shape", "value": "long", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be long. \n        Output: ", "result": "\n        car, truck, van, bus, train, boat, airplane, motorcycle, bicycle, taxi\n    \"\"\"\n    category = \"vehicles\"\n    long_words = [\"car\", \"truck\", \"van\", \"bus\", \"train\", \"boat\", \"airplane\", \"motorcycle\", \"bicycle\", \"taxi\"]\n    result = []\n    for word in long_words:\n        if word.lower() in category.lower().split(\" \"):\n            result.append(word)\n    print(\", \".join("}
{"cat": "vehicles", "slot": "shape", "value": "elongated", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be elongated. \n        Output: ", "result": "\n        car, truck, van, bus, train, boat, plane, motorcycle, bicycle, elongated. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'can be elongated'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def describe_category(self, category):\n        \"\"\"\n        Provide a brief description of the category. \n        Category: vehicles. \n        Desired output: A brief description of the category. \n        \"\"\"\n        description ="}
{"cat": "vehicles", "slot": "efficiency", "value": "streamlined", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be streamlined. \n        Output: ", "result": "\n            car, truck, van, bus, train, boat, plane, bike, motorcycle, taxi\n\"\"\"\n\n# Define the function\ndef get_vehicle_words(category, condition):\n    # Create an empty list to store the words\n    vehicle_words = []\n    \n    # Loop through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if word.category == category and word.satisfies(condition):\n            # Add the word to the list"}
{"cat": "vehicles", "slot": "efficiency", "value": "sinkable", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be sinkable. \n        Output: ", "result": "\n            boat, ship, submarine, pontoon, raft, ferry, cruise ship, yacht, sailboat, kayak\n        Explanation: boat, ship, submarine, pontoon, raft, ferry, cruise ship, yacht, sailboat, kayak all satisfy the condition of being sinkable and belong to the category of vehicles. \n        \"\"\"\n        sinkable_vehicles = [\n            \"boat\",\n            \"ship\",\n            \"submarine\",\n            \"pontoon\",\n            \"raft"}
{"cat": "vehicles", "slot": "efficiency", "value": "polluting", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be polluting. \n        Output: ", "result": "\n            1. Car\n            2. Truck\n            3. Bus\n            4. Boat\n            5. Plane\n            6. Motorcycle\n            7. ATV\n            8. Lawnmower\n            9. Chainsaw\n            10. Generator\n        \"\"\"\n        polluting_vehicles = [\n            \"Car\",\n            \"Truck\",\n            \"Bus\",\n            \"Boat\",\n            \"Plane\",\n            \"Motorcycle\",\n            \"ATV\",\n            \"Lawnmower\",\n            \""}
{"cat": "vehicles", "slot": "efficiency", "value": "aerodynamic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be aerodynamic. \n        Output: ", "result": "\n        car, aerodynamic, airplane, boat, train, bicycle, motorcycle, scooter, hovercraft, windsurfer\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can be aerodynamic\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"can be aerodynamic\"))\n# Output: car, aerodynamic, airplane, boat, train, bicycle, motorcycle, scooter, hover"}
{"cat": "vehicles", "slot": "size", "value": "large", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be large. \n        Output: ", "result": "\n            car, truck, bus, van, SUV, minivan, RV, boat, motorcycle, tractor\n        \"\"\"\n        category = 'vehicles'\n        condition = 'can be large'\n        words = []\n        for word in get_words(category, condition):\n            if len(word) > 5:\n                words.append(word)\n        result = ', '.join(words)\n        print(result)\n\n# Test the function\ntest_function()"}
{"cat": "vehicles", "slot": "size", "value": "big", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be big. \n        Output: ", "result": "\n            car, truck, bus, van, SUV, minivan, RV, boat, motorcycle, tractor\n        \"\"\"\n        category = \"vehicles\"\n        condition = \"can be big\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    @staticmethod\n    def example_input():\n        return \"car, truck, bus, van, SUV, minivan, RV, boat, motorcycle, tractor\"\n\n    @staticmethod\n    def example_output():\n        return"}
{"cat": "vehicles", "slot": "supply", "value": "diesel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: use diesel. \n        Output: ", "result": "4x4, pickup, truck, diesel, off-road, heavy-duty, towing, power, SUV. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"use diesel\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"use gas\"))\nprint(get_words(\"vehicles\", \"use diesel\"))\nprint(get_words(\"vehicles\", \"use electric\"))\nprint("}
{"cat": "vehicles", "slot": "supply", "value": "electricity", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: use electricity. \n        Output: ", "result": "\n            car, truck, bus, train, subway, trolley, bike, boat, plane, taxi\n\"\"\"\n\n# Define the function\ndef get_vehicle_words(category, condition):\n    # Create an empty list to store the words\n    vehicle_words = []\n    \n    # Loop through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if word.category == category and word.satisfies(condition):\n            # Add the word to"}
{"cat": "vehicles", "slot": "supply", "value": "kerosene", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: use kerosene. \n        Output: ", "result": "1. car, 2. truck, 3. bus, 4. motorcycle, 5. boat, 6. plane, 7. train, 8. taxi, 9. ambulance, 10. bulldozer.\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"use kerosene\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of"}
{"cat": "vehicles", "slot": "supply", "value": "fuel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: use fuel. \n        Output: ", "result": "4x4, car, diesel, electric, fuel, gasoline, hybrid, motorbike, petrol, truck\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"use fuel\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition. \n        Desired output: list of words. \n        Category: string. \n       "}
{"cat": "vehicles", "slot": "supply", "value": "power", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: use power. \n        Output: ", "result": "1. car, 2. truck, 3. bus, 4. train, 5. motorcycle, 6. boat, 7. airplane, 8. submarine, 9. hovercraft, 10. helicopter\n    \"\"\"\n    words = []\n    for word in words:\n        if \"power\" in word:\n            words.append(word)\n            if len(words) == 10:\n                break\n    return words\n\ndef count_vowels(text):\n    vowels = \"aeiou"}
{"cat": "vehicles", "slot": "supply", "value": "gasoline", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: use gasoline. \n        Output: ", "result": "1. car, 2. truck, 3. SUV, 4. van, 5. minivan, 6. sedan, 7. pickup, 8. station wagon, 9. convertible, 10. sports car.\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"use gasoline\"\n    words = get_words(category, condition)\n    return \", \".join(sorted(words))\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list"}
{"cat": "vehicles", "slot": "supply", "value": "gas", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: use gas. \n        Output: ", "result": "4-door, car, convertible, sedan, sports car, station wagon, truck, van, utility vehicle.\n    \"\"\"\n    category = 'vehicles'\n    condition = 'use gas'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of 10 words that belong to the category and satisfy the condition.\n        Category: string. \n        Condition: string. \n        Return: list"}
{"cat": "vehicles", "slot": "shape", "value": "aerodynamic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be aerodynamic. \n        Output: ", "result": "\n        car, aerodynamic, airplane, boat, train, bicycle, motorcycle, scooter, hovercraft, windsurfer\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can be aerodynamic\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"can be aerodynamic\"))\n# Output: car, aerodynamic, airplane, boat, train, bicycle, motorcycle, scooter, hover"}
{"cat": "vehicles", "slot": "sound", "value": "loud", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: sound loud. \n        Output: ", "result": "\n            car, truck, van, bus, train, motorcycle, bike, boat, airplane, helicopter\n    \"\"\"\n    sound_loud_vehicles = [\n        \"car\",\n        \"truck\",\n        \"van\",\n        \"bus\",\n        \"train\",\n        \"motorcycle\",\n        \"bike\",\n        \"boat\",\n        \"airplane\",\n        \"helicopter\"\n    ]\n    return \", \".join(sound_loud_vehicles)\n\ndef get_vehicle_"}
{"cat": "vehicles", "slot": "sound", "value": "noisy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: sound noisy. \n        Output: ", "result": "\n            car, engine, honk, noise, roar, screech, siren, sound, vroom\n    \"\"\"\n    sound_noisy_vehicles = [\n        \"car\",\n        \"engine\",\n        \"horn\",\n        \"noise\",\n        \"roar\",\n        \"screech\",\n        \"siren\",\n        \"sound\",\n        \"vroom\"\n    ]\n    return \", \".join(sound_noisy_vehicles)\n\ndef get_vehicle_noise_words(category, condition"}
{"cat": "vehicles", "slot": "sound", "value": "rumbling", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: sound rumbling. \n        Output: ", "result": "1. car, 2. truck, 3. bus, 4. motorcycle, 5. train, 6. boat, 7. plane, 8. ambulance, 9. police car, 10. fire truck.\n    \"\"\"\n    sound_rumbling_words = [\"car\", \"truck\", \"bus\", \"motorcycle\", \"train\", \"boat\", \"plane\", \"ambulance\", \"police car\", \"fire truck\"]\n    return \", \".join(sound_rumbling_words)\n\ndef"}
{"cat": "vehicles", "slot": "sound", "value": "heavy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: sound heavy. \n        Output: ", "result": "\n          car, truck, van, bus, tractor, train, boat, plane, motorcycle, bulldozer\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"sound heavy\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == \"animals\":\n        words = [word for word in ANIMAL"}
{"cat": "vehicles", "slot": "sound", "value": "rumbling", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can rumbling. \n        Output: ", "result": "\n        car, truck, van, bus, motorcycle, bike, boat, train, plane, rumbling\n    \"\"\"\n    words = []\n    for word in words:\n        if \"can\" in word and \"rumbling\" in word.lower().split(\" \"):\n            words.append(word)\n    return \", \".join(words)\n\nprint(get_vehicle_words(\"can rumbling\", \"vehicles\"))\n# Output: car, truck, van, bus, motorcycle, bike, boat, train, plane,"}
{"cat": "vehicles", "slot": "sound", "value": "throbbing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can throbbing. \n        Output: ", "result": "1. car, 2. truck, 3. motorcycle, 4. van, 5. bus, 6. bike, 7. jeep, 8. boat, 9. train, 10. plane\n    \"\"\"\n    words = []\n    for word in words:\n        if \"can\" in word and \"throbbing\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    count = "}
{"cat": "vehicles", "slot": "sound", "value": "silent", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: sound silent. \n        Output: ", "result": "\n            car, truck, van, bus, train, motorcycle, bike, boat, airplane, taxi\n\"\"\"\n\n# Define the function\ndef get_vehicle_words(category, condition):\n    # Create an empty list to store the words\n    vehicle_words = []\n    \n    # Loop through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if condition(word):\n            # If it does, add it to the list of words\n            vehicle_"}
{"cat": "vehicles", "slot": "movement", "value": "fast", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are fast. \n        Output: ", "result": "\n            Ferrari, Lamborghini, Porsche, Audi, BMW, Mercedes-Benz, Maserati, Jaguar, Aston Martin, Bentley\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are fast\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == \"animals\":"}
{"cat": "vehicles", "slot": "movement", "value": "crash", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can crash. \n        Output: ", "result": "\n            car, truck, bus, bike, motorcycle, boat, plane, train, taxi, ambulance\n    \"\"\"\n    category = 'vehicles'\n    condition = 'can crash'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition.\n        Category: string. \n        Condition: string. \n        Return: list of strings"}
{"cat": "vehicles", "slot": "movement", "value": "landing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can landing. \n        Output: ", "result": "4x4, ATV, boat, camper, car, jetski, motorhome, RV, trailer, truck. \n        Explanation: 4x4, ATV, boat, camper, car, jetski, motorhome, RV, trailer, truck all belong to the category of vehicles and can land. \n        \"\"\"\n        category = Category.objects.get(name='vehicles')\n        words = Word.objects.filter(category=category, definition__contains='can landing')\n        return [word.word for word in words"}
{"cat": "vehicles", "slot": "movement", "value": "fly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can fly. \n        Output: ", "result": "\n            car, airplane, helicopter, glider, blimp, hot air balloon, hang glider, parachute, rocket, balloon\n        \"\"\"\n        words = []\n        for word in Category.objects.filter(category='vehicles'):\n            if word.can_fly:\n                words.append(word.name)\n        return words\n\n    def get_vehicle_categories(self):\n        \"\"\"\n        Retrieve a list of all vehicle categories. \n        \"\"\"\n        categories = Category.objects.all()"}
{"cat": "vehicles", "slot": "movement", "value": "take-off", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can take-off. \n        Output: ", "result": "\n        helicopter, airplane, jet, glider, balloon, rocket, blimp, hot air balloon, hang glider, airship\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can take-off\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "vehicles", "slot": "movement", "value": "sail", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can sail. \n        Output: ", "result": "\n            car, boat, ship, yacht, sailboat, dinghy, catamaran, kayak, canoe, windsurfer\n\"\"\"\n\n# Define the category and condition\ncategory = \"vehicles\"\ncondition = \"can sail\"\n\n# Define a list to store the words\nwords = []\n\n# Define a function to extract words from a string\ndef extract_words(text):\n    words = []\n    for word in text.split():\n        if word.isalpha():\n            words.append(word)\n    return words\n"}
{"cat": "vehicles", "slot": "movement", "value": "float", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can float. \n        Output: ", "result": "\n        car, boat, ship, raft, ferry, hovercraft, airplane, hot air balloon, blimp, zeppelin\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can float\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(can_float(category=\"vehicles\", condition=\"car\"))\nprint(can_float(category=\"vehicles\", condition=\"boat\"))\nprint(can_float(category=\"vehicles\", condition"}
{"cat": "vehicles", "slot": "movement", "value": "slow", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are slow. \n        Output: ", "result": "\n        car, truck, van, bus, train, boat, plane, bike, motorcycle, taxi\n\"\"\"\n\n# Define the function\ndef get_slow_vehicles(category: str, condition: str) -> list:\n    # Create an empty list to store the results\n    results = []\n    \n    # Use a for loop to iterate through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word belongs to the specified category\n        if word.category == category:\n            # Check if"}
{"cat": "vehicles", "slot": "movement", "value": "trip", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can trip. \n        Output: ", "result": "4x4, Jeep, Land Rover, Range Rover, Sport Utility Vehicle (SUV), Toyota, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4,"}
{"cat": "vehicles", "slot": "movement", "value": "hover", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can hover. \n        Output: ", "result": "\n            car, bike, boat, plane, helicopter, hoverboard, skateboard, segway, hovercraft, drone\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can hover\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == \"animals\":\n        if condition == \"can fly\":"}
{"cat": "vehicles", "slot": "movement", "value": "westbound", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are westbound. \n        Output: ", "result": "407, 417, 427, 437, 447, 457, 467, 477, 487, 497\n    \"\"\"\n    words = []\n    for i in range(1, 5):\n        for j in range(1, 5):\n            for k in range(1, 5):\n                for l in range(1, 5):\n                    for m in range(1, 5):\n                        for n in range(1, "}
{"cat": "vehicles", "slot": "movement", "value": "sailing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can sailing. \n        Output: ", "result": "\n            car, boat, sailboat, yacht, dinghy, catamaran, kayak, canoe, paddleboard, windsurfer\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can sailing\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n```\n```\nExample:\n    Input: \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category:"}
{"cat": "vehicles", "slot": "movement", "value": "hover", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can hover. \n        Output: ", "result": "\n            car, bike, boat, plane, helicopter, hoverboard, skateboard, segway, hovercraft, drone\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can hover\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == \"animals\":\n        if condition == \"can fly\":"}
{"cat": "vehicles", "slot": "movement", "value": "southbound", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are southbound. \n        Output: ", "result": "\n        car,truck,SUV,minivan,sedan,jeep,van,pickup,coupe,convertible\n    \"\"\"\n    southbound_vehicles = []\n    for word in vocab:\n        if \"southbound\" in word:\n            southbound_vehicles.append(word)\n    return southbound_vehicles\n\ndef get_northbound_vehicles(vocab):\n    \"\"\"\n    Given a list of vocabulary words, return a list of 10 words that belong to the category"}
{"cat": "vehicles", "slot": "purpose", "value": "travelling", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used for travelling. \n        Output: ", "result": "\n        car, bus, train, bike, boat, plane, taxi, subway, tram, auto\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are used for travelling\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == \"animals\":\n        words = [word for word in ANIMAL"}
{"cat": "vehicles", "slot": "purpose", "value": "move", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used for move. \n        Output: ", "result": "\n        car, truck, bus, train, boat, plane, bike, motorcycle, scooter, taxi\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are used for move\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition.\n        Desired output: a list of words. \n        Category: the category of the"}
{"cat": "vehicles", "slot": "purpose", "value": "fishing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used for fishing. \n        Output: ", "result": " boat, reel, line, hook, bait, net, rod, sinker, tackle, fishfinder.\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are used for fishing\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition within the category.\n    \"\"\"\n    words = []\n    if category == \"all\":\n        words = get_"}
{"cat": "vehicles", "slot": "purpose", "value": "sport", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used for sport. \n        Output: ", "result": "4x4, ATV, dirt bike, go-kart, hot rod, muscle car, off-road, race car, sports car, truck.\n    \"\"\"\n    category = 'vehicles'\n    condition = 'are used for sport'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    words = []\n    if category"}
{"cat": "vehicles", "slot": "purpose", "value": "fitness", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used for fitness. \n        Output: ", "result": "1. bike, 2. treadmill, 3. elliptical, 4. stationary bike, 5. rowing machine, 6. stairmaster, 7. weight bench, 8. dumbbells, 9. kettlebell, 10. yoga mat.\n\nExample 2: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used"}
{"cat": "vehicles", "slot": "purpose", "value": "mission", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used for mission. \n        Output: ", "result": "\n```\ncar, truck, van, bus, train, plane, subway, boat, helicopter, taxi\n```\nExplanation:\nThe words that belong to the category \"vehicles\" and satisfy the condition \"are used for mission\" are: car, truck, van, bus, train, plane, subway, boat, helicopter, taxi.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. "}
{"cat": "vehicles", "slot": "purpose", "value": "transport", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used to transport. \n        Output: ", "result": " car, truck, bus, van, taxi, train, boat, plane, bike, motorcycle.\n    \"\"\"\n    category = 'vehicles'\n    condition = 'are used to transport'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    words = []\n    if category == 'animals':\n        words = [x for x"}
{"cat": "vehicles", "slot": "purpose", "value": "transit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used for transit. \n        Output: ", "result": " bus, train, tram, subway, trolley, streetcar, metro, monorail, light rail, commuter rail. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'are used for transit'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def describe_category_and_condition_to_user() -> None:\n        \"\"\"\n        Describe the category and condition to the user. \n        \"\"\"\n        print(f\"Category: {Category"}
{"cat": "vehicles", "slot": "purpose", "value": "drag", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used to drag. \n        Output: ", "result": "\n        car, truck, bus, trailer, boat, motorcycle, bicycle, skateboard, scooter, wagon\n```\n\n```\nQuestion 2:\n```\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used to transport. \n        Output: \n        car, truck, bus, train, plane, boat, motorcycle, bicycle, scooter"}
{"cat": "vehicles", "slot": "purpose", "value": "commuter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used for commuter. \n        Output: ", "result": "\n        car, van, bus, train, tram, metro, bike, motorcycle, scooter, tuk-tuk\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are used for commuter\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"animals\", \"are mammals\"))\nprint(get_words(\"fruits\", \"are red\"))\nprint(get_words(\"vehicles\", \"are used for transportation\"))\n"}
{"cat": "vehicles", "slot": "purpose", "value": "parking", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used to parking. \n        Output: ", "result": "\n        car, truck, van, bus, trailer, motorcycle, bicycle, scooter, rv, boat\n\"\"\"\n\n# Define the function\ndef get_vehicle_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    vehicle_words = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        # Check if"}
{"cat": "vehicles", "slot": "purpose", "value": "travel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used for travel. \n        Output: ", "result": "\n        car, truck, bus, train, boat, plane, bike, motorcycle, taxi, subway\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are used for travel\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"animals\", \"are mammals\"))\nprint(get_words(\"fruits\", \"are red\"))\nprint(get_words(\"vehicles\", \"are used for transportation\"))\nprint(get_words"}
{"cat": "vehicles", "slot": "purpose", "value": "ride", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used to ride. \n        Output: ", "result": " bike, car, motorcycle, scooter, bus, train, subway, boat, plane, taxi\n```\n\nExample 2:\n```\nInput: \nCategory: animals\nCondition: have fur\n\nDesired output: comma separated list of words.\n```\n\nExample 3:\n```\nInput: \nCategory: fruits\nCondition: are red\n\nDesired output: comma separated list of words.\n```\n\nExample 4:\n```\nInput: \nCategory: colors\nCondition: are primary\n\nDesired output: comma separated list"}
{"cat": "vehicles", "slot": "purpose", "value": "race", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used for race. \n        Output: ", "result": "1. racecar, 2. racer, 3. racetrack, 4. raceway, 5. racer, 6. racetrack, 7. racer, 8. racetrack, 9. racer, 10. racetrack\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are used for race\"\n    words = get_words(category, condition)\n    return \", \".join(sorted(words))\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and"}
{"cat": "vehicles", "slot": "purpose", "value": "agriculture", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used for agriculture. \n        Output: ", "result": "\n        tractor, plow, cultivator, combine, harvester, planter, seed drill, fertilizer spreader, sprayer, cultivator\n\"\"\"\n\n# Define the function\ndef get_vehicles(category: str, condition: str) -> list:\n    # Create an empty list to store the results\n    results = []\n    \n    # Use a for loop to iterate through all the words in the vocabulary\n    for word in vocabulary:\n        # Use an if statement to check if the word satisfies the condition\n       "}
{"cat": "vehicles", "slot": "purpose", "value": "travel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used to travel. \n        Output: ", "result": "\n```\ncar, bus, train, bike, boat, plane, subway, taxi, motorcycle, bicycle\n```"}
{"cat": "vehicles", "slot": "purpose", "value": "luxury", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used for luxury. \n        Output: ", "result": "\n          Audi, BMW, Cadillac, Ferrari, Lamborghini, Mercedes-Benz, Porsche, Rolls-Royce, Tesla,\n```"}
{"cat": "vehicles", "slot": "purpose", "value": "ride", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used for ride. \n        Output: ", "result": "\n        car, bus, train, taxi, bike, boat, plane, subway, monorail, tram\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are used for ride\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition. \n        Desired output: list of words. \n        Category: string. \n       "}
{"cat": "vehicles", "slot": "place", "value": "road", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in roads. \n        Output: ", "result": "\n        car, truck, van, bus, bike, motorcycle, taxi, train, boat, airplane\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can be found or used in roads\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"animals\", \"can be found in jungle\"))\nprint(get_words(\"vehicles\", \"can be found in parking lot\"))\nprint(get_words(\"vehicles\", \""}
{"cat": "vehicles", "slot": "place", "value": "airport", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in airports. \n        Output: ", "result": "\n            1. Runway\n            2. Taxiway\n            3. Airport\n            4. Terminal\n            5. Gate\n            6. Baggage claim\n            7. Security checkpoint\n            8. Parking garage\n            9. Rental car center\n            10. Shuttle bus\n        \"\"\"\n        airport_words = [\"Runway\", \"Taxiway\", \"Airport\", \"Terminal\", \"Gate\", \"Baggage claim\", \"Security checkpoint\", \"Parking garage\", \"Rental car center\", \"Shuttle"}
{"cat": "vehicles", "slot": "place", "value": "sky", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in skies. \n        Output: ", "result": "\n        helicopter, airplane, jet, glider, balloon, blimp, hot air balloon, glider, hang glider, parachute\n    \"\"\"\n    words = []\n    for word in vocab:\n        if \"sky\" in word and \"vehicle\" in word:\n            words.append(word)\n    return words\n\ndef get_vehicle_words(vocab, category, condition):\n    \"\"\"\n    Given a vocabulary and a category, return a list of words that satisfy the condition.\n       "}
{"cat": "vehicles", "slot": "place", "value": "rural area", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in rural areas. \n        Output: ", "result": "4x4, tractor, combine, plow, harvester, truck, trailer, ATV, bulldozer, excavator \n        \"\"\"\n        category = 'vehicles'\n        condition = 'can be found or used in rural areas'\n        words = []\n        for word in word_list:\n            if 'rural' in word and 'vehicle' in word and word not in words:\n                words.append(word)\n        if words:\n            print(', '.join(words))\n        else:\n            print(\"No"}
{"cat": "vehicles", "slot": "place", "value": "cycle path", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in cycle paths. \n        Output: ", "result": "\n            1. Bike\n            2. Path\n            3. Cycle\n            4. Lane\n            5. Route\n            6. Track\n            7. Trail\n            8. Ride\n            9. Tour\n            10. Journey\n        \"\"\"\n        words = [\n            \"Bike\",\n            \"Path\",\n            \"Cycle\",\n            \"Lane\",\n            \"Route\",\n            \"Track\",\n            \"Trail\",\n            \"Ride\",\n            \"Tour\",\n            \"Journey\"\n        ]\n       "}
{"cat": "vehicles", "slot": "place", "value": "country", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in countries. \n        Output: ", "result": "\n        car, truck, van, bus, bike, motorcycle, boat, plane, train, taxi\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can be found or used in countries\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "vehicles", "slot": "place", "value": "air", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in airs. \n        Output: ", "result": "4x4, Jeep, Off-road, SUV, Truck, Utility, Vehicle, Wheels, Wrangler\n    \"\"\"\n    airs_vehicles = [word for word in airs if 'vehicle' in word and '4x4' in word]\n    airs_vehicles += [word for word in airs if 'jeep' in word]\n    airs_vehicles += [word for word in airs if 'off-road' in word]\n    airs_vehicles += [word for"}
{"cat": "vehicles", "slot": "place", "value": "sea", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in seas. \n        Output: ", "result": "\n            car, boat, ship, yacht, ferry, cruise, submarine, sailboat, hovercraft, catamaran\n        Explanation: car, boat, ship, yacht, ferry, cruise, submarine, sailboat, hovercraft, catamaran all belong to the category of vehicles and can be found or used in seas. \n        \"\"\"\n        category = Category.objects.get(name='vehicles')\n        words = Word.objects.filter(category=category, used_in__icontains='seas')\n       "}
{"cat": "vehicles", "slot": "place", "value": "waterway", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in waterways. \n        Output: ", "result": "\n            1. Barge\n            2. Canal\n            3. Lock\n            4. Navigable\n            5. Port\n            6. River\n            7. Ship\n            8. Tidal\n            9. Waterway\n            10. Waterways\n        \"\"\"\n        category = \"vehicles\"\n        condition = \"can be found or used in waterways\"\n        words = [\n            \"Barge\",\n            \"Canal\",\n            \"Lock\",\n            \"Navigable\",\n            \"Port\",\n            \"River\",\n            \"Sh"}
{"cat": "vehicles", "slot": "place", "value": "garage", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in garages. \n        Output: ", "result": "\n            1. car\n            2. truck\n            3. van\n            4. bus\n            5. motorcycle\n            6. bike\n            7. scooter\n            8. tractor\n            9. bulldozer\n            10. excavator\n        \"\"\"\n        garage_words = [\n            \"car\",\n            \"truck\",\n            \"van\",\n            \"bus\",\n            \"motorcycle\",\n            \"bike\",\n            \"scooter\",\n            \"tractor\",\n            \"bulldozer\","}
{"cat": "vehicles", "slot": "place", "value": "traffic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in traffics. \n        Output: ", "result": "\n        car, truck, bus, motorcycle, bike, taxi, train, boat, airplane, helicopter\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can be found or used in traffics\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(find_words(\"vehicles\", \"can be found or used in traffics\"))\n# Output: car, truck, bus, motorcycle, bike, taxi, train, boat,"}
{"cat": "vehicles", "slot": "place", "value": "motorway", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in motorways. \n        Output: ", "result": "\n        car, truck, lorry, bus, motorway, petrol, diesel, oil, tyre, speed\n\"\"\"\n\n# Define the category and condition\ncategory = \"vehicles\"\ncondition = \"can be found or used in motorways\"\n\n# Define a list to store the words\nwords = []\n\n# Define a function to extract words from a string\ndef extract_words(text):\n    words = []\n    for word in text.split():\n        if word.isalpha():\n            words.append(word)\n    return words\n"}
{"cat": "vehicles", "slot": "place", "value": "dry dock", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in dry docks. \n        Output: ", "result": "\n            1. Dock\n            2. Slip\n            3. Berth\n            4. Quay\n            5. Jetty\n            6. Pier\n            7. Wharf\n            8. Embankment\n            9. Strand\n            10. Breakwater\n        \"\"\"\n        category = 'vehicles'\n        condition = 'can be found or used in dry docks'\n        words = [\n            'Dock',\n            'Slip',\n            'Berth',\n            'Quay',\n            'Jetty',\n            'P"}
{"cat": "vehicles", "slot": "place", "value": "depot", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in depots. \n        Output: ", "result": "\n        train, subway, bus, depot, station, platform, tracks, schedule, conductor, ticket\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can be found or used in depots\"\n    words = []\n    for word in text.split():\n        if word.lower() in DEPOT_WORDS and word.lower() in category_words[category]:\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n```\nExample"}
{"cat": "vehicles", "slot": "place", "value": "station", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in stations. \n        Output: ", "result": "\n        car, bus, train, taxi, airport, subway, ferry, dock, platform, terminal\n    \"\"\"\n    category = \"vehicles\"\n    words = [\"car\", \"bus\", \"train\", \"taxi\", \"airport\", \"subway\", \"ferry\", \"dock\", \"platform\", \"terminal\"]\n    for word in words:\n        if \"can be found\" in word or \"can be used\" in word and word.lower().startswith(category.lower()):\n            print(word, end=\", \")\n    print"}
{"cat": "vehicles", "slot": "place", "value": "route", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in routes. \n        Output: ", "result": "\n        car, truck, van, bus, train, boat, plane, bike, motorcycle, taxi\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can be found or used in routes\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\nprint(find_words(category=\"vehicles\", condition=\"can be found or used in routes\"))\n```\n\u8f93\u51fa\uff1a\ncar, truck, van, bus, train, boat, plane, bike, motorcycle, taxi\n```"}
{"cat": "vehicles", "slot": "place", "value": "terminal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in terminals. \n        Output: ", "result": "\n        airplane, bus, car, ferry, helicopter, jet, train, tram, trolley, subway\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can be found or used in terminals\"\n    words = []\n    for word in text.split():\n        if re.search(category, word) and re.search(condition, word):\n            words.append(word)\n    return words\n\ndef find_vehicles(text):\n    \"\"\"\n    Given a text, find and return a list of 1"}
{"cat": "vehicles", "slot": "place", "value": "parking", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in parkings. \n        Output: ", "result": "\n            1. car\n            2. truck\n            3. van\n            4. bus\n            5. motorcycle\n            6. bicycle\n            7. scooter\n            8. taxi\n            9. ambulance\n            10. police car\n        \"\"\"\n        category = 'vehicles'\n        condition = 'can be found or used in parkings'\n        words = [\n            'car',\n            'truck',\n            'van',\n            'bus',\n            'motorcycle',\n            'bicycle',\n"}
{"cat": "vehicles", "slot": "place", "value": "terminal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in terminals. \n        Output: ", "result": "\n        airplane, bus, car, ferry, helicopter, jet, train, tram, trolley, subway\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can be found or used in terminals\"\n    words = []\n    for word in text.split():\n        if re.search(category, word) and re.search(condition, word):\n            words.append(word)\n    return words\n\ndef find_vehicles(text):\n    \"\"\"\n    Given a text, find and return a list of 1"}
{"cat": "vehicles", "slot": "place", "value": "rental", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in rentals. \n        Output: ", "result": "4x4, SUV, convertible, sedan, minivan, truck, van, sports car, luxury car, economy car. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'can be found or used in rentals'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(find_vehicle_words(category='vehicles', condition='can be found or used in rentals'))\n\nif __name__ == '__main__':\n    main()\n```\nThis"}
{"cat": "vehicles", "slot": "place", "value": "shipyard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in shipyards. \n        Output: ", "result": "\n            1. Shipyard\n            2. Dock\n            3. Slip\n            4. Wharf\n            5. Pier\n            6. Quay\n            7. Berth\n            8. Jetty\n            9. Embankment\n            10. Breakwater\n        \"\"\"\n        category = 'vehicles'\n        condition = 'can be found or used in shipyards'\n        words = []\n        for word in text.split():\n            if word.lower() in category_words[category] and word.lower() in shipyard_words["}
{"cat": "vehicles", "slot": "place", "value": "park", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in parks. \n        Output: ", "result": "\n            \n```"}
{"cat": "vehicles", "slot": "material", "value": "metal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be made of metal. \n        Output: ", "result": "\n        car, truck, bus, bike, motorcycle, train, airplane, boat, submarine, bulldozer\n\"\"\"\n\n# Define the category and condition\ncategory = \"vehicles\"\ncondition = \"can be made of metal\"\n\n# Define a list to store the words\nwords = []\n\n# Loop through all the words in the vocabulary\nfor word in vocabulary:\n    # Check if the word satisfies the condition\n    if word.is_metal and word.category == category:\n        # Add the word to"}
{"cat": "vehicles", "slot": "material", "value": "plastic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be made of plastic. \n        Output: ", "result": "\n        car, truck, van, bus, train, boat, airplane, motorcycle, bicycle, taxi\n\"\"\"\n\n# Define the function\ndef get_vehicle_words(category, condition):\n    # Create an empty list to store the words\n    vehicle_words = []\n    \n    # Loop through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if word.category == category and word.material == \"plastic\":\n            # Add the word to"}
{"cat": "vehicles", "slot": "material", "value": "rubber", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be made of rubber. \n        Output: ", "result": "\n          car, tire, tread, rubber, pneumatic, inflate, deflate, tube, inner tube, tire valve\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can be made of rubber\"\n    words = []\n    for word in text.split():\n        if word.lower().startswith(category + \".\"):\n            if \"rubber\" in word:\n                words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print"}
{"cat": "vehicles", "slot": "material", "value": "glass", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be made of glass. \n        Output: ", "result": "\n        car, window, glass, windshield, side window, rear window, sunroof, mirror, headlight, taillight\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can be made of glass\"\n    words = []\n    for word in text.split():\n        if word.lower().startswith(category + \".\"):\n            words.append(word)\n    filtered_words = [word for word in words if word.lower().endswith(condition)]\n    print(\", \".join(filtered_words))\n```\n"}
{"cat": "vehicles", "slot": "material", "value": "aluminium", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be made of aluminium. \n        Output: ", "result": "4x4, Jeep, Land Rover, Range Rover, Sport Utility Vehicle, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, "}
{"cat": "vehicles", "slot": "material", "value": "steel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be made of steel. \n        Output: ", "result": "\n        car, truck, bus, train, subway, boat, airplane, motorcycle, bicycle, bulldozer.\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can be made of steel\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"vehicles\", \"can be made of wood\"))\nprint(get_words(\"vehicles\", \"can be made of plastic\"))\nprint(get_words(\"vehicles"}
{"cat": "vehicles", "slot": "material", "value": "wood", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be made of wood. \n        Output: ", "result": "\n        car, truck, bus, train, boat, airplane, bike, wagon, cart, carousel \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can be made of wood\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"vehicles\", \"can be made of metal\"))\nprint(get_words(\"vehicles\", \"can be made of plastic\"))\nprint(get_words(\"vehicles\", \"can be"}
{"cat": "vehicles", "slot": "user", "value": "people", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by peoples. \n        Output: ", "result": "\n        car, bus, train, truck, bike, boat, plane, taxi, subway, metro\n    \"\"\"\n    category = 'vehicles'\n    condition = 'are used by peoples'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Example usage\nprint(get_words('animals', 'are four legged'))\n# Output: 'cat, dog, horse, cow'\nprint(get_words('vehicles', 'are used by peoples'))\n# Output"}
{"cat": "vehicles", "slot": "user", "value": "co-pilot", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by co-pilots. \n        Output: ", "result": "\n        airplane, autopilot, co-pilot, flight, instrument, navigation, pilot, radio, seat, steering\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are used by co-pilots\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"animals\", \"are mammals\"))\nprint(get_words(\"fruits\", \"are red\"))\nprint(get_words(\"vehicles\", \"are used by co"}
{"cat": "vehicles", "slot": "user", "value": "army", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by armies. \n        Output: ", "result": "\n            \n```"}
{"cat": "vehicles", "slot": "user", "value": "driver", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by drivers. \n        Output: ", "result": " car, driver, drive, driveway, driver's, driver's seat, driver's license, driver's ed, driver's training, driver's education. \n        \"\"\"\n        category = \"vehicles\"\n        condition = \"are used by drivers\"\n        words = []\n        for word in text.split():\n            if word.lower() in category_map[category] and word.lower() in condition_map[condition]:\n                words.append(word)\n        return words\n\n    def extract_nouns(self, text):\n"}
{"cat": "vehicles", "slot": "user", "value": "cyclist", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by cyclists. \n        Output: ", "result": "\n```\nbike, cycle, pedal, handlebars, saddle, tire, wheel, brake, chain, gear\n```\nExplanation:\nThe words that belong to the category \"vehicles\" and satisfy the condition \"are used by cyclists\" are \"bike\", \"cycle\", \"pedal\", \"handlebars\", \"saddle\", \"tire\", \"wheel\", \"brake\", \"chain\", and \"gear\".\n```"}
{"cat": "vehicles", "slot": "user", "value": "person", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by people. \n        Output: ", "result": "\n        car, truck, van, bus, train, boat, plane, bike, motorcycle, taxi\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are used by people\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == \"animals\":\n        words = [word for word in ANIMAL"}
{"cat": "vehicles", "slot": "user", "value": "sailor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by sailors. \n        Output: ", "result": "\n```\nboat, sailor, sea, anchor, rope, mast, hull, deck, oar, rudder\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are used by sailors\" are: boat, sailor, sea, anchor, rope, mast, hull, deck, oar, rudder.\n```python\nimport random\n\ncategory = \"vehicles\"\ncondition = \"are used by sailors\"\n\ndef get_words(category, condition):\n    words = []"}
{"cat": "vehicles", "slot": "user", "value": "farmer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by farmers. \n        Output: ", "result": "\n        tractor, combine, plow, cultivator, harvester, trailer, loader, backhoe, sprayer, fertilizer\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are used by farmers\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"are used by farmers\"))  # tractor, combine, plow, cultivator, harvester, trailer, loader, backhoe, spray"}
{"cat": "vehicles", "slot": "user", "value": "officer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by officers. \n        Output: ", "result": "\n        police,car,officer,patrol,traffic,cruiser,duty,vehicle,patrolman,patrolwoman\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are used by officers\"\n    words = []\n    for word in text.split():\n        if word.lower().startswith(category.lower() + \" \" + condition.lower() + \" \"):\n            words.append(word)\n    result = \", \".join(words)\n    print(result)\n\ntext = \""}
{"cat": "vehicles", "slot": "user", "value": "holidaymaker", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by holidaymakers. \n        Output: ", "result": "4x4, caravan, motorhome, campervan, convertible, hire, rental, holiday, tourist.\n    \"\"\"\n    category = 'vehicles'\n    condition = 'are used by holidaymakers'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Example usage\nprint(get_words('vehicles', 'are used by holidaymakers'))\n```\nOutput: \n4x4, caravan, motorhome, campervan, convertible, hire, r"}
{"cat": "vehicles", "slot": "user", "value": "helmsman", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by helmsmen. \n        Output: ", "result": "1. rudder, 2. wheel, 3. oar, 4. tiller, 5. propeller, 6. steering wheel, 7. rudder post, 8. tiller arm, 9. propeller shaft, 10. steering gear. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'are used by helmsmen'\n        words = []\n        for word in synonyms:\n            if word.lower() in category_map[category] and 'helmsman' in synset"}
{"cat": "vehicles", "slot": "user", "value": "businessman", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by businessmen. \n        Output: ", "result": "\n        car, van, truck, bus, taxi, limo, shuttle, minivan, sedan, SUV\n    \"\"\"\n    category = 'vehicles'\n    condition = 'are used by businessmen'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Example usage\nprint(get_words_from_text('Provide a list of 10 words that belong to the category and satisfy the condition. Desired output: comma separated list of words. Category: vehicles. Condition: are used by"}
{"cat": "vehicles", "slot": "user", "value": "taxi driver", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by taxi drivers. \n        Output: ", "result": "\n        car, taxi, driver, license, fare, meter, dispatch, GPS, smartphone, credit card.\n    \"\"\"\n    taxi_words = [\"car\", \"taxi\", \"driver\", \"license\", \"fare\", \"meter\", \"dispatch\", \"GPS\", \"smartphone\", \"credit card\"]\n    taxi_words = [word for word in taxi_words if \"taxi\" in word]\n    return taxi_words\n\ndef get_vehicle_words(category=None, condition=None):\n    \"\"\"\n   "}
{"cat": "vehicles", "slot": "user", "value": "captain", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by captains. \n        Output: ", "result": "\n            car, truck, van, bus, train, boat, airplane, submarine, helicopter, taxi\n        \"\"\"\n        category = 'vehicles'\n        condition = 'are used by captains'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('vehicles', 'are used by captains'))  # Output: car, truck, van, bus, train, boat, airplane, submarine, helicopter, taxi\n\nif __name__ == '"}
{"cat": "vehicles", "slot": "user", "value": "steward", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by stewards. \n        Output: ", "result": "\n```\ncar, truck, van, bus, train, boat, plane, motorcycle, bicycle, taxi\n```\nExplanation:\n\n1. The category is \"vehicles\".\n2. The condition is \"are used by stewards\".\n3. The words that satisfy the condition are \"car, truck, van, bus, train, boat, plane, motorcycle, bicycle, taxi\".\n4. The list of 10 words is \"car, truck, van, bus, train, boat, plane, motorcycle, bicycle"}
{"cat": "vehicles", "slot": "user", "value": "cruise", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by cruises. \n        Output: ", "result": "\n            1. Yacht\n            2. Ship\n            3. Cruise\n            4. Liner\n            5. Ferry\n            6. Boat\n            7. Sailboat\n            8. Cruise ship\n            9. Ocean liner\n            10. Ferryboat\n        \"\"\"\n        words = [\n            \"Yacht\",\n            \"Ship\",\n            \"Cruise\",\n            \"Liner\",\n            \"Ferry\",\n            \"Boat\",\n            \"Sailboat\",\n            \"Cruise ship"}
{"cat": "vehicles", "slot": "user", "value": "hostess", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by hostesses. \n        Output: ", "result": "\n        car, limo, bus, van, taxi, shuttle, train, boat, plane, helicopter\n    \"\"\"\n    category = 'vehicles'\n    condition = 'are used by hostesses'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Output:"}
{"cat": "vehicles", "slot": "user", "value": "corps", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by corps. \n        Output: ", "result": "\n            ambulance, firetruck, hearse, limousine, policecar, taxicab, tank, armoredcar, militaryvehicle, tanker\n        \"\"\"\n        category = 'vehicles'\n        condition = 'are used by corps'\n        words = []\n        for word in text.split():\n            if word.lower() in category_words[category] and word.lower() in corps_words[condition]:\n                words.append(word)\n        result = ', '.join(words)\n        print(result)\n```\nExplan"}
{"cat": "vehicles", "slot": "user", "value": "squadron", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by squadrons. \n        Output: ", "result": "\n            1. Fighter\n            2. Bomber\n            3. Helicopter\n            4. Transport\n            5. Attack\n            6. Reconnaissance\n            7. Maritime\n            8. Trainer\n            9. Utility\n            10. Tanker\n        \"\"\"\n        words = [\n            \"Fighter\",\n            \"Bomber\",\n            \"Helicopter\",\n            \"Transport\",\n            \"Attack\",\n            \"Reconnaissance\",\n            \"Maritime\",\n            \"Trainer\",\n            \"Utility"}
{"cat": "vehicles", "slot": "user", "value": "pedestrian", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by pedestrians. \n        Output: ", "result": "\n            1. Sidewalk\n            2. Crosswalk\n            3. Walk signal\n            4. Pedestrian bridge\n            5. Pedestrian overpass\n            6. Pedestrian tunnel\n            7. Pedestrian ramp\n            8. Pedestrian path\n            9. Pedestrian lane\n            10. Pedestrian crossing\n        \"\"\"\n        words = [\"Sidewalk\", \"Crosswalk\", \"Walk signal\", \"Pedestrian bridge\", \"Pedestrian overpass\", \"Pedestrian tunnel\", \"Pedestrian ramp"}
{"cat": "vehicles", "slot": "user", "value": "pedestrian", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by pedestrians. \n        Output: ", "result": "\n            1. Sidewalk\n            2. Crosswalk\n            3. Walk signal\n            4. Pedestrian bridge\n            5. Pedestrian overpass\n            6. Pedestrian tunnel\n            7. Pedestrian ramp\n            8. Pedestrian path\n            9. Pedestrian lane\n            10. Pedestrian crossing\n        \"\"\"\n        words = [\"Sidewalk\", \"Crosswalk\", \"Walk signal\", \"Pedestrian bridge\", \"Pedestrian overpass\", \"Pedestrian tunnel\", \"Pedestrian ramp"}
{"cat": "vehicles", "slot": "user", "value": "navy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by navies. \n        Output: ", "result": "\n        aircraft carrier, destroyer, submarine, frigate, cruiser, amphibious assault ship, missile boat, patrol boat, mine sweeper, landing craft.\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are used by navies\"\n    words = []\n    for word in vocab:\n        if word.category == category and word.condition == condition:\n            words.append(word.name)\n    return \", \".join(words)\n\n# Test the function\nprint(find_vehicles_in_"}
{"cat": "vehicles", "slot": "place", "value": "farm", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in farms. \n        Output: ", "result": "\n            1. tractor\n            2. combine\n            3. plow\n            4. harvester\n            5. cultivator\n            6. seed drill\n            7. planter\n            8. sprayer\n            9. fertilizer spreader\n            10. cultivator\n        \"\"\"\n        category = \"vehicles\"\n        condition = \"can be found or used in farms\"\n        words = [\n            \"tractor\",\n            \"combine\",\n            \"plow\",\n            \"harvester\",\n            \"cultiv"}
{"cat": "vehicles", "slot": "purpose", "value": "rental", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used for rental. \n        Output: ", "result": "4x4, convertible, economy, full-size, luxury, minivan, sedan, suv, compact, standard.\n    \"\"\"\n    category = 'vehicles'\n    condition = 'are used for rental'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Example usage\nprint(find_words('vehicles', 'are used for rental'))\n# Output: 4x4, convertible, economy, full-size, luxury, minivan, sedan, suv, compact, standard\n"}
{"cat": "vehicles", "slot": "user", "value": "passenger", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by passengers. \n        Output: ", "result": "\n        car, van, bus, taxi, train, tram, subway, trolley, shuttle, ferry\n```\n\n```\nDescribe a scenario where the category is \"animals\" and the condition is \"mammals\".\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammals. \n        Output: \n        dog, cat, cow, elephant, whale,"}
{"cat": "vehicles", "slot": "user", "value": "pilot", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by pilots. \n        Output: ", "result": "\n        helicopter, airplane, jet, glider, balloon, rocket, spacecraft, drone, hang glider, hot air balloon \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are used by pilots\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"animals\", \"are mammals\"))\nprint(get_words(\"vehicles\", \"have more than 4 wheels\"))\nprint(get_words"}
{"cat": "vehicles", "slot": "movement", "value": "dock", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can dock. \n        Output: ", "result": "\n            car, truck, van, bus, train, boat, plane, bike, motorcycle, taxi\n\"\"\"\n\ntest_cases = [\n    {\"category\": \"vehicles\", \"condition\": \"can drive\", \"output\": [\"car\", \"truck\", \"van\", \"bus\", \"train\", \"boat\", \"plane\", \"bike\", \"motorcycle\", \"taxi\"]},\n    {\"category\": \"vehicles\", \"condition\": \"can park\", \"output\": [\"car\", \"truck\", \"van\", \"bus\", \"train\","}
{"cat": "vehicles", "slot": "purpose", "value": "transport", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used for transport. \n        Output: ", "result": " car, bus, train, truck, taxi, boat, airplane, subway, bike, motorcycle\n```\n\nExample 2:\n```\nInput: \nCategory: animals\nCondition: have fur\nOutput: \n\nExample 3:\n```\nInput: \nCategory: fruits\nCondition: are red\nOutput: \n\nExample 4:\n```\nInput: \nCategory: months\nCondition: have at least 31 days\nOutput: \n\nExample 5:\n```\nInput: \nCategory: colors\nCondition: are"}
{"cat": "vehicles", "slot": "purpose", "value": "dock", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used for dock. \n        Output: ", "result": "\n        boat, dock, jetty, landing, pier, quay, slip, wharf, jetty, landing\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are used for dock\"\n    words = []\n    for word in text.split():\n        if word.lower() in category_words[category] and word.lower() in condition_words[condition]:\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n# Test the function"}
{"cat": "vehicles", "slot": "generalization", "value": "vehicle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are vehicle. \n        Output: ", "result": "\n        car, truck, van, bus, motorcycle, bike, train, boat, airplane, taxi\n```\n\nExample 2:\n```\nInput: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammals. \n        Output: \n        dog, cat, cow, elephant, whale, dolphin, pig, horse, giraffe, monkey"}
{"cat": "vehicles", "slot": "generalization", "value": "transportation", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are transportation. \n        Output: ", "result": "\n        car, truck, bus, train, airplane, boat, subway, taxi, bike, motorcycle\n```\n\n```\nDescribe a scenario where the category is \"animals\" and the condition is \"are mammals\". \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammals. \n        Output: \n        dog, cat, cow, pig, elephant"}
{"cat": "vehicles", "slot": "generalization", "value": "container", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are container. \n        Output: ", "result": "\n            1. Container\n            2. Shipping\n            3. Cargo\n            4. Box\n            5. Trailer\n            6. Containers\n            7. Intermodal\n            8. Chassis\n            9. Equipment\n            10. Logistics\n        \"\"\"\n        container_words = [\n            \"Container\",\n            \"Shipping\",\n            \"Cargo\",\n            \"Box\",\n            \"Trailer\",\n            \"Containers\",\n            \"Intermodal\",\n            \"Chassis\",\n            \"Equipment\",\n"}
{"cat": "vehicles", "slot": "generalization", "value": "conveyance", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are conveyance. \n        Output: ", "result": "\n```\ncar, truck, bus, train, boat, plane, motorcycle, bicycle, scooter, taxi\n```"}
{"cat": "vehicles", "slot": "generalization", "value": "instrumentality", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are instrumentality. \n        Output: ", "result": "\n        car, truck, bus, train, airplane, boat, submarine, helicopter, motorcycle, bicycle\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are instrumentality\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"are instrumentality\"))  # Output: car, truck, bus, train, airplane, boat, submarine, helicopter, motorcycle, bicycle\n```\nIn this"}
{"cat": "vehicles", "slot": "generalization", "value": "self-propelled vehicle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are self-propelled vehicle. \n        Output: ", "result": "\n            car, truck, bus, train, boat, plane, motorcycle, bicycle, subway, taxi\n\"\"\"\n\n# Define the function\ndef get_vehicle_words(category, condition):\n    # Create an empty list to store the words\n    vehicle_words = []\n    \n    # Loop through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if word.satisfies(condition):\n            # If it does, add it to the list of"}
{"cat": "vehicles", "slot": "generalization", "value": "instrumentation", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are instrumentation. \n        Output: ", "result": "\n            1. speedometer\n            2. odometer\n            3. tachometer\n            4. speedometer\n            5. odometer\n            6. tachometer\n            7. speedometer\n            8. odometer\n            9. tachometer\n            10. speedometer\n        \"\"\"\n        category = \"vehicles\"\n        condition = \"are instrumentation\"\n        words = [\n            \"speedometer\",\n            \"odometer\",\n            \"tachometer\",\n            \"speedometer\",\n            \"odometer\",\n            \"tachometer\","}
{"cat": "vehicles", "slot": "generalization", "value": "automotive vehicle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are automotive vehicle. \n        Output: ", "result": "4x4, Jeep, Pickup, Truck, SUV, Sedan, Car, Van, Minivan, Wagon\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are automotive vehicle\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition within the category.\n    \"\"\"\n    words = []\n    if category == \"animals\":\n        condition"}
{"cat": "vehicles", "slot": "generalization", "value": "motor vehicle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are motor vehicle. \n        Output: ", "result": " car, van, truck, bus, motorcycle, bike, scooter, taxi, limo, ambulance.\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are motor vehicle\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == \"animals\":\n        words = [x for x in"}
{"cat": "vehicles", "slot": "generalization", "value": "artefact", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are artefact. \n        Output: ", "result": "4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4"}
{"cat": "vehicles", "slot": "generalization", "value": "automobile", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are automobile. \n        Output: ", "result": "\n        car, truck, van, sedan, SUV, minivan, sports car, convertible, pickup, motorcycle\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are automobile\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"animals\", \"are mammals\"))\nprint(get_words(\"vehicles\", \"are automobile\"))\nprint(get_words(\"fruits\", \"are red\"))\nprint(get_words(\""}
{"cat": "vehicles", "slot": "generalization", "value": "motorcar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are motorcar. \n        Output: ", "result": "\n```\ncar, truck, van, bus, motorcycle, scooter, bike, train, subway, trolley\n```"}
{"cat": "vehicles", "slot": "generalization", "value": "machine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are machine. \n        Output: ", "result": "\n        car, truck, bus, train, airplane, boat, submarine, helicopter, motorcycle, bicycle\n    \"\"\"\n    category = \"vehicles\"\n    machine_words = [\"car\", \"truck\", \"bus\", \"train\", \"airplane\", \"boat\", \"submarine\", \"helicopter\", \"motorcycle\", \"bicycle\"]\n    machine_words = [word for word in machine_words if word.lower() in category.lower()]\n    print(\", \".join(machine_words))\n```\nExample usage"}
{"cat": "vehicles", "slot": "generalization", "value": "aeroplane", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are aeroplane. \n        Output: ", "result": "747, DC10, A380, A320, 737, A330, A319, A340, A321\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are aeroplane\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"vehicles\", \"are car\"))\nprint(get_words(\"vehicles\", \"are bus\"))\nprint(get"}
{"cat": "vehicles", "slot": "generalization", "value": "public transport", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are public transport. \n        Output: ", "result": "\n```\nbus, train, tram, metro, trolley, streetcar, subway, commuter rail, light rail, monorail\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition of being public transport are \"bus\", \"train\", \"tram\", \"metro\", \"trolley\", \"streetcar\", \"subway\", \"commuter rail\", \"light rail\" and \"monorail\".\n```"}
{"cat": "vehicles", "slot": "generalization", "value": "garden tool", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are garden tool. \n        Output: ", "result": "\n            \n```"}
{"cat": "vehicles", "slot": "generalization", "value": "implement", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are implement. \n        Output: ", "result": "1. implement, 2. motorcar, 3. automobile, 4. truck, 5. bus, 6. train, 7. airplane, 8. helicopter, 9. ship, 10. submarine. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'are implement'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def describe_category_vehicles():\n        \"\"\"\n        Provide a description of the vehicles"}
{"cat": "vehicles", "slot": "generalization", "value": "car", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are car. \n        Output: ", "result": "4x4, convertible, coupe, sedan, sports, station, wagon."}
{"cat": "vehicles", "slot": "generalization", "value": "plane", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are plane. \n        Output: ", "result": "747, 757, 767, 777, 787, A300, A310, A320, A330, A340. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'are plane'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(find_words('vehicles', 'are train'))\n    print(find_words('vehicles', 'are bus'))\n    print("}
{"cat": "vehicles", "slot": "generalization", "value": "tool", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are tool. \n        Output: ", "result": "\n```\ncar, hammer, screwdriver, wrench, pliers, saw, drill, ruler, tape measure, level\n```\nExplanation:\nThe words that belong to the category \"vehicles\" and satisfy the condition \"are tool\" are: car, hammer, screwdriver, wrench, pliers, saw, drill, ruler, tape measure, level.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n"}
{"cat": "vehicles", "slot": "generalization", "value": "artifact", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are artifact. \n        Output: ", "result": "4x4, ATV, boat, car, motorcycle, RV, SUV, trailer, truck. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'are artifact'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_simple(self):\n        self.assertEqual(get_words('animals', 'are'), ['cat', 'dog'])\n\n    def test_get_words_complex(self):\n        self.assertEqual(get_"}
{"cat": "vehicles", "slot": "generalization", "value": "auto", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are auto. \n        Output: ", "result": "\n        sports car, convertible, sedan, hatchback, coupe, minivan, pickup truck, SUV, van, wagon\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are auto\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_word_list(\"animals\", \"are mammals\"))\nprint(get_word_list(\"vehicles\", \"have more than 4 wheels\"))\nprint(get_word_list(\"ve"}
{"cat": "vehicles", "slot": "generalization", "value": "bicycle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are bicycle. \n        Output: ", "result": "\n```\nbicycle, chain, gear, pedal, saddle, tire, wheel, brake, handlebar, derailleur\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are car. \n        Output: \n```\ncar, engine, transmission, steering, brakes, wheels, tires, seats, dashboard, windshield\n```\n"}
{"cat": "vehicles", "slot": "generalization", "value": "bike", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are bike. \n        Output: ", "result": "\n```\nbike, scooter, motorcycle, bicycle, moped, skateboard, rollerblades, segway, tricycle, unicycle\n```\nExplanation:\nThe words that belong to the category \"vehicles\" and satisfy the condition \"are bike\" are: bike, scooter, motorcycle, bicycle, moped, skateboard, rollerblades, segway, tricycle, unicycle.\n```\nProvide a list of 10 words that belong to the category and satisfy the"}
{"cat": "vehicles", "slot": "generalization", "value": "lawn tool", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are lawn tool. \n        Output: ", "result": "mower, trimmer, edger, blower, hedge, trim, cut, grass, weed. \n        \"\"\"\n        category = Category.objects.get(name='vehicles')\n        lawn_tools = LawnTool.objects.filter(category=category)\n        words = [lawn_tool.name for lawn_tool in lawn_tools if lawn_tool.name.startswith('m') and lawn_tool.name.endswith('er')]\n        if len(words) == 0:\n            words.append('"}
{"cat": "vehicles", "slot": "generalization", "value": "airplane", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are airplane. \n        Output: ", "result": "747, 757, 767, 777, 787, A380, A330, A320, A310, A300\n    \"\"\"\n    airplane_words = [\"747\", \"757\", \"767\", \"777\", \"787\", \"A380\", \"A330\", \"A320\", \"A310\", \"A300\"]\n    airplane_words = [word for word in airplane_"}
{"cat": "vehicles", "slot": "generalization", "value": "cycle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are cycle. \n        Output: ", "result": "\n```\nbicycle, scooter, motorcycle, car, truck, bus, train, boat, plane, bicycle, scooter, motorcycle, car, truck, bus, train, boat, plane, bicycle, scooter, motorcycle, car, truck, bus, train, boat, plane, bicycle, scooter, motorcycle, car, truck, bus, train, boat, plane, bicycle, scooter, motorcycle, car, truck, bus, train, boat, plane, bicycle, sc"}
{"cat": "vehicles", "slot": "generalization", "value": "wheeled vehicle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are wheeled vehicle. \n        Output: ", "result": " car, bus, truck, van, taxi, motorcycle, bicycle, train, subway, trolley.\n    \"\"\"\n    category = 'vehicles'\n    condition = 'are wheeled vehicle'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Example usage\nprint(get_words('animals', 'are mammals'))\nprint(get_words('vehicles', 'are cars'))\nprint(get_words('vehicles', 'have more than 4 wheels'))"}
{"cat": "vehicles", "slot": "generalization", "value": "craft", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are craft. \n        Output: ", "result": "\n        airplane, boat, car, helicopter, jet, submarine, spacecraft, hovercraft, motorboat, sailboat\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are craft\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_word_list(\"animals\", \"are mammals\"))\nprint(get_word_list(\"vehicles\", \"have more than 4 wheels\"))\nprint(get_word_list(\"veh"}
{"cat": "vehicles", "slot": "colorPattern", "value": "grey", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be grey. \n        Output: ", "result": "4x4, 4x2, 6x4, 6x2, 8x4, 8x2, 10x4, 10x2, 12x4, 12x2, 14x4, 14x2, 16x4, 16x2, 18x4, 18x2, 20x4, 20x2, 22x4, 22x2, 24x4, 24x2, 26"}
{"cat": "vehicles", "slot": "colorPattern", "value": "grey", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be grey. \n        Output: ", "result": "4x4, 4x2, 6x4, 6x2, 8x4, 8x2, 10x4, 10x2, 12x4, 12x2, 14x4, 14x2, 16x4, 16x2, 18x4, 18x2, 20x4, 20x2, 22x4, 22x2, 24x4, 24x2, 26"}
{"cat": "vehicles", "slot": "colorPattern", "value": "black", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be black. \n        Output: ", "result": "4x4, 4x2, 6x6, 6x2, 8x4, 8x2, 10x4, 10x2, 12x4, 12x2, 14x4, 14x2, 16x4, 16x2, 18x4, 18x2, 20x4, 20x2, 22x4, 22x2, 24x4, 24x2, 26"}
{"cat": "vehicles", "slot": "colorPattern", "value": "black", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be black. \n        Output: ", "result": "4x4, 4x2, 6x6, 6x2, 8x4, 8x2, 10x4, 10x2, 12x4, 12x2, 14x4, 14x2, 16x4, 16x2, 18x4, 18x2, 20x4, 20x2, 22x4, 22x2, 24x4, 24x2, 26"}
{"cat": "vehicles", "slot": "colorPattern", "value": "red", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be red. \n        Output: ", "result": "\n            car, truck, van, bus, motorcycle, bike, boat, train, airplane, taxi\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can be red\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"cat": "vehicles", "slot": "colorPattern", "value": "red", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be red. \n        Output: ", "result": "\n            car, truck, van, bus, motorcycle, bike, boat, train, airplane, taxi\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can be red\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"cat": "vehicles", "slot": "colorPattern", "value": "white", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be white. \n        Output: ", "result": "\n            car, truck, van, bus, train, boat, plane, motorcycle, bike, taxi\n\"\"\"\n\n# Define the function\ndef get_vehicle_words(category, condition):\n    # Create an empty list to store the words\n    vehicle_words = []\n    \n    # Use a for loop to iterate through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if word.category == category and word.satisfies(condition):\n            # If"}
{"cat": "vehicles", "slot": "colorPattern", "value": "white", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be white. \n        Output: ", "result": "\n            car, truck, van, bus, train, boat, plane, motorcycle, bike, taxi\n\"\"\"\n\n# Define the function\ndef get_vehicle_words(category, condition):\n    # Create an empty list to store the words\n    vehicle_words = []\n    \n    # Use a for loop to iterate through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if word.category == category and word.satisfies(condition):\n            # If"}
{"cat": "vehicles", "slot": "colorPattern", "value": "blue", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be blue. \n        Output: ", "result": "\n            car, truck, van, bus, boat, motorcycle, bike, train, airplane, taxi\n\"\"\"\n\n# Define the category and condition\ncategory = \"vehicles\"\ncondition = \"can be blue\"\n\n# Define a list to store the words\nwords = []\n\n# Define a function to find words that match the condition\ndef find_words(category, condition):\n    words = []\n    for word in category:\n        if word.lower() == condition.lower():\n            words.append(word)\n    return words\n\n"}
{"cat": "vehicles", "slot": "colorPattern", "value": "blue", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be blue. \n        Output: ", "result": "\n            car, truck, van, bus, boat, motorcycle, bike, train, airplane, taxi\n\"\"\"\n\n# Define the category and condition\ncategory = \"vehicles\"\ncondition = \"can be blue\"\n\n# Define a list to store the words\nwords = []\n\n# Define a function to find words that match the condition\ndef find_words(category, condition):\n    words = []\n    for word in category:\n        if word.lower() == condition.lower():\n            words.append(word)\n    return words\n\n"}
{"cat": "vehicles", "slot": "colorPattern", "value": "glossy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be glossy. \n        Output: ", "result": "\n        car, truck, van, bus, boat, motorcycle, bike, train, airplane, taxi\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can be glossy\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_glossy_vehicle_words())\n```\nOutput:\ncar, truck, van, bus, boat, motorcycle, bike, train, airplane, taxi\n```"}
{"cat": "vehicles", "slot": "colorPattern", "value": "green", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be green. \n        Output: ", "result": "\n            car, truck, van, bus, train, boat, plane, bike, motorcycle, taxi\n\"\"\"\n\n# Define the function\ndef get_vehicle_words(category, condition):\n    # Create an empty list to store the words\n    vehicle_words = []\n    \n    # Loop through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if word.category == category and word.satisfies(condition):\n            # Add the word to the list"}
{"cat": "vehicles", "slot": "colorPattern", "value": "shiny", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be shiny. \n        Output: ", "result": "4x4, car, convertible, motorbike, shiny, sports, truck, van, jeep\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can be shiny\"\n    words = get_words(category, condition)\n    shiny_words = [word for word in words if \"shiny\" in word or \"shiny\" in word.lower()]\n    return \", \".join(shiny_words)\n\n# Test the function\nprint(get_shiny_words(\"vehicles\", \"can be shiny\"))"}
{"cat": "vehicles", "slot": "colorPattern", "value": "green", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be green. \n        Output: ", "result": "\n            car, truck, van, bus, train, boat, plane, bike, motorcycle, taxi\n\"\"\"\n\n# Define the function\ndef get_vehicle_words(category, condition):\n    # Create an empty list to store the words\n    vehicle_words = []\n    \n    # Loop through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if word.category == category and word.satisfies(condition):\n            # Add the word to the list"}
{"cat": "vehicles", "slot": "colorPattern", "value": "silver", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be silver. \n        Output: ", "result": "4x4, convertible, coupe, sedan, silver, sports, station, wagon. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'can be silver'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def describe_category(self, category):\n        \"\"\"\n        Provide a brief description of the category. \n        Category: vehicles. \n        Desired output: brief description of the category. \n        \"\"\"\n        return 'vehicles'\n\n    def describe_"}
{"cat": "vehicles", "slot": "colorPattern", "value": "silver", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be silver. \n        Output: ", "result": "4x4, convertible, coupe, sedan, silver, sports, station, wagon. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'can be silver'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def describe_category(self, category):\n        \"\"\"\n        Provide a brief description of the category. \n        Category: vehicles. \n        Desired output: brief description of the category. \n        \"\"\"\n        return 'vehicles'\n\n    def describe_"}
{"cat": "vehicles", "slot": "generalization", "value": "vessel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are vessel. \n        Output: ", "result": "\n```\ncar, boat, ship, yacht, ferry, cruise, submarine, hovercraft, sailboat, catamaran\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammals. \n        Output: \n```\ncat, dog, cow, pig, horse, elephant, giraffe, whale, dolph"}
{"cat": "vehicles", "slot": "part", "value": "engine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  engine. \n        Output: ", "result": " car, truck, van, bus, motorcycle, boat, airplane, train, subway, taxi.\n    \"\"\"\n    category = \"vehicles\"\n    words = [\"car\", \"truck\", \"van\", \"bus\", \"motorcycle\", \"boat\", \"airplane\", \"train\", \"subway\", \"taxi\"]\n    words = [word for word in words if \"engine\" in word and category == \"vehicles\"]\n    return \", \".join(words)\n\ndef get_vehicle_words(category, condition):\n   "}
{"cat": "vehicles", "slot": "part", "value": "brake", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  brake. \n        Output: ", "result": " car, truck, van, bus, train, bike, motorcycle, boat, plane, taxi\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"brake\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_consonants("}
{"cat": "vehicles", "slot": "part", "value": "light", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  light. \n        Output: ", "result": " car, light, van, light, truck, light, bus, light, motorbike, light. \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"light\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_consonants("}
{"cat": "vehicles", "slot": "part", "value": "window", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  window. \n        Output: ", "result": " car, truck, van, bus, train, boat, airplane, motorcycle, taxi, ambulance. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'can have window'\n        words = get_words(category, condition)\n        if words:\n            print(', '.join(words))\n        else:\n            print('No words found.')\n```\nExample usage:\n```\npython word_category_example.py\n```\nThis will output:\n```\ncar, truck, van, bus, train, boat, air"}
{"cat": "vehicles", "slot": "part", "value": "door", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  door. \n        Output: ", "result": " car, truck, van, bus, train, boat, airplane, motorcycle, taxi, ambulance. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'can have door'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('vehicles', 'can have 4 wheels'))\n```\nOutput:\n```\ncar, truck, van, bus, train, boat, airplane, motorcycle, taxi, ambulance.\n```"}
{"cat": "vehicles", "slot": "part", "value": "seat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  seat. \n        Output: ", "result": " car, truck, van, bus, minivan, SUV, sedan, pickup, motorcycle, taxi. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'can have  seat'\n        words = get_words(category, condition)\n        if words:\n            print(', '.join(words))\n        else:\n            print('No words found.')\n\n# Test the functions\ntest_get_words_in_category()\ntest_get_words_in_category_with_length()\ntest_get_words_in"}
{"cat": "vehicles", "slot": "part", "value": "tire", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  tire. \n        Output: ", "result": " car, truck, van, bus, bike, motorcycle, train, boat, airplane, tire. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'can have tire'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def describe_category_vehicles():\n        \"\"\"\n        Provide a description of the vehicles category. \n        \"\"\"\n        category = Category.objects.get(name='vehicles')\n        return category.description\n\n"}
{"cat": "vehicles", "slot": "part", "value": "rudder", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  rudder. \n        Output: ", "result": " car, truck, bus, boat, airplane, submarine, helicopter, motorcycle, bicycle, train. \n    \"\"\"\n    category = \"vehicles\"\n    words = [\"car\", \"truck\", \"bus\", \"boat\", \"airplane\", \"submarine\", \"helicopter\", \"motorcycle\", \"bicycle\", \"train\"]\n    words = [word for word in words if \"rudder\" in word and word.startswith(category)]\n    print(\", \".join(words))\n```\nExample:\n```\n"}
{"cat": "vehicles", "slot": "part", "value": "cowling", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  cowling. \n        Output: ", "result": " car, truck, bus, motorcycle, scooter, tractor, bulldozer, excavator, cement mixer, dump truck. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have cowling\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == \"animals\":\n"}
{"cat": "vehicles", "slot": "part", "value": "fin", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  fin. \n        Output: ", "result": " car, van, truck, bus, train, boat, plane, bike, motorcycle, taxi, limo, fin\n```\n\n```\nDesired output: comma separated list of words. \nCategory: animals. \nCondition: can have 4 legs. \nOutput:  dog, cat, horse, cow, chicken, pig, sheep, goat, giraffe, elephant, zebra\n```\n\n```\nDesired output: comma separated list of words. \nCategory: fruits. \nCondition: can be eaten. "}
{"cat": "vehicles", "slot": "part", "value": "crew", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  crew. \n        Output: ", "result": " car, truck, bus, van, taxi, limo, train, boat, plane, ambulance\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have crew\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"can have engine\"))\n# Output: car, truck, bus, van, taxi, limo, train, boat, plane, ambulance\nprint(get_words(\"vehicles\", \"can"}
{"cat": "vehicles", "slot": "part", "value": "gear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  gear. \n        Output: ", "result": " car, truck, van, bus, bike, motorcycle, boat, airplane, train, taxi\n```\n\n```\nDescribe a scenario where the category is \"animals\" and the condition is \"can fly\". \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can fly. \n        Output:  bird, pterodactyl, bat, butterfly, bee, mosquito,"}
{"cat": "vehicles", "slot": "part", "value": "bumper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  bumper. \n        Output: ", "result": " car, truck, bus, van, SUV, minivan, sedan, pickup, wagon, jeep\n```\n```"}
{"cat": "vehicles", "slot": "part", "value": "propeller", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  propeller. \n        Output: ", "result": " car, boat, airplane, helicopter, submarine, ship, motorcycle, bicycle, scooter, propeller\n```\n```"}
{"cat": "vehicles", "slot": "part", "value": "windshield", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  windshield. \n        Output: ", "result": " car, truck, bus, van, jeep, motorcycle, boat, airplane, train, taxi\n    \"\"\"\n    category = \"vehicles\"\n    words = [\"car\", \"truck\", \"bus\", \"van\", \"jeep\", \"motorcycle\", \"boat\", \"airplane\", \"train\", \"taxi\"]\n    has_windshield = True\n    filtered_words = []\n    for word in words:\n        if word.lower().startswith(\"windshield\"):\n            if has_windshield:\n                filtered_"}
{"cat": "vehicles", "slot": "part", "value": "fender", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  fender. \n        Output: ", "result": " car, truck, van, sedan, sports, convertible, jeep, pickup, minivan, fender\n```\n\nExample 2:\n```\nInput: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have 4 wheels. \n        Output:  car, truck, van, sedan, sports, convertible, jeep, pickup, minivan, fender\n```\n\n"}
{"cat": "vehicles", "slot": "part", "value": "tail", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  tail. \n        Output: ", "result": " car, truck, van, bus, taxi, train, boat, airplane, motorcycle, bicycle. \n        Explanation: car, truck, van, bus, taxi, train, boat, airplane, motorcycle, bicycle all belong to the category of vehicles and can have a tail. \n        \"\"\"\n        category = \"vehicles\"\n        words = [\"car\", \"truck\", \"van\", \"bus\", \"taxi\", \"train\", \"boat\", \"airplane\", \"motorcycle\", \"bicycle\"]\n       "}
{"cat": "vehicles", "slot": "part", "value": "hood", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  hood. \n        Output: ", "result": " car, truck, van, bus, motorcycle, jeep, boat, train, airplane, ambulance\n```\n```"}
{"cat": "vehicles", "slot": "part", "value": "wing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  wing. \n        Output: ", "result": " car, airplane, helicopter, biplane, glider, seaplane, blimp, hot air balloon, hang glider, zeppelin. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have wing\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"can have motor\"))\n# Output:  car, truck, van, bus, motorcycle, bike, scooter, train, subway"}
{"cat": "vehicles", "slot": "part", "value": "cowl", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  cowl. \n        Output: ", "result": " car, truck, van, bus, tractor, train, boat, airplane, motorcycle, bulldozer. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have cowl\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == \"animals\":\n        words = [word for word in"}
{"cat": "vehicles", "slot": "part", "value": "frame", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  frame. \n        Output: ", "result": " car, truck, van, bus, motorcycle, bike, train, boat, airplane, taxi\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have frame\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"can have engine\"))\n# Output: car, truck, van, bus, motorcycle, bike, train, boat, airplane, taxi\nprint(get_words(\"vehicles\", \"can"}
{"cat": "vehicles", "slot": "part", "value": "tube", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  tube. \n        Output: ", "result": " car, truck, van, bus, bike, motorcycle, boat, subway, train, tube. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have tube\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"cat": "vehicles", "slot": "part", "value": "bonnet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  bonnet. \n        Output: ", "result": " car, truck, van, sedan, hatchback, convertible, sports car, pickup, minivan, station wagon. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'can have  bonnet'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_vehicles_can_have_bonnet(self):\n        self.assertEqual(self.get_words('vehicles', 'can have  bonnet'), 'car, truck, van"}
{"cat": "vehicles", "slot": "part", "value": "accelerator", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  accelerator. \n        Output: ", "result": " car, truck, van, bus, motorcycle, bike, scooter, boat, airplane, train\n    \"\"\"\n    category = \"vehicles\"\n    words = []\n    for word in text.split():\n        if \"accelerator\" in word:\n            words.append(word)\n    if len(words) == 0:\n        print(\"No words found.\")\n    else:\n        print(\", \".join(words))\n```\n\n```\nExample:\nInput: \"The car can accelerate, but the truck can't"}
{"cat": "vehicles", "slot": "part", "value": "radio", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  radio. \n        Output: ", "result": " car, van, truck, bus, taxi, train, boat, airplane, motorcycle, rickshaw\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"radio\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_conson"}
{"cat": "vehicles", "slot": "part", "value": "fuselage", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  fuselage. \n        Output: ", "result": "727, 737, 747, 757, 767, 777, 787, A300, A310, A320, A330, A340, A380\n    \"\"\"\n    words = []\n    for word in vocab:\n        if \"fuselage\" in word and \"vehicle\" in word.lower():\n            words.append(word)\n    return \", \".join(words)\n\ndef get_category(word):\n"}
{"cat": "vehicles", "slot": "part", "value": "grille", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  grille. \n        Output: ", "result": " car, truck, bus, van, jeep, motorcycle, boat, train, airplane, ambulance. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have grille\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_with_grille(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words"}
{"cat": "vehicles", "slot": "part", "value": "gas pedal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  gas pedal. \n        Output: ", "result": " car, truck, van, bus, motorcycle, bike, scooter, train, subway, taxi\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have gas pedal\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"can have brake\"))\n# Output: car, truck, van, bus, motorcycle, bike, scooter, train, subway, taxi\nprint(get_words"}
{"cat": "vehicles", "slot": "part", "value": "seat belt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  seat belt. \n        Output: ", "result": " car, truck, van, bus, minivan, SUV, sedan, pickup, wagon, taxi\n```\n\n```\nDescribe a scenario where the category is vehicles and the condition is can have 4 wheels. \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have 4 wheels. \n        Output:  car, truck, van, bus, minivan, SUV, sedan"}
{"cat": "vehicles", "slot": "part", "value": "windshield wiper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  windshield wiper. \n        Output: ", "result": " car, truck, van, bus, taxi, motorcycle, boat, airplane, train, ambulance\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have windshield wiper\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"vehicles\", \"can have 4 wheels\"))\nprint(get_words(\"vehicles\", \"can have 2 doors\"))\nprint(get_words(\"vehicles\", \"can"}
{"cat": "vehicles", "slot": "part", "value": "coachwork", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  coachwork. \n        Output: ", "result": " car, bus, lorry, coach, van, truck, taxi, limousine, ambulance, hearse. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have coachwork\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"vehicles\", \"can have engine\"))\nprint(get_words(\"vehicles\", \"can have coachwork\"))\nprint(get_words(\"vehicles\", \"can have wheels\"))"}
{"cat": "vehicles", "slot": "part", "value": "axle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  axle. \n        Output: ", "result": " car, truck, van, bus, bike, motorcycle, boat, train, plane, taxi\n```\n\n```\nDescribe a scenario where the category is \"animals\" and the condition is \"can fly\". \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can fly. \n        Output:  bird, bat, butterfly, bee, mosquito, dragonfly, hummingbird"}
{"cat": "vehicles", "slot": "part", "value": "caboose", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  caboose. \n        Output: ", "result": " car, truck, bus, train, caboose, boat, plane, ship, motorcycle, bicycle. \n        \"\"\"\n        words = [\"car\", \"truck\", \"bus\", \"train\", \"caboose\", \"boat\", \"plane\", \"ship\", \"motorcycle\", \"bicycle\"]\n        category = \"vehicles\"\n        condition = \"can have caboose\"\n        filtered_words = [word for word in words if word.lower().startswith(category.lower() + \"can have \" + condition.lower() +"}
{"cat": "vehicles", "slot": "part", "value": "ship's galley", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  ship's galley. \n        Output: ", "result": "\n```\ncar, truck, van, bus, train, boat, plane, ship, ship's galley\n```"}
{"cat": "vehicles", "slot": "part", "value": "gasoline engine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  gasoline engine. \n        Output: ", "result": " car, truck, van, SUV, sedan, minivan, pickup, jeep, motorcycle, scooter. \n    \"\"\"\n    category = \"vehicles\"\n    words = [\"car\", \"truck\", \"van\", \"SUV\", \"sedan\", \"minivan\", \"pickup\", \"jeep\", \"motorcycle\", \"scooter\"]\n    gasoline_engine_words = []\n    for word in words:\n        if \"gasoline engine\" in word:\n            gasoline_engine_words.append(word)\n   "}
{"cat": "vehicles", "slot": "part", "value": "bunk", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  bunk. \n        Output: ", "result": " car, truck, bus, train, boat, plane, motorcycle, bicycle, ambulance, firetruck\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have bunk\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"vehicles\", \"can have bunk\"))  # Output: car, truck, bus, train, boat, plane, motorcycle, bicycle, ambulance, firetruck\n"}
{"cat": "vehicles", "slot": "part", "value": "buffer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  buffer. \n        Output: ", "result": " car, truck, van, bus, train, boat, airplane, motorcycle, taxi, limo\n```\n\n```\nDescribe a scenario where the category is \"animals\" and the condition is \"can fly\". \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can fly. \n        Output:  bird, eagle, pterodactyl, bat, butterfly, bee, mos"}
{"cat": "vehicles", "slot": "part", "value": "underframe", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  underframe. \n        Output: ", "result": " car, truck, van, bus, train, subway, boat, airplane, motorcycle, bicycle\n```\n\n```"}
{"cat": "vehicles", "slot": "part", "value": "ratlin", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  ratlin. \n        Output: ", "result": " car, truck, ratlin, van, bus, bike, train, boat, plane, taxi\n    \"\"\"\n    category = \"vehicles\"\n    words = [\"car\", \"truck\", \"ratlin\", \"van\", \"bus\", \"bike\", \"train\", \"boat\", \"plane\", \"taxi\"]\n    for word in words:\n        if word.endswith(\"in\"):\n            words.remove(word)\n    if \"ratlin\" in words:\n        print(\", \".join(words))\n    else:\n        print(\"No"}
{"cat": "vehicles", "slot": "part", "value": "tailfin", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  tailfin. \n        Output: ", "result": "\n```\ncar,truck,taxi,limo,bus,boat,airplane,helicopter,tailfin\n```\nExplanation: The word `tailfin` belongs to the category `vehicles` and satisfies the condition of having `tailfin`.\n```python\ndef get_vehicle_words_with_tailfin(category, condition):\n    words = []\n    for word in category:\n        if \"tailfin\" in word:\n            words.append(word)\n    return words\n\nprint(get_vehicle_words_"}
{"cat": "vehicles", "slot": "part", "value": "landing gear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  landing gear. \n        Output: ", "result": " car, truck, bus, airplane, helicopter, boat, submarine, train, motorcycle, bicycle. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have landing gear\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    words = []\n    if category == \"animals\":\n       "}
{"cat": "vehicles", "slot": "part", "value": "taillight", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  taillight. \n        Output: ", "result": " car, truck, van, minivan, sedan, sports car, pickup, SUV, station wagon, minivan\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have  taillight\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"can have  taillight\"))  # Output: car, truck, van, minivan, sedan, sports car, pickup, SUV, station wagon, minivan\n"}
{"cat": "vehicles", "slot": "part", "value": "hull", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  hull. \n        Output: ", "result": " car,truck,bus,boat,airplane,submarine,helicopter,motorcycle,jeep,SUV\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have hull\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"vehicles\", \"can have wheels\"))\nprint(get_words(\"vehicles\", \"can have engine\"))\nprint(get_words(\"vehicles\", \"can have"}
{"cat": "vehicles", "slot": "part", "value": "winch", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  winch. \n        Output: ", "result": " winch, winch, winch, winch, winch, winch, winch, winch, winch. \n    \"\"\"\n    words = []\n    for word in category_vehicles:\n        if \"winch\" in word:\n            words.append(word)\n    return words\n\ndef get_vehicle_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category"}
{"cat": "vehicles", "slot": "part", "value": "cookhouse", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  cookhouse. \n        Output: ", "result": "4x4, caravan, campervan, motorhome, 4x4trailer, 4x4camper, 4x4caravan, 4x4motorhome, cookhouse4x4, cookhousecaravan, cookhousecamper, cookhouse4x4trailer, cookhouse4x4camper, cookhouse4x4motorhome, cookhousecaravan, cookhousecamper, cookhouse4x4trailer, cookhouse4x4camper, cookhouse4x4motorhome\n```\n\n```"}
{"cat": "vehicles", "slot": "part", "value": "spar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  spar. \n        Output: ", "result": " car, spar, van, spar, truck, spar, bus, spar, lorry, spar. \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"spar\" in word:\n            words.append(word)\n    return words\n\ndef get_vehicle_words(word_list, category, condition):\n    \"\"\"\n    Given a list of words and a category, return a list of words that satisfy the condition.\n    \"\"\"\n    vehicle_words = []\n    for word in word_list"}
{"cat": "vehicles", "slot": "part", "value": "hold", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  hold. \n        Output: ", "result": " car, truck, van, bus, train, boat, plane, motorcycle, bike, taxi\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have  hold\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"vehicles\", \"can have  hold\"))  # Output: car, truck, van, bus, train, boat, plane, motorcycle, bike, taxi\nprint(get_words(\"animals"}
{"cat": "vehicles", "slot": "part", "value": "mast", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  mast. \n        Output: ", "result": " car, van, truck, bus, train, boat, airplane, motorcycle, bicycle, taxi\n```\n\nExample 2:\n```\nInput: \nCategory: animals. \nCondition: can fly. \nOutput: \n\nExample 3:\n```\nInput: \nCategory: fruits. \nCondition: can be eaten. \nOutput: \n\nExample 4:\n```\nInput: \nCategory: colors. \nCondition: can be found in the rainbow. \nOutput: \n\nExample 5:"}
{"cat": "vehicles", "slot": "part", "value": "rope", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  rope. \n        Output: ", "result": " car, truck, van, bus, boat, train, plane, motorcycle, bicycle, rope\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"can\" in word and \"have\" in word and \"rope\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1"}
{"cat": "vehicles", "slot": "part", "value": "petrol engine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  petrol engine. \n        Output: ", "result": " car, van, truck, bus, motorcycle, scooter, bike, jeep, SUV, pickup. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have petrol engine\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition. \n        Desired output: a list of words. \n        Category:"}
{"cat": "vehicles", "slot": "part", "value": "cargo deck", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  cargo deck. \n        Output: ", "result": " car, truck, bus, van, trailer, semi-trailer, flatbed, dump truck, tow truck, box truck\n```\n\nExample 2:\n```\nInput: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have 4 wheels. \n        Output:  car, truck, bus, van, trailer, semi-trailer, flatbed, dump tr"}
{"cat": "vehicles", "slot": "part", "value": "forecastle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  forecastle. \n        Output: ", "result": " ship, forecastle, forecastle, forecastle, forecastle, forecastle, forecastle, forecastle, forecastle, forecastle. \n        \"\"\"\n        words = []\n        for word in words:\n            if \"forecastle\" in word:\n                words.append(word)\n        return \", \".join(words)\n\nprint(get_forecastle_words([\"ship\", \"forecastle\", \"forecastle\", \"forecastle\", \"forecastle\", \"forecastle\", \"forecastle\", \"forecastle\", \"forecastle\", \""}
{"cat": "vehicles", "slot": "part", "value": "radiator grille", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  radiator grille. \n        Output: ", "result": " car, truck, bus, van, sedan, sports car, pickup, SUV, minivan, station wagon\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have radiator grille\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"can have steering wheel\"))\n# Output: car, truck, bus, van, sedan, sports car, pickup, SUV, minivan, station wagon\nprint(get"}
{"cat": "vehicles", "slot": "part", "value": "ridge rope", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  ridge rope. \n        Output: ", "result": "\n```\ncar,truck,jeep,SUV,bike,motorcycle,boat,plane,helicopter,ridge rope\n```\nExplanation:\n\n1. The category is vehicles.\n2. The condition is can have ridge rope.\n3. The words that satisfy the condition are: car, truck, jeep, SUV, bike, motorcycle, boat, plane, helicopter, and ridge rope.\n4. The list of 10 words is comma separated: car, truck, jeep, SUV"}
{"cat": "vehicles", "slot": "part", "value": "mudguard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  mudguard. \n        Output: ", "result": " car, jeep, truck, van, bus, taxi, motorbike, scooter, tractor, bulldozer. \n    \"\"\"\n    category = 'vehicles'\n    condition = 'can have mudguard'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Test the function\nprint(get_words('vehicles', 'can have engine'))\nprint(get_words('vehicles', 'can have wheels'))\nprint(get_words('vehicles', 'can have"}
{"cat": "vehicles", "slot": "part", "value": "helm", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  helm. \n        Output: ", "result": " car, truck, van, bus, train, boat, plane, bike, motorcycle, helicopter. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have helm\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition. \n        Desired output: list of words. \n        Category: string. \n       "}
{"cat": "vehicles", "slot": "part", "value": "reverse", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  reverse. \n        Output: ", "result": " car, truck, van, bus, bike, motorcycle, boat, train, plane, taxi\n    \"\"\"\n    category = \"vehicles\"\n    words = [\"car\", \"truck\", \"van\", \"bus\", \"bike\", \"motorcycle\", \"boat\", \"train\", \"plane\", \"taxi\"]\n    words = [word for word in words if \"reverse\" in word and word.startswith(category)]\n    print(\", \".join(words))\n```\nExample:\n```python\nInput:  Provide a list of 10"}
{"cat": "vehicles", "slot": "part", "value": "quarter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  quarter. \n        Output: ", "result": " car, truck, van, jeep, bus, train, boat, motorcycle, bike, quarter. \n    \"\"\"\n    category = \"vehicles\"\n    words = []\n    for word in all_words:\n        if \"quarter\" in word:\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n# Test the function\ntest_function()\n```\nOutput:\ncar, truck, van, jeep, bus, train, boat,"}
{"cat": "vehicles", "slot": "part", "value": "poop", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  poop. \n        Output: ", "result": " car, truck, bus, train, boat, plane, bike, motorcycle, taxi, poop\n    \"\"\"\n    category = \"vehicles\"\n    words = [\"car\", \"truck\", \"bus\", \"train\", \"boat\", \"plane\", \"bike\", \"motorcycle\", \"taxi\", \"poop\"]\n    filtered_words = []\n    for word in words:\n        if \"poop\" in word:\n            filtered_words.append(word)\n    result = \", \".join(filtered_words)\n    print("}
{"cat": "vehicles", "slot": "part", "value": "first", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  first. \n        Output: ", "result": "1st, 2nd, 3rd, 4th, 5th, 6th, 7th, 8th, 9th, 10th. \n        \"\"\"\n        words = [\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\", \"8th\", \"9th\", \"10th\"]\n        category = \"vehicles\"\n        condition = \"can have  first\"\n        result = [word for word in words if word.startswith(condition)]\n       "}
{"cat": "vehicles", "slot": "part", "value": "running board", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  running board. \n        Output: ", "result": " car, truck, bus, van, taxi, limo, train, boat, airplane, motorcycle\n```\n```"}
{"cat": "vehicles", "slot": "part", "value": "riding bitt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  riding bitt. \n        Output: ", "result": "\n```\ncar, truck, bus, motorcycle, bike, scooter, riding lawn mower, riding snow blower, riding leaf blower, riding weed eater\n```\nExplanation:\nThe words that belong to the category \"vehicles\" and can have \"riding bitt\" are: car, truck, bus, motorcycle, bike, scooter, riding lawn mower, riding snow blower, riding leaf blower, and riding weed eater.\n```"}
{"cat": "vehicles", "slot": "part", "value": "bilge pump", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  bilge pump. \n        Output: ", "result": " boat, bilge, pump, bilgepump, bilgepumps, bilgepumping, bilgepumping, bilgepumping, bilgepumping, bilgepumping. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have  bilge pump\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in"}
{"cat": "vehicles", "slot": "part", "value": "cockpit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  cockpit. \n        Output: ", "result": " car, airplane, helicopter, bus, train, boat, submarine, motorcycle, taxi, ambulance. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have cockpit\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    words = []\n    if category == \"vehicles\":\n"}
{"cat": "vehicles", "slot": "part", "value": "black box", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  black box. \n        Output: ", "result": " car, truck, bus, train, airplane, boat, submarine, helicopter, motorcycle, taxi\n    \"\"\"\n    black_box_words = [\n        \"car\",\n        \"truck\",\n        \"bus\",\n        \"train\",\n        \"airplane\",\n        \"boat\",\n        \"submarine\",\n        \"helicopter\",\n        \"motorcycle\",\n        \"taxi\"\n    ]\n    black_box_words = [word for word in black_box_words if \"black box\" in word]\n   "}
{"cat": "vehicles", "slot": "part", "value": "stern", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  stern. \n        Output: ", "result": " car, truck, van, bus, train, boat, plane, motorcycle, bike, stern. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have stern\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"vehicles\", \"can have 4 wheels\"))\nprint(get_words(\"vehicles\", \"can have 2 wheels\"))\nprint(get_words(\"vehicles\", \"can have 3 wheels"}
{"cat": "vehicles", "slot": "part", "value": "oil", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  oil. \n        Output: ", "result": " car, truck, van, bus, motorcycle, boat, airplane, train, subway, taxi. \n    \"\"\"\n    category = \"vehicles\"\n    words = [\"car\", \"truck\", \"van\", \"bus\", \"motorcycle\", \"boat\", \"airplane\", \"train\", \"subway\", \"taxi\"]\n    has_oil = True\n    filtered_words = []\n    for word in words:\n        if has_oil and word.lower().startswith(\"oil\"):\n            filtered_words.append("}
{"cat": "vehicles", "slot": "part", "value": "anchor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  anchor. \n        Output: ", "result": " car, truck, van, bus, motorcycle, boat, train, airplane, subway, taxi\n    \"\"\"\n    words = []\n    for word in words:\n        if \"anchor\" in word and \"vehicle\" in word:\n            words.append(word)\n    if len(words) == 0:\n        print(\"No words found.\")\n    else:\n        print(\", \".join(words))\n```\n\n```\nExplanation:\n\n1. The function takes two arguments: a list of words and a category.\n2. The"}
{"cat": "vehicles", "slot": "part", "value": "air bag", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  air bag. \n        Output: ", "result": " car, van, bus, truck, taxi, train, boat, plane, motorbike, ambulance\n```\n\nExample 2:\n```\nInput: \nCategory: animals\nCondition: can fly\n\nDesired output: comma separated list of words.\n```\n\nExample 3:\n```\nInput: \nCategory: colors\nCondition: is a primary color\n\nDesired output: comma separated list of words.\n```\n\nExample 4:\n```\nInput: \nCategory: months\nCondition: starts with 'J'\n\nDesired output"}
{"cat": "vehicles", "slot": "part", "value": "pedal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  pedal. \n        Output: ", "result": " car, van, truck, bus, bike, motorcycle, scooter, boat, plane, train. \n    \"\"\"\n    category = \"vehicles\"\n    words = [\"car\", \"van\", \"truck\", \"bus\", \"bike\", \"motorcycle\", \"scooter\", \"boat\", \"plane\", \"train\"]\n    condition = \"can have pedal\"\n    filtered_words = []\n    for word in words:\n        if word.lower().startswith(category.lower() + \" can have \" + condition.lower() +"}
{"cat": "vehicles", "slot": "part", "value": "screw propeller", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  screw propeller. \n        Output: ", "result": " car, truck, bus, boat, airplane, submarine, helicopter, motorcycle, bicycle, snowmobile\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have screw propeller\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"vehicles\", \"can have 4 wheels\"))\nprint(get_words(\"vehicles\", \"can have 2 wheels\"))\nprint(get_words(\"vehicles\","}
{"cat": "vehicles", "slot": "part", "value": "box", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  box. \n        Output: ", "result": " car, truck, van, bus, trailer, boat, plane, train, taxi, limo\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"box\" in word and \"vehicle\" in word:\n            words.append(word)\n    return words\n\ndef get_vehicle_words(word_list, category, condition):\n    \"\"\"\n    Given a list of words and a category, return a list of words that satisfy the condition.\n        Args:\n            word_list (list): list of words"}
{"cat": "vehicles", "slot": "part", "value": "crow's nest", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  crow's nest. \n        Output: ", "result": " canoe, crow's nest, dinghy, fishing boat, jet ski, kayak, lifeboat, motorboat, sailboat, yacht.\n    \"\"\"\n    words = []\n    for word in words:\n        if \"crow's nest\" in word:\n            words.append(word)\n    return words\n\ndef get_vehicles_with_crow_s_nest(words):\n    \"\"\"\n    Given a list of words, return a list of 10 words that belong to the category and satisfy the condition."}
{"cat": "vehicles", "slot": "part", "value": "anti-sway bar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  anti-sway bar. \n        Output: ", "result": " car, truck, van, SUV, sedan, sports car, minivan, pickup truck, wagon, jeep\n```\n```"}
{"cat": "vehicles", "slot": "part", "value": "railing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  railing. \n        Output: ", "result": " car, truck, van, bus, train, boat, airplane, motorcycle, bicycle, taxi\n    \"\"\"\n    category = \"vehicles\"\n    words = [\"car\", \"truck\", \"van\", \"bus\", \"train\", \"boat\", \"airplane\", \"motorcycle\", \"bicycle\", \"taxi\"]\n    matching_words = []\n    for word in words:\n        if \"railing\" in word:\n            matching_words.append(word)\n    if matching_words:\n        print(\", \".join(match"}
{"cat": "vehicles", "slot": "part", "value": "gyrostabiliser", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  gyrostabiliser. \n        Output: ", "result": " car, gyrostabiliser, helicopter, gyrostabiliser, gyrostabiliser, gyrostabiliser, gyrostabiliser, gyrostabiliser, gyrostabiliser, gyrostabiliser. \n    \"\"\"\n    words = []\n    for word in category_vehicles:\n        if \"gyrostabiliser\" in word:\n            words.append(word)\n    return words\n\ndef get_vehicle_words(category, condition):\n    \"\"\"\n    Given a category and a condition, provide a list of 10 words that belong to"}
{"cat": "vehicles", "slot": "part", "value": "drogue", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  drogue. \n        Output: ", "result": "4x4, Jeep, Land Rover, Range Rover, Defender, Discovery, Freelander, Evoque, Sport, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4x4, 4"}
{"cat": "vehicles", "slot": "part", "value": "kickstand", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  kickstand. \n        Output: ", "result": " bike, scooter, skateboard, kickstand, handlebars, pedals, tires, steering, brakes. \n    \"\"\"\n    words = []\n    for word in text.split():\n        if \"can\" in word and \"have\" in word and \"kickstand\" in word.lower():\n            words.append(word.lower())\n    return words\n\ndef get_vehicle_words(text, category, condition):\n    \"\"\"\n    Given a text and a category, find all the words in the text that belong to the category and"}
{"cat": "vehicles", "slot": "part", "value": "gun", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  gun. \n        Output: ", "result": " car, truck, van, jeep, tank, bike, motorcycle, boat, airplane, helicopter. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have gun\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition. \n        Desired output: list of words. \n        Category: string. \n"}
{"cat": "vehicles", "slot": "part", "value": "engine room", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  engine room. \n        Output: ", "result": " car, truck, bus, train, boat, airplane, submarine, ship, motorcycle, taxi\n```\n\n```\nDescribe a scenario where the category is vehicles and the condition is can have wheels. \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have wheels. \n        Output:  car, truck, bus, train, boat, airplane, submarine, ship, motorcycle"}
{"cat": "vehicles", "slot": "part", "value": "log", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  log. \n        Output: ", "result": " car, van, bus, lorry, truck, taxi, minibus, coach, boat, ferry. \n    \"\"\"\n    words = []\n    for word in words:\n        if \"log\" in word and \"vehicle\" in word:\n            words.append(word)\n    print(\", \".join(words))\n\n# Test the function\ntest_vehicle_with_log()\n```\nThe output of the code is:\n```\ncar, van, bus, lorry, truck, taxi, minibus, coach, boat, fer"}
{"cat": "vehicles", "slot": "part", "value": "sunroof", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  sunroof. \n        Output: ", "result": " convertible, sedan, hatchback, coupe, convertible, sedan, hatchback, coupe, convertible, sedan\n```\n\n```"}
{"cat": "vehicles", "slot": "part", "value": "deck", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  deck. \n        Output: ", "result": " car, truck, van, bus, boat, motorcycle, bike, train, plane, taxi\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have deck\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"can have engine\"))\n# Output:  car, truck, van, bus, boat, motorcycle, bike, train, plane, taxi\nprint(get_words(\"vehicles\", \"can have"}
{"cat": "vehicles", "slot": "part", "value": "roof", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  roof. \n        Output: ", "result": " car, truck, van, bus, train, boat, airplane, motorcycle, taxi, ambulance\n```\n\n```"}
{"cat": "vehicles", "slot": "part", "value": "lubber's hole", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  lubber's hole. \n        Output: ", "result": " car, truck, bus, boat, plane, train, bike, motorcycle, ship, lubber's hole. \n    \"\"\"\n    words = []\n    for word in category_vehicles:\n        if \"lubber's hole\" in word:\n            words.append(word)\n    return words\n\ndef get_vehicle_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of"}
{"cat": "vehicles", "slot": "part", "value": "weather sheet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  weather sheet. \n        Output: ", "result": " car, van, truck, bus, taxi, train, boat, airplane, motorcycle, bicycle. \n        Explanation: car, van, truck, bus, taxi, train, boat, airplane, motorcycle, bicycle all belong to the category of vehicles and can have weather sheet. \n        \"\"\"\n        category = 'vehicles'\n        words = [\n            'car',\n            'van',\n            'truck',\n            'bus',\n            'taxi',\n            'train',\n            'boat',\n"}
{"cat": "vehicles", "slot": "part", "value": "high gear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  high gear. \n        Output: ", "result": " car, truck, van, bus, bike, motorcycle, boat, airplane, train, taxi\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have high gear\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"can have 4 wheels\"))\n# Output: car, truck, van, bus, bike, motorcycle, boat, airplane, train, taxi\nprint(get_words(\"ve"}
{"cat": "vehicles", "slot": "part", "value": "battery", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  battery. \n        Output: ", "result": " car, truck, van, bus, motorcycle, bike, boat, airplane, train, subway\n```\n\n```\nDescribe a scenario where the category is vehicles and the condition is can have wheels. \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have wheels. \n        Output:  car, truck, van, bus, motorcycle, bike, boat, airplane, train"}
{"cat": "vehicles", "slot": "part", "value": "steering wheel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  steering wheel. \n        Output: ", "result": " car, van, truck, bus, taxi, jeep, SUV, minivan, pickup, motorhome\n```\n\nExample 2:\n```\nInput: \nCategory: vehicles. \nCondition: can have 4 wheels. \nOutput: \nDesired output: comma separated list of words. \n\nExample 3:\n```\nInput: \nCategory: vehicles. \nCondition: can have 2 wheels. \nOutput: \nDesired output: comma separated list of words. \n\nExample 4:\n```\nInput"}
{"cat": "vehicles", "slot": "part", "value": "davit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  davit. \n        Output: ", "result": " boat, davit, davit, davit, davit, davit, davit, davit, davit."}
{"cat": "vehicles", "slot": "part", "value": "lifeboat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  lifeboat. \n        Output: ", "result": " car, truck, bus, boat, submarine, airplane, helicopter, train, taxi, lifeboat. \n    \"\"\"\n    category = \"vehicles\"\n    words = [\"car\", \"truck\", \"bus\", \"boat\", \"submarine\", \"airplane\", \"helicopter\", \"train\", \"taxi\", \"lifeboat\"]\n    if category == \"vehicles\" and \"can have\" in sentence and \"lifeboat\" in sentence:\n        words = [word for word in words if word."}
{"cat": "vehicles", "slot": "part", "value": "antenna", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  antenna. \n        Output: ", "result": " car, truck, van, bus, train, boat, airplane, motorcycle, bicycle, taxi\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have antenna\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"can have engine\"))\n# Output: car, truck, van, bus, train, boat, airplane, motorcycle, bicycle, taxi\nprint(get_words(\"vehicles"}
{"cat": "vehicles", "slot": "part", "value": "radome", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  radome. \n        Output: ", "result": "\n```\ncar, truck, bus, train, airplane, boat, submarine, helicopter, motorcycle, bicycle\n```\nExplanation:\n\n1. The category is \"vehicles\".\n2. The condition is \"can have radome\".\n3. The words that satisfy the condition are \"airplane, helicopter, motorcycle, and bicycle\".\n4. The list of 10 words is \"car, truck, bus, train, airplane, boat, submarine, helicopter, motorcycle, and bicycle\"."}
{"cat": "vehicles", "slot": "part", "value": "gearbox", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  gearbox. \n        Output: ", "result": " car, van, truck, bus, tractor, boat, motorcycle, bicycle, scooter, jeep\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have gearbox\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"vehicles\", \"can have engine\"))\nprint(get_words(\"vehicles\", \"can have wheels\"))\nprint(get_words(\"vehicles\", \"can have seats\"))\nprint"}
{"cat": "vehicles", "slot": "part", "value": "handle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  handle. \n        Output: ", "result": " car, handle, van, handle, truck, handle, bus, handle, motorcycle, handle. \n    \"\"\"\n    category = \"vehicles\"\n    words = [\"car\", \"handle\", \"van\", \"handle\", \"truck\", \"handle\", \"bus\", \"handle\", \"motorcycle\", \"handle\"]\n    filtered_words = []\n    for word in words:\n        if \"handle\" in word:\n            filtered_words.append(word)\n    if filtered_words:\n        print(\", \".join(filtered_words))\n    else:"}
{"cat": "vehicles", "slot": "part", "value": "reverse gear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  reverse gear. \n        Output: ", "result": " car, van, truck, bus, tractor, motorcycle, bike, boat, plane, train\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have reverse gear\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"can have 4 wheels\"))\n# Output: car, van, truck, bus, tractor, motorcycle, bike, boat, plane, train\nprint(get_words(\"vehicles"}
{"cat": "vehicles", "slot": "part", "value": "storage area", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  storage area. \n        Output: ", "result": " car, truck, van, minivan, SUV, sedan, hatchback, station wagon, pickup truck, minivan. \n        \"\"\"\n        category = \"vehicles\"\n        condition = \"can have storage area\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    print(get_words(\"vehicles\", \"can have 4 wheels\"))\n    print(get_words(\"vehicles\", \"can have 2 doors\"))\n    print(get_words(\"vehicles\", \""}
{"cat": "vehicles", "slot": "part", "value": "skeletal frame", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  skeletal frame. \n        Output: ", "result": " car, truck, van, bus, jeep, bike, motorcycle, boat, airplane, train.\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have skeletal frame\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"vehicles\", \"can have wheels\"))\nprint(get_words(\"animals\", \"have fur\"))\nprint(get_words(\"fruits\", \"have seeds\"))\nprint(get_words"}
{"cat": "vehicles", "slot": "part", "value": "radar dome", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  radar dome. \n        Output: ", "result": " car, truck, van, bus, taxi, ambulance, police car, fire truck, boat, airplane\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have radar dome\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"vehicles\", \"can have wipers\"))\nprint(get_words(\"vehicles\", \"can have air conditioning\"))\nprint(get_words(\"vehicles\", \"can have"}
{"cat": "vehicles", "slot": "part", "value": "bay", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  bay. \n        Output: ", "result": " car, truck, van, bus, train, boat, airplane, taxi, limo, ambulance\n```\n\n```"}
{"cat": "vehicles", "slot": "part", "value": "car seat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  car seat. \n        Output: ", "result": "4x4, convertible, hatchback, minivan, sedan, sports car, station wagon, SUV, truck, van. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'can have car seat'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n# Sample usage\nprint(get_words('vehicles', 'can have car seat'))\n# Output: 4x4, convertible, hatchback, minivan, sedan, sports car, station wagon, SUV,"}
{"cat": "vehicles", "slot": "part", "value": "mirror", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  mirror. \n        Output: ", "result": " car, truck, van, bus, bike, motorcycle, boat, submarine, airplane, taxi\n```\n\nExample 2:\n```\nInput: \nCategory: animals. \nCondition: can fly. \nOutput: \n\nDesired output: comma separated list of words. \nCategory: animals. \nCondition: can fly. \nOutput: bird, bat, pterodactyl\n```\n\nExample 3:\n```\nInput: \nCategory: fruits. \nCondition: can be eaten. \nOutput:"}
{"cat": "vehicles", "slot": "part", "value": "accelerator pedal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  accelerator pedal. \n        Output: ", "result": " accelerator, brake, clutch, gas, gear, ignition, steering, transmission, accelerator pedal, brake pedal. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'can have accelerator pedal'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def describe_category(self, category):\n        \"\"\"\n        Provide a brief description of the category. \n        Category: vehicles. \n        Desired output: brief description of vehicles. \n        \"\"\"\n"}
{"cat": "vehicles", "slot": "part", "value": "basket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  basket. \n        Output: ", "result": " car, basket, basket, basket, basket, basket, basket, basket, basket. \n    \"\"\"\n    words = ['car', 'basket', 'basket', 'basket', 'basket', 'basket', 'basket', 'basket', 'basket']\n    category = 'vehicles'\n    condition = 'can have basket'\n    filtered_words = []\n    for word in words:\n        if word.startswith(category + ' ') and word.endswith(condition):\n            filtered_words.append(word)\n    return filtered_"}
{"cat": "vehicles", "slot": "part", "value": "fo'c'sle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  fo'c'sle. \n        Output: ", "result": " fo'c'sle, dinghy, tender, yawl, cutter, ketch, schooner, sloop, catamaran, trimaran.\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have fo'c'sle\"\n    words = get_words(category, condition)\n    if \"fo'c'sle\" in words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found that satisfy the condition.\")\n\n# Test the function\ntest_function()"}
{"cat": "vehicles", "slot": "part", "value": "bulwark", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  bulwark. \n        Output: ", "result": " car, truck, bus, bulwark, tank, jeep, bulldozer, bulker, bulwarker, bulwarker. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have bulwark\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"vehicles\", \"can have bulwark\"))\n```\nOutput:\ncar, truck, bus, bulwark, tank, jeep, bulldoz"}
{"cat": "vehicles", "slot": "part", "value": "rear window", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  rear window. \n        Output: ", "result": " car, truck, van, bus, minivan, SUV, taxi, limo, ambulance, police car. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have  rear window\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"vehicles\", \"can have  rear window\"))\n```\nOutput:\ncar, truck, van, bus, minivan, SUV, taxi, limo, ambulance,"}
{"cat": "vehicles", "slot": "part", "value": "chain guard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  chain guard. \n        Output: ", "result": " bike, motorbike, scooter, moped, cycle, bicycle, car, van, truck, lorry. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have chain guard\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"vehicles\", \"can have 4 wheels\"))\nprint(get_words(\"vehicles\", \"can have 2 wheels\"))\nprint(get_words(\"vehicles"}
{"cat": "vehicles", "slot": "part", "value": "low gear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  low gear. \n        Output: ", "result": "4x4, off-road, low gear, crawler, all-terrain, 4WD, 4x2, 2WD, high gear, all-terrain vehicle. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'can have low gear'\n        words = []\n        for word in get_words(category, condition):\n            if 'low gear' in word:\n                words.append(word)\n        result = ', '.join(words)\n        print(result)\n```\nExplanation:\n"}
{"cat": "vehicles", "slot": "part", "value": "screw", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  screw. \n        Output: ", "result": " car,screwdriver,screw,screwdriver,car,screwdriver,screw,screwdriver,car,screwdriver,screw,screwdriver,car,screwdriver,screw,screwdriver,car,screwdriver,screw,screwdriver,car,screwdriver,screw,screwdriver,car,screwdriver,screw,screwdriver,car,screwdriver,screw,screwdriver,"}
{"cat": "vehicles", "slot": "part", "value": "topside", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  topside. \n        Output: ", "result": " car, truck, van, SUV, minivan, sedan, sports car, convertible, pickup, topside\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"topside\" in word:\n            words.append(word)\n    if len(words) == 0:\n        print(\"No words found.\")\n    else:\n        print(\", \".join(words))\n```\nExplanation:\n\n1. We define a function `filter_vehicles_with_topside(word_list, category, condition"}
{"cat": "vehicles", "slot": "part", "value": "sprocket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  sprocket. \n        Output: ", "result": " bike, car, motorcycle, sprocket, truck, van, bus, train, boat, airplane\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"sprocket\" in word and \"vehicle\" in word.lower():\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1"}
{"cat": "vehicles", "slot": "part", "value": "navigation light", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  navigation light. \n        Output: ", "result": " car, truck, van, bus, taxi, train, boat, airplane, motorcycle, bicycle\n```\n```"}
{"cat": "vehicles", "slot": "part", "value": "interior", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  interior. \n        Output: ", "result": " car, truck, van, bus, minivan, sedan, SUV, pickup, wagon, interior. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have interior\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"vehicles\", \"can have interior\"))  # Output: car, truck, van, bus, minivan, sedan, SUV, pickup, wagon, interior\nprint(get_words(\""}
{"cat": "vehicles", "slot": "part", "value": "sunshine-roof", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  sunshine-roof. \n        Output: ", "result": " car, van, truck, bus, jeep, SUV, minivan, convertible, sedan, pickup\n```\n```"}
{"cat": "vehicles", "slot": "part", "value": "skeleton", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  skeleton. \n        Output: ", "result": " car, truck, van, bus, motorcycle, bike, jeep, boat, plane, train\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have skeleton\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"vehicles\", \"can have skeleton\"))\n```\nOutput:\ncar, truck, van, bus, motorcycle, bike, jeep, boat, plane, train\n```"}
{"cat": "vehicles", "slot": "part", "value": "coaster brake", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  coaster brake. \n        Output: ", "result": " bike, scooter, skateboard, roller skate, tricycle, wagon, car, bus, train, boat. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have coaster brake\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition. \n        Desired output: list of words. \n"}
{"cat": "vehicles", "slot": "part", "value": "cabin", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  cabin. \n        Output: ", "result": " car, truck, bus, van, sedan, minivan, SUV, pickup, motorhome, camper. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'can have cabin'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_with_cabin(self):\n        self.assertEqual(get_words('vehicles', 'can have cabin'), 'car, truck, bus, van, sedan, minivan, SUV, pickup,"}
{"cat": "vehicles", "slot": "part", "value": "horn", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  horn. \n        Output: ", "result": " car, truck, bus, motorcycle, bike, van, taxi, ambulance, police car, fire truck. \n    \"\"\"\n    category_words = [\"car\", \"truck\", \"bus\", \"motorcycle\", \"bike\", \"van\", \"taxi\", \"ambulance\", \"police car\", \"fire truck\"]\n    category_words_with_horn = []\n    for word in category_words:\n        if \"horn\" in word:\n            category_words_with_horn.append(word)\n    print(\", \"."}
{"cat": "vehicles", "slot": "part", "value": "throttle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  throttle. \n        Output: ", "result": " car, truck, van, bus, motorcycle, bike, scooter, boat, airplane, train\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have throttle\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"can have brake\"))\n# Output: car, truck, van, bus, motorcycle, bike, scooter, boat, airplane, train\nprint(get_words(\"ve"}
{"cat": "vehicles", "slot": "part", "value": "glove compartment", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  glove compartment. \n        Output: ", "result": " car, truck, van, glove compartment. \n    \"\"\"\n    category = 'vehicles'\n    condition = 'can have glove compartment'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    words = []\n    if category == 'vehicles' and condition == 'can have glove compartment':\n        words.append"}
{"cat": "vehicles", "slot": "part", "value": "car window", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  car window. \n        Output: ", "result": " car, window. \n    \"\"\"\n    words = []\n    for word in words:\n        if \"can\" in word and \"have\" in word and \"car\" in word and \"window\" in word:\n            words.append(word)\n    return \", \".join(words)\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_conson"}
{"cat": "vehicles", "slot": "part", "value": "sea anchor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  sea anchor. \n        Output: ", "result": " boat, anchor, sea, sail, anchor, ship, ocean, sailor, anchor, sea \n    \"\"\"\n    words = []\n    for word in text.split():\n        if \"can\" in word and \"have\" in word and \"sea anchor\" in word:\n            words.append(word)\n    return words\n\ndef get_vehicle_words(text, category, condition):\n    words = []\n    for word in text.split():\n        if \"vehicle\" in word and category in word and condition in word:\n            words.append"}
{"cat": "vehicles", "slot": "part", "value": "mainsheet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  mainsheet. \n        Output: ", "result": " car, truck, van, bus, motorcycle, boat, airplane, train, subway, taxi\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have mainsheet\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    words = []\n    if category == \"vehicles\":\n        if condition == \"can"}
{"cat": "vehicles", "slot": "part", "value": "nose", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  nose. \n        Output: ", "result": " car, truck, bus, train, boat, airplane, motorcycle, bike, van, SUV\n    \"\"\"\n    category = \"vehicles\"\n    words = []\n    for word in text.split():\n        if \"nose\" in word:\n            words.append(word)\n    if len(words) == 0:\n        print(\"No words found in the text\")\n    else:\n        print(\", \".join(words))\n```\n\n```\nExplanation:\n\n1. First, we define the category of the words we are"}
{"cat": "vehicles", "slot": "part", "value": "interior", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  interior. \n        Output: ", "result": " car, truck, van, bus, minivan, sedan, SUV, pickup, wagon, interior. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have interior\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"vehicles\", \"can have interior\"))  # Output: car, truck, van, bus, minivan, sedan, SUV, pickup, wagon, interior\nprint(get_words(\""}
{"cat": "vehicles", "slot": "part", "value": "trunk", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  trunk. \n        Output: ", "result": " car, truck, van, SUV, minivan, pickup, sedan, wagon, jeep, crossover\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have trunk\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"can have 4 wheels\"))\n# Output: car, truck, van, SUV, minivan, pickup, sedan, wagon, jeep, crossover\n"}
{"cat": "vehicles", "slot": "part", "value": "bilge well", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  bilge well. \n        Output: ", "result": " boat, bilge, well, bilgewater, bilgewater, bilgewaters, bilgewater, bilgewaters, bilgewater, bilgewaters. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have  bilge well\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition.\n    \"\"\"\n    if category == \""}
{"cat": "vehicles", "slot": "part", "value": "sheet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  sheet. \n        Output: ", "result": "4x4, pickup, truck, SUV, sedan, car, van, minivan, wagon, jeep\n```\n```"}
{"cat": "vehicles", "slot": "part", "value": "automobile engine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  automobile engine. \n        Output: ", "result": " car, truck, van, bus, train, airplane, boat, motorcycle, automobile engine. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have automobile engine\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition. \n        Desired output: list of words. \n        Category: string. \n        Cond"}
{"cat": "vehicles", "slot": "part", "value": "headlight", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  headlight. \n        Output: ", "result": " car, truck, van, bus, motorcycle, bike, jeep, SUV, minivan, pickup. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'can have headlight'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def describe_category(self, category):\n        \"\"\"\n        Provide a brief description of the category. \n        Category: vehicles. \n        Desired output: brief description of the category. \n        \"\"\"\n        category = 'veh"}
{"cat": "vehicles", "slot": "part", "value": "dashboard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  dashboard. \n        Output: ", "result": " car, truck, bus, dashboard, steering\\_wheel, accelerator, brake, gear\\_shift, headlight, windshield. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have dashboard\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n# Test the function\ntest_function()"}
{"cat": "vehicles", "slot": "part", "value": "high", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  high. \n        Output: ", "result": " car, truck, van, bus, train, airplane, boat, motorcycle, bike, SUV\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have high\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"can have 4 wheels\"))\n# Output: car, truck, van, bus, train, airplane, boat, motorcycle, bike, SUV\nprint(get_words(\"vehicles"}
{"cat": "vehicles", "slot": "part", "value": "first gear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  first gear. \n        Output: ", "result": " car, truck, van, bus, tractor, bike, motorcycle, boat, airplane, taxi\n```\n\n```\nDescribe a scenario where the category is \"animals\" and the condition is \"can fly\". \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can fly. \n        Output:  bird, pterodactyl, bat, butterfly, bee, mosquito"}
{"cat": "vehicles", "slot": "part", "value": "auto accessory", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  auto accessory. \n        Output: ", "result": " radio, antenna, air conditioning, power steering, windshield wipers, brakes, tires, engine, transmission. \n        \"\"\"\n        category = \"vehicles\"\n        condition = \"can have auto accessory\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    def test_category_vehicles_can_have_auto_accessory(self):\n        self.assertEqual(self.get_words(\"vehicles\", \"can have auto accessory\"), \"radio, antenna,"}
{"cat": "vehicles", "slot": "part", "value": "car mirror", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  car mirror. \n        Output: ", "result": " car, mirror. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have car mirror\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition.\n    \"\"\"\n    if category == \"all\":\n        words = get_all_words()\n    else:\n        words = get_words_from_file(category)\n    if"}
{"cat": "vehicles", "slot": "part", "value": "porthole", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  porthole. \n        Output: ", "result": " car, truck, van, bus, train, boat, airplane, subway, taxi, limousine\n```\n\n```"}
{"cat": "vehicles", "slot": "part", "value": "turbine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  turbine. \n        Output: ", "result": " car, truck, bus, train, airplane, boat, submarine, helicopter, motorcycle, tank\n```\n```"}
{"cat": "vehicles", "slot": "part", "value": "stabilizer bar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  stabilizer bar. \n        Output: ", "result": "4x4, off-road, all-terrain, winch, bumper, tire, suspension, skid plates, stabilizer bar. \n        \"\"\"\n        category = \"vehicles\"\n        condition = \"can have  stabilizer bar\"\n        words = []\n        for word in product_list:\n            if \"stabilizer bar\" in word:\n                words.append(word)\n        if words:\n            print(\", \".join(words))\n        else:\n            print(\"No words found.\")\n```\nExample usage:\n```"}
{"cat": "vehicles", "slot": "part", "value": "low", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  low. \n        Output: ", "result": " car, van, truck, bus, train, boat, motorcycle, bike, lowrider, sports car\n```\n\n```"}
{"cat": "vehicles", "slot": "part", "value": "ratline", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  ratline. \n        Output: ", "result": " car, truck, van, bus, train, subway, boat, plane, motorcycle, taxi\n    \"\"\"\n    category = \"vehicles\"\n    words = [\"car\", \"truck\", \"van\", \"bus\", \"train\", \"subway\", \"boat\", \"plane\", \"motorcycle\", \"taxi\"]\n    for word in words:\n        if \"ratline\" in word:\n            print(word)\n            break\n    else:\n        print(\"No words found that satisfy the condition.\")\n```\nExample usage:\n```python\npython"}
{"cat": "vehicles", "slot": "part", "value": "number plate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  number plate. \n        Output: ", "result": " car, van, lorry, bus, truck, taxi, motorbike, bike, tractor, trailer. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have number plate\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"vehicles\", \"can have number plate\"))  # should print \"car, van, lorry, bus, truck, taxi, motorbike, bike, tractor, trailer\""}
{"cat": "vehicles", "slot": "part", "value": "third gear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  third gear. \n        Output: ", "result": " car, truck, bus, van, jeep, motorcycle, bike, boat, train, airplane\n```\n\n```"}
{"cat": "vehicles", "slot": "part", "value": "wiper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  wiper. \n        Output: ", "result": " car, bus, truck, van, taxi, train, boat, plane, motorcycle, bicycle\n```\n```"}
{"cat": "vehicles", "slot": "part", "value": "third", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  third. \n        Output: ", "result": " car, van, truck, bus, train, boat, plane, motorcycle, bike, tricycle. \n    \"\"\"\n    category = \"vehicles\"\n    words = [\"car\", \"van\", \"truck\", \"bus\", \"train\", \"boat\", \"plane\", \"motorcycle\", \"bike\", \"tricycle\"]\n    for word in words:\n        if \"third\" in word:\n            print(word)\n            break\n    else:\n        print(\"No words found.\")\n\n# Test the function\ntest_function()"}
{"cat": "vehicles", "slot": "part", "value": "escape hatch", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  escape hatch. \n        Output: ", "result": " car, truck, bus, train, boat, airplane, motorcycle, taxi, ambulance, helicopter\n    \"\"\"\n    words = []\n    for word in words:\n        if \"escape hatch\" in word:\n            words.append(word)\n    return \", \".join(words)\n\ndef get_vehicle_words(words, category, condition):\n    vehicle_words = []\n    for word in words:\n        if re.match(category, word) and re.search(condition, word):\n            vehicle_words.append"}
{"cat": "vehicles", "slot": "part", "value": "saddle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  saddle. \n        Output: ", "result": "\n```\ncar, motorcycle, bicycle, scooter, tricycle, horse, camel, donkey, saddle\n```"}
{"cat": "vehicles", "slot": "part", "value": "fuel pod", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  fuel pod. \n        Output: ", "result": " car, truck, van, bus, train, airplane, boat, motorcycle, taxi, ambulance\n```\n\n```"}
{"cat": "vehicles", "slot": "part", "value": "gyrostabilizer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  gyrostabilizer. \n        Output: ", "result": " car, truck, bus, motorcycle, bike, jeep, boat, airplane, helicopter, gyrostabilizer\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have gyrostabilizer\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"vehicles\", \"can have  gyrostabilizer\"))\n```\nOutput:\ncar, truck, bus, motorcycle, bike, jeep, boat, airplane, hel"}
{"cat": "vehicles", "slot": "part", "value": "funnel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  funnel. \n        Output: ", "result": " car, truck, van, bus, train, boat, airplane, motorcycle, bicycle, funnel. \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"funnel\" in word:\n            words.append(word)\n    return words\n\ndef get_vehicle_words(word_list, category, condition):\n    \"\"\"\n    Given a list of words and a category, return a list of words that satisfy the condition.\n    \"\"\"\n    vehicle_words = []\n    for word in word_list:"}
{"cat": "vehicles", "slot": "part", "value": "superstructure", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  superstructure. \n        Output: ", "result": " car, truck, bus, train, subway, boat, airplane, helicopter, ferry, monorail\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have superstructure\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"can have superstructure\"))  # Output: car, truck, bus, train, subway, boat, airplane, helicopter, ferry, monorail\n```\nIn this"}
{"cat": "vehicles", "slot": "part", "value": "after part", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  after part. \n        Output: ", "result": "\n        car, truck, van, bus, motorcycle, bike, boat, train, airplane, taxi\n    \"\"\"\n    words = []\n    for word in words:\n        if \"can\" in word and \"have\" in word and \"after\" in word and \"part\" in word:\n            words.append(word)\n    return \", \".join(words)\n\nprint(find_vehicle_words(vehicle_words))\n```\nOutput:\ncar, truck, van, bus, motorcycle, bike, boat, train,"}
{"cat": "vehicles", "slot": "part", "value": "tail fin", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  tail fin. \n        Output: ", "result": "\n        car, truck, van, bus, taxi, boat, submarine, airplane, helicopter, motorcycle\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have  tail fin\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"vehicles\", \"can have  tail fin\"))\n```\nOutput:\ncar, truck, van, bus, taxi, boat, submarine, airplane, helicopter, motorcycle"}
{"cat": "vehicles", "slot": "part", "value": "sprocket wheel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  sprocket wheel. \n        Output: ", "result": " car, truck, van, bus, bike, motorcycle, scooter, train, subway, trolley. \n    \"\"\"\n    category = \"vehicles\"\n    words = [\n        \"car\",\n        \"truck\",\n        \"van\",\n        \"bus\",\n        \"bike\",\n        \"motorcycle\",\n        \"scooter\",\n        \"train\",\n        \"subway\",\n        \"trolley\"\n    ]\n    sprocket_words = [\n        \"car\",\n        \"truck\","}
{"cat": "vehicles", "slot": "part", "value": "shroud", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  shroud. \n        Output: ", "result": " car, truck, van, bus, taxi, motorcycle, bike, jeep, boat, train\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have shroud\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"vehicles\", \"can have wipers\"))\nprint(get_words(\"vehicles\", \"can have shroud\"))\nprint(get_words(\"vehicles\", \"can have headlights\"))\nprint"}
{"cat": "vehicles", "slot": "part", "value": "keel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  keel. \n        Output: ", "result": " boat, keel, sail, mast, oar, rudder, hull, propeller, anchor, steer.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"can\" in word and \"have\" in word and \"keel\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n        Desired output: a list of numbers, where the i-"}
{"cat": "vehicles", "slot": "part", "value": "spoke", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  spoke. \n        Output: ", "result": " car, spoke, spoke, spoke, spoke, spoke, spoke, spoke, spoke. \n    \"\"\"\n    words = []\n    for word in words:\n        if \"can\" in word and \"have\" in word and \"spoke\" in word.lower().split(\" \"):\n            words.append(word)\n    return \", \".join(words)\n\nprint(find_vehicle_words(vehicle_words, \"can have spoke\"))\n# Output: car, spoke, spoke, spoke, spoke, spoke, spoke, spoke, spoke.\n```\n\n"}
{"cat": "vehicles", "slot": "part", "value": "bulkhead", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  bulkhead. \n        Output: ", "result": " car, bus, truck, van, taxi, limo, train, boat, plane, bulldozer\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have bulkhead\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"can have 4 wheels\"))\nprint(get_words(\"vehicles\", \"can have more than 4 wheels\"))\nprint(get_words(\"vehicles\", \"can have "}
{"cat": "vehicles", "slot": "part", "value": "floorboard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  floorboard. \n        Output: ", "result": " skateboard, surfboard, snowboard, wakeboard, kayak, canoe, paddleboard, jetski, ATV, dirtbike\n```\n```"}
{"cat": "vehicles", "slot": "part", "value": "chain", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  chain. \n        Output: ", "result": " bike, car, chain, cycle, motorbike, scooter, tractor, truck, van, bus. \n    \"\"\"\n    category = \"vehicles\"\n    words = [\"bike\", \"car\", \"chain\", \"cycle\", \"motorbike\", \"scooter\", \"tractor\", \"truck\", \"van\", \"bus\"]\n    for word in words:\n        if \"chain\" in word:\n            print(word)\n            break\n    else:\n        print(\"No words found.\")\n\n# Test the function\ntest_"}
{"cat": "vehicles", "slot": "part", "value": "cargo hold", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  cargo hold. \n        Output: ", "result": " car, truck, van, minivan, SUV, pickup, bus, train, boat, airplane\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have cargo hold\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"vehicles\", \"can have 4 wheels\"))\nprint(get_words(\"vehicles\", \"can have more than 4 wheels\"))\nprint(get_words(\"vehicles\", \""}
{"cat": "vehicles", "slot": "part", "value": "pod", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  pod. \n        Output: ", "result": " car,pod,truck,pod,van,pod,bike,pod,bus,pod. \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"pod\" in word:\n            words.append(word)\n    return words\n\ndef get_vehicle_words(word_list, category, condition):\n    \"\"\"\n    Given a list of words and a category, return a list of words that satisfy the condition.\n    \"\"\"\n    vehicle_words = []\n    for word in word_list:\n        if category =="}
{"cat": "vehicles", "slot": "part", "value": "bicycle wheel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  bicycle wheel. \n        Output: ", "result": " bike, wheel, cycle, bicycle, pedal, tire, ride, vehicle, cycle, bicycle. \n    \"\"\"\n    category = \"vehicles\"\n    words = [\"bike\", \"wheel\", \"cycle\", \"bicycle\", \"pedal\", \"tire\", \"ride\", \"vehicle\", \"cycle\", \"bicycle\"]\n    words = [word for word in words if word.lower().startswith(category.lower() + \"can have \" + category.lower() + \"bicycle wheel\")]\n    print(words"}
{"cat": "vehicles", "slot": "part", "value": "windlass", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  windlass. \n        Output: ", "result": " car, bus, truck, train, boat, airplane, subway, taxi, motorcycle, bicycle. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'can have  windlass'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def describe_category_and_condition(category, condition):\n        \"\"\"\n        Provide a description of the category and condition. \n        Category: vehicles. \n        Condition: can have  windlass. "}
{"cat": "vehicles", "slot": "part", "value": "car door", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  car door. \n        Output: ", "result": "4x4, car door, convertible, sedan, sports car, station wagon, truck, van, utility vehicle. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'can have car door'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(find_words(vehicles, 'can have 4x4'))\n    print(find_words(vehicles, 'can have car door'))\n    print(find_words(vehicles, 'can have convertible'))"}
{"cat": "vehicles", "slot": "part", "value": "water", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  water. \n        Output: ", "result": " car, truck, bus, boat, train, airplane, submarine, taxi, ambulance, firetruck. \n    \"\"\"\n    category = \"vehicles\"\n    words = [\"car\", \"truck\", \"bus\", \"boat\", \"train\", \"airplane\", \"submarine\", \"taxi\", \"ambulance\", \"firetruck\"]\n    filtered_words = []\n    for word in words:\n        if \"water\" in word:\n            filtered_words.append(word)\n    result = \", \".join(filtered_"}
{"cat": "vehicles", "slot": "part", "value": "dynamo", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  dynamo. \n        Output: ", "result": " car, dynamo, dynamo, dynamo, dynamo, dynamo, dynamo, dynamo, dynamo. \n    \"\"\"\n    words = Category.objects.filter(category='vehicles').filter(Q(name__contains='dynamo') | Q(description__contains='dynamo')).values_list('name', flat=True).distinct()\n    return ', '.join(words)\n\ndef get_vehicle_categories(request):\n    \"\"\"\n    Returns a list of all categories of vehicles.\n    \"\"\"\n    categories = Category."}
{"cat": "vehicles", "slot": "part", "value": "cargo area", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  cargo area. \n        Output: ", "result": " car, truck, van, minivan, SUV, pickup, bus, taxi, limo, RV\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have cargo area\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"vehicles\", \"can have 2 wheels\"))\nprint(get_words(\"vehicles\", \"can have 4 wheels\"))\nprint(get_words(\"vehicles\", \"can have "}
{"cat": "vehicles", "slot": "part", "value": "handlebar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  handlebar. \n        Output: ", "result": " bike, scooter, motorcycle, handlebar, handlebars, handlebarless, handlebarlessbike, handlebarlessscooter, handlebarlessmotorcycle, handlebarlesshandlebars, handlebarlesshandlebarless, handlebarlesshandlebarlessbike, handlebarlesshandlebarlessscooter, handlebarlesshandlebarlessmotorcycle, handlebarlesshandlebarlesshandlebars, handlebarlesshandlebarlesshandlebarless, handlebarlesshandlebarlessbike, handlebarlesshandlebarlessscooter, handlebarlesshandlebarlessmotor"}
{"cat": "vehicles", "slot": "part", "value": "tack", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  tack. \n        Output: ", "result": " car, truck, van, bus, tractor, bike, motorcycle, boat, taxi, tack. \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"tack\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_con"}
{"cat": "vehicles", "slot": "part", "value": "top", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  top. \n        Output: ", "result": " car, truck, van, bus, train, boat, airplane, motorcycle, SUV, top. \n    \"\"\"\n    category = \"vehicles\"\n    words = [\"car\", \"truck\", \"van\", \"bus\", \"train\", \"boat\", \"airplane\", \"motorcycle\", \"SUV\", \"top\"]\n    words = [word for word in words if word.endswith(\"top\")]\n    print(\", \".join(words))\n```\nExplanation:\n\n1. The `category` variable is set to \"vehicles\"."}
{"cat": "vehicles", "slot": "generalization", "value": "aircraft", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are aircraft. \n        Output: ", "result": "\n        helicopter, airplane, jet, glider, balloon, blimp, rocket, spacecraft, hot air balloon, glider\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are aircraft\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"vehicles\", \"are cars\"))\nprint(get_words(\"vehicles\", \"are trucks\"))\nprint(get_words(\"vehicles\","}
{"cat": "vehicles", "slot": "generalization", "value": "heavier-than-air craft", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are heavier-than-air craft. \n        Output: ", "result": "\n            airplane, helicopter, glider, blimp, zeppelin, balloon, airship, hydroplane, seaplane, amphibian\n\"\"\"\nprint(airplane, helicopter, glider, blimp, zeppelin, balloon, airship, hydroplane, seaplane, amphibian)"}
{"cat": "vehicles", "slot": "part", "value": "wheel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  wheel. \n        Output: ", "result": " car, truck, van, bus, bike, motorcycle, train, boat, airplane, taxi\n```\n\nExample 2:\n```\nInput: \nCategory: animals. \nCondition: can have 4 legs. \nOutput: \n\nDesired output: comma separated list of words. \n\nCategory: vehicles. \nCondition: can have 4 wheels. \nOutput: \n\nDesired output: comma separated list of words. \n\nCategory: birds. \nCondition: can fly. \nOutput: \n\nDesired"}
{"cat": "vehicles", "slot": "movement", "value": "pilot", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can pilot. \n        Output: ", "result": "\n            airplane, boat, car, helicopter, motorcycle, plane, ship, submarine, train, truck\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can pilot\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition. \n        Category: string. \n        Condition: string. \n        Return: list of"}
{"cat": "vehicles", "slot": "specialization", "value": "jet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are jet. \n        Output: ", "result": "\n        jet,plane,helicopter,aircraft,glider,rocket,spacecraft,missile,space shuttle,satellite\n```\n\n```\nDesired output: \nComma separated list of words: jet, plane, helicopter, aircraft, glider, rocket, spacecraft, missile, space shuttle, satellite\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n"}
{"cat": "vehicles", "slot": "specialization", "value": "Boeing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are Boeing. \n        Output: ", "result": "787, 737, 747, 757, 767, 777, 727, 717, 724, 728. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'are Boeing'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(find_words('vehicles', 'are Boeing'))\n```\n\u8f93\u51fa\uff1a787, 737, 74"}
{"cat": "vehicles", "slot": "specialization", "value": "racing bike", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are racing bike. \n        Output: ", "result": "\n            Ducati, Harley-Davidson, Kawasaki, MV Agusta, Suzuki, Triumph, Aprilia, BMW, Honda, KTM\n        Explanation: \n            Ducati, Harley-Davidson, Kawasaki, MV Agusta, Suzuki, Triumph, Aprilia, BMW, Honda, KTM are all racing bikes. \n        \"\"\"\n        category = Category.objects.get(name='vehicles')\n        condition = Condition.objects.get(name='are racing bike"}
{"cat": "vehicles", "slot": "specialization", "value": "city car", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are city car. \n        Output: ", "result": "\n        car, van, truck, bus, taxi, scooter, motorcycle, bicycle, rickshaw, tuk-tuk\n    \"\"\"\n    city_cars = CityCar.objects.all()\n    city_car_words = [word.name for word in city_cars]\n    city_car_words = [word for word in city_car_words if word.is_city_car]\n    city_car_words = [word for word in city_car_words if word.is_city_car]\n   "}
{"cat": "vehicles", "slot": "specialization", "value": "pickup", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are pickup. \n        Output: ", "result": "1. Pickup, 2. Pickup, 3. Pickup, 4. Pickup, 5. Pickup, 6. Pickup, 7.\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "Antonov", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are Antonov. \n        Output: ", "result": "\n        Antonov, An-225, An-124, An-124-100, An-124-100M, An-124-300, An-148, An-70, An-74, An-74T, An-74TK, An-74TK-100, An-74TK-200, An-74TK-200M, An-74TK-300, An-74TK"}
{"cat": "vehicles", "slot": "specialization", "value": "reconnaissance plane", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are reconnaissance plane. \n        Output: ", "result": "\n            \n```"}
{"cat": "vehicles", "slot": "specialization", "value": "vintage car", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are vintage car. \n        Output: ", "result": "1932, 1957, 1960, 1961, 1963, 1964, 1965, 1966, 1967, 1968, 1969\n    \"\"\"\n    vintage_cars = [\"1932\", \"1957\", \"1960\", \"1961\", \"1963\", \"1964\", \"1965\", \"1966\", \"196"}
{"cat": "vehicles", "slot": "specialization", "value": "airbus", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are airbus. \n        Output: ", "result": "320, A380, A330, A319, A321, A340, A350, A320neo, A330neo, A350neo\n    \"\"\"\n    airbus_vehicles = [word for word in vehicles if 'airbus' in word]\n    airbus_vehicles = [word for word in airbus_vehicles if 'airbus' in word]\n    airbus_vehicles = [word for word in airbus_vehicles if 'air"}
{"cat": "vehicles", "slot": "specialization", "value": "tanker plane", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are tanker plane. \n        Output: ", "result": "747, 767, 777, 787, 757, 737, 727, 717, 727, 737\n    \"\"\"\n    category = 'vehicles'\n    condition = 'are tanker plane'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n"}
{"cat": "vehicles", "slot": "specialization", "value": "airliner", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are airliner. \n        Output: ", "result": "747, A380, A340, A330, A320, A310, A300, A390, A388\n    \"\"\"\n    airliner_vehicles = [\n        \"747\",\n        \"A380\",\n        \"A340\",\n        \"A330\",\n        \"A320\",\n        \"A310\",\n        \"A300\",\n        \"A390\",\n        \"A388\""}
{"cat": "vehicles", "slot": "specialization", "value": "biplane", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are biplane. \n        Output: ", "result": "\n```\nSpad, Sopwith Camel, Fokker Triplane, Nieuport 11, Sopwith Pup, Royal Aircraft Factory S.E.5, Albatros D.Va, Fokker Dr.I, Morane-Saulnier L, Sopwith 1 1/2 Strutter, Royal Aircraft Factory B.E.2c\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n       "}
{"cat": "vehicles", "slot": "specialization", "value": "attack aircraft", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are attack aircraft. \n        Output: ", "result": "\n            \n```"}
{"cat": "vehicles", "slot": "specialization", "value": "delta wing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are delta wing. \n        Output: ", "result": "\n        delta,wing,winglet,winglet,winglet,winglet,winglet,winglet,winglet,winglet. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are delta wing\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"vehicles\", \"are delta wing\"))\n```\nOutput:\ndelta,wing,winglet,winglet,winglet,winglet,winglet,winglet,winglet,winglet"}
{"cat": "vehicles", "slot": "specialization", "value": "amphibious aircraft", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are amphibious aircraft. \n        Output: ", "result": "\n        helicopter, seaplane, flying boat, amphibious aircraft, hovercraft,\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "multiengine plane", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are multiengine plane. \n        Output: ", "result": "727, 737, 747, 757, 767, 777, 787, A300, A310, A320, A330, A340, A380. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'are multiengine plane'\n        words = [word for word in CATEGORIES[category] if word.lower() == condition.lower()]\n        return ', '.join(words)\n\n"}
{"cat": "vehicles", "slot": "specialization", "value": "monoplane", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are monoplane. \n        Output: ", "result": "\n            airplane, glider, monoplane, seaplane, triplane, biplane, helicopter, gyroplane, autogyro, fixed-wing aircraft\n\"\"\"\nprint(\"airplane, glider, monoplane, seaplane, triplane, biplane, helicopter, gyroplane, autogyro, fixed-wing aircraft\")\n```\nExample 3:\n```\nInput: \n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of"}
{"cat": "vehicles", "slot": "specialization", "value": "SUV", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are SUV. \n        Output: ", "result": "4x4, Jeep, Wrangler, Grand Cherokee, Cherokee, Trailhawk, Renegade, Compass, Patriot, Grand Wagoneer\n```\n\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "micro car", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are micro car. \n        Output: ", "result": "\n            \n```"}
{"cat": "vehicles", "slot": "specialization", "value": "fighter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are fighter. \n        Output: ", "result": "\n        jet,fighter,fighter,jet,fighter,fighter,fighter,fighter,fighter. \n    \"\"\"\n    category = 'vehicles'\n    condition = 'are fighter'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Test the function\nprint(get_words('vehicles', 'are fighter'))\n```\nOutput:\njet,fighter,fighter,jet,fighter,fighter,fighter"}
{"cat": "vehicles", "slot": "specialization", "value": "amphibian", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are amphibian. \n        Output: ", "result": "\n        car, truck, bus, boat, submarine, amphibian, alligator, crocodile, turtle, snapping turtle \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are amphibian\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"vehicles\", \"have more than 4 wheels\"))\nprint(get_words(\"animals\", \"are mammals\"))\nprint(get_"}
{"cat": "vehicles", "slot": "specialization", "value": "tender", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are tender. \n        Output: ", "result": "\n        truck,bus,tractor,tractor-trailer,semitrailer,semitruck,tractor-trailer-semitrailer,semitrailer-tractor,semitruck-tractor-trailer,semitrailer-tractor-semitrailer,tractor-semitrailer-tractor-trailer,semitrailer-tractor-semitrailer-tractor,semitruck-tractor-semitrailer-tractor,semitrailer-tractor-semitrailer-tractor-"}
{"cat": "vehicles", "slot": "specialization", "value": "fighter aircraft", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are fighter aircraft. \n        Output: ", "result": "\n            F-15, F-16, F/A-18, F-22, F-35, F-14, F-22, F-15, F-16, F/A-18\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are fighter aircraft\"\n    words = []\n    for word in text.split():\n        if word.lower() in category_map[category] and word.lower() in condition_map[condition]:\n            words.append(word)\n    return"}
{"cat": "vehicles", "slot": "specialization", "value": "hangar queen", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are hangar queen. \n        Output: ", "result": "\n        helicopter, airplane, yacht, boat, car, motorcycle, jet, glider, seaplane, hangar queen.\n    \"\"\"\n    words = []\n    for word in text.split():\n        if word.isdigit():\n            words.append(word)\n        else:\n            words.append(word)\n    words = [word for word in words if word.isalpha()]\n    words = [word for word in words if word.lower() not in stopwords]\n    words = [word for word in words if word.starts"}
{"cat": "vehicles", "slot": "specialization", "value": "hydroplane", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are hydroplane. \n        Output: ", "result": "\n```\nboat, hydroplane, speedboat, motorboat, watercraft, pontoon, hydrofoil, seaplane, airboat, amphibious\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: have wings. \n        Output: \n```\nbird, eagle, hawk, owl, sparrow, swan"}
{"cat": "vehicles", "slot": "specialization", "value": "propeller plane", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are propeller plane. \n        Output: ", "result": "\n```\nCessna, Piper, Beechcraft, De Havilland, Sikorsky, Bell, Boeing, Airbus, Embraer, AgustaWestland\n```\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "ski-plane", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are ski-plane. \n        Output: ", "result": "\n```\nski-plane, de Havilland Canada DHC-2, de Havilland Canada DHC-3, de Havilland Canada DHC-4, de Havilland Canada DHC-6, de Havilland Canada DHC-7, de Havilland Canada DHC-8, de Havilland Canada DHC-9, de Havilland Canada DHC-10, de Havilland Canada DHC-11, de Havilland Canada DHC-12, de Havilland Canada DHC-13, de Havilland Canada DHC"}
{"cat": "vehicles", "slot": "specialization", "value": "multiengine airplane", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are multiengine airplane. \n        Output: ", "result": "737, 747, 757, 767, 777, 787, A300, A310, A320, A330, A340, A380. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'are multiengine airplane'\n        words = [word for word in CATEGORIES[category] if 'multiengine airplane' in word]\n        return ', '.join(words)\n\n    print("}
{"cat": "vehicles", "slot": "specialization", "value": "racing car", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are racing car. \n        Output: ", "result": "\n            Ferrari, Lamborghini, Porsche, Audi, BMW, Mercedes-Benz, Nissan, Toyota, Honda, Chevrolet\n        \"\"\"\n        category = \"vehicles\"\n        condition = \"are racing car\"\n        words = [word for word in CATEGORIES[category] if word.lower() == condition.lower()]\n        return \", \".join(words)\n"}
{"cat": "vehicles", "slot": "specialization", "value": "bomber", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are bomber. \n        Output: ", "result": "\n        bomber,bomber,bomber,bomber,bomber,bomber,bomber,\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "cabriolet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are cabriolet. \n        Output: ", "result": "\n        convertible, cabriolet, drop-top, soft-top, retractable-hard-top, folding-hard-top, removable-roof, removable-hard-top, detachable-roof, detachable-hard-top\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are cabriolet\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list"}
{"cat": "vehicles", "slot": "specialization", "value": "iceboat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are iceboat. \n        Output: ", "result": "icesled, iceboat, iceyacht, icecutter, iceboat, iceyacht, icecutter, iceboat, iceyacht, icecutter\n```\n\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "wagon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are wagon. \n        Output: ", "result": "\n```\nwagon,car,truck,van,SUV,minivan,sedan,coupe,hatchback,jeep\n```\n\n```\nwagon,car,truck,van,SUV,minivan,sedan,coupe,hatchback,jeep\n```\n\n```\nwagon,car,truck,van,SUV,minivan,sedan,coupe,hatchback,jeep\n```\n\n```\nwagon,car,truck,van,SUV,minivan,sedan,coupe,h"}
{"cat": "vehicles", "slot": "specialization", "value": "seaplane", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are seaplane. \n        Output: ", "result": "\n```\nseaplane, amphibian, hydroplane, floatplane, flying boat, waterplane, aquaplane, aeroplane, maritime aircraft, aviation boat\n```\nExplanation:\nThe words that belong to the category \"vehicles\" and satisfy the condition \"are seaplane\" are: seaplane, amphibian, hydroplane, floatplane, flying boat, waterplane, aquaplane, aeroplane, maritime aircraft, aviation boat.\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "lorry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are lorry. \n        Output: ", "result": "1. Truck, 2. Lorries, 3. Lorry, 4. Lorries, 5. Lorries, 6. Lorries, 7. Lorries, 8. Lorries, 9. Lorries, 10. Lorries.\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are lorry\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list"}
{"cat": "vehicles", "slot": "specialization", "value": "sedan", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are sedan. \n        Output: ", "result": "4-door, sedan, saloon, car, vehicle, automobile, sedan car, 4-door sedan, 4-door saloon, 4-door car, 4-door vehicle, 4-door automobile.\n    \"\"\"\n    category = Category.objects.get(name='vehicles')\n    condition = Condition.objects.get(name='sedan')\n    words = []\n    for word in Word.objects.all():\n        if word.category == category and word.condition == condition:\n            words.append(word.name)\n"}
{"cat": "vehicles", "slot": "specialization", "value": "cycle rickshaw", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are cycle rickshaw. \n        Output: ", "result": "3-wheeler, auto-rickshaw, cycle rickshaw, tricycle, tempo, tuk-tuk, rickshaw, cycle-rickshaw, auto-rickshaw, tricycle. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'are cycle rickshaw'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('vehicles', 'are car'))\n    print(get_words('vehicles', 'have"}
{"cat": "vehicles", "slot": "specialization", "value": "bumper car", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are bumper car. \n        Output: ", "result": "\n```\nbumper,car,vehicle,ride,amusement,entertainment,bumper car,ride,amusement,entertainment\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are bumper car\" are \"bumper\", \"car\", \"vehicle\", \"ride\", \"amusement\", \"entertainment\", \"bumper car\", \"ride\", \"amusement\", and \"entertainment\"."}
{"cat": "vehicles", "slot": "specialization", "value": "sledge", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are sledge. \n        Output: ", "result": "\n```\nsledge, sledgehammer, sled, sledding, sledges, sledging, sledgeway, sledger, sledgehammer\n```\n```\nProvide a list of 10 words that belong to the category and do not satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are not sledge. \n        Output: \n```\ncar, truck, bus, train, airplane, boat, motorcycle, bicycle, taxi"}
{"cat": "vehicles", "slot": "specialization", "value": "ark", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are ark. \n        Output: ", "result": "\n```\ncar,ark,truck,ark,bus,ark,boat,ark,airplane,ark\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: contain \"ing\". \n        Output: \n```\ndriving,parking,driving,speeding,driving,stopping,driving,driving,driving,driv"}
{"cat": "vehicles", "slot": "specialization", "value": "hack", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are hack. \n        Output: ", "result": "1. car, 2. truck, 3. van, 4. bike, 5. bus, 6. train, 7. boat, 8. plane, 9. motorcycle, 10. taxi\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are hack\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and"}
{"cat": "vehicles", "slot": "specialization", "value": "water waggon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are water waggon. \n        Output: ", "result": "\n```\nwater,wagon,waggoner,waggoning,waggoner,waggonette,waggonette,wagonette,wagonette,wagonette,wagonette\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are water waggon\" are \"water\", \"wagon\", \"waggoner\", \"waggoning\", \"waggoner\", \"waggonette\", \"wagonette\", \"wagonette\", \"wagonette\", \"wagonette\"."}
{"cat": "vehicles", "slot": "specialization", "value": "fishing smack", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are fishing smack. \n        Output: ", "result": "\n        fishing,smack,boat,sea,fishing\\_boat,fishing\\_smack,sea\\_fishing,sea\\_boat,sea\\_fishing\\_smack,sea\\_boat\\_fishing,sea\\_boat\\_fishing\\_smack\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are fishing smack\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    words = []\n"}
{"cat": "vehicles", "slot": "specialization", "value": "safety bicycle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are safety bicycle. \n        Output: ", "result": "1. bicycle, 2. safety, 3. bicycle, 4. safety, 5. bicycle, 6. safety, 7. bicycle, 8. safety, 9. bicycle, 10. safety. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'are safety bicycle'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_safety_bicycle(self):\n        self"}
{"cat": "vehicles", "slot": "specialization", "value": "sports car", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are sports car. \n        Output: ", "result": "\n            Ferrari, Lamborghini, Porsche, Audi, BMW, Mercedes-Benz, Maserati, Jaguar, Aston Martin, Bentley\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are sports car\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == \"animals"}
{"cat": "vehicles", "slot": "specialization", "value": "hot rod", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are hot rod. \n        Output: ", "result": "350, 440, 454, 460, 478, 488, 496, 502, 572, 588\n    \"\"\"\n    hot_rod_vehicles = [\n        \"350\", \"440\", \"454\", \"460\", \"478\", \"488\", \"496\", \"502\", \"572\", \"588\"\n    ]\n    return hot_rod_vehicles\n"}
{"cat": "vehicles", "slot": "specialization", "value": "convertible", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are convertible. \n        Output: ", "result": "\n        convertible, convertibles, convertible car, convertible cars, convertible tops, convertible top, convertible tops, convertible car, convertible cars, convertible top, convertible tops, convertible car, convertible cars, convertible top, convertible tops, convertible car, convertible cars, convertible top, convertible tops, convertible car, convertible cars, convertible top, convertible tops, convertible car, convertible cars, convertible top, convertible tops, convertible car, convertible cars, convertible top, convert"}
{"cat": "vehicles", "slot": "specialization", "value": "gas guzzler", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are gas guzzler. \n        Output: ", "result": "\n        sports car, convertible, muscle car, luxury car, exotic car, SUV, minivan, pickup truck, RV, motorhome\n\"\"\"\n\n# Define the category and condition\ncategory = \"vehicles\"\ncondition = \"are gas guzzler\"\n\n# Define a list to store the words\nwords = []\n\n# Split the category and condition into words\ncategory_words = category.split()\ncondition_words = condition.split()\n\n# Iterate over the words in the category\nfor word in category_words:\n   "}
{"cat": "vehicles", "slot": "specialization", "value": "motor mower", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are motor mower. \n        Output: ", "result": "\n```\nmower,push,reel,self-propelled,electric,gasoline,manual,riding,lawn,walk-behind\n```\n\n```\nDesired input:\nprovide a list of 10 words that belong to the category and satisfy the condition.\n\nDesired output:\ncomma separated list of words.\n\nCategory: vehicles.\nCondition: are motor mower.\n\nOutput:\nmower,push,reel,self-propelled,electric,gasoline,manual,riding,lawn,walk-behind"}
{"cat": "vehicles", "slot": "specialization", "value": "Dodgem", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are Dodgem. \n        Output: ", "result": "\n```\ndodgem, dodgem, dodgem, dodgem, dodgem, dodgem, dodgem, dodgem, dodgem\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "velocipede", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are velocipede. \n        Output: ", "result": "\n        velocipede, bicycle, tricycle, scooter, skateboard, roller skates, rollerblades, unicycle, penny-farthing, boneshaker\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are velocipede\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"animals\", \"are mammals\"))\nprint(get_words(\"vehicles\", \"are velocip"}
{"cat": "vehicles", "slot": "specialization", "value": "Conestoga wagon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are Conestoga wagon. \n        Output: ", "result": "\n```\nwagon, Conestoga, covered, transportation, 18th, 19th, Pennsylvania, Amish, Mennonite\n```\n\n```\nDesired output: comma separated list of words. \nCategory: vehicles. \nCondition: are motorcycles. \nOutput: \n```\nmotorcycle, Harley-Davidson, Honda, Yamaha, Suzuki, Kawasaki, Ducati, BMW, Triumph, Aprilia\n```\n\n```\nDesired output: comma separated list of words. \nCategory"}
{"cat": "vehicles", "slot": "specialization", "value": "subcompact", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are subcompact. \n        Output: ", "result": "\n            hatchback, sedan, coupe, convertible, compact, mini, suv, truck, van, wagon\n    \"\"\"\n    subcompact_vehicles = [\n        \"hatchback\",\n        \"sedan\",\n        \"coupe\",\n        \"convertible\",\n        \"compact\",\n        \"mini\",\n        \"suv\",\n        \"truck\",\n        \"van\",\n        \"wagon\"\n    ]\n    subcompact_vehicles = [word for word in subcompact_vehicles if"}
{"cat": "vehicles", "slot": "specialization", "value": "small ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are small ship. \n        Output: ", "result": "\n```\nyacht, sailboat, speedboat, motorboat, catamaran, kayak, canoe, paddleboard, rowboat, dinghy\n```\nExplanation:\n\n1. yacht\n2. sailboat\n3. speedboat\n4. motorboat\n5. catamaran\n6. kayak\n7. canoe\n8. paddleboard\n9. rowboat\n10. dinghy\n\nAll of these words belong to the category of vehicles and satisfy the condition of being small ships."}
{"cat": "vehicles", "slot": "specialization", "value": "cruise missile", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are cruise missile. \n        Output: ", "result": "\n            1. Cruise\n            2. Missile\n            3. Guided\n            4. Unmanned\n            5. Autonomous\n            6. Precision\n            7. Strike\n            8. Long-range\n            9. Subsonic\n            10. Hypersonic\n        \"\"\"\n        words = [\n            \"Cruise\",\n            \"Missile\",\n            \"Guided\",\n            \"Unmanned\",\n            \"Autonomous\",\n            \"Precision\",\n            \"Strike\",\n            \"Long-range\","}
{"cat": "vehicles", "slot": "specialization", "value": "hand mower", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are hand mower. \n        Output: ", "result": "\n```\nreel, trimmer, push, walk, self-propelled, electric, gasoline, manual, corded, cordless\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are hand mower\" are \"reel, trimmer, push, walk, self-propelled, electric, gasoline, manual, corded, cordless\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n       "}
{"cat": "vehicles", "slot": "specialization", "value": "pilot boat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are pilot boat. \n        Output: ", "result": "\n```\npilot,boat,captain,pilotage,pilotage,pilot,boat,captain,pilotage,pilotage,pilot,boat,captain,pilotage,pilotage,pilot,boat,captain,pilotage,pilotage,pilot,boat,captain,pilotage,pilotage,pilot,boat,captain,pilotage,pilotage,pilot,bo"}
{"cat": "vehicles", "slot": "specialization", "value": "wrecker", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are wrecker. \n        Output: ", "result": "\n```\nwrecker, tow, truck, recovery, transport, vehicle, roadside, accident, emergency, recovery\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "sleigh", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are sleigh. \n        Output: ", "result": "\n```\nsleigh, reindeer, Santa, Christmas, winter, snow, North Pole, elf, toy, gift\n```\nExplanation: The words that belong to the category `vehicles` and satisfy the condition `are sleigh` are `sleigh`, `reindeer`, `Santa`, `Christmas`, `winter`, `snow`, `North Pole`, `elf`, `toy`, and `gift`.\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "minicar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are minicar. \n        Output: ", "result": "\n        car, van, truck, minivan, sedan, hatchback, coupe, convertible, sports car, minicar\n\"\"\"\n\n# Define the function\ndef get_vehicle_words(category, condition):\n    # Create an empty list to store the words\n    vehicle_words = []\n    \n    # Use a for loop to iterate through all the words in the vocabulary\n    for word in vocabulary:\n        # Use an if statement to check if the word satisfies the condition\n        if word.category == category and word."}
{"cat": "vehicles", "slot": "specialization", "value": "hospital ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are hospital ship. \n        Output: ", "result": "\n```\naircraft carrier, hospital ship, naval hospital, floating hospital, medical ship, military hospital, hospital ship, hospital ship, hospital ship, hospital ship\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are hospital ships\" are: aircraft carrier, hospital ship, naval hospital, floating hospital, medical ship, military hospital, hospital ship, hospital ship, hospital ship, hospital ship.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list"}
{"cat": "vehicles", "slot": "specialization", "value": "Mackinaw boat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are Mackinaw boat. \n        Output: ", "result": "\n        Mackinaw, Mackinaw, Mackinaw, Mackinaw, Mackinaw, Mackinaw, Mackinaw, Mackinaw, Mackinaw, Mackinaw. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'are Mackinaw boat'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n# Test the function with sample inputs\nprint(get_words('vehicles', 'are Mackinaw boat'))\n# Output: Mackinaw, Mackinaw, Mackina"}
{"cat": "vehicles", "slot": "specialization", "value": "pirate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are pirate. \n        Output: ", "result": "\n          car, ship, treasure, map, compass, pirate, plundering, Jolly Roger, \n          skull and crossbones, X marks the spot. \n    \"\"\"\n    pirate_vehicles = [\n        \"ship\",\n        \"car\",\n        \"treasure\",\n        \"map\",\n        \"compass\",\n        \"pirate\",\n        \"plundering\",\n        \"Jolly Roger\",\n        \"skull and crossbones\",\n        \"X marks the spot\"\n    ]\n    pirate_"}
{"cat": "vehicles", "slot": "specialization", "value": "supply ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are supply ship. \n        Output: ", "result": "\n```\nsupply, ship, vessel, transport, logistics, cargo, fleet, carrier, lorry, truck\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are motorcycle. \n        Output: \n```\nmotorcycle, scooter, moped, bicycle, cycle, hog, chopper, mc, bike, cycle\n```\n"}
{"cat": "vehicles", "slot": "specialization", "value": "horseless carriage", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are horseless carriage. \n        Output: ", "result": "\n        horseless, carriage, automobile, truck, bus, train, airplane, boat, motorcycle, bicycle. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'are horseless carriage'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_horseless_carriage(self):\n        self.assertEqual(get_words('vehicles', 'are horseless carriage'), 'horseless, carriage, automobile, truck, bus,"}
{"cat": "vehicles", "slot": "specialization", "value": "hot-rod", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are hot-rod. \n        Output: ", "result": "350, 440, 454, 460, 496, 502, 572, 612, 618, 620\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are hot-rod\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of 10 words that belong to the category and"}
{"cat": "vehicles", "slot": "specialization", "value": "longboat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are longboat. \n        Output: ", "result": "\n```\ncar, truck, van, bus, train, airplane, boat, submarine, yacht, longboat\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are red. \n        Output: \n```\nred car, red truck, red van, red bus, red train, red airplane, red boat, red submarine, red yacht, red long"}
{"cat": "vehicles", "slot": "specialization", "value": "prowl car", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are prowl car. \n        Output: ", "result": "\n        car, police, prowl, cruiser, patrol, squad, vehicle, law, enforcement\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are prowl car\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == \"animals\":\n        if condition == \"are mammals\":\n"}
{"cat": "vehicles", "slot": "specialization", "value": "trolley coach", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are trolley coach. \n        Output: ", "result": "\n        trolley, coach, trolleybus, tram, trackless, trolleybus, streetcar, \n        trackless, trolleybus, tram, trackless, trolleybus, tram, trackless, \n        trolleybus, tram, trackless, trolleybus, tram, trackless, trolleybus, \n        tram, trackless, trolleybus, tram, trackless, trolleybus, tram, \n        trackless, trolleybus, tram, trackless, trolleybus, tram,"}
{"cat": "vehicles", "slot": "specialization", "value": "ice wagon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are ice wagon. \n        Output: ", "result": "1. Sleigh, 2. Ice wagon, 3. Sleigh, 4. Ice wagon, 5. Sleigh, 6. Ice wagon, 7. Sleigh, 8. Ice wagon, 9. Sleigh, 10. Ice wagon.\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are ice wagon\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n"}
{"cat": "vehicles", "slot": "specialization", "value": "van", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are van. \n        Output: ", "result": "\n            car, truck, van, minivan, SUV, van, pickup, wagon, van,\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "narrow boat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are narrow boat. \n        Output: ", "result": "\n            narrowboat,narrow,boat,canal,narrowboat,narrow,boat,canal,narrowboat,narrow,boat,canal,narrowboat,narrow,boat,canal,narrowboat,narrow,boat,canal,narrowboat,narrow,boat,canal,narrowboat,narrow,boat,canal,narrowboat,narrow,boat,canal,narrowboat,narrow,boat,canal,n"}
{"cat": "vehicles", "slot": "specialization", "value": "jalopy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are jalopy. \n        Output: ", "result": "1. jalopy, 2. rusted, 3. dented, 4. old, 5. worn, 6. broken, 7. rusty, 8. dilapidated, 9. decrepit, 10. shabby.\n    \"\"\"\n    jalopy_words = [\n        \"jalopy\",\n        \"rusted\",\n        \"dented\",\n        \"old\",\n        \"worn\",\n        \"broken\",\n        \"rusted\",\n        \"dilapidated\",\n        \"decre"}
{"cat": "vehicles", "slot": "specialization", "value": "fan-jet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are fan-jet. \n        Output: ", "result": "727, DC-8, DC-9, MD-80, MD-90, B727, B737, B757, B767, B777, B787, A300, A310, A320, A330, A340, A380, CRJ, E170, E190, E195, E200, E214, E175, E195E2, E190E2"}
{"cat": "vehicles", "slot": "specialization", "value": "ambulance", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are ambulance. \n        Output: ", "result": " ambulance, emergency, emergency vehicle, emergency service, ambulance service, ambulance car, ambulance van, ambulance bus, ambulance truck, ambulance helicopter.\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are ambulance\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n"}
{"cat": "vehicles", "slot": "specialization", "value": "minivan", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are minivan. \n        Output: ", "result": "\n```\nminivan, Dodge, Caravan, Chrysler, Town & Country, Honda, Odyssey, Toyota, Sienna, Kia, Sedona\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are trucks. \n        Output: \n```\npickup, Ford, F-150, Chevrolet, Silverado, Ram"}
{"cat": "vehicles", "slot": "specialization", "value": "sea boat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are sea boat. \n        Output: ", "result": "\n            1. Yacht\n            2. Sailboat\n            3. Dinghy\n            4. Ferry\n            5. Submarine\n            6. Cruise ship\n            7. Tugboat\n            8. Powerboat\n            9. Catamaran\n            10. Ship\n        \"\"\"\n        words = [\n            \"yacht\",\n            \"sailboat\",\n            \"dinghy\",\n            \"ferry\",\n            \"submarine\",\n            \"cruise ship\",\n            \"tugboat\",\n            \""}
{"cat": "vehicles", "slot": "specialization", "value": "dustcart", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are dustcart. \n        Output: ", "result": "\n```\ndustcart, garbage, trash, refuse, waste, bin, carton, container, rubbish, debris\n```\nExplanation:\nThe words that belong to the category \"vehicles\" and satisfy the condition \"are dustcart\" are \"dustcart, garbage, trash, refuse, waste, bin, carton, container, rubbish, debris\".\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "tugboat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are tugboat. \n        Output: ", "result": "\n```\ntugboat,tug,tugboat,tugboat,tugboat,tugboat,tugboat,tugboat,tugboat,tugboat\n```\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are car. \n        Output: \n```\ncar,car,car,car,car,car,"}
{"cat": "vehicles", "slot": "specialization", "value": "ballistic capsule", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are ballistic capsule. \n        Output: ", "result": "\n        helicopter, fighter, bomber, submarine, tank, missile, satellite, spacecraft, rocket, gunboat.\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are ballistic capsule\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == \"animals\":\n        words ="}
{"cat": "vehicles", "slot": "specialization", "value": "dump truck", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are dump truck. \n        Output: ", "result": "1. dump, 2. truck, 3. hauler, 4. tipper, 5. dumper, 6. payload, 7. tipper, 8. bulldozer, 9. excavator, 10. loader.\n    \"\"\"\n    dump_truck_words = [\"dump\", \"truck\", \"hauler\", \"tipper\", \"dumper\", \"payload\", \"tipper\", \"bulldozer\", \"excavator\", \"loader\"]\n    dump_truck_words = [word for word"}
{"cat": "vehicles", "slot": "specialization", "value": "cutter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are cutter. \n        Output: ", "result": "\n```\ncar, cutter, cutter, cutter, cutter, cutter, cutter, cutter, cutter\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "patrol boat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are patrol boat. \n        Output: ", "result": "\n```\npatrol,boat,sea,force,protection,security,navy,vessel,coast,guard\n```\nExplanation: The word `patrol` belongs to the category `vehicles` and satisfies the condition of being a `patrol boat`. The other words in the list also belong to the category `vehicles` and satisfy the condition of being `patrol boats`."}
{"cat": "vehicles", "slot": "specialization", "value": "minibike", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are minibike. \n        Output: ", "result": "50, 125, 250, 500, 750, 1000, 1250, 1500, 2000, 2500, 3000\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"minibike\" in word:\n            words.append(word)\n    return \", \".join(words)\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\""}
{"cat": "vehicles", "slot": "specialization", "value": "compact car", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are compact car. \n        Output: ", "result": "\n```\ncivic, corolla, focus, mazda3, prius, yaris, toyota, honda, nissan, subaru\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n```\norange, lemon, lime, grapefruit, tanger"}
{"cat": "vehicles", "slot": "specialization", "value": "cruiser", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are cruiser. \n        Output: ", "result": "\n        convertible, cruiser, harley, hog, motorcycle, rocker, touring, v-twin, v-twin cruiser, v-twin motorcycle \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are cruiser\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"vehicles\", \"are car\"))\nprint(get_words(\"vehicles\", \"have 4 wheels\"))\nprint"}
{"cat": "vehicles", "slot": "specialization", "value": "rocket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are rocket. \n        Output: ", "result": "\n```\nrocket, spacecraft, satellite, launch, ignition, fuel, propulsion, trajectory, orbit, reentry\n```\nExplanation:\nThe words that belong to the category \"vehicles\" and satisfy the condition \"are rocket\" are \"rocket, spacecraft, satellite, launch, ignition, fuel, propulsion, trajectory, orbit, reentry\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles."}
{"cat": "vehicles", "slot": "specialization", "value": "car transporter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are car transporter. \n        Output: ", "result": "4x4, flatbed, trailer, tow, transport, carrier, pickup, SUV, van, truck. \n        \"\"\"\n        category = \"vehicles\"\n        condition = \"are car transporter\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    print(get_words(\"vehicles\", \"are car transporter\"))\n```\nOutput: \n4x4, flatbed, trailer, tow, transport, carrier, pickup, SUV, van, truck."}
{"cat": "vehicles", "slot": "specialization", "value": "steamboat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are steamboat. \n        Output: ", "result": "\n        steamboat, steamship, paddlewheeler, sternwheeler, sidewheeler, screwboat, tugboat, towboat, packetboat, clipperboat.\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are steamboat\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"are cars\"))  # comma separated list of words\nprint(get_words(\"veh"}
{"cat": "vehicles", "slot": "specialization", "value": "pirate ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are pirate ship. \n        Output: ", "result": "\n        ship, cannon, treasure, map, compass, pirate, skull, anchor, Jolly Roger, parrot\n```\n\n```\nDescribe a scenario where the input is a list of 10 words, where each word belongs to a different category and satisfies a certain condition. \n        Provide a list of 10 words that belong to the categories and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are pirate ship. \n        Input: car, boat, plane"}
{"cat": "vehicles", "slot": "specialization", "value": "patrol ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are patrol ship. \n        Output: ", "result": "\n```\npatrol, cruiser, destroyer, frigate, corvette, sloop, cutter, gunboat, monitor, battleship\n```\n\n### Example 2:\n```\n\n```\npatrol, cruiser, destroyer, frigate, corvette, sloop,"}
{"cat": "vehicles", "slot": "specialization", "value": "surfboat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are surfboat. \n        Output: ", "result": "\n```\nsurf,boat,surfboard,wave,rider,surfing,beach,ocean,surfline,surfpark\n```\nExplanation: The word `surf` belongs to the category `vehicles` and satisfies the condition of being a `surfboat`. The word `surfboard` also belongs to the category `vehicles` and satisfies the condition of being a `surfboat`. The word `wave` also belongs to the category `vehicles` and satisfies the condition of being a `surfboat`."}
{"cat": "vehicles", "slot": "specialization", "value": "packet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are packet. \n        Output: ", "result": "\n```\ncar,truck,van,bus,boat,plane,train,ship,helicopter,motorcycle\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "river boat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are river boat. \n        Output: ", "result": "\n        river,boat,current,navigate,hull,propeller,deck,passenger,captain,bridge\n```\n\n```\nDescribe a scenario where the input is a list of strings, where each string is a category and a list of words that belong to that category. \n        The words in each list should be sorted alphabetically. \n        The goal is to group the words that belong to the same category together. \n        The output should be a dictionary where the key is the category and the value is a list of words that belong to that category. \n       "}
{"cat": "vehicles", "slot": "specialization", "value": "patrol car", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are patrol car. \n        Output: ", "result": "\n```\npatrol,car,vehicle,police,cruiser,unit,transportation,vehicle,car\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "hulk", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are hulk. \n        Output: ", "result": "\n        car,truck,van,SUV,jeep,tractor,bulldozer,semi,bus,boat\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are hulk\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"animals\", \"are mammals\"))\nprint(get_words(\"colors\", \"are primary\"))\nprint(get_words(\"vehicles\", \"are cars\"))\nprint("}
{"cat": "vehicles", "slot": "specialization", "value": "tipper lorry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are tipper lorry. \n        Output: ", "result": "\n            tipper, lorry, tipper, lorry, tipper, lorry, tipper, lorry, tipper, lorry, tipper, lorry. \n        \"\"\"\n        category = Category.objects.get(name='vehicles')\n        condition = Condition.objects.get(name='are tipper lorry')\n        words = []\n        for word in Word.objects.all():\n            if word.category == category and word.condition == condition:\n                words.append(word.word)\n        result = ', '.join(words)"}
{"cat": "vehicles", "slot": "specialization", "value": "jeep", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are jeep. \n        Output: ", "result": "4x4, off-road, rugged, SUV, Jeep, Wrangler, Grand Cherokee, Cherokee, Compass, Renegade. \n        \"\"\"\n        category = Category.objects.get(name='vehicles')\n        condition = Condition.objects.get(name='are jeep')\n        queryset = Vehicle.objects.filter(category=category, condition=condition)\n        words = [word.name for word in queryset]\n        return ', '.join(words)\n\n    def describe_vehicle"}
{"cat": "vehicles", "slot": "specialization", "value": "tractor trailer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are tractor trailer. \n        Output: ", "result": "18 Wheeler, Semi Truck, Tractor Trailer, Big Rig, 18 Wheeler Truck, Semi Truck Trailer, Tractor Trailer Truck, Big Rig Truck, 18 Wheeler Semi, Semi Truck Trailer, Tractor Trailer Semi, Big Rig Semi, 18 Wheeler Tractor, Tractor Trailer 18 Wheeler, Semi Truck 18 Wheeler, Big Rig 18 Wheeler, 18 Wheeler Semi Truck, Semi Tractor Trailer"}
{"cat": "vehicles", "slot": "specialization", "value": "ferry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are ferry. \n        Output: ", "result": "\n        ferry,boat,ship,ferryboat,ferryship,ferryboatship,ferryshipboat,ferryboatshipboat,ferryshipboatboat,ferryboatshipboatboat,ferryshipboatboatboat\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are ferry\"\n    words = [\"ferry\", \"boat\", \"ship\", \"ferryboat\", \"ferryship\", \"ferryboatship\", \"ferryshipboat\", \""}
{"cat": "vehicles", "slot": "specialization", "value": "punt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are punt. \n        Output: ", "result": " punt, punt, punt, punt, punt, punt, punt, punt, punt. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are punt\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == \"animals\":\n        words = [\"cat\", \"dog\", \"elephant\", \"giraffe\","}
{"cat": "vehicles", "slot": "specialization", "value": "wreck", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are wreck. \n        Output: ", "result": "\n        car,truck,accident,crash,wreck,damage,repair,insurance,accident,crash,wreck,damage,repair,insurance,accident,crash,wreck,damage,repair,insurance,accident,crash,wreck,damage,repair,insurance,accident,crash,wreck,damage,repair,insurance,accident,crash,wreck,damage,repair,insurance,accident,crash,wreck,damage,rep"}
{"cat": "vehicles", "slot": "specialization", "value": "limo", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are limo. \n        Output: ", "result": "\n```\nlimo, sedan, car, van, bus, taxi, shuttle, SUV, minivan, coach\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are car. \n        Output: \n```\ncar, truck, van, sedan, SUV, minivan, bus, taxi, motorcycle, bicycle\n```\n\n```\nProvide a"}
{"cat": "vehicles", "slot": "specialization", "value": "heap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are heap. \n        Output: ", "result": "4x4, 6x6, 8x8, 10x10, 12x12, 14x14, 16x16, 18x18, 20x20, 22x22. \n        Explanation: 4x4, 6x6, 8x8, 10x10, 12x12, 14x14, 16x16, 18x18, 20x20, "}
{"cat": "vehicles", "slot": "specialization", "value": "tandem", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are tandem. \n        Output: ", "result": "\n```\ncar, truck, bus, motorcycle, bicycle, snowmobile, ATV, boat, plane, train\n```\nExplanation:\n\n* The category is \"vehicles\"\n* The condition is \"are tandem\"\n* The output is a comma-separated list of 10 words that belong to the category and satisfy the condition.\n```python\nimport random\n\ncategory = \"vehicles\"\ncondition = \"are tandem\"\n\nwords = [\"car\", \"truck\", \"bus\", \"motorcycle\", \"bicycle"}
{"cat": "vehicles", "slot": "specialization", "value": "gunboat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are gunboat. \n        Output: ", "result": "\n```\ngunboat, destroyer, battleship, cruiser, submarine, aircraft carrier, frigate, corvette, patrol boat, amphibious assault ship\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are car. \n        Output: \n```\ncar, truck, van, SUV, minivan, sedan,"}
{"cat": "vehicles", "slot": "specialization", "value": "taxicab", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are taxicab. \n        Output: ", "result": "\n```\ncar,taxi,cab,limo,shuttle,van,bus,truck,SUV,taxi-cab\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "bogy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are bogy. \n        Output: ", "result": "\n            car, truck, van, bus, boat, motorcycle, bike, train, airplane, subway\n\"\"\"\n\n# Define the function\ndef get_vehicle_words(category, condition):\n    # Create an empty list to store the words\n    vehicle_words = []\n    \n    # Loop through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if word.category == category and word.satisfies(condition):\n            # Add the word to the"}
{"cat": "vehicles", "slot": "specialization", "value": "scooter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are scooter. \n        Output: ", "result": "50, 125, 250, 300, 350, 500, 650, 750, 1000, 1250\n    \"\"\"\n    scooter_words = [\"Vespa\", \"Scooter\", \"Piaggio\", \"Honda\", \"Suzuki\", \"Kawasaki\", \"Yamaha\", \"KTM\", \"BMW\"]\n    scooter_words = [word for word in scooter_words if word.startswith(\"Sco"}
{"cat": "vehicles", "slot": "specialization", "value": "bulldozer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are bulldozer. \n        Output: ", "result": "\n        bulldozer,excavator,backhoe,digger,dozer,loader,shovel,dumper,graders,excavator\n```\n\n```\nDescribe a scenario where the input is a list of strings, where each string is a word belonging to one of the following categories: vehicles, animals, or fruits. \n        The words are sorted in alphabetical order. \n        The task is to group the words into categories such that each category contains only words that start with the same letter. \n        The output should be a list of"}
{"cat": "vehicles", "slot": "specialization", "value": "treasure ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are treasure ship. \n        Output: ", "result": "\n```\ntreasure,ship,sea,adventure,pirate,gold,jewel,jewelry,treasure chest,X Marks the Treasure\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "horsecar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are horsecar. \n        Output: ", "result": "\n        horse\n        carriage\n        coach\n        buggy\n        chariot\n        wagon\n        cart\n        dray\n        coachman\n        harness \n    \"\"\"\n    words = [\n        \"horse\",\n        \"carriage\",\n        \"coach\",\n        \"buggy\",\n        \"chariot\",\n        \"wagon\",\n        \"cart\",\n        \"dray\",\n        \"coachman\",\n        \"harness\"\n    ]\n    if category == \"vehicles\" and condition == \"are horsecar"}
{"cat": "vehicles", "slot": "specialization", "value": "tandem bicycle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are tandem bicycle. \n        Output: ", "result": "\n        tandem,bicycle,tandem-bicycle,tandem-bicycles,tandem-tandem-bicycle,tandem-tandem-bicycles,tandem-tandem-tandem-bicycle,tandem-tandem-tandem-tandem-bicycle,tandem-tandem-tandem-tandem-tandem-bicycle,tandem-tandem-tandem-tandem-tandem-tandem-bicycle,tandem-tandem-tandem-tandem-tandem-"}
{"cat": "vehicles", "slot": "specialization", "value": "sailing ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are sailing ship. \n        Output: ", "result": "\n```\nsail, ship, mast, deck, hull, rudder, sailor, anchor, ocean, wind\n```\nExplanation:\nThe words that belong to the category \"vehicles\" and satisfy the condition \"are sailing ship\" are: sail, ship, mast, deck, hull, rudder, sailor, anchor, ocean, and wind.\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "fishing boat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are fishing boat. \n        Output: ", "result": "\n```\nboat,fishing,hull,deck,outboard,motor,propeller,anchor,tackle,fishing_boat\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "towboat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are towboat. \n        Output: ", "result": "1.towboat, 2.towboat, 3.towboat, 4.towboat, 5.towboat, 6.towboat, 7.towboat, 8.towboat, 9.towboat, 10.towboat.\n    \"\"\"\n    words = Category.objects.filter(category='vehicles').filter(Q(name__contains='towboat') | Q(description__contains='towboat')).values_list"}
{"cat": "vehicles", "slot": "specialization", "value": "motorbike", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are motorbike. \n        Output: ", "result": "50cc, 125cc, 250cc, 500cc, 650cc, 1000cc, 1250cc, 2500cc, 5000cc, 10000cc. \n        Explanation: 50cc, 125cc, 250cc, 500cc, 650cc, 1000cc, 1250cc, 2500cc, 5000cc,"}
{"cat": "vehicles", "slot": "specialization", "value": "scrambler", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are scrambler. \n        Output: ", "result": "250, 450, 650, 850, 1050, 1250, 1450, 1650, 1850, 2050.\n    \"\"\"\n    scrambler_vehicles = [250, 450, 650, 850, 1050, 1250, 1450, 1650, 1850, 2050]\n    scramb"}
{"cat": "vehicles", "slot": "specialization", "value": "electric", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are electric. \n        Output: ", "result": "\n            \n```"}
{"cat": "vehicles", "slot": "specialization", "value": "mackinaw", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are mackinaw. \n        Output: ", "result": "\n        Mackinaw, Mackinaw, Mackinaw, Mackinaw, Mackinaw, Mackinaw, Mackinaw, Mackinaw, Mackinaw, Mackinaw. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'are mackinaw'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('vehicles', 'are mackinaw'))\n```\nOutput:\nMackinaw, Mackinaw, Mackinaw, Mackina"}
{"cat": "vehicles", "slot": "specialization", "value": "angledozer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are angledozer. \n        Output: ", "result": "\n        car, angle, dozer, angled, dozers, angledozer, angledozers, angled-dozer, angled-dozers, angled-angledozer, angled-angledozers, angled-angled-dozer, angled-angled-dozers, angled-angled-angledozer, angled-angled-angledozers, angled-angled-angled-dozer, angled-angled-angled-dozers, angled-angled-ang"}
{"cat": "vehicles", "slot": "specialization", "value": "safety bike", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are safety bike. \n        Output: ", "result": "\n```\nsafety,bike,helmet,gloves,reflectors,lights,knee-pads,elbow-pads,hand-grips\n```\nExplanation: The words that belong to the category of vehicles and satisfy the condition of being safety bikes are: safety, bike, helmet, gloves, reflectors, lights, knee-pads, elbow-pads, and hand-grips."}
{"cat": "vehicles", "slot": "specialization", "value": "cart", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are cart. \n        Output: ", "result": "\n        car, truck, van, bus, trailer, wagon, cart, buggy, rickshaw, taxi\n    \"\"\"\n    cart_vehicles = [\"car\", \"truck\", \"van\", \"bus\", \"trailer\", \"wagon\", \"cart\", \"buggy\", \"rickshaw\", \"taxi\"]\n    cart_vehicles = [word for word in cart_vehicles if \"cart\" in word]\n    cart_vehicles = [word for word in cart_vehicles if \"car\" in word]\n"}
{"cat": "vehicles", "slot": "specialization", "value": "whaler", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are whaler. \n        Output: ", "result": "\n```\ncar,truck,van,SUV,minivan,sedan,jeep,crossover,pickup,wagon\n```\n\nExample 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are not whaler. \n        Output: \n```\ncar,truck,van,SUV,minivan,sedan,jeep,crossover,pick"}
{"cat": "vehicles", "slot": "specialization", "value": "single-rotor helicopter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are single-rotor helicopter. \n        Output: ", "result": "350, 355, 360, 365, 370, 375, 380, 385, 390, 395 \n    \"\"\"\n    words = []\n    for i in range(1, 10):\n        for j in range(1, 10):\n            for k in range(1, 10):\n                for l in range(1, 10):\n                    for m in range(1, 10):\n                        for n"}
{"cat": "vehicles", "slot": "specialization", "value": "shipwreck", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are shipwreck. \n        Output: ", "result": "\n```\nboat, ship, sinking, wreck, rescue, survivor, lifeboat, sea, storm\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are shipwreck\" are: boat, ship, sinking, wreck, rescue, survivor, lifeboat, sea, and storm.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals."}
{"cat": "vehicles", "slot": "specialization", "value": "Stanley Steamer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are Stanley Steamer. \n        Output: ", "result": "\n        steam,steamers,steaming,steamship,steamboat,steamroller,\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "three-decker", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are three-decker. \n        Output: ", "result": "\n        car, bus, truck, van, train, boat, airplane, subway, taxi, motorcycle\n```\n\nExample 2:\n```\nInput:\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammals. \n        Output: \n        dog, cat, elephant, giraffe, whale, dolphin, cow, pig, horse, sheep\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "compact", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are compact. \n        Output: ", "result": "\n            car, van, truck, minivan, sedan, hatchback, coupe, sports car, compact car, compact van\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are compact\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition within the category.\n    \"\"\"\n    if category == \"animals\":\n        words = [word for word in AN"}
{"cat": "vehicles", "slot": "specialization", "value": "nuclear-powered ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are nuclear-powered ship. \n        Output: ", "result": "\n        aircraft carrier, submarine, nuclear-powered ship, nuclear-powered submarine, nuclear-powered aircraft carrier, nuclear-powered aircraft carrier, nuclear-powered submarine, nuclear-powered aircraft carrier, nuclear-powered submarine, nuclear-powered aircraft carrier, nuclear-powered submarine, nuclear-powered aircraft carrier, nuclear-powered submarine, nuclear-powered aircraft carrier, nuclear-powered submarine, nuclear-powered aircraft carrier, nuclear-powered submarine, nuclear-powered aircraft carrier,"}
{"cat": "vehicles", "slot": "specialization", "value": "powerboat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are powerboat. \n        Output: ", "result": "\n```\npowerboat, speedboat, motorboat, yacht, sailboat, catamaran, jetski, pontoon, hydroplane, ferry\n```\nExplanation:\n\n1. The category is \"vehicles\".\n2. The condition is \"are powerboat\".\n3. The words that satisfy the condition are: powerboat, speedboat, motorboat, yacht, sailboat, catamaran, jetski, pontoon, hydroplane, ferry.\n4. The words are separated by commas.\n"}
{"cat": "vehicles", "slot": "specialization", "value": "pickup truck", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are pickup truck. \n        Output: ", "result": "1. Pickup, 2. Truck, 3. Pick-up, 4. Pickup, 5. Pick-up, 6. Pickup, 7. Pickup, 8. Pickup, 9. Pickup, 10. Pickup.\n    \"\"\"\n    category = 'vehicles'\n    condition = 'are pickup truck'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition"}
{"cat": "vehicles", "slot": "specialization", "value": "training ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are training ship. \n        Output: ", "result": "\n```\naircraft carrier, battleship, cruiser, destroyer, frigate, submarine, aircraft carrier, battleship, cruiser, destroyer, frigate, submarine\n```\nExplanation: The words that belong to the category of vehicles and satisfy the condition of being training ships are: aircraft carrier, battleship, cruiser, destroyer, frigate, and submarine.\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "milkwagon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are milkwagon. \n        Output: ", "result": "\n```\nmilkwagon,milkfloat,milkcart,milkbarrow,milkfloat,milkcart,milkbarrow,milkfloat,milkcart,milkbarrow\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are milkwagon\" are \"milkwagon\", \"milkfloat\", \"milkcart\", \"milkbarrow\", \"milkfloat\", \"milkcart\", \"milkbarrow\", \"milkfloat\", \"milkcart\", \"milkbarrow\"."}
{"cat": "vehicles", "slot": "specialization", "value": "space vehicle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are space vehicle. \n        Output: ", "result": "\n        Mars Rover, Space Shuttle, International Space Station, Saturn V, Hubble Space Telescope, Skylab, SpaceX Dragon, SpaceX Falcon 9, Soyuz, SpaceX Crew Dragon.\n    \"\"\"\n    category = 'vehicles'\n    condition = 'are space vehicle'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category"}
{"cat": "vehicles", "slot": "specialization", "value": "minicab", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are minicab. \n        Output: ", "result": "\n        taxi, minicab, black cab, private hire, hackney carriage, minivan, people carrier, saloon, estate, MPV.\n    \"\"\"\n    category = 'vehicles'\n    condition = 'are minicab'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Example usage\nprint(get_words('animals', 'are mammals'))\nprint(get_words('vehicles', 'are cars'))\nprint(get_words('vehicles', 'are min"}
{"cat": "vehicles", "slot": "specialization", "value": "guard boat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are guard boat. \n        Output: ", "result": "\n```\nguard boat, patrol boat, security boat, protection boat, defense boat, surveillance boat, watch boat, monitor boat, safety boat\n```\nExplanation:\nThe words that belong to the category \"vehicles\" and satisfy the condition \"are guard boat\" are:\nguard boat, patrol boat, security boat, protection boat, defense boat, surveillance boat, watch boat, monitor boat, safety boat.\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "cab", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are cab. \n        Output: ", "result": "\n```\ncab, car, van, truck, bus, taxi, limo, shuttle, minivan, SUV\n```\nExplanation: The words that belong to the category `vehicles` and satisfy the condition `are cab` are `cab`, `car`, `van`, `truck`, `bus`, `taxi`, `limo`, `shuttle`, `minivan`, and `SUV`.\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "school ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are school ship. \n        Output: ", "result": "\n            1. bus\n            2. school\n            3. ship\n            4. bus\n            5. school\n            6. ship\n            7. bus\n            8. school\n            9. ship\n            10. bus\n        \"\"\"\n        words = [\n            \"bus\",\n            \"school\",\n            \"ship\",\n            \"bus\",\n            \"school\",\n            \"ship\",\n            \"bus\",\n            \"school\",\n            \"ship\",\n            \"bus\"\n        ]\n        return \", \".join(sorted(words, key=lambda x:"}
{"cat": "vehicles", "slot": "specialization", "value": "cargo vessel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are cargo vessel. \n        Output: ", "result": "\n            1. Container\n            2. Cargo\n            3. Ship\n            4. Vessel\n            5. Freight\n            6. Maritime\n            7. Transport\n            8. Logistics\n            9. Ocean\n            10. Carrier\n        \"\"\"\n        category = 'vehicles'\n        condition = 'are cargo vessel'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def describe_category(self, category):\n        \"\"\"\n        Provide a brief description of the category. \n"}
{"cat": "vehicles", "slot": "specialization", "value": "stealth aircraft", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are stealth aircraft. \n        Output: ", "result": "\n            F-117A, B-2, B-21, F-35, F-22, F-23, X-47B, X-45C, X-44, X-43\n        \"\"\"\n        category = \"vehicles\"\n        condition = \"are stealth aircraft\"\n        words = []\n        for word in all_words:\n            if \"stealth\" in word and \"aircraft\" in word and word.startswith(category):\n                words.append(word)\n        result = \", \"."}
{"cat": "vehicles", "slot": "specialization", "value": "tow car", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are tow car. \n        Output: ", "result": "4x4, Estate, MPV, Off-road, Pick-up, Saloon, Sports, SUV, Van, Wagon.\n    \"\"\"\n    category = 'vehicles'\n    condition = 'are tow car'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == 'animals':\n        words = [x"}
{"cat": "vehicles", "slot": "specialization", "value": "shrimper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are shrimper. \n        Output: ", "result": "\n```\nboat, shrimp, trawler, nets, deck, motor, captain, crew, harvest, fishing\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are shrimper\" are: boat, shrimp, trawler, nets, deck, motor, captain, crew, harvest, fishing.\n```python\nimport random\n\ncategory = \"vehicles\"\ncondition = \"are shrimper\"\n\ndef get_words(category, condition):\n    words = []"}
{"cat": "vehicles", "slot": "specialization", "value": "road roller", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are road roller. \n        Output: ", "result": "\n            1. Roller\n            2. Road\n            3. Roller\n            4. Road\n            5. Roller\n            6. Road\n            7. Roller\n            8. Road\n            9. Roller\n            10. Road\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are road roller\"\n    words = get_words(category, condition)\n    return \", \".join(sorted(words))\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of"}
{"cat": "vehicles", "slot": "specialization", "value": "stock car", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are stock car. \n        Output: ", "result": "4, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, "}
{"cat": "vehicles", "slot": "specialization", "value": "camion", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are camion. \n        Output: ", "result": "1. camion, 2. camion, 3. camion, 4. camion, 5. camion, 6. camion, 7. camion, 8. camion, 9. camion, 10. camion. \n        \"\"\"\n        words = []\n        for word in words:\n            if word.lower() == \"camion\" and word.isalpha():\n                words.append(word)\n        return \", \".join(words)\n\n# Define the function\ndef get_vehicle_words(category"}
{"cat": "vehicles", "slot": "specialization", "value": "minesweeper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are minesweeper. \n        Output: ", "result": "1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    \"\"\"\n    words = []\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if is_mine(i, j) and is_vehicle(i, j):\n                words.append(str(i) + str(j))\n                break\n    return words\n\ndef is_mine(row, col):\n    \"\"\"\n    Determine if the"}
{"cat": "vehicles", "slot": "specialization", "value": "bandwagon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are bandwagon. \n        Output: ", "result": "\n        car, van, bus, taxi, limo, truck, train, boat, bike, subway\n```\n\n```\nDescribe a scenario where the category is \"animals\" and the condition is \"have wings\". \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: have wings. \n        Output: \n        bird, butterfly, bat, bee, dragonfly, humming"}
{"cat": "vehicles", "slot": "specialization", "value": "sister ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are sister ship. \n        Output: ", "result": "\n            \n```"}
{"cat": "vehicles", "slot": "specialization", "value": "cargo ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are cargo ship. \n        Output: ", "result": "\n            container, cargo, ship, port, transport, freight, maritime, shipping, logistics, cargo ship.\n        \"\"\"\n        category = 'vehicles'\n        condition = 'are cargo ship'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def describe_category(self, category):\n        \"\"\"\n        Provide a brief description of the category. \n        Category: vehicles. \n        Desired output: brief description of the category. \n        \"\"\"\n        category = 'vehicles'"}
{"cat": "vehicles", "slot": "specialization", "value": "minibus", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are minibus. \n        Output: ", "result": "\n```\nminibus, coach, bus, lorry, van, car, truck, taxi, limousine, minivan\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are minibus\" are \"minibus, coach, bus, lorry, van, car, truck, taxi, limousine, minivan\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles"}
{"cat": "vehicles", "slot": "specialization", "value": "turbojet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are turbojet. \n        Output: ", "result": "727, F-15, F-16, F/A-18, F-22, F-35, F-14, F-117, F-22\n    \"\"\"\n    turbojet_vehicles = [\n        \"727\", \"F-15\", \"F-16\", \"F/A-18\", \"F-22\", \"F-35\", \"F-14\", \"F-117\", \"F-22\"\n    ]\n    turbojet_ve"}
{"cat": "vehicles", "slot": "specialization", "value": "tourer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are tourer. \n        Output: ", "result": "\n        caravan, motorhome, camper, tourer, trailer, RV, caravanette, motorhome, campervan, touring caravan \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are tourer\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"vehicles\", \"are car\"))\nprint(get_words(\"vehicles\", \"are van\"))\nprint(get_words(\"vehicles\","}
{"cat": "vehicles", "slot": "specialization", "value": "pace car", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are pace car. \n        Output: ", "result": "\n            1. pace\n            2. car\n            3. vehicle\n            4. race\n            5. track\n            6. driver\n            7. lead\n            8. safety\n            9. marshal\n            10. flag\n        \"\"\"\n        category = \"vehicles\"\n        condition = \"are pace car\"\n        words = []\n        for word in get_words(category, condition):\n            if word.lower() == \"pace car\":\n                words.append(word)\n            elif word.lower() in [\"car\", \"vehicle\", \""}
{"cat": "vehicles", "slot": "specialization", "value": "lightship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are lightship. \n        Output: ", "result": "\n```\ncar, truck, bus, train, airplane, boat, submarine, hovercraft, helicopter, motorcycle\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammals. \n        Output: \n```\ncat, dog, cow, pig, horse, elephant, giraffe, whale, dolphin,"}
{"cat": "vehicles", "slot": "specialization", "value": "tram", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are tram. \n        Output: ", "result": "\n```\ntram,streetcar,trolley,tramway,railcar,railway,trackless,trolleybus,tram-train,light rail\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "tipper truck", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are tipper truck. \n        Output: ", "result": "\n        tipper, tipper, tipper, tipper, tipper, tipper, tipper, tipper, tipper, tipper. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are tipper truck\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(tipper_truck_words())\n```\nOutput:\ntipper, tipper, tipper, tipper, tipper, tipper, tipper, tipper, tipper, ti"}
{"cat": "vehicles", "slot": "specialization", "value": "projectile", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are projectile. \n        Output: ", "result": " bullet, cannonball, missile, projectile, shot, shell, dart, arrow, spear, slingshot.\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are projectile\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"animals\", \"are mammals\"))  # comma separated list of words\nprint(get_words(\"vehicles\", \"have more than 4 wheels\"))  # comma separated list of words\nprint("}
{"cat": "vehicles", "slot": "specialization", "value": "taxi", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are taxi. \n        Output: ", "result": "\n```\ntaxi, cab, ride, transport, hire, ride-sharing, taxi-app, black-car, limo, shuttle\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are taxi\" are \"taxi\", \"cab\", \"ride\", \"transport\", \"hire\", \"ride-sharing\", \"taxi-app\", \"black-car\", \"limo\", and \"shuttle\".\n```\nProvide a list of 10 words that belong to the category and satisfy"}
{"cat": "vehicles", "slot": "specialization", "value": "gypsy cab", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are gypsy cab. \n        Output: ", "result": "\n```\ntaxi, cab, gypsy, horse, carriage, rickshaw, shuttle, van, bus, minibus\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are motorcycles. \n        Output: \n```\nmotorcycle, scooter, moped, dirt bike, sport bike, cruiser, touring bike,"}
{"cat": "vehicles", "slot": "specialization", "value": "dozer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are dozer. \n        Output: ", "result": "\n        dozer,excavator,loader,backhoe,bulldozer,digger,dozer,excavator,loader,backhoe,bulldozer,digger,dozer,excavator,loader,backhoe,bulldozer,digger,dozer,excavator,loader,backhoe,bulldozer,digger,dozer,excavator,loader,backhoe,bulldozer,digger,dozer,excavator,loader,backhoe,bulld"}
{"cat": "vehicles", "slot": "specialization", "value": "Model T", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are Model T. \n        Output: ", "result": "\n        Ford, Model T, Ford Model T, Model T Ford, Ford Model T Ford, Model T Ford, Ford Model T, Ford Model T Ford, Model T Ford. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'are Model T'\n        words = []\n        for word in text.split():\n            if condition in word:\n                words.append(word)\n        result = ', '.join(words)\n        print(result)\n```\nExplanation:\n\n1. First, we define the category of the words we are looking for"}
{"cat": "vehicles", "slot": "specialization", "value": "limousine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are limousine. \n        Output: ", "result": "1. Limousine, 2. Limousine, 3. Limousine, 4. Limousine, 5. Limousine, 6. Limousine, 7. Limousine, 8. Limousine, 9. Limousine, 10. Limousine. \n    \"\"\"\n    limousine_words = [\n        \"Stretch limousine\",\n        \"Limousine\",\n        \"Limousine\",\n        \"Limousine\",\n        \"Limousine\",\n        \"L"}
{"cat": "vehicles", "slot": "specialization", "value": "steamroller", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are steamroller. \n        Output: ", "result": "\n```\nsteamroller, steamroller, steamroller, steamroller, steamroller, steamroller, steamroller, steamroller, steamroller\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "squad car", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are squad car. \n        Output: ", "result": "\n```\nsquad,car,vehicle,police,cruiser,patrol,unit,transportation,vehicle\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "tramcar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are tramcar. \n        Output: ", "result": "\n```\ntramcar, streetcar, trolley, tram, railcar, trackless trolley,\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "abandoned ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are abandoned ship. \n        Output: ", "result": "\n            1. Abandon\n            2. Abandoned\n            3. Abandonment\n            4. Abandonee\n            5. Abandonment\n            6. Abandonment\n            7. Abandoned\n            8. Abandoned\n            9. Abandoned\n            10. Abandoned\n        \"\"\"\n        words = []\n        for word in Category.objects.filter(category='vehicles', condition='are abandoned ship'):\n            words.append(word.name)\n        return words\n\n    @staticmethod\n    def get_ve"}
{"cat": "vehicles", "slot": "specialization", "value": "used-car", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used-car. \n        Output: ", "result": "4x4, convertible, hatchback, sedan, sports-car, station-wagon, SUV, van, minivan, pickup-truck\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are used-car\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of 10 words that belong to the category and satisfy the condition.\n        Desired output: a list of"}
{"cat": "vehicles", "slot": "specialization", "value": "fishing vessel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are fishing vessel. \n        Output: ", "result": "\n        fishing\\_boat, \n        trawler, \n        seiner, \n        long\\_liner, \n        purse seiner, \n        tuna\\_boat, \n        shrimp\\_boat, \n        crab\\_boat, \n        lobster\\_boat, \n        swordfisherman, \n        tuna\\_fisherman, \n        lobster\\_fisherman, \n        shrimp\\_fisherman, \n        crab\\_fisherman, \n        swordfisherman, \n       "}
{"cat": "vehicles", "slot": "specialization", "value": "prairie wagon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are prairie wagon. \n        Output: ", "result": "\n            1. prairie\n            2. wagon\n            3. canvas\n            4. wooden\n            5. wheels\n            6. axle\n            7. brakes\n            8. seat\n            9. steering\n            10. reins\n        \"\"\"\n        prairie_wagon_words = [\n            \"prairie\",\n            \"wagon\",\n            \"canvas\",\n            \"wooden\",\n            \"wheels\",\n            \"axle\",\n            \"brakes\",\n            \"seat\",\n            \"steering\",\n"}
{"cat": "vehicles", "slot": "specialization", "value": "scow", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are scow. \n        Output: ", "result": "\n```\ncar, truck, van, bus, train, boat, airplane, motorcycle, bicycle, scow\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "electric automobile", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are electric automobile. \n        Output: ", "result": "\n            \n```"}
{"cat": "vehicles", "slot": "specialization", "value": "small boat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are small boat. \n        Output: ", "result": "\n            speedboat, motorboat, yacht, sailboat, kayak, canoe, paddleboat, rowboat, dinghy, raft\n        \"\"\"\n        category = 'vehicles'\n        condition = 'are small boat'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def describe_category(self, category):\n        \"\"\"\n        Provide a brief description of the category. \n        Category: vehicles. \n        Desired output: brief description of vehicles. \n"}
{"cat": "vehicles", "slot": "specialization", "value": "hatchback", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are hatchback. \n        Output: ", "result": "\n```\nhatchback,beetle,civic,focus,golf,impreza,prius,soul,vega,yaris\n```\n\n```\nDesired input:\nprovide a list of 10 words that belong to the category and satisfy the condition.\n\nDesired output: comma separated list of words.\n\nCategory: vehicles.\nCondition: are hatchback.\n\nOutput: \n```\nhatchback,beetle,civic,focus,golf,impreza,prius,soul,"}
{"cat": "vehicles", "slot": "specialization", "value": "ice-wagon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are ice-wagon. \n        Output: ", "result": "1. Sleigh, 2. Ice-wagon, 3. Sleigh, 4. Ice-wagon, 5. Sleigh, 6. Ice-wagon, 7. Sleigh, 8. Ice-wagon, 9. Sleigh, 10. Ice-wagon.\n    \"\"\"\n    words = []\n    for word in words:\n        if \"ice-wagon\" in word:\n            if word not in words:\n                words.append(word)\n    return \" \".join(words)\n"}
{"cat": "vehicles", "slot": "specialization", "value": "landrover", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are landrover. \n        Output: ", "result": "4x4, Defender, Discovery, Freelander, Range Rover, Sport, Evoque,\n        Velar, Discovery Sport, LR4\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are landrover\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"vehicles\", \"are landrover\"))\n# Output: 4x4, Defender, Discovery, Freelander, Range Rover, Sport, E"}
{"cat": "vehicles", "slot": "specialization", "value": "icebreaker", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are icebreaker. \n        Output: ", "result": "\n```\nsnowmobile, iceboat, icebreaker, icefloe, icebreaker, icebreaker, icebreaker, icebreaker, icebreaker, icebreaker\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are icebreaker\" are: snowmobile, iceboat, icebreaker, icefloe, icebreaker, icebreaker, icebreaker, icebreaker, icebreaker, icebreaker.\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "bicycle-built-for-two", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are bicycle-built-for-two. \n        Output: ", "result": "\n```\nbicycle, built-for-two, handlebars, pedals, seat, wheels, chain, saddle, steering, brakes\n```\n\n```\nDesired input:\nprovide a list of 10 words that belong to the category and satisfy the condition.\n\nDesired output:\ncomma separated list of words.\n\nCategory: vehicles.\nCondition: are bicycle-built-for-two.\n\nOutput:\nbicycle, built-for-two, handlebars, pedals, seat, wheels, chain, saddle"}
{"cat": "vehicles", "slot": "specialization", "value": "canal boat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are canal boat. \n        Output: ", "result": "\n            1. Gondola\n            2. Barge\n            3. Canal\n            4. Lock\n            5. Navigable\n            6. River\n            7. Boatman\n            8. Waterway\n            9. Inland\n            10. Transportation\n        \"\"\"\n        category_words = [\"Gondola\", \"Barge\", \"Canal\", \"Lock\", \"Navigable\", \"River\", \"Boatman\", \"Waterway\", \"Inland\", \"Transportation\"]\n        category_words = [word for word in category_words if"}
{"cat": "vehicles", "slot": "specialization", "value": "cruise ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are cruise ship. \n        Output: ", "result": "\n            1. Cruise\n            2. Ship\n            3. Deck\n            4. Cabin\n            5. Crew\n            6. Port\n            7. Excursion\n            8. Dining\n            9. Entertainment\n            10. Spa\n        \"\"\"\n        cruise_ship_words = [\"Cruise\", \"Ship\", \"Deck\", \"Cabin\", \"Crew\", \"Port\", \"Excursion\", \"Dining\", \"Entertainment\", \"Spa\"]\n        return cruise_ship_words\n\n"}
{"cat": "vehicles", "slot": "specialization", "value": "bareboat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are bareboat. \n        Output: ", "result": "4x4, ATV, boat, jetski, motorboat, RV, sailboat, speedboat, yacht\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are bareboat\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Output"}
{"cat": "vehicles", "slot": "specialization", "value": "police boat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are police boat. \n        Output: ", "result": "\n```\npolice boat, police car, police helicopter, police motorcycle, police jeep, police van, police truck, police ambulance, police fire truck\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition of being police boats are \"police boat, police car, police helicopter, police motorcycle, police jeep, police van, police truck, police ambulance, police fire truck\"."}
{"cat": "vehicles", "slot": "specialization", "value": "fireboat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are fireboat. \n        Output: ", "result": "\n```\nfireboat, pumper, hose, water, extinguisher, firefighter, engine, pump, deck, hull\n```\nExplanation: The words that belong to the category of vehicles and satisfy the condition of being fireboats are: fireboat, pumper, hose, water, extinguisher, firefighter, engine, pump, deck, and hull.\n```python\ndef get_fireboat_words(category, condition):\n    words = []\n    for word in category:\n        if"}
{"cat": "vehicles", "slot": "specialization", "value": "police cruiser", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are police cruiser. \n        Output: ", "result": "\n        police,cruiser,patrol,car,vehicle,officer,patrolman,cruiser,policecar,policevehicle\n\"\"\"\n\n# Define the category and condition\ncategory = \"vehicles\"\ncondition = \"are police cruiser\"\n\n# Split the condition into words\ncondition_words = condition.split()\n\n# Initialize an empty list to store the words\nwords = []\n\n# Iterate over each word in the condition\nfor word in condition_words:\n    # If the word is in the NLT"}
{"cat": "vehicles", "slot": "specialization", "value": "slave ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are slave ship. \n        Output: ", "result": "\n            1. Slave Ship\n            2. Cargo\n            3. Hold\n            4. Deck\n            5. Captain\n            6. Crew\n            7. Engine\n            8. Navigation\n            9. Weapon\n            10. Hull\n        \"\"\"\n        slave_ship_words = [\"Slave Ship\", \"Cargo\", \"Hold\", \"Deck\", \"Captain\", \"Crew\", \"Engine\", \"Navigation\", \"Weapon\", \"Hull\"]\n        slave_ship_words = [word for word in slave_ship_"}
{"cat": "vehicles", "slot": "specialization", "value": "skibob", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are skibob. \n        Output: ", "result": "\n        skibob, skibobster, skibobster, skibobster, skibobster, skibobster, skibobster, skibobster, skibobster, skibobster. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'are skibob'\n        words = [word for word in generate_words(category) if word.lower() == condition.lower()]\n        return ', '.join(words)\n\n# Test the function\nprint(find_words(category='vehicles',"}
{"cat": "vehicles", "slot": "specialization", "value": "steamer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are steamer. \n        Output: ", "result": "1. Steamroller, 2. Steamboat, 3. Steamcar, 4. \n```"}
{"cat": "vehicles", "slot": "specialization", "value": "skyhook", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are skyhook. \n        Output: ", "result": "\n        skyhook,skyhook,skyhook,skyhook,skyhook,skyhook,skyhook,\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "tip truck", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are tip truck. \n        Output: ", "result": "\n        dump, truck, tipper, tipping, tipper, tipper, tipper, tipper, tipper, tipper. \n    \"\"\"\n    category = 'vehicles'\n    condition = 'are tip truck'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    from nltk.corpus import stopwords\n   "}
{"cat": "vehicles", "slot": "specialization", "value": "phaeton", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are phaeton. \n        Output: ", "result": "\n            horse-drawn carriage. \n            landaulet. \n            brougham. \n            tilbury. \n            barouche. \n            berline. \n            coup\u00e9 de ville. \n            victoria. \n            phaeton. \n            landau. \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are phaeton\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found"}
{"cat": "vehicles", "slot": "specialization", "value": "bus", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are bus. \n        Output: ", "result": "\n```\nbus, coach, lorry, minibus, double-decker, single-decker, articulated, midibus, microbus, double-deckers\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are car. \n        Output: \n```\ncar, sedan, hatchback, coupe, convertible, sports car, SUV, minivan, pick"}
{"cat": "vehicles", "slot": "specialization", "value": "loaner", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are loaner. \n        Output: ", "result": "\n```\ncar, truck, van, SUV, sedan, minivan, pickup, motorcycle, scooter, ATV\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are loaner\" are: car, truck, van, SUV, sedan, minivan, pickup, motorcycle, scooter, and ATV.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n       "}
{"cat": "vehicles", "slot": "specialization", "value": "articulated lorry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are articulated lorry. \n        Output: ", "result": "123, 456, 789, 1011, 1111, 1212, 1313, 1414, 1515, 1616, 1717, 1818, 1919, 2020, 2121, 2222, 2323, 2424, 2525, 2626, 2727, 2828,"}
{"cat": "vehicles", "slot": "specialization", "value": "motorboat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are motorboat. \n        Output: ", "result": "\n```\nmotorboat, speedboat, yacht, jetski, sailboat, powerboat, watercraft, boat, seaplane, hovercraft\n```\nExplanation:\n\n1. The category is \"vehicles\"\n2. The condition is \"are motorboat\"\n3. The words that satisfy the condition are:\n\t* motorboat\n\t* speedboat\n\t* yacht\n\t* jetski\n\t* sailboat\n\t* powerboat\n\t* watercraft\n\t* boat\n\t* seaplane"}
{"cat": "vehicles", "slot": "specialization", "value": "Conestoga", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are Conestoga. \n        Output: ", "result": "\n        trailer, wagon, covered, load-bearing, wooden, wheels, axle, draft, horse-drawn, cargo\n\"\"\"\n\n# Define the function\ndef get_vehicle_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    vehicle_words = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n       "}
{"cat": "vehicles", "slot": "specialization", "value": "trailer truck", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are trailer truck. \n        Output: ", "result": "123, 456, 789, 1011, 1213, 1415, 1617, 1819, 2021, 2223, 2425, 2627, 2829, 3031, 3233, 3435, 3637, 3839, 4041, 4243, 4445, 4647,"}
{"cat": "vehicles", "slot": "specialization", "value": "flatboat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are flatboat. \n        Output: ", "result": "\n        flatboat\n        keelboat\n        canoe\n        kayak\n        raft\n        skiff\n        pontoon\n        houseboat\n        barge\n        barges\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are flatboat\"\n    words = [\n        \"flatboat\",\n        \"keelboat\",\n        \"canoe\",\n        \"kayak\",\n        \"raft\",\n        \"skiff\",\n        \"pontoon\",\n        \"houseboat\",\n"}
{"cat": "vehicles", "slot": "specialization", "value": "transporter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are transporter. \n        Output: ", "result": "\n        car,truck,bus,van,SUV,minivan,taxi,shuttle,limo,SUV\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are transporter\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"vehicles\", \"are transporter\"))\n```\nOutput:\ncar,truck,bus,van,SUV,minivan,taxi,shuttle,limo,SUV\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "bogey", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are bogey. \n        Output: ", "result": "\n            car,truck,bus,boat,bike,motorcycle,train,airplane,helicopter,rickshaw\n\"\"\"\n\n# Define the function\ndef get_vehicle_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        # Check if"}
{"cat": "vehicles", "slot": "specialization", "value": "coupe", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are coupe. \n        Output: ", "result": "\n        sports car, convertible, coupe, sedan, hatchback, wagon, minivan, pickup truck, SUV, crossover\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are coupe\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"are sedan\"))\n# Output: \n# sports car, convertible, coupe, sedan, hatchback, wagon, minivan, pickup tr"}
{"cat": "vehicles", "slot": "specialization", "value": "trail bike", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are trail bike. \n        Output: ", "result": "250, 450, 50, 150, 250F, 250XC, 300, 350, 450XC, 500, 505, 530, 550, 650, 660, 750, 780, 850, 880, 900, 950, 1000, 1100, 1200, 1"}
{"cat": "vehicles", "slot": "specialization", "value": "ferryboat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are ferryboat. \n        Output: ", "result": "\n```\nferry,boat,water,transportation,vehicle,river,sea,passenger,ferryboat\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "water wagon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are water wagon. \n        Output: ", "result": "\n```\nwater,wagon,wagoner,wagonette,wagoneer,wagonette,wagoner,wagonette,wagonette,wagonette,wagonette,wagonette,wagonette,wagonette,wagonette,wagonette,wagonette,wagonette,wagonette,wagonette,wagonette,wagonette,wagonette,wagonette,wagonette,wagonette,wagonette,wagonette,wagonette,wagonette,wagonette,wagonette"}
{"cat": "vehicles", "slot": "specialization", "value": "sausage", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are sausage. \n        Output: ", "result": "\n```\ncar, truck, van, bus, motorcycle, bike, train, boat, airplane, subway\n```\nExplanation:\n\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Desired output: comma separated list of words.\n3. Category: vehicles.\n4. Condition: are sausage.\n5. Output: car, truck, van, bus, motorcycle, bike, train, boat, airplane, subway.\n6. Explanation:\n\t* The"}
{"cat": "vehicles", "slot": "specialization", "value": "jetliner", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are jetliner. \n        Output: ", "result": "787, A380, A350, A330, A320, A310, A300, A390, A340\n    \"\"\"\n    category = 'vehicles'\n    condition = 'are jetliner'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Sample usage\nprint(get_words('animals', 'are mammals'))\nprint(get_words('vehicles', 'are cars'))\nprint(get_words"}
{"cat": "vehicles", "slot": "specialization", "value": "sound truck", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are sound truck. \n        Output: ", "result": "1. truck, 2. sound, 3. trucks, 4. sounded, 5. trucking, 6. sounds, 7. trucking, 8. sound, 9. trucks, 10. sounds.\n    \"\"\"\n    words = []\n    for word in words:\n        if \"truck\" in word:\n            if \"sound\" in word:\n                words.append(word)\n        elif \"sound\" in word:\n            words.append(word)\n    return words\n\ndef count_"}
{"cat": "vehicles", "slot": "specialization", "value": "hoy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are hoy. \n        Output: ", "result": "\n```\ncar, truck, bus, train, boat, plane, motorcycle, bicycle, subway, taxi\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are hoy\" are \"car, truck, bus, train, boat, plane, motorcycle, bicycle, subway, taxi\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. "}
{"cat": "vehicles", "slot": "specialization", "value": "tow truck", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are tow truck. \n        Output: ", "result": "\n```\ntow,truck,heavy,vehicle,transport,wrecker,recovery,service,roadside,assistance\n```\nExplanation: The word `tow` satisfies the condition of being a tow truck. The word `truck` satisfies the condition of being a tow truck. The word `heavy` satisfies the condition of being a tow truck. The word `vehicle` satisfies the condition of being a tow truck. The word `transport` satisfies the condition of being a tow truck. The word `w"}
{"cat": "vehicles", "slot": "specialization", "value": "lighter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are lighter. \n        Output: ", "result": "4x4, convertible, coupe, hatchback, hybrid, minivan, pickup, roadster, sedan, sports. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'are lighter'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('vehicles', 'are lighter'))\n```\n\u8f93\u51fa\uff1a\n4x4, convertible, coupe, hatchback, hybrid, minivan, pickup, roadster, sedan, sports."}
{"cat": "vehicles", "slot": "specialization", "value": "trucking rig", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are trucking rig. \n        Output: ", "result": "1. Truck, 2. Rig, 3. Semi, 4. Tractor, 5. Trailer, 6. Semi-trailer, 7. Heavy-duty, 8. Long-haul, 9. Commercial, 10. Transportation.\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are trucking rig\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\""}
{"cat": "vehicles", "slot": "specialization", "value": "cargo helicopter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are cargo helicopter. \n        Output: ", "result": "\n        helicopter,chopper,cargo,heliport,helicopter-landing-pad,helicopter-hangar,helicopter-maintenance,helicopter-parts,helicopter-repair,helicopter-fuel\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are cargo helicopter\"\n    words = []\n    for word in text.split():\n        if word.lower() in CATEGORIES[category].lower() and word.lower() in CONDITIONS[condition].lower"}
{"cat": "vehicles", "slot": "specialization", "value": "gondola", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are gondola. \n        Output: ", "result": "\n```\ngondola, boat, Venice, transportation, water, Italy, scenic, tourist,\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: have wings. \n        Output: \n```\neagle, hawk, falcon, owl, butterfly, moth, bee, hummingbird, dragonfly,\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "tower", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are tower. \n        Output: ", "result": "\n```\ncar, truck, bus, tower, crane, drone, helicopter, airplane, boat, submarine\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "garbage truck", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are garbage truck. \n        Output: ", "result": "1. Garbage, 2. Truck, 3. Collection, 4. Service, 5. Vehicle, 6. Sanitation, 7. Waste, 8. Removal, 9. Dumpster, 10. Bin.\n    \"\"\"\n    category = 'vehicles'\n    condition = 'are garbage truck'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list"}
{"cat": "vehicles", "slot": "specialization", "value": "packet boat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are packet boat. \n        Output: ", "result": "\n            1. packet\n            2. boat\n            3. packetboat\n            4. packetship\n            5. packetship\n            6. packetship\n            7. packetship\n            8. packetship\n            9. packetship\n            10. packetship\n        \"\"\"\n        words = []\n        for word in category_vehicles:\n            if \"packet\" in word and \"boat\" in word and \"ship\" in word:\n                words.append(word)\n        return words\n\n    def get_vehicle_category(self,"}
{"cat": "vehicles", "slot": "specialization", "value": "shuttle helicopter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are shuttle helicopter. \n        Output: ", "result": "\n        shuttle,helicopter,aircraft,chopper,flight,sky,skyline,air,travel,transportation,aircraft,helicopter,shuttle,flight,skyline,air,travel,transportation,air,helicopter,shuttle,flight,skyline,air,travel,transportation,air,helicopter,shuttle,flight,skyline,air,travel,transportation,air,helicopter,shuttle,flight,skyline,air,travel,transportation"}
{"cat": "vehicles", "slot": "specialization", "value": "twinjet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are twinjet. \n        Output: ", "result": "787, A380, A350, A330, A320, A310, A300, A390, A340\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are twinjet\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"vehicles\", \"have 4 wheels\"))\nprint(get_words(\"vehicles\", \"have 2"}
{"cat": "vehicles", "slot": "specialization", "value": "hardtop", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are hardtop. \n        Output: ", "result": "\n        convertible, coupe, hatchback, hardtop, sedan, sports, station, wagon,\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "blockade-runner", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are blockade-runner. \n        Output: ", "result": "\n        speeder, starfighter, shuttle, blockade-runner, corvette, frigate, destroyer, cruiser, battleship, carrier\n\"\"\"\n\n# Define the function\ndef get_vehicle_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Loop through each word in the condition\n    for word in condition"}
{"cat": "vehicles", "slot": "specialization", "value": "sausage balloon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are sausage balloon. \n        Output: ", "result": "\n```\ncar, truck, bus, bike, boat, plane, train, subway, taxi, motorcycle\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are sausage balloon\" are \"car, truck, bus, bike, boat, plane, train, subway, taxi, motorcycle\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals."}
{"cat": "vehicles", "slot": "specialization", "value": "barrage balloon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are barrage balloon. \n        Output: ", "result": "\n        barrage, balloon, barrage, balloon, barrage, balloon, barrage, balloon, barrage, balloon, barrage, balloon \n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are barrage balloon\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"vehicles\", \"are barrage balloon\"))\n```\nOutput:\nbarrage, balloon, bar"}
{"cat": "vehicles", "slot": "specialization", "value": "ordinary bicycle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are ordinary bicycle. \n        Output: ", "result": "\n            1. Bicycle\n            2. Pedal\n            3. Tire\n            4. Handlebar\n            5. Saddle\n            6. Chain\n            7. Crankset\n            8. Derailleur\n            9. Brake\n            10. Gear\n        \"\"\"\n        words = [\n            \"Bicycle\",\n            \"Pedal\",\n            \"Tire\",\n            \"Handlebar\",\n            \"Saddle\",\n            \"Chain\",\n            \"Crankset\",\n            \"Derailleur\",\n            \"Brake"}
{"cat": "vehicles", "slot": "specialization", "value": "junk", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are junk. \n        Output: ", "result": "\n        car, truck, van, bike, boat, plane, train, bus, motorcycle, rv\n    \"\"\"\n    category = \"vehicles\"\n    junk_words = [\"car\", \"truck\", \"van\", \"bike\", \"boat\", \"plane\", \"train\", \"bus\", \"motorcycle\", \"rv\"]\n    filtered_junk_words = [word for word in junk_words if word.lower() in category.lower()]\n    return \", \".join(filtered_junk_words)\n\ndef get_"}
{"cat": "vehicles", "slot": "specialization", "value": "ship's boat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are ship's boat. \n        Output: ", "result": "\n        ship,boat,sea,captain,crew,deck,hull,propeller,anchor,oar\n\"\"\"\n\n# Define the function\ndef get_vehicle_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    vehicle_words = []\n    \n    # Iterate through each word in the condition\n    for word in condition_words:\n        # Check if"}
{"cat": "vehicles", "slot": "specialization", "value": "rig", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are rig. \n        Output: ", "result": "1. Rig, 2. Rigs, 3. Rigging, 4. Rigging, 5. Rigging, 6. Rigging, 7. Rigging, 8. Rigging, 9. Rigging, 10. Rigging.\n    \"\"\"\n    rig_words = []\n    for word in words:\n        if \"rig\" in word and \".\" not in word:\n            rig_words.append(word)\n    return \", \".join(rig_words)\n\ndef count_vow"}
{"cat": "vehicles", "slot": "specialization", "value": "sport car", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are sport car. \n        Output: ", "result": " Ferrari, Lamborghini, Porsche, Audi, BMW, Mercedes-Benz, Maserati, Jaguar, Aston Martin, Lotus. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'are sport car'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('vehicles', 'are sport car'))\n```\n\u8f93\u51fa\uff1aFerrari, Lamborghini, Porsche, Audi, BMW, Mercedes-Benz"}
{"cat": "vehicles", "slot": "specialization", "value": "fire engine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are fire engine. \n        Output: ", "result": "\n        Ambulance, Fire Truck, Fire Engine, Rescue Truck, Hook and Ladder, Pumper, Water Tender, Command Vehicle, Incident Command Vehicle, Rescue Pumper. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'are fire engine'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def describe_category(self, category):\n        \"\"\"\n        Provide a brief description of the category. \n        Category: vehicles. \n       "}
{"cat": "vehicles", "slot": "specialization", "value": "derelict", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are derelict. \n        Output: ", "result": "\n        car,truck,van,boat,plane,train,bus,caravan,jeep,motorhome\n```\n\n```\nDescribe a scenario where the input is a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: a list of 10 words. \n        Category: vehicles. \n        Condition: are derelict. \n        Input: \n        car,truck,van,boat,plane,train,bus,caravan,jeep,motorhome\n        Output:"}
{"cat": "vehicles", "slot": "specialization", "value": "jumbojet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are jumbojet. \n        Output: ", "result": "747, A380, A330, A320, A310, A300, A220, A210, A200\n    \"\"\"\n    category = 'vehicles'\n    condition = 'are jumbojet'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n   "}
{"cat": "vehicles", "slot": "specialization", "value": "whaling ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are whaling ship. \n        Output: ", "result": "1. Whaling 2. Ship 3. Whaling 4. Whaling 5. Whaling 6. Whaling 7. Whaling 8. Whaling 9. Whaling 10. Whaling. \n    \"\"\"\n    words = []\n    for word in re.findall(r'\\b(?:whaling|ship)\\b', text):\n        words.append(word)\n    return words\n\ndef extract_category(text):\n    \"\"\"\n    Given a text, extract the category it belongs to. \n        Desired output:"}
{"cat": "vehicles", "slot": "specialization", "value": "electric car", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are electric car. \n        Output: ", "result": "\n            \n```"}
{"cat": "vehicles", "slot": "specialization", "value": "power mower", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are power mower. \n        Output: ", "result": "\n```\nlawn,mower,push,gasoline,electric,reel,self-propelled,cordless,battery-powered,manual\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are power mowers\" are: lawn, mower, push, gasoline, electric, reel, self-propelled, cordless, battery-powered, and manual. These words are separated by commas in the desired output."}
{"cat": "vehicles", "slot": "specialization", "value": "dumper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are dumper. \n        Output: ", "result": "\n        dump, tipper, tipper, trailer, trailer, trailer, trailer, trailer, trailer, trailer.\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are dumper\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: vehicles. \n"}
{"cat": "vehicles", "slot": "specialization", "value": "pedicab", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are pedicab. \n        Output: ", "result": "\n```\nbicycle, tricycle, rickshaw, cycle rickshaw, pedicab, rickshaw puller, cycle rickshaw puller, bicycle rickshaw, tricycle rickshaw\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are pedicab\" are \"bicycle, tricycle, rickshaw, cycle rickshaw, pedicab, rickshaw puller, cycle rickshaw puller, bicycle"}
{"cat": "vehicles", "slot": "specialization", "value": "jet plane", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are jet plane. \n        Output: ", "result": "747, 757, 767, 777, 787, 797, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797"}
{"cat": "vehicles", "slot": "specialization", "value": "runabout", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are runabout. \n        Output: ", "result": "4x4, ATV, Jeep, Off-road, Runabout, SUV, UTV, Utility, Wagon.\n    \"\"\"\n    category = 'vehicles'\n    condition = 'are runabout'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Output:"}
{"cat": "vehicles", "slot": "specialization", "value": "police car", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are police car. \n        Output: ", "result": "\n```\npolice car, patrol car, cruiser, paddy wagon, squad car, black and white, motorcycle, horse-drawn carriage, ambulance, fire truck\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are police car\" are \"police car, patrol car, cruiser, paddy wagon, squad car, black and white, motorcycle, horse-drawn carriage, ambulance, fire truck\".\n```python\ndef get_vehicle_words(category, condition"}
{"cat": "vehicles", "slot": "specialization", "value": "troopship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are troopship. \n        Output: ", "result": "\n        aircraft carrier, battleship, cruiser, destroyer, frigate, amphibious assault ship, landing craft, submarine, aircraft, troop.\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are troopship\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"are sports car\"))  # comma separated list of words\nprint(get_words(\"vehicles\", \"have more than 4 wheels"}
{"cat": "vehicles", "slot": "specialization", "value": "turbofan", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are turbofan. \n        Output: ", "result": "787, A380, 777, A330, 767, A320, 757, A319, A321\n    \"\"\"\n    turbofan_vehicles = [\n        \"787\", \"A380\", \"777\", \"A330\", \"767\", \"A320\", \"757\", \"A319\", \"A321\"\n    ]\n    turbofan_vehicles = [word for word in tur"}
{"cat": "vehicles", "slot": "specialization", "value": "ground-effect machine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are ground-effect machine. \n        Output: ", "result": "\n            Porsche, Ferrari, Lamborghini, McLaren, Lotus, Brabham, March, Tyrrell, Williams, Brawn\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are ground-effect machine\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"vehicles\", \"are ground-effect machine\"))\n# Output: Porsche, Ferrari, Lamborghini, McLaren, Lotus, Brabham, March"}
{"cat": "vehicles", "slot": "specialization", "value": "school bus", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are school bus. \n        Output: ", "result": "\n```\nbus, school, yellow, transportation, children, seat, wheels, stop, route, safety\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are school bus\" are: bus, school, yellow, transportation, children, seat, wheels, stop, route, and safety.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are"}
{"cat": "vehicles", "slot": "specialization", "value": "trackless trolley", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are trackless trolley. \n        Output: ", "result": "\n```\ntrolley,tram,streetcar,railcar,trackless,trolleybus,tramway,light rail,people mover,incline\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "racing yacht", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are racing yacht. \n        Output: ", "result": "420, America's Cup, America's Cup World Series, Artemis Racing, Ben Ainslie Racing, Emirates Team New Zealand, Groupama Team France, Land Rover BAR, ORACLE TEAM USA, SoftBank Team Japan, Team France, Team Japan, Team USA\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are racing yacht\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "mail boat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are mail boat. \n        Output: ", "result": "\n```\nmailboat, mailboat, mailboat, mailboat, mailboat, mailboat, mailboat, mailboat, mailboat\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "pinnace", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are pinnace. \n        Output: ", "result": "\n        spacecraft,shuttle,pilot,astronaut,launch,mission,orbit,reentry,landing,crew\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are pinnace\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == \"animals\":\n        if condition == \""}
{"cat": "vehicles", "slot": "specialization", "value": "secondhand car", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are secondhand car. \n        Output: ", "result": "4x4, convertible, hatchback, sedan, sports car, station wagon, SUV, truck, van, minivan. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'are secondhand car'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words_output(category='vehicles', condition='are secondhand car'))\n```\n\u8f93\u51fa\uff1a\n4x4, convertible, hatchback, sedan, sports car, station wagon, SUV"}
{"cat": "vehicles", "slot": "specialization", "value": "touring car", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are touring car. \n        Output: ", "result": "4x4, estate, saloon, hatchback, MPV, off-road, sports, coupe, convertible, station wagon.\n    \"\"\"\n    category = 'vehicles'\n    condition = 'are touring car'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    from nltk.corpus import stopwords\n   "}
{"cat": "vehicles", "slot": "specialization", "value": "flagship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are flagship. \n        Output: ", "result": "\n            BMW, Audi, Mercedes-Benz, Jaguar, Land Rover, Porsche, Ferrari, Lamborghini, Maserati, Rolls-Royce\n        Explanation: \n            BMW, Audi, Mercedes-Benz, Jaguar, Land Rover, Porsche, Ferrari, Lamborghini, Maserati, Rolls-Royce all belong to the category of vehicles and are flagship models.\n    \"\"\"\n    category = input()\n    condition = input()\n    words = []\n   "}
{"cat": "vehicles", "slot": "specialization", "value": "two-seater", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are two-seater. \n        Output: ", "result": "2-seater, convertible, coupe, hatchback, hybrid, minivan, pickup, sedan, sports car, station wagon. \n        \"\"\"\n        category = \"vehicles\"\n        condition = \"are two-seater\"\n        words = []\n        for word in all_words:\n            if word.category == category and word.satisfies(condition):\n                words.append(word.word)\n        result = \", \".join(words)\n        print(result)\n```\nExplanation of the code:\n\n1."}
{"cat": "vehicles", "slot": "specialization", "value": "semi", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are semi. \n        Output: ", "result": "18-wheeler, semi-trailer, semi-truck, semi-tractor, semi-trailer truck, semi-tractor trailer, 18-wheeler truck, 18-wheeler semi, 18-wheeler tractor, 18-wheeler semi-trailer, 18-wheeler tractor trailer.\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are semi\"\n    words = []\n    for word in text.split():\n        if word."}
{"cat": "vehicles", "slot": "specialization", "value": "roadster", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are roadster. \n        Output: ", "result": "\n            Porsche, Ferrari, Lamborghini, Maserati, Audi, BMW, Mercedes-Benz, Jaguar, Land Rover, Range Rover\n        \"\"\"\n        category = \"vehicles\"\n        condition = \"are roadster\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    @staticmethod\n    def example_input():\n        return \"Porsche, Ferrari, Lamborghini, Maserati, Audi, BMW, Mercedes-Benz, J"}
{"cat": "vehicles", "slot": "specialization", "value": "chuck wagon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are chuck wagon. \n        Output: ", "result": "\n```\nwagon,chuck,grill,fire,cook,food,trailer,camp,outdoor,BBQ\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are chuck wagon\" are \"wagon, chuck, grill, fire, cook, food, trailer, camp, outdoor, BBQ\"."}
{"cat": "vehicles", "slot": "specialization", "value": "covered wagon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are covered wagon. \n        Output: ", "result": "\n        covered,wagon,wagons,conestoga,prairie,schuttle,wagoner,wagonmaster,wagonsmaster,wagonmasters\n```\n\n```\nDescribe the steps to obtain the output for the given input. \n        Steps: \n        1. Split the input string on the basis of space. \n        2. Iterate over the resulting list of words. \n        3. For each word, check if it belongs to the category and satisfies the condition. \n        4. If it satisfies the condition, append it"}
{"cat": "vehicles", "slot": "specialization", "value": "jumbo jet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are jumbo jet. \n        Output: ", "result": "747, A380, A340, A330, A320, A310, A300, A390, A388\n    \"\"\"\n    category = 'vehicles'\n    condition = 'are jumbo jet'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n   "}
{"cat": "vehicles", "slot": "specialization", "value": "sailing vessel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are sailing vessel. \n        Output: ", "result": "\n            1. Sloop\n            2. Schooner\n            3. Yawl\n            4. Ketch\n            5. Cutter\n            6. Brig\n            7. Barque\n            8. Frigate\n            9. Man-of-war\n            10. Galleon\n        \"\"\"\n        words = [\n            \"Sloop\",\n            \"Schooner\",\n            \"Yawl\",\n            \"Ketch\",\n            \"Cutter\",\n            \"Brig\",\n            \"Barque\",\n            \"Frigate\",\n"}
{"cat": "vehicles", "slot": "specialization", "value": "bumboat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are bumboat. \n        Output: ", "result": "\n            1. Bumboat\n            2. Bumboatman\n            3. Bumboatman's\n            4. Bumboatman's\n            5. Bumboatman's\n            6. Bumboatman's\n            7. Bumboatman's\n            8. Bumboatman's\n            9. Bumboatman's\n            10. Bumboatman's\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are bumboat"}
{"cat": "vehicles", "slot": "specialization", "value": "barge", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are barge. \n        Output: ", "result": "1. Barge, 2. Barge, 3. Barge, 4. Barge, 5. Barge, 6. Barge, 7. Barge, 8. Barge, 9. Barge, 10. Barge. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'are barge'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_with_category_and_condition(self):\n        self.assert"}
{"cat": "vehicles", "slot": "specialization", "value": "mailboat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are mailboat. \n        Output: ", "result": "\n```\nmailboat, mailboat, mailboat, mailboat, mailboat, mailboat, mailboat, mailboat, mailboat\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "passenger ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are passenger ship. \n        Output: ", "result": "\n```\npassenger,ship,ferry,cruise,liner,yacht,boat,ferryboat,cargo,shipment\n```\nExplanation:\n\n* The category is \"vehicles\"\n* The condition is \"are passenger ship\"\n* The words that satisfy the condition are:\n\t+ passenger ship\n\t+ ferry\n\t+ cruise liner\n\t+ yacht\n\t+ boat\n\t+ ferryboat\n\t+ cargo ship\n\t+ shipment\n* The words are sorted in alphabetical order.\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "tipper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are tipper. \n        Output: ", "result": " dump, tipper, tipper, tipper, tipper, tipper, tipper, tipper, tipper."}
{"cat": "vehicles", "slot": "specialization", "value": "tug", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are tug. \n        Output: ", "result": "\n```\ntug,boat,tractor,truck,barge,bulldozer,crawler,digger,shovel,excavator\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "sled", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are sled. \n        Output: ", "result": "\n```\nsled,sleigh,sledge,sleigher,sleigher,sleigher,sleigher,sleigher,sleigher,sleigher,sleigher,sleigher,sleigher,sleigher,sleigher,sleigher,sleigher,sleigher,sleigher,sleigher,sleigher,sleigher,sleigher,sleigher,sleigher,sleigher,"}
{"cat": "vehicles", "slot": "specialization", "value": "fire truck", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are fire truck. \n        Output: ", "result": "1. Engine, 2. Hose, 3. Ladder, 4. Pumper, 5. Tanker, 6. Extinguisher, 7. Fire hydrant, 8. Fire extinguisher, 9. Fire department, 10. Fire station.\n    \"\"\"\n    words = []\n    for word in words:\n        if \"fire truck\" in word:\n            words.append(word)\n    return words\n\ndef count_vehicles(words):\n    \"\"\"\n    Given a list of words, count the"}
{"cat": "vehicles", "slot": "specialization", "value": "wain", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are wain. \n        Output: ", "result": "\n```\ncar, truck, van, bus, train, boat, plane, motorcycle, bicycle\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "spacecraft", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are spacecraft. \n        Output: ", "result": "\n        Mars Rover, Space Shuttle, International Space Station, Hubble Space Telescope, Voyager 1, Voyager 2, Cassini, Galileo, Pioneer 10, Pioneer 11\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are spacecraft\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition"}
{"cat": "vehicles", "slot": "specialization", "value": "bogie", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are bogie. \n        Output: ", "result": "\n```\ntruck, bogie, train, bogies, bogie, bogies, bogie, bogie, bogie, bogie\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are bogie\" are \"truck\", \"bogie\", \"train\", \"bogies\", \"bogie\", \"bogies\", \"bogie\", \"bogie\", \"bogie\", \"bogie\".\n```\nProvide a list of 10 words that belong to the category and satisfy the"}
{"cat": "vehicles", "slot": "specialization", "value": "blimp", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are blimp. \n        Output: ", "result": "1. Zeppelin, 2. Dirigible, 3. Blimps, 4. Airship, 5. Skyship, 6. Lighter-than-air, 7. Gas balloon, 8. Airship, 9. Dirigible, 10. Zeppelin. \n        \"\"\"\n        category = \"vehicles\"\n        condition = \"are blimp\"\n        words = [word for word in CATEGORIES[category] if word.lower() == condition.lower()]\n        return \", \".join("}
{"cat": "vehicles", "slot": "specialization", "value": "trolleybus", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are trolleybus. \n        Output: ", "result": "\n```\ntrolleybus,tram,streetcar,trackless trolley,articulated bus,bendy bus,guided bus,double-decker bus,hybrid bus,electric bus\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are trolleybus\" are \"trolleybus,tram,streetcar,trackless trolley,articulated bus,bendy bus,guided bus,double-decker bus,hybrid bus,electric bus\". These words are separated"}
{"cat": "vehicles", "slot": "specialization", "value": "jet-propelled plane", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are jet-propelled plane. \n        Output: ", "result": "727, 737, 747, 757, 767, 777, 787, A300, A310, A320, A330, A340, A380\n    \"\"\"\n    category = 'vehicles'\n    condition = 'are jet-propelled plane'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and"}
{"cat": "vehicles", "slot": "specialization", "value": "transport ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are transport ship. \n        Output: ", "result": "\n        starship, battleship, cruiser, destroyer, frigate, carrier, submarine, transport, shuttle, dropship\n\"\"\"\n\n# Define the function\ndef get_vehicle_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n       "}
{"cat": "vehicles", "slot": "specialization", "value": "skidder", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are skidder. \n        Output: ", "result": "\n        skidder,skidder,skidder,skidder,skidder,skidder,skidder,skidder,\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "ordinary", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are ordinary. \n        Output: ", "result": "\n        car, truck, van, bus, bike, train, boat, plane, motorcycle, taxi\n\"\"\"\n\n# Define the function\ndef get_vehicle_words(category, condition):\n    # Create an empty list to store the words\n    vehicle_words = []\n    \n    # Loop through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if word.category == category and word.satisfies(condition):\n            # Add the word to the list"}
{"cat": "vehicles", "slot": "specialization", "value": "gas-turbine ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are gas-turbine ship. \n        Output: ", "result": "\n```\ngas-turbine, ship, marine, marine-engine, marine-propulsion, marine-vehicle, marine-equipment, marine-technology, marine-industry, marine-transportation\n```\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are gas-turbine car. \n        Output: \n```\ngas-turbine, car, automobile, autom"}
{"cat": "vehicles", "slot": "specialization", "value": "fanjet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are fanjet. \n        Output: ", "result": "727, 737, 757, 767, 777, 787, A300, A310, A320, A330, A340, ATR42, ATR72, DC9, DC10, DC10F, MD80, MD90, MD11, CRJ2, CRJ7, CRJ9, E170, E175, E190, E195, ERJ145, ERJ"}
{"cat": "vehicles", "slot": "specialization", "value": "mountain bike", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are mountain bike. \n        Output: ", "result": "26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, "}
{"cat": "vehicles", "slot": "specialization", "value": "lugger", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are lugger. \n        Output: ", "result": "\n```\nlugger, luggerboat, luggerrig, luggersails, luggerboat, luggerboat, luggerboat, luggerboat, luggerboat, luggerboat, luggerboat, luggerboat, luggerboat, luggerboat, luggerboat, luggerboat, luggerboat, luggerboat, luggerboat, luggerboat, luggerboat, luggerboat, luggerboat, luggerboat, luggerboat, luggerbo"}
{"cat": "vehicles", "slot": "specialization", "value": "minelayer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are minelayer. \n        Output: ", "result": "\n        minelayer, minelayer, minelayer, minelayer, minelayer, minelayer, minelayer, minelayer, minelayer, minelayer. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'are minelayer'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_with_category_and_condition(self):\n        self.assertEqual(get_words('vehicles', 'are minelayer'), '"}
{"cat": "vehicles", "slot": "specialization", "value": "steamship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are steamship. \n        Output: ", "result": "\n            1. Steamship\n            2. Steamship\n            3. Steamship\n            4. Steamship\n            5. Steamship\n            6. Steamship\n            7. Steamship\n            8. Steamship\n            9. Steamship\n            10. Steamship\n        \"\"\"\n        words = [\"Steamship\", \"Steamship\", \"Steamship\", \"Steamship\", \"Steamship\", \"Steamship\", \"Steamship\", \"Steamship\", \"Steamship\", \"Steamship\"]"}
{"cat": "vehicles", "slot": "specialization", "value": "narrowboat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are narrowboat. \n        Output: ", "result": "\n        narrowboat,narrow,boat,canal,narrowboat,narrow,boat,canal,narrowboat,narrow,boat,canal,narrowboat,narrow,boat,canal,narrowboat,narrow,boat,canal,narrowboat,narrow,boat,canal,narrowboat,narrow,boat,canal,narrowboat,narrow,boat,canal,narrowboat,narrow,boat,canal,n"}
{"cat": "vehicles", "slot": "specialization", "value": "yacht", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are yacht. \n        Output: ", "result": "\n```\nyacht, speedboat, motorboat, sailboat, catamaran, powerboat, cruise ship, ferry, hovercraft, airboat\n```\nExplanation:\nThe words that belong to the category \"vehicles\" and satisfy the condition \"are yacht\" are: yacht, speedboat, motorboat, sailboat, catamaran, powerboat, cruise ship, ferry, hovercraft, and airboat.\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "milk wagon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are milk wagon. \n        Output: ", "result": "\n        milk,wagon,milkman,milkmaid,milk-cart,milk-float,milk-wagon,milk-truck,milk-van,milk-cart,milk-float,milk-wagon,milk-truck,milk-van,milk-cart,milk-float,milk-wagon,milk-truck,milk-van,milk-cart,milk-float,milk-wagon,milk-truck,milk-van,milk-cart"}
{"cat": "vehicles", "slot": "specialization", "value": "prairie schooner", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are prairie schooner. \n        Output: ", "result": "\n        prairie,schooner,wagon,prairie,schooner,wagon,prairie,schooner,wagon,prairie,schooner,wagon,prairie,schooner,wagon,prairie,schooner,wagon,prairie,schooner,wagon,prairie,schooner,wagon,prairie,schooner,wagon,prairie,schooner,wagon,prairie,schooner,wagon,prairie,schoon"}
{"cat": "vehicles", "slot": "specialization", "value": "ice yacht", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are ice yacht. \n        Output: ", "result": "1. Yacht, 2. Ice, 3. Yacht, 4. Ice, 5. Yacht, 6. Ice, 7. Yacht, 8. Ice, 9. Yacht, 10. Ice.\n    \"\"\"\n    words = []\n    for word in words:\n        if \"ice\" in word and \"yacht\" in word:\n            words.append(word)\n    return \", \".join(words)\n\nprint(get_comma_separated_list(\"vehicles\", \"are ice yacht\"))\n"}
{"cat": "vehicles", "slot": "specialization", "value": "hovercraft", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are hovercraft. \n        Output: ", "result": "\n        hovercraft, air cushion vehicle, air-cushion vehicle, hovercraft vehicle, hovercraft craft, air-cushioned vehicle, air-cushioned craft, hover cushion vehicle, hover cushion craft, hover cushioning vehicle\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are hovercraft\"\n    words = []\n    for word in text.split():\n        if word.lower() == condition.lower():\n            words.append(word)\n    result = \", \".join(words)\n    print(result"}
{"cat": "vehicles", "slot": "specialization", "value": "landing craft", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are landing craft. \n        Output: ", "result": "\n        amphibious, assault, boat, craft, dock, landing, marine, naval, ship, vessel\n\"\"\"\n\n# Define the function\ndef get_vehicle_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split(\" \")\n    condition_words = condition.split(\" \")\n    \n    # Initialize an empty list to store the words\n    vehicle_words = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        # Check if the word is"}
{"cat": "vehicles", "slot": "specialization", "value": "merchant ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are merchant ship. \n        Output: ", "result": "\n```\naircraft carrier, battleship, cruiser, destroyer, frigate, amphibious assault ship, aircraft carrier, battleship, cruiser, destroyer, frigate\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are merchant ship\" are: aircraft carrier, battleship, cruiser, destroyer, frigate, amphibious assault ship.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Des"}
{"cat": "vehicles", "slot": "specialization", "value": "dirt bike", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are dirt bike. \n        Output: ", "result": "250SX, 450SX, CRF250, CRF450, RM-Z250, RM-Z450, KX250, KX450, YZ250, YZ450. \n        Explanation: 250SX, 450SX, CRF250, CRF450, RM-Z250, RM-Z450, KX250, KX450, YZ"}
{"cat": "vehicles", "slot": "specialization", "value": "subcompact car", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are subcompact car. \n        Output: ", "result": "\n            hatchback,sedan,SUV,truck,van,convertible,coupe,minivan,pickup,wagon\n    \"\"\"\n    subcompact_cars = [\n        \"hatchback\",\n        \"sedan\",\n        \"SUV\",\n        \"truck\",\n        \"van\",\n        \"convertible\",\n        \"coupe\",\n        \"minivan\",\n        \"pickup\",\n        \"wagon\"\n    ]\n    subcompact_cars = [word for word in subcompact_cars if"}
{"cat": "vehicles", "slot": "specialization", "value": "push-bike", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are push-bike. \n        Output: ", "result": "\n```\nbicycle, scooter, skateboard, kick-scooter, moped, motorcycle, tricycle, bicycle-seat, bicycle-wheel, bicycle-pedal\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are not push-bike. \n        Output: \n```\ncar, bus, train, airplane,"}
{"cat": "vehicles", "slot": "specialization", "value": "weather ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are weather ship. \n        Output: ", "result": "\n```\ncarrier, cruiser, destroyer, frigate, submarine, aircraft carrier, amphibious assault ship, battleship, aircraft carrier, aircraft carrier\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are weather ship\" are \"carrier, cruiser, destroyer, frigate, submarine, aircraft carrier, amphibious assault ship, battleship, aircraft carrier, aircraft carrier\".\n```\nProvide a list of 10 words that belong to the category"}
{"cat": "vehicles", "slot": "place", "value": "rental", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can be found or used in rentals. \n        Output: ", "result": "4x4, SUV, convertible, sedan, minivan, truck, van, sports car, luxury car, economy car. \n        \"\"\"\n        category = 'vehicles'\n        condition = 'can be found or used in rentals'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(find_vehicle_words(category='vehicles', condition='can be found or used in rentals'))\n\nif __name__ == '__main__':\n    main()\n```\nThis"}
{"cat": "vehicles", "slot": "generalization", "value": "watercraft", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are watercraft. \n        Output: ", "result": "\n        jetski, boat, canoe, kayak, paddleboard, sailboat, yacht, speedboat,\n```"}
{"cat": "vehicles", "slot": "generalization", "value": "tractor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are tractor. \n        Output: ", "result": "\n```\ntractor, tractor, tractor, tractor, tractor, tractor, tractor, tractor, tractor\n```"}
{"cat": "vehicles", "slot": "generalization", "value": "ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are ship. \n        Output: ", "result": "\n```\ncarrier, cruiser, destroyer, frigate, aircraft carrier, battleship, submarine, amphibious assault ship, aircraft carrier, aircraft carrier\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are ship\" are \"carrier, cruiser, destroyer, frigate, battleship, submarine, amphibious assault ship, aircraft carrier, aircraft carrier\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition."}
{"cat": "vehicles", "slot": "generalization", "value": "warship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are warship. \n        Output: ", "result": "\n```\naircraft carrier, battleship, cruiser, destroyer, frigate, submarine, aircraft carrier, battleship, cruiser, destroyer, frigate, submarine, aircraft carrier, battleship, cruiser, destroyer, frigate, submarine, aircraft carrier, battleship, cruiser, destroyer, frigate, submarine, aircraft carrier, battleship, cruiser, destroyer, frigate, submarine, aircraft carrier, battleship, cruiser, destroyer, frigate, sub"}
{"cat": "vehicles", "slot": "generalization", "value": "combat ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are combat ship. \n        Output: ", "result": "\n        aircraft carrier, destroyer, frigate, cruiser, submarine, amphibious assault ship, missile cruiser, guided missile destroyer, guided missile frigate, guided missile cruiser.\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are combat ship\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in"}
{"cat": "vehicles", "slot": "generalization", "value": "lighter-than-air craft", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are lighter-than-air craft. \n        Output: ", "result": "\n            airship, balloon, blimp, dirigible, hydrogen, helium, lighter-than-air, airship, balloon, blimp, dirigible, hydrogen, helium\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are lighter-than-air craft\"\n    words = []\n    for word in text.split():\n        if word.lower() in category_words[category] and word.lower() in condition_words[condition]:\n            words.append(word)\n    return \", \".join(words"}
{"cat": "vehicles", "slot": "generalization", "value": "war vessel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are war vessel. \n        Output: ", "result": "\n```\naircraft carrier, battleship, cruiser, destroyer, frigate, submarine, amphibious assault ship, aircraft carrier, battleship, cruiser, destroyer, frigate, submarine, amphibious assault ship, aircraft carrier, battleship, cruiser, destroyer, frigate, submarine, amphibious assault ship, aircraft carrier, battleship, cruiser, destroyer, frigate, submarine, amphibious assault ship, aircraft carrier, battleship, cruiser, destroy"}
{"cat": "vehicles", "slot": "generalization", "value": "military vehicle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are military vehicle. \n        Output: ", "result": "\n        Apache, Blackhawk, Chinook, F-15, F-16, F-22, F-35, Predator, Reaper, V-22\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are military vehicle\"\n    words = []\n    for word in all_words:\n        if word.lower() in category_map[category] and word.lower() in condition_map[condition]:\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else"}
{"cat": "vehicles", "slot": "purpose", "value": "passenger", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used for passenger. \n        Output: ", "result": "\n        car, van, bus, taxi, limo, shuttle, train, tram, ferry, subway\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are used for passenger\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"animals\", \"are mammals\"))\nprint(get_words(\"fruits\", \"are red\"))\nprint(get_words(\"vehicles\", \"are used for passenger\"))\n"}
{"cat": "vehicles", "slot": "part", "value": "boat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  boat. \n        Output: ", "result": " car, truck, boat, motorcycle, bus, train, airplane, subway, taxi, boat. \n    \"\"\"\n    words = [\"car\", \"truck\", \"boat\", \"motorcycle\", \"bus\", \"train\", \"airplane\", \"subway\", \"taxi\", \"boat\"]\n    if \"can have\" in category:\n        words = [word for word in words if word.lower().startswith(\"b\") or word.lower().startswith(\"m\")]\n    else:\n        words = [word for word in words if word."}
{"cat": "vehicles", "slot": "generalization", "value": "transport", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are transport. \n        Output: ", "result": "\n        car, truck, bus, train, boat, airplane, taxi, subway, ship, helicopter\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are transport\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"animals\", \"are mammals\"))\nprint(get_words(\"fruits\", \"are red\"))\nprint(get_words(\"vehicles\", \"are cars\"))\nprint(get_words(\"vehicles"}
{"cat": "vehicles", "slot": "user", "value": "farm", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are used by farms. \n        Output: ", "result": "\n        tractor, combine, harvester, plow, cultivator, trailer, loader, backhoe, sprayer, fertilizer\n\nExample 2: \n\n        tractor, combine, harvester, plow, cultivator, trailer, loader, backhoe, sprayer"}
{"cat": "vehicles", "slot": "specialization", "value": "galley", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are galley. \n        Output: ", "result": "1. galley, 2. galley, 3. galley, 4. galley, 5. galley, 6. galley, 7. galley,\n```"}
{"cat": "vehicles", "slot": "part", "value": "galley", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  galley. \n        Output: ", "result": " car, van, bus, truck, taxi, limo, train, boat, plane, subway\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"can have galley\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"vehicles\", \"can have engine\"))\nprint(get_words(\"vehicles\", \"can have wheels\"))\nprint(get_words(\"vehicles\", \"can have seats\"))\nprint(get"}
{"cat": "vehicles", "slot": "specialization", "value": "war vessel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are war vessel. \n        Output: ", "result": "\n```\naircraft carrier, battleship, cruiser, destroyer, frigate, submarine, amphibious assault ship, aircraft carrier, battleship, cruiser, destroyer, frigate, submarine, amphibious assault ship, aircraft carrier, battleship, cruiser, destroyer, frigate, submarine, amphibious assault ship, aircraft carrier, battleship, cruiser, destroyer, frigate, submarine, amphibious assault ship, aircraft carrier, battleship, cruiser, destroy"}
{"cat": "vehicles", "slot": "specialization", "value": "watercraft", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are watercraft. \n        Output: ", "result": "\n        jetski, boat, canoe, kayak, paddleboard, sailboat, yacht, speedboat,\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are ship. \n        Output: ", "result": "\n```\ncarrier, cruiser, destroyer, frigate, aircraft carrier, battleship, submarine, amphibious assault ship, aircraft carrier, aircraft carrier\n```\nExplanation: The words that belong to the category \"vehicles\" and satisfy the condition \"are ship\" are \"carrier, cruiser, destroyer, frigate, battleship, submarine, amphibious assault ship, aircraft carrier, aircraft carrier\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition."}
{"cat": "vehicles", "slot": "specialization", "value": "tractor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are tractor. \n        Output: ", "result": "\n```\ntractor, tractor, tractor, tractor, tractor, tractor, tractor, tractor, tractor\n```"}
{"cat": "vehicles", "slot": "specialization", "value": "boat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are boat. \n        Output: ", "result": "\n```\nboat, yacht, canoe, kayak, sailboat, motorboat, rowboat, paddleboat, watercraft, seaworthy\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammals. \n        Output: \n```\ncat, dog, cow, elephant, whale, dolph"}
{"cat": "vehicles", "slot": "specialization", "value": "lighter-than-air craft", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are lighter-than-air craft. \n        Output: ", "result": "\n            airship, balloon, blimp, dirigible, hydrogen, helium, lighter-than-air, airship, balloon, blimp, dirigible, hydrogen, helium\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are lighter-than-air craft\"\n    words = []\n    for word in text.split():\n        if word.lower() in category_words[category] and word.lower() in condition_words[condition]:\n            words.append(word)\n    return \", \".join(words"}
{"cat": "vehicles", "slot": "specialization", "value": "warship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are warship. \n        Output: ", "result": "\n```\naircraft carrier, battleship, cruiser, destroyer, frigate, submarine, aircraft carrier, battleship, cruiser, destroyer, frigate, submarine, aircraft carrier, battleship, cruiser, destroyer, frigate, submarine, aircraft carrier, battleship, cruiser, destroyer, frigate, submarine, aircraft carrier, battleship, cruiser, destroyer, frigate, submarine, aircraft carrier, battleship, cruiser, destroyer, frigate, sub"}
{"cat": "vehicles", "slot": "specialization", "value": "combat ship", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are combat ship. \n        Output: ", "result": "\n        aircraft carrier, destroyer, frigate, cruiser, submarine, amphibious assault ship, missile cruiser, guided missile destroyer, guided missile frigate, guided missile cruiser.\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are combat ship\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in"}
{"cat": "vehicles", "slot": "specialization", "value": "military vehicle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are military vehicle. \n        Output: ", "result": "\n        Apache, Blackhawk, Chinook, F-15, F-16, F-22, F-35, Predator, Reaper, V-22\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are military vehicle\"\n    words = []\n    for word in all_words:\n        if word.lower() in category_map[category] and word.lower() in condition_map[condition]:\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else"}
{"cat": "vehicles", "slot": "part", "value": "gas", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: can have  gas. \n        Output: ", "result": " car, truck, van, bus, motorcycle, bike, scooter, boat, airplane, train\n    \"\"\"\n    category = \"vehicles\"\n    words = [\"car\", \"truck\", \"van\", \"bus\", \"motorcycle\", \"bike\", \"scooter\", \"boat\", \"airplane\", \"train\"]\n    gas_words = [word for word in words if \"gas\" in word]\n    filtered_words = [word for word in words if word not in gas_words and \"can\" in word and \"have\" in"}
{"cat": "vehicles", "slot": "generalization", "value": "wheel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are wheel. \n        Output: ", "result": "\n        car, truck, van, bus, train, bike, motorcycle, boat, plane, taxi\n    \"\"\"\n    category = \"vehicles\"\n    words = [\"car\", \"truck\", \"van\", \"bus\", \"train\", \"bike\", \"motorcycle\", \"boat\", \"plane\", \"taxi\"]\n    wheel_words = [word for word in words if \"wheel\" in word]\n    if category == \"vehicles\" and len(set(wheel_words)) == len(wheel_words):\n        print"}
{"cat": "vehicles", "slot": "specialization", "value": "heavier-than-air craft", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are heavier-than-air craft. \n        Output: ", "result": "\n            airplane, helicopter, glider, blimp, zeppelin, balloon, airship, hydroplane, seaplane, amphibian\n\"\"\"\nprint(airplane, helicopter, glider, blimp, zeppelin, balloon, airship, hydroplane, seaplane, amphibian)"}
{"cat": "vehicles", "slot": "specialization", "value": "aircraft", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are aircraft. \n        Output: ", "result": "\n        helicopter, airplane, jet, glider, balloon, blimp, rocket, spacecraft, hot air balloon, glider\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are aircraft\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"vehicles\", \"are cars\"))\nprint(get_words(\"vehicles\", \"are trucks\"))\nprint(get_words(\"vehicles\","}
{"cat": "vehicles", "slot": "specialization", "value": "vessel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are vessel. \n        Output: ", "result": "\n```\ncar, boat, ship, yacht, ferry, cruise, submarine, hovercraft, sailboat, catamaran\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammals. \n        Output: \n```\ncat, dog, cow, pig, horse, elephant, giraffe, whale, dolph"}
{"cat": "vehicles", "slot": "specialization", "value": "craft", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are craft. \n        Output: ", "result": "\n        airplane, boat, car, helicopter, jet, submarine, spacecraft, hovercraft, motorboat, sailboat\n    \"\"\"\n    category = \"vehicles\"\n    condition = \"are craft\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_word_list(\"animals\", \"are mammals\"))\nprint(get_word_list(\"vehicles\", \"have more than 4 wheels\"))\nprint(get_word_list(\"veh"}
{"cat": "vehicles", "slot": "specialization", "value": "wheeled vehicle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicles. \n        Condition: are wheeled vehicle. \n        Output: ", "result": " car, bus, truck, van, taxi, motorcycle, bicycle, train, subway, trolley.\n    \"\"\"\n    category = 'vehicles'\n    condition = 'are wheeled vehicle'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\n# Example usage\nprint(get_words('animals', 'are mammals'))\nprint(get_words('vehicles', 'are cars'))\nprint(get_words('vehicles', 'have more than 4 wheels'))"}
{"cat": "clothes", "slot": "size", "value": "tall", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be tall. \n        Output: ", "result": "\n        tall, shirt, pants, dress, coat, shoes, socks, hat, scarf, belt.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as f:\n        for line in f:\n            line = line.strip()\n            if line.startswith(category)"}
{"cat": "clothes", "slot": "size", "value": "short", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be short. \n        Output: ", "result": "\n```\ndress, shirt, jacket, pants, shorts, skirt, top, jeans, socks, t-shirt\n```\nExplanation: The words that belong to the category `clothes` and can be short are `dress`, `shirt`, `jacket`, `pants`, `shorts`, `skirt`, `top`, `jeans`, `socks`, and `t-shirt`.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output"}
{"cat": "clothes", "slot": "time", "value": "winter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be consumed or used during winter. \n        Output: ", "result": "\n          scarf, gloves, hat, socks, coat, boots, mittens, earmuffs, thermal underwear, snow pants\n```\n\n```"}
{"cat": "clothes", "slot": "time", "value": "summer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be consumed or used during summer. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "place", "value": "outdoors", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be found or used in outdoorss. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "place", "value": "hospital", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be found or used in hospitals. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "place", "value": "surgery", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be found or used in surgeries. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "bodyPart", "value": "neck", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have or be used with neck. \n        Output: ", "result": "\n            \n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"neck\" in word:\n                words.append(word)\n        if len(words) == 0:\n            print(\"No words found\")\n        else:\n            print(\", \".join(words))\n```\nExample:\n```\nword_list = [\n    \"shirt\",\n    \"dress\",\n    \"tie\",\n    \"scarf\",\n    \"hat\",\n    \"jacket\",\n    \"vest\",\n    \"coat\","}
{"cat": "clothes", "slot": "bodyPart", "value": "waist", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have or be used with waist. \n        Output: ", "result": "\n            dress, skirt, blouse, shirt, pants, jacket, coat, shorts, trousers, overalls\n\"\"\"\nwords = [\"dress\", \"skirt\", \"blouse\", \"shirt\", \"pants\", \"jacket\", \"coat\", \"shorts\", \"trousers\", \"overalls\"]\ncategory = \"clothes\"\ncondition = \"can have or be used with waist\"\nfiltered_words = [word for word in words if word.lower().startswith(category.lower() + \" \") and word."}
{"cat": "clothes", "slot": "bodyPart", "value": "head", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have or be used with head. \n        Output: ", "result": "\n            \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have or be used with head'\n        words = []\n        for word in word_list:\n            if 'head' in word and word.lower().startswith(category.lower() + ' '):\n                words.append(word)\n        if words:\n            print(', '.join(words))\n        else:\n            print('No words found.')\n```\nExplanation:\n\n1. We define the category and condition as before.\n2. We create an empty list"}
{"cat": "clothes", "slot": "bodyPart", "value": "foot", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have or be used with foot. \n        Output: ", "result": "\n          shoe, sock, sandal, boot, slipper, flip-flop, sneaker, loafer, moccasin, clog\n\"\"\"\n\nword_list = [\"shoe\", \"sock\", \"sandal\", \"boot\", \"slipper\", \"flip-flop\", \"sneaker\", \"loafer\", \"moccasin\", \"clog\"]\ncategory = \"clothes\"\ncondition = \"can have or be used with foot\"\n\nresult = [word for word in word_list if word.lower"}
{"cat": "clothes", "slot": "bodyPart", "value": "knee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have or be used with knee. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "bodyPart", "value": "calf", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have or be used with calf. \n        Output: ", "result": "\n            \n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"calf\" in word and \"clothes\" in word.lower():\n                words.append(word)\n        if len(words) == 0:\n            print(\"No words found.\")\n        else:\n            print(\", \".join(words))\n\nword_list = [\n    \"socks\",\n    \"shoes\",\n    \"t-shirt\",\n    \"pants\",\n    \"jeans\",\n    \"jacket\",\n    \""}
{"cat": "clothes", "slot": "bodyPart", "value": "ankle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have or be used with ankle. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "bodyPart", "value": "throat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have or be used with throat. \n        Output: ", "result": "\n          scarf, shirt, sweater, tie, blouse, coat, gloves, socks, vest, necklace\n```\n\n```"}
{"cat": "clothes", "slot": "shape", "value": "elongated", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be elongated. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "shape", "value": "long", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be long. \n        Output: ", "result": "\n        long,shirt,pants,dress,skirt,jacket,coat,shoes,socks,tie,scarf \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() in condition.lower().split(','):\n            words.append(word)\n    print(\", \".join(words))\n"}
{"cat": "clothes", "slot": "shape", "value": "circular", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be circular. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "shape", "value": "rectangular", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be rectangular. \n        Output: ", "result": "\n            shirt, pants, jacket, dress, skirt, shorts, socks, underwear, scarf, sweater\n\"\"\"\n\nword_list = [\"shirt\", \"pants\", \"jacket\", \"dress\", \"skirt\", \"shorts\", \"socks\", \"underwear\", \"scarf\", \"sweater\"]\ncategory = \"clothes\"\ncondition = \"can be rectangular\"\n\nif condition in category:\n    print(\", \".join(word_list))\nelse:\n    print(\"No words found.\")"}
{"cat": "clothes", "slot": "shape", "value": "round", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be round. \n        Output: ", "result": "\n        round, shirt, dress, coat, jacket, pants, skirt, scarf, gloves, socks.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition.\n    \"\"\"\n    if category == \"clothes\":\n        if condition"}
{"cat": "clothes", "slot": "bodyPart", "value": "leg", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have or be used with leg. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "bodyPart", "value": "hand", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have or be used with hand. \n        Output: ", "result": "\n            dress, glove, handbag, hat, jacket, jewelry, scarf, sock, watch, zipper.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"hand\" in word:\n            if \"can\" in word:\n                if \"have\" in word:\n                    words.append(word)\n                elif \"be\" in word:\n                    words.append(word)\n    return words\n\nif __name__ == '__main__':\n    word_list = ['dress"}
{"cat": "clothes", "slot": "purpose", "value": "protect", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used to protect. \n        Output: ", "result": "\n            coat, gloves, hat, scarf, socks, boots, umbrella, sunglasses, goggles, earmuffs\n    \"\"\"\n    category = 'clothes'\n    condition = 'are used to protect'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    words = []\n    with open('words.txt', 'r') as f:\n        for line in f:\n            line = line.strip()\n            if"}
{"cat": "clothes", "slot": "purpose", "value": "warmth", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used for warmth. \n        Output: ", "result": "\n            coat, gloves, hat, scarf, socks, sweater, vest, boots, mittens, earmuffs\n\"\"\"\n\nword_list = [\"coat\", \"gloves\", \"hat\", \"scarf\", \"socks\", \"sweater\", \"vest\", \"boots\", \"mittens\", \"earmuffs\"]\ncategory = \"clothes\"\ncondition = \"are used for warmth\"\n\nif category == \"clothes\" and condition == \"are used for warmth\":\nprint(\", \".join(word_list"}
{"cat": "clothes", "slot": "purpose", "value": "pair", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used for pair. \n        Output: ", "result": "\n        jeans, pants, shorts, shirt, t-shirt, socks, shoes, sandals, sneakers, boots \n    \"\"\"\n    category = 'clothes'\n    condition = 'are used for pair'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    words = []\n    with open('words.txt', 'r') as f:\n        for line in f:\n            line = line.strip()\n            if category"}
{"cat": "clothes", "slot": "purpose", "value": "riding", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used for riding. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "purpose", "value": "hygiene", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used for hygiene. \n        Output: ", "result": "\n          underwear, socks, towel, washcloth, toilet paper, handkerchief, razor, shaving cream, deodorant, toothbrush, toothpaste\n```\n\n```"}
{"cat": "clothes", "slot": "purpose", "value": "work", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used for work. \n        Output: ", "result": "\n            dress, pants, shirt, jacket, tie, shoes, socks, belt, gloves, overalls\n\"\"\"\n\nword_list = [\"dress\", \"pants\", \"shirt\", \"jacket\", \"tie\", \"shoes\", \"socks\", \"belt\", \"gloves\", \"overalls\"]\ncategory = \"clothes\"\ncondition = \"are used for work\"\n\nif category == \"clothes\" and condition == \"are used for work\":\n    print(\", \".join(word_list))\n"}
{"cat": "clothes", "slot": "purpose", "value": "gardening", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used for gardening. \n        Output: ", "result": "\n            1. Gloves\n            2. Hose\n            3. Soil\n            4. Seeds\n            5. Trowel\n            6. Watering can\n            7. Pruning shears\n            8. Rake\n            9. Lawn mower\n            10. Hose reel\n        \"\"\"\n        category = \"clothes\"\n        condition = \"are used for gardening\"\n        words = []\n        for word in product:\n            if word.lower() in category.lower() and word.lower() in condition.lower():\n               "}
{"cat": "clothes", "slot": "purpose", "value": "ride", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used for ride. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "purpose", "value": "run", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used to run. \n        Output: ", "result": "\n```\nshoes, socks, shorts, pants, shirt, jacket, gloves, hat, shoes, socks\n```"}
{"cat": "clothes", "slot": "purpose", "value": "ride", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used to ride. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "purpose", "value": "walk", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used to walk. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "purpose", "value": "tie", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used to tie. \n        Output: ", "result": "\n```\nscarf, sash, bow, knot, ribbon, rope, cord, belt, lace, string\n```\n\nExercise 2:\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, cherry, strawberry, raspberry, watermelon, tomato, pumpkin, cranberry,"}
{"cat": "clothes", "slot": "user", "value": "woman", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used by women. \n        Output: ", "result": "\n            dress, skirt, blouse, shirt, pants, jacket, coat, scarf, shoes, purse \n\"\"\"\n\nword_list = [\"dress\", \"skirt\", \"blouse\", \"shirt\", \"pants\", \"jacket\", \"coat\", \"scarf\", \"shoes\", \"purse\"]\ncategory = \"clothes\"\ncondition = \"are used by women\"\n\nif category == \"clothes\" and condition == \"are used by women\":\nprint(\", \".join(word_list))\nelse"}
{"cat": "clothes", "slot": "user", "value": "man", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used by men. \n        Output: ", "result": "\n        jeans, pants, shirt, t-shirt, jacket, coat, hat, shoes, socks, underwear.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in text:\n        if word.lower() in category.lower() and word.lower() in condition.lower():\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n```\nExample"}
{"cat": "clothes", "slot": "user", "value": "horseman", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used by horsemen. \n        Output: ", "result": "\n            1. bridle\n            2. saddle\n            3. spur\n            4. reins\n            5. bit\n            6. halter\n            7. saddlecloth\n            8. martingale\n            9. breastplate\n            10. breeches\n        \"\"\"\n        words = [\"bridle\", \"saddle\", \"spur\", \"reins\", \"bit\", \"halter\", \"saddlecloth\", \"martingale\", \"breastplate\", \"breeches\"]\n        if category == \"clothes\":\n            words"}
{"cat": "clothes", "slot": "user", "value": "workman", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used by workmen. \n        Output: ", "result": "\n        jeans, overalls, coveralls, dungarees, work pants, work trousers, carpenter pants, carpenter overalls, mechanic pants, mechanic overalls\n\"\"\"\n\nword_list = [\"jeans\", \"overalls\", \"coveralls\", \"dungarees\", \"work pants\", \"work trousers\", \"carpenter pants\", \"carpenter overalls\", \"mechanic pants\", \"mechanic overalls\"]\ncategory = \"clothes\"\ncondition = \"are used by work"}
{"cat": "clothes", "slot": "user", "value": "gardener", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used by gardeners. \n        Output: ", "result": "\n        gloves, boots, hat, apron, overalls, shirt, pants, socks, shoes, trowel \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in text:\n        if word.lower() in category.lower() and word.lower() in condition.lower():\n            words.append(word)\n    print(\", \".join(words))\n```\nExample:\n```\npython word_filter.py clothes, are used by gardeners\n"}
{"cat": "clothes", "slot": "user", "value": "doctor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used by doctors. \n        Output: ", "result": "\n            scrubs, lab coat, stethoscope, syringe, gloves, face mask, doctor's bag, doctor's coat, doctor's hat, doctor's shoes.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() == condition.lower():\n            words.append(word.strip())\n    print(\", \".join(words))\n```\nExample:\n```\npython categories_and_words"}
{"cat": "clothes", "slot": "user", "value": "surgeon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used by surgeons. \n        Output: ", "result": "\n        gloves, scrubs, mask, stethoscope, scalpel, suture, forceps, surgical\n        sponge, surgical tape, surgical cap\n\"\"\"\n\nword_list = [\"gloves\", \"scrubs\", \"mask\", \"stethoscope\", \"scalpel\", \"suture\", \"forceps\", \"surgical sponge\", \"surgical tape\", \"surgical cap\"]\ncategory = \"clothes\"\ncondition = \"are used by surgeons\"\n\nif category == \"clothes"}
{"cat": "clothes", "slot": "user", "value": "men", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used by mens. \n        Output: ", "result": "\n        jeans, pants, shirt, t-shirt, jacket, coat, hat, shoes, socks, underwear.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in text:\n        if word.lower() in category.lower() and word.lower() in condition.lower():\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n```\nExample"}
{"cat": "clothes", "slot": "user", "value": "goalkeeper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used by goalkeepers. \n        Output: ", "result": "\n            gloves, shinpads, jersey, shorts, socks, goalkeeper gloves, goalkeeper shinpads, goalkeeper jersey, goalkeeper shorts, goalkeeper socks\n```\n\n```"}
{"cat": "clothes", "slot": "user", "value": "women", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used by womens. \n        Output: ", "result": "\n        dress, skirt, blouse, shirt, pants, jacket, coat, sweater, scarf, gloves\n```\n\n```\nDescribe a scenario where you need to find a list of words that belong to a category and satisfy a condition. \n        \n        dress, skirt, blouse"}
{"cat": "clothes", "slot": "user", "value": "lady", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used by ladies. \n        Output: ", "result": "\n            dress, skirt, blouse, shirt, pants, jacket, coat, scarf, gloves, hat\n\"\"\"\n\nword_list = [\"dress\", \"skirt\", \"blouse\", \"shirt\", \"pants\", \"jacket\", \"coat\", \"scarf\", \"gloves\", \"hat\"]\ncategory = \"clothes\"\ncondition = \"are used by ladies\"\n\nif category == \"clothes\" and condition == \"are used by ladies\":\n    print(\", \".join(word_list))\nelse:\n"}
{"cat": "clothes", "slot": "user", "value": "falconer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used by falconers. \n        Output: ", "result": "\n        falcon, hawk, eagle, falconry, bird, hood, glove, lure, perch, jesses\n\"\"\"\n\nword_list = [\"falcon\", \"hawk\", \"eagle\", \"falconry\", \"bird\", \"hood\", \"glove\", \"lure\", \"perch\", \"jesses\"]\ncategory = \"clothes\"\ncondition = \"are used by falconers\"\n\nif category == \"clothes\" and condition == \"are used by falconers\":\n    print(\", \".join("}
{"cat": "clothes", "slot": "user", "value": "fielder", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used by fielders. \n        Output: ", "result": "\n```\nhat, pants, shirt, socks, gloves, shoes, shorts, jacket, trousers, overalls\n```\n10. Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, raspberry, watermelon, pear, plum, tomato, red delicious, orange"}
{"cat": "clothes", "slot": "user", "value": "cowboy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used by cowboys. \n        Output: ", "result": "\n        jeans, boots, hat, shirt, chaps, spurs, belt, gloves, vest, jacket\n```\n\n```\nDescribe a scenario where the input is a list of words and the output should be a single word that is a combination of the words in the input list. \n        Desired output: a single word that is a combination of the words in the input list. \n        Input: [\"apple\", \"banana\", \"cherry\"] \n        Output: \"trio\"\n```\n\n```\nDescribe a scenario where the input is"}
{"cat": "clothes", "slot": "user", "value": "catcher", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used by catchers. \n        Output: ", "result": "\n        glove, mask, chest protector, shin guards, catcher's helmet, catcher's mitt, catcher's throat protector, catcher's cup, catcher's protective cup, catcher's helmet with face mask\n    \"\"\"\n    category = input(\"Provide a list of 10 words that belong to the category and satisfy the condition. \")\n    category_words = category.split()\n    condition = input(\"Desired output: comma separated list of words. \")\n    condition_words = condition.split"}
{"cat": "clothes", "slot": "user", "value": "soldier", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used by soldiers. \n        Output: ", "result": "\n            camouflage, combat, fatigues, helmet, jacket, boots, gloves, rifle, ammo, uniform\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split(\" \")\n    condition_words = condition.split(\" \")\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        # Check if the"}
{"cat": "clothes", "slot": "user", "value": "baseman", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are used by basemen. \n        Output: ", "result": "\n        baseball, cap, cleats, glove, helmet, jersey, pants, socks, batting\\_glove, catcher's\\_glove\n\"\"\"\n\nword_list = [\"baseball\", \"cap\", \"cleats\", \"glove\", \"helmet\", \"jersey\", \"pants\", \"socks\", \"batting\\_glove\", \"catcher's\\_glove\"]\ncategory = \"clothes\"\ncondition = \"are used by basemen\"\n\nif category == \"clothes\" and"}
{"cat": "clothes", "slot": "purpose", "value": "disposable", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: None disposable. \n        Output: ", "result": "\n```\ndress, shirt, pants, jacket, socks, underwear, shoes, hat, scarf, gloves\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: None organic. \n        Output: \n```\napple, banana, orange, pear, grapes, berries, melon, kiwi,"}
{"cat": "clothes", "slot": "shape", "value": "hand", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be hand. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "material", "value": "cotton", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of cotton. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "material", "value": "wool", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of wool. \n        Output: ", "result": "\n            scarf, gloves, socks, sweater, coat, hat, vest, pants, shirt, sweatshirt\n\"\"\"\n\nword_list = [\"scarf\", \"gloves\", \"socks\", \"sweater\", \"coat\", \"hat\", \"vest\", \"pants\", \"shirt\", \"sweatshirt\"]\nfiltered_list = []\nfor word in word_list:\n    if \"wool\" in word:\n        filtered_list.append(word)\n\nprint(\", \".join(filtered_list"}
{"cat": "clothes", "slot": "material", "value": "leather", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of leather. \n        Output: ", "result": "\n        jeans, jacket, boots, belt, gloves, shoes, purse, watch, wallet, handbag\n\"\"\"\n\nword_list = [\"jeans\", \"jacket\", \"boots\", \"belt\", \"gloves\", \"shoes\", \"purse\", \"watch\", \"wallet\", \"handbag\"]\ncategory = \"clothes\"\ncondition = \"can be made of leather\"\nfiltered_list = [word for word in word_list if word.endswith(\".leather\")]\nprint(filtered_"}
{"cat": "clothes", "slot": "material", "value": "linen", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of linen. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "material", "value": "silk", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of silk. \n        Output: ", "result": "\n          scarf, shirt, blouse, dress, skirt, pants, jacket, coat, gloves, socks.\n    \"\"\"\n    silk_words = []\n    for word in words:\n        if \"silk\" in word:\n            silk_words.append(word)\n    return silk_words\n\ndef get_anagrams(words):\n    \"\"\"\n    Given a list of words, return a list of all possible anagrams of the words.\n    An anagram is a word formed by rearranging the letters of another"}
{"cat": "clothes", "slot": "material", "value": "polyester", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of polyester. \n        Output: ", "result": "\n          dress, shirt, blouse, pants, skirt, jacket, coat, scarf, gloves, socks. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can be made of polyester'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('clothes', 'can be made of polyester'))\n```\n\u8f93\u51fa\uff1a\ndress, shirt, blouse, pants, skirt, jacket, coat, scarf, glo"}
{"cat": "clothes", "slot": "material", "value": "plastic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of plastic. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "material", "value": "nylon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of nylon. \n        Output: ", "result": "\n        dress, shirt, jacket, pants, skirt, shorts, blouse, sweater, socks, scarf\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split(\" \")\n    condition_words = condition.split(\" \")\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Iterate over the words in the condition\n    for word in condition_words:\n        # Check if the word"}
{"cat": "clothes", "slot": "material", "value": "viscose", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of viscose. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "material", "value": "suede", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of suede. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "material", "value": "cloth", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of cloth. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "material", "value": "felt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of felt. \n        Output: ", "result": "\n          scarf, hat, gloves, socks, jacket, vest, shirt, pants, skirt, dress \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"felt\" in word and \"clothes\" in category:\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n```\nExample:\n```\nword_list = [\"scarf\", \"hat\", \"gloves\", \"socks\", \"jack"}
{"cat": "clothes", "slot": "material", "value": "fabric", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of fabric. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "material", "value": "velvet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of velvet. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "material", "value": "chiffon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of chiffon. \n        Output: ", "result": "\n        dress, gown, blouse, shirt, skirt, pants, jacket, coat, scarf, sari \n    \"\"\"\n    category = 'clothes'\n    condition = 'can be made of chiffon'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    words = []\n    with open('words.txt', 'r') as f:\n        for line in f:\n            line = line.strip()\n            if line.starts"}
{"cat": "clothes", "slot": "material", "value": "rubber", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of rubber. \n        Output: ", "result": "\n          sneaker, flip-flop, sandal, shoe, boot, moccasin, slipper, loafer, clog, galosh.\n    \"\"\"\n    category = 'clothes'\n    condition = 'can be made of rubber'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == '"}
{"cat": "clothes", "slot": "material", "value": "fleece", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of fleece. \n        Output: ", "result": "\n          scarf, gloves, hat, jacket, pants, shirt, socks, sweater, vest, coat\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"fleece\" in word:\n            words.append(word)\n    return words\n\ndef get_synonyms(word_list, synonym_list):\n    \"\"\"\n    Given a list of words and a list of synonyms for each word, \n    return a list of synonyms for each word. \n    Desired output:"}
{"cat": "clothes", "slot": "material", "value": "latex", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of latex. \n        Output: ", "result": "\n        shoes, socks, gloves, condoms, balloons, boots, hats, belts, raincoats, galoshes.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as f:\n        for line in f:\n            line = line.strip()\n            if"}
{"cat": "clothes", "slot": "material", "value": "sheepskin", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of sheepskin. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "material", "value": "straw", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of straw. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "material", "value": "cashmere", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of cashmere. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "part", "value": "heel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  heel. \n        Output: ", "result": " boot, shoe, sandal, moccasin, pump, sneaker, loafer, clog, mule, wedge. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have heel'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def describe_category_and_condition(category, condition):\n        \"\"\"\n        Provide a description of the category and condition. \n        Category: clothes. \n        Condition: can have"}
{"cat": "clothes", "slot": "part", "value": "tongue", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  tongue. \n        Output: ", "result": " shoe, sock, tie, hat, glove, scarf, jacket, pants, shirt, sweater \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"tongue\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef"}
{"cat": "clothes", "slot": "part", "value": "hem", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  hem. \n        Output: ", "result": " dress, blouse, shirt, skirt, pants, coat, jacket, sweater, scarf, hem. \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"hem\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_"}
{"cat": "clothes", "slot": "part", "value": "seam", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  seam. \n        Output: ", "result": " shirt, dress, blouse, coat, pants, skirt, shorts, socks, scarf, sweater \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"seam\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count"}
{"cat": "clothes", "slot": "part", "value": "button", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  button. \n        Output: ", "result": " shirt,pants,jacket,dress,tie,socks,shoes,hat,scarf,coat \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"button\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef"}
{"cat": "clothes", "slot": "part", "value": "upper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  upper. \n        Output: ", "result": " top, shirt, blouse, sweater, sweatshirt, jacket, coat, vest, sweater, sweatshirt. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have upper'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category"}
{"cat": "clothes", "slot": "part", "value": "pocket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  pocket. \n        Output: ", "result": " shirt, pants, jacket, dress, coat, skirt, blouse, shorts, jeans. \n        \"\"\"\n        category = Category.objects.get(name='clothes')\n        condition = Condition.objects.get(name='can have pocket')\n        words = []\n        for word in Word.objects.all():\n            if word.category == category and word.condition == condition:\n                words.append(word.name)\n        return words\n\n    def get_words_by_category(self, category):\n        \"\"\"\n       "}
{"cat": "clothes", "slot": "part", "value": "zip", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  zip. \n        Output: ", "result": " coat, dress, hat, jacket, jeans, shirt, skirt, socks, zipper. \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"zip\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n        Desired output: a list of numbers, where the i-th number is the number of vowels in the i-th"}
{"cat": "clothes", "slot": "part", "value": "fur", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  fur. \n        Output: ", "result": " coat, scarf, hat, gloves, muff, vest, jacket, shawl, cape, pelt. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have fur'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == 'clothes':\n        if condition == 'can have"}
{"cat": "clothes", "slot": "part", "value": "sole", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  sole. \n        Output: ", "result": " boot, sole, shoe, sandal, moccasin, slipper, sneaker, loafer, clog, moccasin. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have sole'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_category_clothes_condition_can_have_sole(self):\n        result = get_words('clothes', 'can have sole')\n        self.assertEqual(result"}
{"cat": "clothes", "slot": "part", "value": "strap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  strap. \n        Output: ", "result": " shoe, sandal, flip-flop, sneaker, loafer, moccasin, slipper, mule, clog, espadrille \n    \"\"\"\n    category = 'clothes'\n    condition = 'can have strap'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n"}
{"cat": "clothes", "slot": "part", "value": "waistband", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  waistband. \n        Output: ", "result": " pants, shorts, skirt, dress, shirt, blouse, jacket, coat, vest, sweater. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have waistband'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_pants(self):\n        self.assertEqual(self.get_words('clothes', 'can have pants'), 'pants')\n\n    def test_get_words_shorts(self"}
{"cat": "clothes", "slot": "part", "value": "collar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  collar. \n        Output: ", "result": " shirt, jacket, sweater, blouse, dress, coat, vest, t-shirt, sweatshirt, polo. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have collar'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    words = []\n    if category == 'animals':"}
{"cat": "clothes", "slot": "part", "value": "neckline", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  neckline. \n        Output: ", "result": " shirt, blouse, dress, sweater, t-shirt, top, coat, jacket, sweatshirt, sweater. \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as f:\n        for line in f:\n            line = line.strip()\n            if line.starts"}
{"cat": "clothes", "slot": "part", "value": "visor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  visor. \n        Output: ", "result": " cap, visor, hat, scarf, gloves, jacket, shirt, pants, socks, shoes.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    words = []\n    if category == \"clothes\":\n       "}
{"cat": "clothes", "slot": "part", "value": "belt loop", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  belt loop. \n        Output: ", "result": " shirt, pants, shorts, skirt, dress, jacket, coat, vest, belt, belt loop. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have belt loop'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def get_words(self, category, condition):\n        \"\"\"\n        Given a category and a condition, return a list of words that satisfy the condition in that category.\n        \"\"\"\n        raise NotImplementedError\n\ndef main():"}
{"cat": "clothes", "slot": "part", "value": "seat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  seat. \n        Output: ", "result": " shirt, pants, coat, dress, skirt, blouse, shoes, socks, belt, seat. \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"seat\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count"}
{"cat": "clothes", "slot": "part", "value": "insole", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  insole. \n        Output: ", "result": "\n```\nshoes, socks, insoles, sneakers, boots, sandals, flip-flops, slippers, loafers, moccasins\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: can be eaten raw. \n        Output: \n```\napples, bananas, oranges, grapes, strawberries,"}
{"cat": "clothes", "slot": "part", "value": "trouser cuff", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  trouser cuff. \n        Output: ", "result": " pantleg, trousercuff, trouserleg, trouserseam, trouserwaistband, trouserfly, trouserhem, trouserlegging, trouserseamline, trouserwaistline. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have trouser cuff'\n        words = []\n        for word in get_words(category, condition):\n            if 'trouser' in word:\n                words.append(word)\n        result = ', '.join(words)\n        print(result)\n"}
{"cat": "clothes", "slot": "part", "value": "shirtfront", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  shirtfront. \n        Output: ", "result": " shirt, shirtfront, shirtwaist, shirtwaistcoat, shirtwaister, shirtwaistcoat, shirtwaistercoat, shirtwaistcoat, shirtwaistcoat, shirtwaistcoat. \n        Explanation: shirt, shirtfront, shirtwaist, shirtwaistcoat, shirtwaister, shirtwaistcoat, shirtwaistercoat, shirtwaistcoat, shirtwaistcoat, shirtwaistcoat all belong to the"}
{"cat": "clothes", "slot": "part", "value": "hip pocket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  hip pocket. \n        Output: ", "result": "\n        jeans, pants, jacket, coat, shirt, t-shirt, dress, skirt, shorts, trousers\n\"\"\"\n\nword_list = [\"jeans\", \"pants\", \"jacket\", \"coat\", \"shirt\", \"t-shirt\", \"dress\", \"skirt\", \"shorts\", \"trousers\"]\ncategory = \"clothes\"\ncondition = \"can have hip pocket\"\n\nfiltered_list = [word for word in word_list if \"hip\" in word and \"pocket\" in"}
{"cat": "clothes", "slot": "part", "value": "instep", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  instep. \n        Output: ", "result": " shoe, sock, instep, sneaker, boot, slipper, sandal, moccasin, loafer, clog. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have instep'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == 'animals':\n        words"}
{"cat": "clothes", "slot": "part", "value": "innersole", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  innersole. \n        Output: ", "result": " shoe, sandal, slipper, flip-flop, moccasin, loafer, clog, mule, moccasin, slipper. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have innersole'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def describe_category_and_condition(category, condition):\n        \"\"\"\n        Provide a description of the category and condition. \n        Category: clothes. \n"}
{"cat": "clothes", "slot": "part", "value": "pant leg", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  pant leg. \n        Output: ", "result": " pant,leg,trouser,slack,pantleg,legging,pantaloon,panty,pantlegs,trousers. \n        \"\"\"\n        category = Category.objects.get(name='clothes')\n        condition = Condition.objects.get(name='can have pant leg')\n        queryset = Word.objects.filter(category=category, condition=condition)\n        words = [word.name for word in queryset]\n        return ', '.join(words)\n"}
{"cat": "clothes", "slot": "part", "value": "hemline", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  hemline. \n        Output: ", "result": " skirt, dress, trousers, pants, shorts, blouse, shirt, jacket, coat, overcoat. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have hemline'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def describe_category_and_condition(category, condition):\n        \"\"\"\n        Provide a description of the category and condition. \n        Category: clothes. \n        Condition: can have hemline."}
{"cat": "clothes", "slot": "part", "value": "toecap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  toecap. \n        Output: ", "result": " shoe, boot, sneaker, trainer, moccasin, loafer, slipper, sandal, clog, moccasin. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have toecap'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('clothes', 'can have toecap'))\n```\n\u8f93\u51fa\uff1ashoe, boot, sneaker, trainer, moccasin, loafer, sli"}
{"cat": "clothes", "slot": "part", "value": "counter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  counter. \n        Output: ", "result": "\n            \n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"counter\" in word:\n                words.append(word)\n        if len(words) == 0:\n            print(\"No words found\")\n        else:\n            print(\", \".join(words))\n```\nExample:\n```\nword_list = [\n    \"shirt\",\n    \"pant\",\n    \"dress\",\n    \"jacket\",\n    \"tie\",\n    \"shoes\",\n    \"socks\",\n    \"hat"}
{"cat": "clothes", "slot": "part", "value": "lap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  lap. \n        Output: ", "result": " shirt, pants, jacket, coat, dress, skirt, blouse, scarf, socks, shoes.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"lap\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_"}
{"cat": "clothes", "slot": "part", "value": "shoe collar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  shoe collar. \n        Output: ", "result": "\n            1. Shoe\n            2. Collar\n            3. Sole\n            4. Toe\n            5. Heel\n            6. Ankle\n            7. Upper\n            8. Lace\n            9. Insole\n            10. Outsole\n        \"\"\"\n        words = [\"Shoe\", \"Collar\", \"Sole\", \"Toe\", \"Heel\", \"Ankle\", \"Upper\", \"Lace\", \"Insole\", \"Outsole\"]\n        words = [word for word in words if \"shoe\" in word and \""}
{"cat": "clothes", "slot": "part", "value": "heel counter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  heel counter. \n        Output: ", "result": " boot, shoe, sandal, moccasin, loafer, sneaker, bootie, clog, mule, wedge. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have heel counter'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def describe_category_and_condition(category, condition):\n        \"\"\"\n        Provide a description of the category and condition. \n        Category: clothes. \n        Condition: can"}
{"cat": "clothes", "slot": "part", "value": "lap covering", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  lap covering. \n        Output: ", "result": " coat, jacket, sweater, sweatshirt, shirt, blouse, dress, skirt, pants, overalls. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have lap covering'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def get_words(self, category, condition):\n        \"\"\"\n        Given a category and a condition, return a list of words that satisfy the condition in that category.\n        \"\"\"\n        raise NotImplementedError\n\nif __"}
{"cat": "clothes", "slot": "part", "value": "trouser", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  trouser. \n        Output: ", "result": " pants, trousers, slacks, jeans, overalls, shorts, skirts, dresses, blouses, shirts. \n        \"\"\"\n        category = Category.objects.get(name='clothes')\n        words = Word.objects.filter(category=category, text__contains='trouser')\n        return [word.text for word in words]\n\n    def get_fruits(self):\n        \"\"\"\n        Retrieve a list of 10 words that belong to the category and satisfy the condition. \n        Des"}
{"cat": "clothes", "slot": "part", "value": "trouser leg", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  trouser leg. \n        Output: ", "result": " pantleg, trouserleg, trouserlegs, pantlegs, trouserseam, trouserseams, trouserseaming, pantseam, pantseams, pantseaming. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have trouser leg'\n        words = []\n        for word in get_words(category, condition):\n            if 'leg' in word:\n                words.append(word)\n        result = ', '.join(words)\n        print(result)\n```\nExplan"}
{"cat": "clothes", "slot": "part", "value": "toe box", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  toe box. \n        Output: ", "result": " shoe, boot, sneaker, moccasin, loafer, slipper, sandal, flip-flop, clog, moccasin. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have toe box'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def describe_category(category):\n        \"\"\"\n        Provide a brief description of the category. \n        Category: clothes. \n        Desired output: brief description of"}
{"cat": "clothes", "slot": "part", "value": "outsole", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  outsole. \n        Output: ", "result": "\n          shoe, boot, sneaker, moccasin, loafer, clog, sandal, slipper, moccasin, loafer\n```\n```"}
{"cat": "clothes", "slot": "part", "value": "lacing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  lacing. \n        Output: ", "result": " shoe, boot, sneaker, sandal, moccasin, loafer, slipper, shoe lace, boot lace, sneaker lace, sandal lace, moccasin lace, loafer lace, slipper lace.\n    \"\"\"\n    category = input(\"Provide a list of 10 words that belong to the category and satisfy the condition. \")\n    words = category.split()\n    laced_words = []\n    for word in words:\n        if \"lacing\" in word:\n            la"}
{"cat": "clothes", "slot": "part", "value": "dickey", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  dickey. \n        Output: ", "result": "\n        jeans,shirt,pants,jacket,hat,socks,shoes,t-shirt,polo\n```\n\n```\nDescribe a scenario where the input is a list of words and the output should be a single word that is the most frequently occurring word in the input list. \n        Desired output: a single word. \n        Input: ['apple', 'banana', 'orange', 'pear']\n        Expected output: 'apple'\n```\n\n```\nDescribe a scenario where the input is a list of words and"}
{"cat": "clothes", "slot": "part", "value": "bootleg", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  bootleg. \n        Output: ", "result": " bootleg, jeans, joggers, leggings, shorts, socks, sweatpants, sweatshirt, t-shirt, underwear.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"bootleg\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count +="}
{"cat": "clothes", "slot": "part", "value": "box pleat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  box pleat. \n        Output: ", "result": " blouse, dress, jacket, pants, shirt, skirt, suit, top, trousers. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have box pleat'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == 'animals':\n        if condition == 'mammals':"}
{"cat": "clothes", "slot": "part", "value": "finger", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  finger. \n        Output: ", "result": " glove, mitten, sock, shoe, sandal, cap, scarf, tie, belt, suspender.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition.\n    \"\"\"\n    if category == \"clothes\":\n        if condition == \"can have finger\":"}
{"cat": "clothes", "slot": "part", "value": "dicky", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  dicky. \n        Output: ", "result": " shirt, pants, jacket, tie, socks, shoes, hat, scarf, gloves, dicky. \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"dicky\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef"}
{"cat": "clothes", "slot": "part", "value": "saddle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  saddle. \n        Output: ", "result": " boot, coat, dress, glove, hat, jacket, jeans, shoe, sock, saddle. \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"saddle\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_"}
{"cat": "clothes", "slot": "part", "value": "earlap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  earlap. \n        Output: ", "result": "\n```\nscarf, hat, gloves, socks, sweater, jacket, shirt, pants, dress, earlap\n```"}
{"cat": "clothes", "slot": "part", "value": "shirtsleeve", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  shirtsleeve. \n        Output: ", "result": " shirt, shirtsleeve, blouse, blousesleeve, dress, dressesleeve, jacket, jacketsleeve, pants, pantsleeve, skirt, skirtsleeve. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have shirtsleeve'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n# Test the function with sample inputs\nprint(get_words('clothes', 'can have shirtsleeve'))\n# Output"}
{"cat": "clothes", "slot": "part", "value": "neckband", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  neckband. \n        Output: ", "result": " shirt, t-shirt, blouse, dress, sweater, sweatshirt, coat, jacket, scarf, necktie \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as f:\n        for line in f:\n            line = line.strip()\n            if line."}
{"cat": "clothes", "slot": "part", "value": "dickie", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  dickie. \n        Output: ", "result": "\n```\ndickie,shirt,pants,jacket,tie,dress,skirt,blouse,socks,shoes\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition of having \"dickie\" are \"dickie, shirt, pants, jacket, tie, dress, skirt, blouse, socks, shoes\"."}
{"cat": "clothes", "slot": "part", "value": "sunray pleat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  sunray pleat. \n        Output: ", "result": "\n        dress, shirt, blouse, pants, skirt, shorts, jacket, coat, scarf, gloves\n```\n\n```"}
{"cat": "clothes", "slot": "part", "value": "placket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  placket. \n        Output: ", "result": " shirt, jacket, vest, blouse, sweater, dress, coat, pants, skirt, blouse. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have placket'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits"}
{"cat": "clothes", "slot": "part", "value": "thumb", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  thumb. \n        Output: ", "result": " shirt, pants, shoes, socks, hat, gloves, jacket, scarf, tie, belt. \n    \"\"\"\n    thumb_words = [\"thumb\"]\n    result = []\n    for word in all_words:\n        if \"thumb\" in word:\n            result.extend(thumb_words)\n        else:\n            result.append(word)\n    return result\n\ndef get_categories(all_words):\n    \"\"\"\n    Given a list of words, return a list of categories that the words belong to.\n       "}
{"cat": "clothes", "slot": "part", "value": "crown", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  crown. \n        Output: ", "result": " coat, dress, hat, jewelry, necklace, ring, scarf, shirt, skirt, crown\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"crown\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_con"}
{"cat": "clothes", "slot": "part", "value": "gad", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  gad. \n        Output: ", "result": "\n```\ndress, shirt, blouse, skirt, pants, shorts, coat, jacket, sweater, scarf\n```\n\nExercise 2:\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: colors. \n        Condition: can have 10. \n        Output: \n```\nred, blue, green, yellow, orange, purple, pink, black, white, gray\n```\n\n"}
{"cat": "clothes", "slot": "part", "value": "brim", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  brim. \n        Output: ", "result": " hat, cap, brim, headwear, sunhat, visor, beret, toque, beanie, skullcap. \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == '__main__':\n    main()\n```\n```"}
{"cat": "clothes", "slot": "part", "value": "buckle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  buckle. \n        Output: ", "result": "\n          shoe, belt, boot, zipper, button, lace, strap, sneaker, sandal, bootie \n    \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"buckle\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n    Desired output: a list of numbers, where the i-th number is the"}
{"cat": "clothes", "slot": "part", "value": "sunburst pleat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  sunburst pleat. \n        Output: ", "result": "\n            \n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"sunburst pleat\" in word:\n                words.append(word)\n        return words\n\n    def get_words_with_category(self, word_list, category):\n        \"\"\"\n        Given a list of words and a category, return a list of words that belong to the category. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Output: \n            \n        \"\"\"\n        words = []\n        for"}
{"cat": "clothes", "slot": "part", "value": "bootlace", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  bootlace. \n        Output: ", "result": "\n```\nboot,lace,lace-up,lace-down,lace-up-boot,lace-down-boot,lace-up-shoe,lace-down-shoe,lace-up-bootie,lace-down-bootie\n```"}
{"cat": "clothes", "slot": "part", "value": "shirt button", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  shirt button. \n        Output: ", "result": " shirt, button, shirt button. \n    \"\"\"\n    words = []\n    for word in words:\n        if \"shirt\" in word and \"button\" in word:\n            words.append(word)\n    return \", \".join(words)\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_consonants(word):\n   "}
{"cat": "clothes", "slot": "part", "value": "spike", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  spike. \n        Output: ", "result": "\n        jeans, shirt, jacket, boots, hat, socks, gloves, scarf, sneakers, spike.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    if category == \"clothes\":\n        if condition == \"can have spike\":\n            words.append(\"jeans\")\n            words.append(\""}
{"cat": "clothes", "slot": "part", "value": "half sole", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  half sole. \n        Output: ", "result": " shoe, sandal, flip-flop, sneaker, moccasin, loafer, slipper, clog, mule, moccasin. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have half sole'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('clothes', 'can have  half sole'))\n```\n\u8f93\u51fa\uff1ashoe, sandal, flip-flop, sneaker, moccas"}
{"cat": "clothes", "slot": "part", "value": "pleat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  pleat. \n        Output: ", "result": "\n            dress, shirt, blouse, pants, skirt, coat, jacket, scarf, tie, socks \n\"\"\"\n\nword_list = [\"dress\", \"shirt\", \"blouse\", \"pants\", \"skirt\", \"coat\", \"jacket\", \"scarf\", \"tie\", \"socks\"]\nfiltered_word_list = []\nfor word in word_list:\n    if \"pleat\" in word:\n        filtered_word_list.append(word)\n\nprint(\", \".join(filtered_word"}
{"cat": "clothes", "slot": "part", "value": "toe", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  toe. \n        Output: ", "result": " shoe, boot, sock, sandal, sneaker, moccasin, loafer, slipper, clog, moccasin. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have toe'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('clothes', 'can have heel'))\n    print(get_words('clothes', 'can have sole'))\n    print(get_words('clothes', 'can"}
{"cat": "clothes", "slot": "part", "value": "shoe lace", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  shoe lace. \n        Output: ", "result": "\n            shoe,lace,shoelace,lace,shoe-lace,lace-shoe,shoelace-lace,lace-shoe-lace,shoe-lace-shoe,lace-shoe-lace-shoe\n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"shoe\" in word or \"shoelace\" in word:\n                words.append(word)\n        return \",\".join(words)\n\ndef print_list_of_words(word_list, category, condition):\n"}
{"cat": "clothes", "slot": "part", "value": "kick pleat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  kick pleat. \n        Output: ", "result": " pants, shorts, skirt, dress, shirt, blouse, jacket, coat, scarf, socks. \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    if category == \"clothes\":\n        if condition == \"can have kick pleat\":\n            words.append(\"pants\")\n            words.append(\"shorts"}
{"cat": "clothes", "slot": "part", "value": "hatband", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  hatband. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "part", "value": "eyelet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  eyelet. \n        Output: ", "result": " shoe, sandal, moccasin, loafer, sneaker, boat shoe, oxford, derby, loafer, moccasin. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have  eyelet'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('clothes', 'can have  eyelet'))\n```\n\u8f93\u51fa\uff1ashoe, sandal, moccasin, loafer, sneaker,"}
{"cat": "clothes", "slot": "part", "value": "shirting", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  shirting. \n        Output: ", "result": " shirt, shirting, blouse, blousing, blouson, shirtings, shirtings, shirtings, shirtings, shirtings. \n        Explanation: shirt, shirting, blouse, blousing, blouson, shirtings, shirtings, shirtings, shirtings, shirtings all belong to the category clothes and can have shirting. \n        \"\"\"\n        category = Category.objects.get(name='clothes')\n        words = Word.objects.filter(category=category"}
{"cat": "clothes", "slot": "part", "value": "sleeve", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  sleeve. \n        Output: ", "result": " shirt, jacket, sweater, sweatshirt, coat, vest, blouse, dress, sweater, sweatshirt. \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    for word in dir(category):\n        if callable(getattr(category, word)) and getattr(category, word).name.startswith(condition"}
{"cat": "clothes", "slot": "part", "value": "spur", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  spur. \n        Output: ", "result": "\n            \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"spur\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_consonants(word):\n    consonants = \"bcdfghjklmnpqrstvw"}
{"cat": "clothes", "slot": "part", "value": "earflap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  earflap. \n        Output: ", "result": " hat, scarf, mitten, glove, earflap, parka, coat, sweater, sock, boots \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"earflap\" in word:\n            words.append(word)\n    return words\n\nif __name__ == '__main__':\n    word_list = ['hat', 'scarf', 'mitten', 'glove', 'earflap', 'parka', 'coat', 'sweater', 'sock', 'boots']"}
{"cat": "clothes", "slot": "part", "value": "eyehole", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  eyehole. \n        Output: ", "result": " shirt, dress, blouse, pants, jacket, coat, skirt, scarf, gloves, socks. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have eyehole'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_category_clothes_condition_can_have_eyehole(self):\n        result = self.get_words('clothes', 'can have eyehole')\n        self.assertEqual(result"}
{"cat": "clothes", "slot": "part", "value": "bodice", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  bodice. \n        Output: ", "result": " dress, bodice, bodice, bodice, bodice, bodice, bodice, bodice, bodice. \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"bodice\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n        Desired output: a list of numbers, where the i-th number is the number of vowels in the"}
{"cat": "clothes", "slot": "part", "value": "shirttail", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  shirttail. \n        Output: ", "result": " shirt, shirttail, shirtail, shirtless, shirtsleeve, shirtwaist, shirtfront, shirtcollar, shirtsleeve, shirtwaist.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"shirttail\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n        Desired output"}
{"cat": "clothes", "slot": "part", "value": "shoestring", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  shoestring. \n        Output: ", "result": " shoe,shoestring,shoes,shoestring,shoes,shoestring,shoes,shoestring,shoes,shoestring \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"shoestring\" in word:\n            words.append(word)\n    return words\n\ndef get_longest_word(word_list):\n    \"\"\"\n    Given a list of words, return the length of the longest word.\n    \"\"\"\n    max_len = "}
{"cat": "clothes", "slot": "part", "value": "ruffle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  ruffle. \n        Output: ", "result": "\n        dress, shirt, blouse, skirt, pants, coat, scarf, gloves, socks.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as f:\n        for line in f:\n            line = line.strip()\n            if line.startswith(category) and"}
{"cat": "clothes", "slot": "part", "value": "shoelace", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  shoelace. \n        Output: ", "result": " shoe, shoelace, sock, tie, belt, scarf, gloves, hat, jacket, pants. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have shoelace'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition. \n        Category: a category of things. \n        Condition:"}
{"cat": "clothes", "slot": "part", "value": "shoe string", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  shoe string. \n        Output: ", "result": "\n          shoe, sock, sandal, sneaker, boot, moccasin, slipper, loafer, clog, mule \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"shoe\" in word:\n            words.append(word)\n    if \"shoe\" in word_list[-1]:\n        words.append(word_list[-1])\n    return \", \".join(words)\n\n# Your code here\n\nprint(get_comma_separated_list(\"clothes"}
{"cat": "clothes", "slot": "material", "value": "lace", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of lace. \n        Output: ", "result": "\n          dress, shirt, blouse, skirt, pants, coat, jacket, scarf, gloves, socks.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"lace\" in word:\n            words.append(word)\n    return \", \".join(words)\n\n# Your code here\n\nprint(find_words(\"clothes\", \"can be made of lace\"))"}
{"cat": "clothes", "slot": "material", "value": "coat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of coat. \n        Output: ", "result": "\n          coat, jacket, sweater, shirt, pants, dress, skirt, blouse, scarf, gloves.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"coat\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\n"}
{"cat": "clothes", "slot": "generalization", "value": "garment", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are garment. \n        Output: ", "result": "\n            shirt,pants,dress,jacket,skirt,tie,socks,shoes,blouse,coat\n\"\"\"\n\nword_list = [\"shirt\", \"pants\", \"dress\", \"jacket\", \"skirt\", \"tie\", \"socks\", \"shoes\", \"blouse\", \"coat\"]\ncategory = \"clothes\"\ncondition = \"are garment\"\n\nif category == \"clothes\" and condition == \"are garment\":\n    print(\", \".join(word_list))\n"}
{"cat": "clothes", "slot": "generalization", "value": "clothing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are clothing. \n        Output: ", "result": "\n```\nshirt,pants,dress,jacket,skirt,socks,shoes,tie,scarf,hat\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are clothing\" are: shirt, pants, dress, jacket, skirt, socks, shoes, tie, scarf, and hat.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n"}
{"cat": "clothes", "slot": "generalization", "value": "covering", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are covering. \n        Output: ", "result": "\n            coat, dress, gloves, hat, jacket, jeans, shirt, skirt, socks, sweater\n\"\"\"\n\nword_list = [\"coat\", \"dress\", \"gloves\", \"hat\", \"jacket\", \"jeans\", \"shirt\", \"skirt\", \"socks\", \"sweater\"]\ncategory = \"clothes\"\ncondition = \"are covering\"\n\nif category == \"clothes\" and condition == \"are covering\":\n    print(\", \".join(word_list))\nelse:\n    print(\""}
{"cat": "clothes", "slot": "generalization", "value": "consumer goods", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are consumer goods. \n        Output: ", "result": "\n```\ndress, shirt, pants, socks, shoes, jacket, skirt, blouse, scarf, belt\n```"}
{"cat": "clothes", "slot": "generalization", "value": "footwear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are footwear. \n        Output: ", "result": "\n        shoes, socks, sandals, boots, sneakers, flip-flops, slippers, loafers, clogs, moccasins.\n    \"\"\"\n    footwear = [\"shoes\", \"socks\", \"sandals\", \"boots\", \"sneakers\", \"flip-flops\", \"slippers\", \"loafers\", \"clogs\", \"moccasins\"]\n    category = \"clothes\"\n    condition = \"are footwear\"\n    words = [word for word in"}
{"cat": "clothes", "slot": "generalization", "value": "vesture", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are vesture. \n        Output: ", "result": "\n```\ncoat, dress, shirt, skirt, suit, tie, trousers, vest, waistcoat\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are vesture\" are: coat, dress, shirt, skirt, suit, tie, trousers, vest, waistcoat.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: colors. \n"}
{"cat": "clothes", "slot": "generalization", "value": "habiliment", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are habiliment. \n        Output: ", "result": "\n            coat, dress, hat, jacket, pants, shirt, shoes, skirt, socks, t-shirt\n\"\"\"\n\nword_list = [\"coat\", \"dress\", \"hat\", \"jacket\", \"pants\", \"shirt\", \"shoes\", \"skirt\", \"socks\", \"t-shirt\"]\ncategory = \"clothes\"\ncondition = \"are habiliment\"\n\nif category == \"clothes\" and condition == \"are habiliment\":\n    print(\", \".join(word_list))"}
{"cat": "clothes", "slot": "generalization", "value": "article of clothing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are article of clothing. \n        Output: ", "result": "\n```\nshirt,pants,socks,hat,jacket,dress,skirt,shoes,tie,scarf\n```"}
{"cat": "clothes", "slot": "generalization", "value": "wear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are wear. \n        Output: ", "result": "\n```\ndress, shirt, pants, jacket, socks, shoes, hat, scarf, gloves\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are wear\" are: dress, shirt, pants, jacket, socks, shoes, hat, scarf, and gloves.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. "}
{"cat": "clothes", "slot": "generalization", "value": "wearable", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are wearable. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "generalization", "value": "artifact", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are artifact. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "generalization", "value": "artefact", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are artefact. \n        Output: ", "result": "\n            \n        \"\"\"\n        category = 'clothes'\n        condition = 'are artefact'\n        words = []\n        for word in text.split():\n            if word.lower() in category_map[category] and word.lower() in condition_map[condition]:\n                words.append(word)\n        if words:\n            print(', '.join(words))\n        else:\n            print('No words found.')\n\nif __name__ == '__main__':\n    main()\n```\n```"}
{"cat": "clothes", "slot": "generalization", "value": "shoe", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are shoe. \n        Output: ", "result": "\n        shoes, socks, sandals, sneakers, boots, loafers, slippers, flip-flops, moccasins, clogs.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() == condition.lower():\n            words.append(word.strip())\n    print(\", \".join(words))\n```\nExample:\n```\npython word_category.py\nEnter category:"}
{"cat": "clothes", "slot": "generalization", "value": "headdress", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are headdress. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "generalization", "value": "footgear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are footgear. \n        Output: ", "result": "\n        shoes, socks, boots, sandals, sneakers, flip-flops, slippers, loafers, clogs, moccasins.\n    \"\"\"\n    words = []\n    for word in words:\n        if \"footgear\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count"}
{"cat": "clothes", "slot": "generalization", "value": "headgear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are headgear. \n        Output: ", "result": "\n```\nhat, cap, beret, turban, toque, beanie, bonnet, scarf, kerchief, bandana\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, cherry, strawberry, raspberry, plum, watermelon, tomato, pumpkin, c"}
{"cat": "clothes", "slot": "generalization", "value": "headwear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are headwear. \n        Output: ", "result": "\n        beanie, cap, hat, beret, toque, scarf, gloves, mittens, earmuffs, balaclava \n    \"\"\"\n    headwear = [\"beanie\", \"cap\", \"hat\", \"beret\", \"toque\", \"scarf\", \"gloves\", \"mittens\", \"earmuffs\", \"balaclava\"]\n    headwear = [word for word in headwear if word.lower() in [\"hat\", \"cap\", \"beanie\", \"toque\", \"scarf\", \"gloves\", \""}
{"cat": "clothes", "slot": "generalization", "value": "handwear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are handwear. \n        Output: ", "result": "\n```\nscarf, gloves, hat, socks, mittens, earmuffs, cap, coat, vest, sweater\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are handwear\" are scarf, gloves, hat, socks, mittens, earmuffs, cap, coat, vest, sweater.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category"}
{"cat": "clothes", "slot": "generalization", "value": "hand wear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are hand wear. \n        Output: ", "result": "\n            gloves, mittens, socks, hats, scarves, earmuffs, boots, shoes, sandals, flip-flops.\n        \"\"\"\n        category = 'clothes'\n        condition = 'are hand wear'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('clothes', 'are hand wear'))  # Output: gloves, mittens, socks, hats, scarves, earmuffs, boots, shoes,"}
{"cat": "clothes", "slot": "generalization", "value": "good", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are good. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "generalization", "value": "unit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are unit. \n        Output: ", "result": "10 words that belong to the category and satisfy the condition. \n        \"\"\"\n        words = []\n        for word in Word.objects.all():\n            if word.category == \"clothes\" and len(word.text.split()) == 1:\n                words.append(word.text)\n        result = \", \".join(words)\n        print(result)\n```"}
{"cat": "clothes", "slot": "generalization", "value": "woman's clothing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are woman's clothing. \n        Output: ", "result": "\n            dress, skirt, blouse, shirt, pants, jacket, coat, scarf, gloves, hat\n\"\"\"\n\n# Define the function\ndef get_woman_clothing(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Iterate over the words in the category\n    for word in category_words:\n        # Check if the word"}
{"cat": "clothes", "slot": "generalization", "value": "overgarment", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are overgarment. \n        Output: ", "result": "\n            coat, jacket, sweater, sweatshirt, shirt, blouse, dress, skirt, pants, overalls\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split(\" \")\n    condition_words = condition.split(\" \")\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Iterate over the condition words\n    for word in condition_words:\n        # Check if the word is"}
{"cat": "clothes", "slot": "generalization", "value": "outer garment", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are outer garment. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "generalization", "value": "whole", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are whole. \n        Output: ", "result": "\n```\ndress, shirt, pants, jacket, socks, shoes, belt, hat, scarf, gloves\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are whole\" are: dress, shirt, pants, jacket, socks, shoes, belt, hat, scarf, and gloves.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n       "}
{"cat": "clothes", "slot": "generalization", "value": "trade good", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are trade good. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "generalization", "value": "commodity", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are commodity. \n        Output: ", "result": "\n            \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"commodity\" in word and \"clothes\" in word:\n            words.append(word)\n    return \", \".join(words)\n\ndef get_category(word):\n    \"\"\"\n    Given a word, return the category to which it belongs.\n\n    Parameters:\n    word (str): The word to determine the category for.\n\n    Returns:\n    str: The category to which the word belongs.\n\n    Example:\n    Given the word"}
{"cat": "clothes", "slot": "generalization", "value": "disguise", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are disguise. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "generalization", "value": "hose", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are hose. \n        Output: ", "result": "\n          trousers, pants, overalls, shorts, skirts, dresses, blouses, shirts, coats, jackets\n\"\"\"\n\nword_list = [\"trousers\", \"pants\", \"overalls\", \"shorts\", \"skirts\", \"dresses\", \"blouses\", \"shirts\", \"coats\", \"jackets\"]\ncategory = \"clothes\"\ncondition = \"are hose\"\n\nif category == \"clothes\" and condition == \"are hose\":\n    print(\", \".join("}
{"cat": "clothes", "slot": "generalization", "value": "dress", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are dress. \n        Output: ", "result": "\n        dress, shirt, blouse, pants, skirt, coat, jacket, tie, scarf, socks. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are dress'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def get_words_in_category(self, category):\n        \"\"\"\n        Given a category, return a list of words that belong to that category.\n        \"\"\"\n        words = []\n        for word in self.words:\n            if word"}
{"cat": "clothes", "slot": "generalization", "value": "garb", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are garb. \n        Output: ", "result": "\n```\ncoat, dress, shirt, pants, skirt, jacket, scarf, socks, shoes\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are edible. \n        Output: \n```\napple, banana, cherry, date, fig, grape, kiwi, mango, orange, pear\n```\n\nExample:"}
{"cat": "clothes", "slot": "generalization", "value": "top", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are top. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "generalization", "value": "hosiery", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are hosiery. \n        Output: ", "result": "\n        socks,stockings,tights,pantyhose,socks,hosiery,stockings,tights,pantyhose,socks,hosiery,stockings,tights,pantyhose,socks,hosiery,stockings,tights,pantyhose,socks,hosiery,stockings,tights,pantyhose,socks,hosiery,stockings,tights,pantyhose,socks,hosiery,stockings,tights,panty"}
{"cat": "clothes", "slot": "generalization", "value": "attire", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are attire. \n        Output: ", "result": "\n```\ndress, suit, shirt, blouse, pants, skirt, coat, tie, shoes, belt\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammals. \n        Output: \n```\ncat, dog, cow, pig, horse, elephant, giraffe, whale, dolphin, seal\n```"}
{"cat": "clothes", "slot": "generalization", "value": "neckwear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are neckwear. \n        Output: ", "result": "\n```\ntie, bowtie, scarf, ascot, cravat, kerchief, neckerchief, sash, sashay, sashaying\n```\nExplanation:\n\n1. tie, bowtie, scarf, ascot, cravat, kerchief, neckerchief, sash, sashay, sashaying - all belong to the category of clothes and satisfy the condition of being neckwear.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition."}
{"cat": "clothes", "slot": "generalization", "value": "cloak", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are cloak. \n        Output: ", "result": "\n            coat, cloak, cape, jacket, vest, robe, shawl, scarf, muffler, poncho.\n        \"\"\"\n        category = 'clothes'\n        words = get_words(category)\n        cloak_words = [word for word in words if word.lower() == 'cloak']\n        cloak_words = sorted(cloak_words, key=lambda x: len(x))\n        cloak_words = ', '.join(cloak_words)\n        print(cloak_words)\n```\n"}
{"cat": "clothes", "slot": "colorPattern", "value": "patterned", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be patterned. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "colorPattern", "value": "black", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be black. \n        Output: ", "result": "\n            black, shirt, dress, coat, pants, skirt, shoes, socks, t-shirt \n\"\"\"\n\nword_list = [\"shirt\", \"dress\", \"coat\", \"pants\", \"skirt\", \"shoes\", \"socks\", \"t-shirt\"]\ncategory = \"clothes\"\ncondition = \"can be black\"\nfiltered_word_list = [word for word in word_list if word.lower().startswith(category.lower() + \"can be \" + condition.lower() + \""}
{"cat": "clothes", "slot": "colorPattern", "value": "black", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be black. \n        Output: ", "result": "\n            black, shirt, dress, coat, pants, skirt, shoes, socks, t-shirt \n\"\"\"\n\nword_list = [\"shirt\", \"dress\", \"coat\", \"pants\", \"skirt\", \"shoes\", \"socks\", \"t-shirt\"]\ncategory = \"clothes\"\ncondition = \"can be black\"\nfiltered_word_list = [word for word in word_list if word.lower().startswith(category.lower() + \"can be \" + condition.lower() + \""}
{"cat": "clothes", "slot": "colorPattern", "value": "blue", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be blue. \n        Output: ", "result": "\n        blue, shirt, jacket, pants, dress, socks, shoes, hat, scarf, gloves.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"blue\" in word:\n            words.append(word)\n    return words\n\nif __name__ == \"__main__\":\n    word_list = [\n        \"shirt\",\n        \"jacket\",\n        \"pants\",\n        \"dress\",\n        \"socks\",\n        \"shoes\",\n        \"hat\","}
{"cat": "clothes", "slot": "colorPattern", "value": "blue", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be blue. \n        Output: ", "result": "\n        blue, shirt, jacket, pants, dress, socks, shoes, hat, scarf, gloves.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"blue\" in word:\n            words.append(word)\n    return words\n\nif __name__ == \"__main__\":\n    word_list = [\n        \"shirt\",\n        \"jacket\",\n        \"pants\",\n        \"dress\",\n        \"socks\",\n        \"shoes\",\n        \"hat\","}
{"cat": "clothes", "slot": "colorPattern", "value": "green", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be green. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "colorPattern", "value": "green", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be green. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "colorPattern", "value": "pink", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be pink. \n        Output: ", "result": "\n            dress, skirt, blouse, shirt, jacket, coat, pants, scarf, socks, gloves\n\"\"\"\n\nword_list = [\"dress\", \"skirt\", \"blouse\", \"shirt\", \"jacket\", \"coat\", \"pants\", \"scarf\", \"socks\", \"gloves\"]\ncategory = \"clothes\"\ncondition = \"can be pink\"\nfiltered_words = [word for word in word_list if word.lower().startswith(category.lower() + \"can be pink"}
{"cat": "clothes", "slot": "colorPattern", "value": "pink", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be pink. \n        Output: ", "result": "\n            dress, skirt, blouse, shirt, jacket, coat, pants, scarf, socks, gloves\n\"\"\"\n\nword_list = [\"dress\", \"skirt\", \"blouse\", \"shirt\", \"jacket\", \"coat\", \"pants\", \"scarf\", \"socks\", \"gloves\"]\ncategory = \"clothes\"\ncondition = \"can be pink\"\nfiltered_words = [word for word in word_list if word.lower().startswith(category.lower() + \"can be pink"}
{"cat": "clothes", "slot": "colorPattern", "value": "striped", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be striped. \n        Output: ", "result": "\n          black, blue, brown, green, grey, orange, pink, purple, red, white\n```\n\nExample 2:\n```\nInput: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: can be round. \n        Output: \n          apple, banana, cherry, date, fig, grape, kiwi, melon, orange, pear\n```\n\nExample "}
{"cat": "clothes", "slot": "colorPattern", "value": "brown", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be brown. \n        Output: ", "result": "\n            coat, jacket, sweater, scarf, gloves, hat, pants, shirt, socks, boots. \n        Explanation: \n            coat, jacket, sweater, scarf, gloves, hat, pants, shirt, socks, boots all belong to the category clothes and can be brown. \n        \"\"\"\n        category = Category.objects.get(name='clothes')\n        words = Word.objects.filter(category=category, color='brown')\n        return [word.word for word in words"}
{"cat": "clothes", "slot": "colorPattern", "value": "red", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be red. \n        Output: ", "result": "\n            red, dress, coat, scarf, shirt, pants, socks, shoes, hat\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split(\" \")\n    condition_words = condition.split(\" \")\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Iterate over the condition words\n    for word in condition_words:\n        # Check if the word is in the category_words list\n"}
{"cat": "clothes", "slot": "colorPattern", "value": "white", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be white. \n        Output: ", "result": "\n        white, shirt, dress, socks, pants, coat, scarf, gloves, hat. \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"white\" in word:\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n# Test the function\nword_list = [\n    \"shirt\",\n    \"dress\",\n    \"socks\",\n    \"pants\",\n    \"coat\","}
{"cat": "clothes", "slot": "colorPattern", "value": "brown", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be brown. \n        Output: ", "result": "\n            coat, jacket, sweater, scarf, gloves, hat, pants, shirt, socks, boots. \n        Explanation: \n            coat, jacket, sweater, scarf, gloves, hat, pants, shirt, socks, boots all belong to the category clothes and can be brown. \n        \"\"\"\n        category = Category.objects.get(name='clothes')\n        words = Word.objects.filter(category=category, color='brown')\n        return [word.word for word in words"}
{"cat": "clothes", "slot": "colorPattern", "value": "red", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be red. \n        Output: ", "result": "\n            red, dress, coat, scarf, shirt, pants, socks, shoes, hat\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split(\" \")\n    condition_words = condition.split(\" \")\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Iterate over the condition words\n    for word in condition_words:\n        # Check if the word is in the category_words list\n"}
{"cat": "clothes", "slot": "colorPattern", "value": "grey", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be grey. \n        Output: ", "result": "\n          black, grey, grey-blue, grey-green, grey-purple, grey-red, grey-yellow, grey-pink, grey-brown, grey-olive \n    \"\"\"\n    grey_words = []\n    for word in word_list:\n        if \"grey\" in word:\n            grey_words.append(word)\n    return grey_words\n\nif __name__ == '__main__':\n    word_list = ['black', 'white', 'grey', 'grey-blue', 'grey-green', '"}
{"cat": "clothes", "slot": "colorPattern", "value": "grey", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be grey. \n        Output: ", "result": "\n          black, grey, grey-blue, grey-green, grey-purple, grey-red, grey-yellow, grey-pink, grey-brown, grey-olive \n    \"\"\"\n    grey_words = []\n    for word in word_list:\n        if \"grey\" in word:\n            grey_words.append(word)\n    return grey_words\n\nif __name__ == '__main__':\n    word_list = ['black', 'white', 'grey', 'grey-blue', 'grey-green', '"}
{"cat": "clothes", "slot": "colorPattern", "value": "shiny", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be shiny. \n        Output: ", "result": "\n            dress, shirt, jacket, pants, socks, shoes, belt, scarf, gloves, jewelry\n\"\"\"\n\nword_list = [\"dress\", \"shirt\", \"jacket\", \"pants\", \"socks\", \"shoes\", \"belt\", \"scarf\", \"gloves\", \"jewelry\"]\ncategory = \"clothes\"\ncondition = \"can be shiny\"\nfiltered_word_list = [word for word in word_list if word.endswith(condition)]\nprint"}
{"cat": "clothes", "slot": "colorPattern", "value": "glossy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be glossy. \n        Output: ", "result": "\n            1. Shoe\n            2. Jacket\n            3. Dress\n            4. Pants\n            5. Shirt\n            6. Tie\n            7. Skirt\n            8. Blouse\n            9. Coat\n            10. Gloves\n        \"\"\"\n        words = [\"Shoe\", \"Jacket\", \"Dress\", \"Pants\", \"Shirt\", \"Tie\", \"Skirt\", \"Blouse\", \"Coat\", \"Gloves\"]\n        glossy_words = [\"Shoe\", \"Jacket\", \""}
{"cat": "clothes", "slot": "material", "value": "disposable", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of disposable. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "specialization", "value": "flannel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are flannel. \n        Output: ", "result": "\n            jeans, shirt, jacket, pants, sweater, socks, hat, scarf, gloves, underwear.\n    \"\"\"\n    flannel_words = [\"jeans\", \"shirt\", \"jacket\", \"pants\", \"sweater\", \"socks\", \"hat\", \"scarf\", \"gloves\", \"underwear\"]\n    flannel_words = [word for word in flannel_words if word.endswith(\".flannel\")]\n    return \", \".join(flannel_words)\n\nprint(find_fl"}
{"cat": "clothes", "slot": "specialization", "value": "bellbottom pants", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are bellbottom pants. \n        Output: ", "result": "\n        bellbottom, denim, flared, hippie, loose, oversized, patchwork, psychedelic, vintage, wide. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are bellbottom pants'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_no_condition(self):\n        words = get_words('books')\n        self.assertEqual(len(words), 10)\n\n    def test_get"}
{"cat": "clothes", "slot": "specialization", "value": "bell-bottoms", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are bell-bottoms. \n        Output: ", "result": "\n        bell-bottoms, pants, jeans, slacks, trousers, dungarees, overalls, shorts, capris, culottes \n    \"\"\"\n    bell_bottoms = [\"bell-bottoms\"]\n    pants = [\"pants\", \"jeans\", \"slacks\", \"trousers\", \"dungarees\", \"overalls\", \"shorts\"]\n    shorts = [\"shorts\"]\n    capris = [\"capris\"]\n    culottes = [\"culottes\"]\n\n    bell_bottoms"}
{"cat": "clothes", "slot": "specialization", "value": "cords", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are cords. \n        Output: ", "result": "\n        jeans, corduroy, corduroy, corduroy, corduroy, corduroy, corduroy, corduroy, corduroy. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are cords'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words(self):\n        self.assertEqual(get_words('clothes', 'are cords'), 'jeans, corduroy, corduroy, corduroy,"}
{"cat": "clothes", "slot": "specialization", "value": "sack", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are sack. \n        Output: ", "result": "\n```\nsack, sackcloth, sackman, sackful, sackclothes, sackclothesman, sackclothesful, sackclothesfulman, sackclothesfulman, sackclothesfulman\n```\nExplanation:\n\n1. sack, sackcloth, sackman, sackful, sackclothes, sackclothesman, sackclothesful, sackclothesfulman, sackclothesfulman, sackcl"}
{"cat": "clothes", "slot": "specialization", "value": "breeches", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are breeches. \n        Output: ", "result": " breeches, britches, pantaloons, trousers, trews, hose, breechings, breechclout, kilt. \n        \"\"\"\n        category = Category.objects.get(name='clothes')\n        condition = Condition.objects.get(name='are breeches')\n        words = Word.objects.filter(category=category, condition=condition)\n        return [word.name for word in words]\n\n    def get_random_word_from_category(self, category):\n        \"\"\"\n        Get"}
{"cat": "clothes", "slot": "specialization", "value": "jumper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are jumper. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "specialization", "value": "knickerbockers", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are knickerbockers. \n        Output: ", "result": "\n```\nknickerbockers, breeches, pants, trousers, britches, slacks, dungarees, overalls, pajamas, pyjamas\n```\nExplanation:\n```\nknickerbockers, breeches, pants, trousers, britches, slacks, dungarees, overalls, pajamas, pyjamas\n```\n1. Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated"}
{"cat": "clothes", "slot": "specialization", "value": "pantaloon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are pantaloon. \n        Output: ", "result": "\n        pantaloon,trousers,jeans,khakis,slacks,chinos,dungarees,overalls,shorts,capris\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split(\" \")\n    condition_words = condition.split(\" \")\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Iterate over the condition words\n    for word in condition_words:\n       "}
{"cat": "clothes", "slot": "specialization", "value": "shalwar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are shalwar. \n        Output: ", "result": "\n        shalwar,pajama,kurta,shalwar\\_kameez,shalwar\\_pyjama,kameez,salwar,shalwar\\_suit,kurta\\_pyjama,shalwar\\_shalwar\n    \"\"\"\n    words = []\n    for word in text.split():\n        if \"shalwar\" in word:\n            words.append(word)\n    return words\n\nif __name__ == \"__main__\":\n    text = \"Provide a list of 10 words that belong to the category and satisfy the condition."}
{"cat": "clothes", "slot": "specialization", "value": "jodhpur breeches", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are jodhpur breeches. \n        Output: ", "result": "\n```\njodhpur,breeches\n```\n\nExample:\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are sweet. \n        Output: \n```\napple,banana,cherry,date,fig,grapes,honeydew,kiwi,mango,peach\n```\n\nExample:\n```python\nProvide a list of 10"}
{"cat": "clothes", "slot": "specialization", "value": "toreador pants", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are toreador pants. \n        Output: ", "result": "\n        ```\npants,slacks,trousers,jeans,dungarees,overalls,shorts,skirts,dresses,blouses\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are toreador pants\" are pants, slacks, trousers, jeans, dungarees, overalls, shorts, skirts, dresses, and blouses."}
{"cat": "clothes", "slot": "specialization", "value": "long pants", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are long pants. \n        Output: ", "result": "\n        jeans, pants, slacks, trousers, overalls, dungarees, khakis, shorts, skirts, dresses. \n        \"\"\"\n        category = input(\"Enter category: \")\n        condition = input(\"Enter condition: \")\n        words = get_words(category, condition)\n        print(\", \".join(words))\n\nif __name__ == '__main__':\n    main()\n```\n```"}
{"cat": "clothes", "slot": "specialization", "value": "chino", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are chino. \n        Output: ", "result": "\n        jeans, pants, trousers, slacks, chinos, dungarees, overalls, shorts, skirts, dresses.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    if category == \"clothes\":\n        if condition == \"are chino\":\n            words.append(\"jeans\")\n           "}
{"cat": "clothes", "slot": "specialization", "value": "pedal pusher", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are pedal pusher. \n        Output: ", "result": "\n        jeans, overalls, pedal pusher, shorts, skirt, slacks, sweatpants, tank top, t-shirt, dress.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"pedal pusher\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n           "}
{"cat": "clothes", "slot": "specialization", "value": "gabardine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are gabardine. \n        Output: ", "result": "\n        gabardine, gabardine, gabardine, gabardine, gabardine, gabardine, gabardine, gabardine, gabardine, gabardine. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are gabardine'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n# Test the function with sample inputs\nprint(get_words('clothes', 'are gabardine'))\n# Output: gabardine, gabardine, gabardine,"}
{"cat": "clothes", "slot": "specialization", "value": "corduroys", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are corduroys. \n        Output: ", "result": "\n```\ncorduroy, jeans, slacks, trousers, dungarees, overalls, jodhpurs, breeches, britches, trews\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are corduroys\" are corduroy, jeans, slacks, trousers, dungarees, overalls, jodhpurs, breeches, britches, and trews."}
{"cat": "clothes", "slot": "specialization", "value": "sweatpants", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are sweatpants. \n        Output: ", "result": "\n```\nsweatpants, joggers, tracksuit, hoodie, sweater, t-shirt, tank top, leggings, sweatshirt, jogging pants\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are sweatpants\" are: sweatpants, joggers, tracksuit, hoodie, sweater, t-shirt, tank top, leggings, sweatshirt, jogging pants.\n```\nProvide a list of 10 words"}
{"cat": "clothes", "slot": "specialization", "value": "jodhpurs", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are jodhpurs. \n        Output: ", "result": "\n            jeans, trousers, shorts, skirts, dresses, shirts, t-shirts, tops, blouses, pants.\n        \"\"\"\n        category = input(\"Enter category: \")\n        condition = input(\"Enter condition: \")\n        words = []\n        for word in text:\n            if word.lower() in category.lower() and word.lower() in condition.lower():\n                words.append(word.lower())\n        print(\", \".join(words))\n```\nExample:\n```\npython word_filter.py"}
{"cat": "clothes", "slot": "specialization", "value": "long trousers", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are long trousers. \n        Output: ", "result": "\n        jeans, pants, slacks, trousers, overalls, dungarees, culottes, skirts, dresses, kilts. \n        \"\"\"\n        category = input(\"Enter category: \")\n        condition = input(\"Enter condition: \")\n        words = []\n        for word in text:\n            if word.lower() in category.lower() and word.lower() in condition.lower():\n                words.append(word)\n        print(\", \".join(words))\n```\nExample usage:\n```\npython text_filter.py"}
{"cat": "clothes", "slot": "specialization", "value": "gauntlet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are gauntlet. \n        Output: ", "result": "\n        glove, gauntlet, sleeve, cuff, wristband, mitt, handguard, handprotector, handwarmer.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in text.split():\n        if word.lower() in category.lower() and word.lower() in condition.lower():\n            words.append(word.lower())\n    print(\", \".join(words))\n\ndef main():\n    text = input(\"Enter text: \")\n   "}
{"cat": "clothes", "slot": "specialization", "value": "salwar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are salwar. \n        Output: ", "result": "\n        kurta, salwar, saree, lehnga, churidar, dupatta, kameez, salwar-kameez, pajama, churidar-kurta\n```\n```"}
{"cat": "clothes", "slot": "specialization", "value": "shorts", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are shorts. \n        Output: ", "result": "\n```\nshorts, pants, skirt, dress, shirt, blouse, jacket, coat, sweater\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are shorts\" are \"shorts, pants, skirt, dress, shirt, blouse, jacket, coat, sweater\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n"}
{"cat": "clothes", "slot": "specialization", "value": "riding breeches", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are riding breeches. \n        Output: ", "result": "\n        jeans, chaps, breeches, jodhpurs, riding pants, riding shorts, riding tights, riding leggings, breeching, jodhpur.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == '__main__':\n    main()\n```\n```"}
{"cat": "clothes", "slot": "specialization", "value": "sweat pants", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are sweat pants. \n        Output: ", "result": "\n```\nsweat,pants,workout,comfortable,stretchy,casual,athletic,exercise,relaxed\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are sweet. \n        Output: \n```\napple,banana,cherry,date,fig,grapes,honeydew,mango,orange,pe"}
{"cat": "clothes", "slot": "specialization", "value": "gantlet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are gantlet. \n        Output: ", "result": "\n            \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"gantlet\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_consonants(word):\n    consonants = \"bcdfghjklmnpqrstv"}
{"cat": "clothes", "slot": "specialization", "value": "short pants", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are short pants. \n        Output: ", "result": "\n            shorts, pants, capris, skirts, skorts, culottes, overalls, dresses, rompers, jumpers\n        \"\"\"\n        category = input(\"Enter category: \")\n        condition = input(\"Enter condition: \")\n        words = get_words(category, condition)\n        print(\", \".join(words))\n\nif __name__ == '__main__':\n    main()\n```\n```"}
{"cat": "clothes", "slot": "specialization", "value": "bellbottom trousers", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are bellbottom trousers. \n        Output: ", "result": "\n        bellbottom, trousers, flared, denim, 70s, hippie, fashion, vintage, style, pants. \n        \"\"\"\n        category = input(\"Enter category: \")\n        condition = input(\"Enter condition: \")\n        words = []\n        for word in text:\n            if word.lower() in category.lower() and word.lower() in condition.lower():\n                words.append(word)\n        print(\", \".join(words))\n```\nif **name** == \"**main**\":\nexample = InputExample"}
{"cat": "clothes", "slot": "specialization", "value": "trunks", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are trunks. \n        Output: ", "result": "\n```\nswimwear, boardshorts, bikini, tankini, one-piece, cover-up, trunks, boardshorts, bikini, tankini, one-piece\n```\nExplanation:\n```\nThe words that belong to the category \"clothes\" and satisfy the condition \"are trunks\" are:\n- swimwear\n- boardshorts\n- bikini\n- tankini\n- one-piece\n- cover-up\n- trunks\n- boardshorts\n- bikini\n- tankini"}
{"cat": "clothes", "slot": "specialization", "value": "tweed", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are tweed. \n        Output: ", "result": "\n        tweed jacket, tweed dress, tweed skirt, tweed coat, tweed pants, tweed scarf, tweed hat, tweed vest, tweed shirt, tweed tie.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"tweed\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n        Desired output:"}
{"cat": "clothes", "slot": "specialization", "value": "knickers", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are knickers. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "specialization", "value": "pajama", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are pajama. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "specialization", "value": "blue jean", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are blue jean. \n        Output: ", "result": "\n        blue, denim, dungarees, jeans, overalls, pants, shorts, slacks, trousers, jean. \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in text:\n        if word.lower() == category.lower() and word.lower() == condition.lower():\n            words.append(word)\n    print(\", \".join(words))\n```\nif **name** == \"**main**\":\nexample\\_1("}
{"cat": "clothes", "slot": "specialization", "value": "trews", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are trews. \n        Output: ", "result": "\n```\ntrews, trousers, pants, slacks, breeches, kilts, kilt, trews, trews, trews\n```"}
{"cat": "clothes", "slot": "specialization", "value": "jean", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are jean. \n        Output: ", "result": "\n        blue, denim, dungarees, jean, overalls, pants, shorts, skirt, slacks, trousers.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in text:\n        if word.lower() in category.lower() and word.lower() in condition.lower():\n            words.append(word)\n    print(\", \".join(words))\n```\nExample:\n```\npython word_filter.py clothes,jean\n"}
{"cat": "clothes", "slot": "specialization", "value": "mitten", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are mitten. \n        Output: ", "result": "\n        glove, hat, scarf, sock, mitten, mitten, mitten, mitten, mitten, mitten \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"mitten\" in word:\n            words.append(word)\n    return words\n\ndef count_mitten(word_list):\n    count = 0\n    for word in word_list:\n        if \"mitten\" in word:\n            count += 1\n    return count\n\nword_list = [\"mitten\", \""}
{"cat": "clothes", "slot": "specialization", "value": "churidars", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are churidars. \n        Output: ", "result": "\n        salwar, kameez, dupatta, saree, lehnga, churidar, kurta, pajama, pyjama, kurtis. \n        \"\"\"\n        category = Category.objects.get(name='clothes')\n        condition = Condition.objects.get(name='are churidars')\n        words = Word.objects.filter(category=category, condition=condition)\n        return [word.name for word in words]\n\n    def get_random_word(self):\n        \"\"\"\n        Get a"}
{"cat": "clothes", "slot": "specialization", "value": "knee breeches", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are knee breeches. \n        Output: ", "result": "\n        knee, breeches, pantaloons, hose, breechings, smallclothes, knickers, trews, stockings, hose. \n        \"\"\"\n        category = input(\"Enter category: \")\n        condition = input(\"Enter condition: \")\n        words = []\n        for word in text.split():\n            if word.lower() in category.lower() and word.lower() in condition.lower():\n                words.append(word)\n        print(\", \".join(words))\n```\nif **name** == \"**main"}
{"cat": "clothes", "slot": "specialization", "value": "pyjama", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are pyjama. \n        Output: ", "result": "\n            pajama, sleepwear, nightwear, loungewear, lounge suit, night suit, nightshirt, nightdress, pyjama suit, pyjama dress. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are pyjama'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n# Test the function\nprint(get_words('clothes', 'are pyjama'))\n```\nOutput:\npajama, sleepwear, night"}
{"cat": "clothes", "slot": "specialization", "value": "slacks", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are slacks. \n        Output: ", "result": "34, 36, 38, 40, 42, 44, 46, 48, 50, 52. \n        Explanation: 34, 36, 38, 40, 42, 44, 46, 48, 50, 52 are the 10 words that belong to the category clothes and satisfy the condition are slacks. \n        \"\"\"\n        category = input(\"Provide a list of 10 words that belong"}
{"cat": "clothes", "slot": "specialization", "value": "stretch pants", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are stretch pants. \n        Output: ", "result": "3L, 5L, 7L, 9L, 11L, 13L, 15L, 17L, 19L, 21L. \n        Explanation: 3L, 5L, 7L, 9L, 11L, 13L, 15L, 17L, 19L, 21L are words that belong to the category of clothes and satisfy the condition of being stretch pants. \n        \"\"\"\n        category = input()\n       "}
{"cat": "clothes", "slot": "specialization", "value": "knee pants", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are knee pants. \n        Output: ", "result": "3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, "}
{"cat": "clothes", "slot": "specialization", "value": "chemise", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are chemise. \n        Output: ", "result": "\n            chemise, camisole, shift, blouse, nightgown, robe, slip, dressing gown, peignoir, negligee\n        \"\"\"\n        category = 'clothes'\n        condition = 'are chemise'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def get_words_in_category(self, category):\n        \"\"\"\n        Get a list of words belonging to the specified category.\n        \"\"\"\n        words = []\n        for word in self.words:\n"}
{"cat": "clothes", "slot": "specialization", "value": "muumuu", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are muumuu. \n        Output: ", "result": "\n        pajama, muumuu, robe, kimono, housecoat, dressing gown, nightgown, bathrobe, wrapper, peignoir. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are muumuu'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('clothes', 'are pants'))\n    print(get_words('clothes', 'are dress'))\n    print(get_words('"}
{"cat": "clothes", "slot": "specialization", "value": "bush jacket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are bush jacket. \n        Output: ", "result": "\n        bush, jacket, jacket, jacket, jacket, jacket, jacket, jacket, jacket, jacket. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are bush jacket'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category. \n        Desired output: a list of words. \n        Category:"}
{"cat": "clothes", "slot": "specialization", "value": "dolman jacket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are dolman jacket. \n        Output: ", "result": "\n            \n```\ndolman, jacket\n```"}
{"cat": "clothes", "slot": "specialization", "value": "hair shirt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are hair shirt. \n        Output: ", "result": "\n```\nhair shirt, hair shirt, hair shirt, hair shirt, hair shirt, hair shirt, hair shirt, hair shirt, hair shirt, hair shirt\n```"}
{"cat": "clothes", "slot": "specialization", "value": "slouch hat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are slouch hat. \n        Output: ", "result": "\n```\nslouch,hat,hat,hat,hat,hat,hat,hat,hat\n```"}
{"cat": "clothes", "slot": "specialization", "value": "bowler", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are bowler. \n        Output: ", "result": "\n        bowler, hat, skirt, trousers, jacket, shirt, socks, shoes, gloves, scarf \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as f:\n        for line in f:\n            line = line.strip()\n            if line.starts"}
{"cat": "clothes", "slot": "specialization", "value": "sport coat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are sport coat. \n        Output: ", "result": "\n```\nsport, coat, blazer, jacket, suit, tuxedo, dress pants, dress shirt, dress shoes, dress socks\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are sport coat\" are: sport coat, blazer, jacket, suit, tuxedo, dress pants, dress shirt, dress shoes, and dress socks.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma"}
{"cat": "clothes", "slot": "specialization", "value": "full skirt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are full skirt. \n        Output: ", "result": "\n            petticoat, tutu, crinoline, ballgown, mermaid, A-line, circle skirt, maxi skirt, midi skirt, pleated skirt\n\"\"\"\n\nword_list = [\"petticoat\", \"tutu\", \"crinoline\", \"ballgown\", \"mermaid\", \"A-line\", \"circle skirt\", \"maxi skirt\", \"midi skirt\", \"pleated skirt\"]\ncategory = \"clothes\"\ncondition = \"are full skirt\"\n\nfiltered"}
{"cat": "clothes", "slot": "specialization", "value": "false face", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are false face. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "specialization", "value": "bomber jacket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are bomber jacket. \n        Output: ", "result": "\n            bomber, jacket, leather, zipper, collar, cuffs, waist, belt, pockets, asymmetrical\n        \"\"\"\n        category = 'clothes'\n        condition = 'are bomber jacket'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def get_words(self, category, condition):\n        \"\"\"\n        Given a category and a condition, return a list of words that satisfy the condition in that category.\n        \"\"\"\n        raise NotImplementedError"}
{"cat": "clothes", "slot": "specialization", "value": "mobcap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are mobcap. \n        Output: ", "result": "\n            \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"mobcap\" in word:\n            words.append(word)\n    return \", \".join(words)\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n        Desired output: a list of numbers, where the i-th number is the number of vowels in the i-th word.\n        Category: counting. \n        Word list: a list of"}
{"cat": "clothes", "slot": "specialization", "value": "varsity sock", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are varsity sock. \n        Output: ", "result": "\n        varsity,sock,sockey,sockette,sockup,sockdown,socking,sockless,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,socky,sock"}
{"cat": "clothes", "slot": "specialization", "value": "golf glove", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are golf glove. \n        Output: ", "result": "\n        golf,glove,golfing,golfers,golfball,golfbag,golfclub,golfcourse,golfer,golfing,golfers,golfball,golfbag,golfclub,golfcourse,golfer,golfing,golfers,golfball,golfbag,golfclub,golfcourse,golfer,golfing,golfers,golfball,golfbag,golfclub,golfcourse,golfer,golfing,golfers,"}
{"cat": "clothes", "slot": "specialization", "value": "tabis", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are tabis. \n        Output: ", "result": "\n```\ntabi, hakama, kimono, yukata, obi, geta, zori, tabi-socks, tabi-shoes, tabi-socks-shoes\n```\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, raspberry, waterm"}
{"cat": "clothes", "slot": "specialization", "value": "saree", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are saree. \n        Output: ", "result": " saree, salwar, kameez, lehnga, choli, ghagra, dupatta, sari, salwar kameez, lehnga choli. \n        \"\"\"\n        category = Category.objects.get(name='clothes')\n        condition = Condition.objects.get(name='are saree')\n        words = Word.objects.filter(category=category, condition=condition)\n        return [word.name for word in words]\n\n    def get_words_by_category(self, category):\n        \"\"\"\n"}
{"cat": "clothes", "slot": "specialization", "value": "kaftan", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are kaftan. \n        Output: ", "result": "\n        kaftan, shalwar, dupatta, ghagra, choli, salwar, kameez, kurta, pyjama, sherwani\n    \"\"\"\n    category = \"clothes\"\n    condition = \"are kaftan\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n```\nExample:\n```\npython get_words.py\nkaftan, shalwar, dupatta, ghagra, choli, salwar, kameez, kurta, pyjama,"}
{"cat": "clothes", "slot": "specialization", "value": "doublet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are doublet. \n        Output: ", "result": "\n            coat, doublet, jerkin, kirtle, mantle, pauldrons, surcoat, tabard, tunic, \n            doublet, jerkin, kirtle, mantle, pauldrons, surcoat, tabard, tunic, \n            coat, doublet, jerkin, kirtle, mantle, pauldrons, surcoat, tabard, tunic, \n            coat, doublet, jerkin, kirtle, mantle, pauldrons, surcoat, tab"}
{"cat": "clothes", "slot": "specialization", "value": "argyll", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are argyll. \n        Output: ", "result": "\n        argyll,shirt,tie,jacket,trousers,skirt,dress,shoes,socks,pants\n```\n\n```\nDescribe a scenario where the input is a list of strings, where each string is a word belonging to a different category. \n        The words are sorted in alphabetical order. \n        Each word belongs to only one category. \n        The length of the list is less than or equal to 10. \n        The sum of the lengths of the words in the list is less than or equal to 10"}
{"cat": "clothes", "slot": "specialization", "value": "shell jacket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are shell jacket. \n        Output: ", "result": "\n            leather jacket, denim jacket, bomber jacket, pea coat, parka, shearling jacket, shearling coat, sheepskin jacket, sheepskin coat, shearling jacket, shearling coat, sheepskin jacket, sheepskin coat, shearling jacket, shearling coat, sheepskin jacket, sheepskin coat, shearling jacket, shearling coat, sheepskin jacket, sheepskin coat, shearling jacket, shearling coat, sheepskin jacket"}
{"cat": "clothes", "slot": "specialization", "value": "berretta", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are berretta. \n        Output: ", "result": "\n        berretta, cap, hat, scarf, gloves, jacket, vest, sweater, shirt, pants.\n    \"\"\"\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition.\n    \"\"\"\n    if category == 'clothes':\n        if condition == 'are berretta':\n            return ['berretta', 'cap', '"}
{"cat": "clothes", "slot": "specialization", "value": "banyan", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are banyan. \n        Output: ", "result": "\n```\nbanana, banyan, banyan, banyan, banyan, banyan, banyan, banyan, banyan\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are banyan\" are \"banana, banyan, banyan, banyan, banyan, banyan, banyan, banyan, banyan\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n"}
{"cat": "clothes", "slot": "specialization", "value": "hood", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are hood. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "specialization", "value": "half mask", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are half mask. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "specialization", "value": "beaver", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are beaver. \n        Output: ", "result": "\n```\nbeaver, fur, hat, pelt, tail, dam, lodge, teeth, castoreum\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, raspberry, watermelon, pear, plum, tomato, red delicious, orange\n```\n"}
{"cat": "clothes", "slot": "specialization", "value": "fedora", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are fedora. \n        Output: ", "result": "\n```\nfedora, hat, headwear, accessory, fashion, style, 1920s, Indiana Jones, James Bond\n```\n```\nDesired output: comma separated list of words. \nCategory: animals. \nCondition: have four legs. \nOutput: \n```\ncat, dog, horse, cow, pig\n```\n```\nDesired output: comma separated list of words. \nCategory: fruits. \nCondition: are red. \nOutput: \n```\napple, cherry, strawberry, raspberry"}
{"cat": "clothes", "slot": "specialization", "value": "tirolean", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are tirolean. \n        Output: ", "result": "\n        jeans, jacket, shirt, hat, scarf, gloves, socks, pants, coat, shoes\n```\n\n```"}
{"cat": "clothes", "slot": "specialization", "value": "campaign hat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are campaign hat. \n        Output: ", "result": "\n```\ncampaign,hat,stetson,ten-gallon,fedora,cowboy,cowboy hat,western,cowboy boots\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are sweet. \n        Output: \n```\napple,banana,cherry,date,fig,grape,kiwi,mango,peach,strawberry"}
{"cat": "clothes", "slot": "specialization", "value": "swimming cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are swimming cap. \n        Output: ", "result": "\n        swimsuit, cap, goggles, snorkel, flippers, swim trunks, swim shirt, swim shorts, swim skirt, swim cover.\n    \"\"\"\n    category = 'clothes'\n    condition = 'are swimming cap'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    words = []\n    with open('words.txt', 'r') as f:\n        for line in f:\n           "}
{"cat": "clothes", "slot": "specialization", "value": "anklets", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are anklets. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "specialization", "value": "parka", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are parka. \n        Output: ", "result": "\n            coat, jacket, parka, anorak, park, ski, snow, winter, outerwear. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are parka'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def get_words(self, category, condition):\n        \"\"\"\n        Given a category and a condition, return a list of words that satisfy the condition in that category.\n        \"\"\"\n        raise NotImplementedError\n\nif __name__ == '__"}
{"cat": "clothes", "slot": "specialization", "value": "silk hat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are silk hat. \n        Output: ", "result": "\n        silk,hat,hat,hat,hat,hat,hat,hat,hat,hat. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are silk hat'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def get_words(self, category, condition):\n        \"\"\"\n        Given a category and a condition, return a list of words that satisfy the condition in that category.\n        \"\"\"\n        raise NotImplementedError\n\nif __name__ == '__main__"}
{"cat": "clothes", "slot": "specialization", "value": "Panama", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are Panama. \n        Output: ", "result": "\n```\nhat,shirt,pants,jacket,dress,skirt,blouse,tie,shoes\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple,banana,cherry,strawberry,tomato,r\n```"}
{"cat": "clothes", "slot": "specialization", "value": "monkey jacket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are monkey jacket. \n        Output: ", "result": "\n        monkey, jacket, banana, tail, fur, zipper, hood, collar, sleeve, pocket \n    \"\"\"\n    words = []\n    for word in words:\n        if \"monkey\" in word and \"jacket\" in word and \"banana\" not in word and \"tail\" not in word and \"fur\" not in word and \"zipper\" not in word and \"hood\" not in word and \"collar\" not in word and \"sleeve\" not in word and \"pocket\" not in word:\n            words"}
{"cat": "clothes", "slot": "specialization", "value": "stovepipe", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are stovepipe. \n        Output: ", "result": "\n        jeans, pants, overalls, shorts, skirt, dress, coat, jacket, shirt, blouse \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"stovepipe\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"cat": "clothes", "slot": "specialization", "value": "beret", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are beret. \n        Output: ", "result": "\n        beige, beret, black, blue, brown, green, grey, navy, red, white. \n    \"\"\"\n    words = []\n    for word in words:\n        if word.lower() == \"beret\" and word.isalpha():\n            words.append(word)\n    return \", \".join(words)\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += "}
{"cat": "clothes", "slot": "specialization", "value": "kalpac", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are kalpac. \n        Output: ", "result": "\n```\njeans, t-shirt, hoodie, jacket, shirt, pants, shorts, skirt, dress, socks\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are kalpac\" are \"jeans, t-shirt, hoodie, jacket, shirt, pants, shorts, skirt, dress, socks\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma"}
{"cat": "clothes", "slot": "specialization", "value": "Mao jacket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are Mao jacket. \n        Output: ", "result": "\n        */\n        public List<string> GetWords(string category, string condition)\n        {\n            List<string> words = new List<string>();\n\n            using (MySqlConnection connection = new MySqlConnection(connectionString))\n            {\n                connection.Open();\n\n                using (MySqlCommand command = new MySqlCommand(\"SELECT DISTINCT word FROM items WHERE category = @category AND condition = @condition\", connection))\n                {\n                    command.Parameters.AddWithValue(\"@category\", category);\n                    command.Parameters.AddWithValue(\"@condition"}
{"cat": "clothes", "slot": "specialization", "value": "sailor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are sailor. \n        Output: ", "result": "\n```\nsailor, suit, hat, shirt, pants, jacket, shoes, socks, belt\n```"}
{"cat": "clothes", "slot": "specialization", "value": "hobble skirt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are hobble skirt. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "specialization", "value": "pinafore", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are pinafore. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "specialization", "value": "knee-hi", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are knee-hi. \n        Output: ", "result": "\n```\njeans, overalls, shorts, pants, capris, skirts, dresses, leggings, socks, tights\n```\nExplanation:\nThe words that belong to the category \"clothes\" and satisfy the condition \"are knee-hi\" are: jeans, overalls, shorts, pants, capris, skirts, dresses, leggings, socks, tights.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output"}
{"cat": "clothes", "slot": "specialization", "value": "swallowtail", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are swallowtail. \n        Output: ", "result": "\n```\nswallowtail, coat, shirt, pants, jacket, vest, dress, skirt, blouse, bowtie\n```\nExplanation:\nThe words that belong to the category \"clothes\" and satisfy the condition of being \"swallowtail\" are: coat, shirt, pants, jacket, vest, dress, skirt, blouse, and bowtie.\n```"}
{"cat": "clothes", "slot": "specialization", "value": "windbreaker", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are windbreaker. \n        Output: ", "result": "\n            raincoat, windbreaker, parka, jacket, coat, sweater, sweatshirt, hoodie, scarf, gloves.\n        \"\"\"\n        category = Category.objects.get(name='clothes')\n        condition = Condition.objects.get(name='windbreaker')\n        words = Word.objects.filter(category=category, condition=condition)\n        return [word.name for word in words]\n\n    def get_random_word(self):\n        \"\"\"\n        Retrieve a random word from the database"}
{"cat": "clothes", "slot": "specialization", "value": "helmet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are helmet. \n        Output: ", "result": "\n```\nbicycle, helmet, jacket, pants, gloves, shoes, shirt, socks, shorts, hat\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are helmet\" are \"bicycle, helmet, jacket, pants, gloves, shoes, shirt, socks, shorts, hat\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words."}
{"cat": "clothes", "slot": "specialization", "value": "cavalier hat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are cavalier hat. \n        Output: ", "result": "\n```\ncavalier, hat, hat, hat, hat, hat, hat, hat, hat\n```"}
{"cat": "clothes", "slot": "specialization", "value": "gown", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are gown. \n        Output: ", "result": "\n```\ngown,dress,evening,formal,wedding,prom,ball,cocktail,cocktail dress,long dress\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are gown\" are \"gown, dress, evening, formal, wedding, prom, ball, cocktail, cocktail dress, long dress\".\n```python\ndef get_words_by_category_and_condition(category, condition, word_list):\n    words = []\n    for word in word_list:"}
{"cat": "clothes", "slot": "specialization", "value": "swallow-tailed coat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are swallow-tailed coat. \n        Output: ", "result": "\n```\nswallow-tailed coat, swallow-tailed gown, swallow-tailed habit, swallow-tailed jacket, swallow-tailed mantle, swallow-tailed robe, swallow-tailed suit, swallow-tailed tunic, swallow-tailed vest\n```\nExplanation:\nThe words that belong to the category \"clothes\" and satisfy the condition \"are swallow-tailed coat\" are:\nswallow-tailed coat, swallow-tailed gown, swallow-tailed habit,"}
{"cat": "clothes", "slot": "specialization", "value": "Norfolk jacket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are Norfolk jacket. \n        Output: ", "result": "\n        coat, jacket, Norfolk, tweed, herringbone, corduroy, velvet, flannel, cashmere, silk. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are Norfolk jacket'\n        words = []\n        for word in text.split():\n            if word.lower() in category_words[category] and word.lower() in condition_words[condition]:\n                words.append(word)\n        result = ', '.join(words)\n        return result\n\ndef main():\n   "}
{"cat": "clothes", "slot": "specialization", "value": "cowboy hat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are cowboy hat. \n        Output: ", "result": "\n```\nhat, boots, jeans, shirt, chaps, belt, spurs, cowboy, wrangler\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are sweet. \n        Output: \n```\napple, banana, cherry, date, fig, grape, melon, orange, pear, strawberry\n```\n\nExample"}
{"cat": "clothes", "slot": "specialization", "value": "dashiki", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are dashiki. \n        Output: ", "result": "\n        dashiki, kaftan, djellaba, boubou, agbada, kikoy, kitenge, kitenge, kitenge, kitenge, kitenge, kitenge, kitenge, kitenge, kitenge, kitenge, kitenge, kitenge, kitenge, kitenge, kitenge, kitenge, kitenge, kitenge, kitenge, kitenge, kitenge, kitenge, kitenge, kitenge, kitenge, kiten"}
{"cat": "clothes", "slot": "specialization", "value": "muff", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are muff. \n        Output: ", "result": "\n```\nmuffin, muffler, muff, muffin, muffin, muffin, muffin, muffin, muffin, muffin, muffin, muffin, muffin, muffin, muffin, muffin, muffin, muffin, muffin, muffin, muffin, muffin, muffin, muffin, muffin, muffin, muffin, muffin, muffin, muffin, muffin, muff"}
{"cat": "clothes", "slot": "specialization", "value": "hug-me-tight", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are hug-me-tight. \n        Output: ", "result": "\n        hug-me-tight \n    \"\"\"\n    words = []\n    for word in words:\n        if \"hug-me-tight\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_consonants(word):\n    consonants = \"bc"}
{"cat": "clothes", "slot": "specialization", "value": "metal glove", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are metal glove. \n        Output: ", "result": "\n            leather, metal, gauntlet, armor, cuff, glove, sleeve, shin, boots \n\"\"\"\n\nword_list = [\"leather\", \"metal\", \"gauntlet\", \"armor\", \"cuff\", \"glove\", \"sleeve\", \"shin\", \"boots\"]\ncategory = \"clothes\"\ncondition = \"are metal glove\"\nfiltered_words = [word for word in word_list if word.startswith(category) and word.endswith(condition)]\nprint(\","}
{"cat": "clothes", "slot": "specialization", "value": "hoopskirt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are hoopskirt. \n        Output: ", "result": "\n            petticoat, crinoline, bustle, hoopskirt, corset, bustle, bustle, bustle, bustle, bustle.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() == condition.lower():\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")"}
{"cat": "clothes", "slot": "specialization", "value": "calpac", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are calpac. \n        Output: ", "result": "\n            1. Calpac\n            2. Calpac\n            3. Calpac\n            4. Calpac\n            5. Calpac\n            6. Calpac\n            7. Calpac\n            8. Calpac\n            9. Calpac\n            10. Calpac\n        \"\"\"\n        words = [\n            \"Calpac\",\n            \"Calpac\",\n            \"Calpac\",\n            \"Calpac\",\n            \"Calpac\",\n            \"Calpac\",\n            \"Calpac\","}
{"cat": "clothes", "slot": "specialization", "value": "kurta", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are kurta. \n        Output: ", "result": "\n        kurta, pajama, salwar, kameez, saree, lehnga, churidar, dhoti, lungi, pyjama\n\"\"\"\n\nword_list = [\"kurta\", \"pajama\", \"salwar\", \"kameez\", \"saree\", \"lehnga\", \"churidar\", \"dhoti\", \"lungi\", \"pyjama\"]\ncategory = \"clothes\"\ncondition = \"are kurta\"\nfiltered_words = [word for word in word_list if"}
{"cat": "clothes", "slot": "specialization", "value": "tank top", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are tank top. \n        Output: ", "result": "\n```\ntank top, tank top, tank top, tank top, tank top, tank top, tank top, tank top, tank top\n```"}
{"cat": "clothes", "slot": "specialization", "value": "nightcap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are nightcap. \n        Output: ", "result": "\n```\nhat,gloves,scarf,socks,shoes,jacket,pants,shirt,tie,overcoat\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are nightcap\" are \"hat,gloves,scarf,socks,shoes,jacket,pants,shirt,tie,overcoat\"."}
{"cat": "clothes", "slot": "specialization", "value": "kilt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are kilt. \n        Output: ", "result": "\n        kilts, plaid, tartan, kiltie, sgian, dagger, sporran, kilt pin, kilt belt, kilt socks \n    \"\"\"\n    category = \"clothes\"\n    condition = \"are kilt\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as f:\n        for line in f:\n            line = line.strip()"}
{"cat": "clothes", "slot": "specialization", "value": "coxcomb", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are coxcomb. \n        Output: ", "result": "\n```\ncoxcomb, coat, coatigan, cravat, cravat-necktie, cravat-scarf, cravat-necktie-scarf, cravat-scarf-necktie, cravat-scarf-necktie-coat, cravat-scarf-necktie-coatigan, cravat-scarf-necktie-coatigan-coat, cravat-scarf-necktie-coatigan-coatigan, crav"}
{"cat": "clothes", "slot": "specialization", "value": "sport jacket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are sport jacket. \n        Output: ", "result": "\n            blazer, coat, jacket, jersey, polo, pullover, sweater, t-shirt, tee, top. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are sport jacket'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n# Test the function with sample inputs\nprint(get_words('clothes', 'are sport jacket'))\n# Output: blazer, coat, jacket, jersey, polo, pullover, swe"}
{"cat": "clothes", "slot": "specialization", "value": "bolero", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are bolero. \n        Output: ", "result": "\n        bolero, jacket, shirt, pants, dress, skirt, coat, blouse, scarf, tie. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are bolero'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n# Test the function with sample inputs\nprint(get_words('clothes', 'are jeans'))\nprint(get_words('clothes', 'are shirt'))\nprint(get_words('clothes', 'are dress'))"}
{"cat": "clothes", "slot": "specialization", "value": "Balmoral", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are Balmoral. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "specialization", "value": "tarboosh", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are tarboosh. \n        Output: ", "result": "\n        scarf, hat, turban, fez, kufi, skullcap, yarmulke, beret, topi, tarboosh \n    \"\"\"\n    tarboosh_words = [\n        \"scarf\", \"hat\", \"turban\", \"fez\", \"kufi\", \"skullcap\", \"yarmulke\", \"beret\", \"topi\", \"tarboosh\"\n    ]\n    tarboosh_words = [word for word in tarboosh_words if word.lower() == \"tarboosh\"]\n   "}
{"cat": "clothes", "slot": "specialization", "value": "maxi", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are maxi. \n        Output: ", "result": "\n            maxi skirt, maxi dress, maxi coat, maxi sweater, maxi scarf, maxi shirt, maxi pants, maxi top, maxi jacket, maxi sweatshirt.\n    \"\"\"\n    maxi_words = []\n    for word in words:\n        if len(word) >= 10 and \"maxi\" in word.lower():\n            maxi_words.append(word)\n    return \", \".join(maxi_words)\n\ndef get_category(word):\n    \"\"\"\n    Given"}
{"cat": "clothes", "slot": "specialization", "value": "shift", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are shift. \n        Output: ", "result": "10 words that belong to the category and satisfy the condition. \n        \"\"\"\n        words = []\n        for word in Word.objects.all():\n            if \"shift\" in word.name.lower() and word.category == \"clothes\":\n                words.append(word.name)\n        return words\n\n    def get_random_word(self):\n        \"\"\"\n        Get a random word from the database. \n        \"\"\"\n        word = Word.objects.order_by('random()')\n        return word[0].name\n\n    def get_"}
{"cat": "clothes", "slot": "specialization", "value": "biretta", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are biretta. \n        Output: ", "result": "\n        */\n        public List<string> GetWords(string category, string condition)\n        {\n            List<string> words = new List<string>();\n\n            using (SqlConnection connection = new SqlConnection(connectionString))\n            {\n                connection.Open();\n\n                using (SqlCommand command = new SqlCommand(\"GetWords\", connection))\n                {\n                    command.CommandType = CommandType.StoredProcedure;\n                    command.Parameters.AddWithValue(\"@Category\", category);\n                    command.Parameters.AddWithValue(\"@Condition\", condition"}
{"cat": "clothes", "slot": "specialization", "value": "sports jacket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are sports jacket. \n        Output: ", "result": "\n          jacket, shirt, pants, socks, shoes, hat, gloves, shorts, T-shirt, jersey\n\"\"\"\n\nword_list = [\"jacket\", \"shirt\", \"pants\", \"socks\", \"shoes\", \"hat\", \"gloves\", \"shorts\", \"T-shirt\", \"jersey\"]\ncategory = \"clothes\"\ncondition = \"are sports jacket\"\n\nif category == \"clothes\" and condition == \"are sports jacket\":\n    print(\", \".join("}
{"cat": "clothes", "slot": "specialization", "value": "Stetson", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are Stetson. \n        Output: ", "result": "\n            cowboy, hat, Stetson, boots, jeans, shirt, chaps, belt, spurs, leather. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are Stetson'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n# Test the function with sample inputs\nprint(get_words('clothes', 'are Levi'))\nprint(get_words('clothes', 'end with -jeans'))\nprint(get_words('cloth"}
{"cat": "clothes", "slot": "specialization", "value": "jerkin", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are jerkin. \n        Output: ", "result": "\n            coat, jacket, jerkin, cloak, cape, vest, tunic, shirt, blouse, t-shirt. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are jerkin'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def get_words(self, category, condition):\n        \"\"\"\n        Given a category and a condition, return a list of words that satisfy the condition in that category.\n        \"\"\"\n        raise NotImplementedError\n"}
{"cat": "clothes", "slot": "specialization", "value": "sacque", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are sacque. \n        Output: ", "result": "\n            sacque, sacque, sacque, sacque, sacque, sacque, sacque, sacque, sacque. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are sacque'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n# Test the function with sample inputs\nprint(get_words('clothes', 'are sacque'))  # Output: sacque, sacque, sacque, sacque, sacque, sacque, sacque, sacque, sacque."}
{"cat": "clothes", "slot": "specialization", "value": "deerstalker", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are deerstalker. \n        Output: ", "result": "\n        deerstalker\n        hat\n        coat\n        scarf\n        gloves\n        boots\n        spats\n        cane\n        umbrella\n        bowler\n    \"\"\"\n    words = [\n        \"deerstalker\",\n        \"hat\",\n        \"coat\",\n        \"scarf\",\n        \"gloves\",\n        \"boots\",\n        \"spats\",\n        \"cane\",\n        \"umbrella\",\n        \"bowler\"\n    ]\n    if category == \"clothes\" and condition =="}
{"cat": "clothes", "slot": "specialization", "value": "fez", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are fez. \n        Output: ", "result": "\n      \"\"\"\n      words = [\"fez\", \"turban\", \"keffiyeh\", \"kippah\", \"yarmulke\", \"skullcap\", \"cap\", \"hat\", \"beret\", \"scarf\"]\n      return \", \".join(filter(lambda x: x.startswith(\"fez\"), words))\n    else:\n      return \"Sorry, I don't know the answer to that question.\"\n\n  def ask_and_answer(self):\n    question = input(\"What is your question? \")\n    answer = self.get_"}
{"cat": "clothes", "slot": "specialization", "value": "peaked cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are peaked cap. \n        Output: ", "result": "\n        peaked cap, beret, tam o'shanter, trilby, fedora, homburg, bowler, pork pie hat, newsboy cap, baker boy cap. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are peaked cap'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('clothes', 'are peaked cap'))\n```\n\u8f93\u51fa\uff1a\npeaked cap, beret, tam o'shanter, trilby"}
{"cat": "clothes", "slot": "specialization", "value": "fur hat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are fur hat. \n        Output: ", "result": "\n        beaver, mink, ermine, otter, fox, sable, marten, lynx, chinchilla, rabbit \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"fur\" in word and \"hat\" in word:\n            words.append(word)\n    return words\n\ndef count_words_in_sentence(sentence):\n    \"\"\"\n    Given a sentence, count the number of words in the sentence. \n        Desired output: number of words in the sentence. \n       "}
{"cat": "clothes", "slot": "specialization", "value": "miniskirt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are miniskirt. \n        Output: ", "result": "\n```\nminiskirt, shorts, skirt, dress, pants, jeans, leggings, capri, culottes\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, raspberry, plum, red delicious, watermelon, pineapple,"}
{"cat": "clothes", "slot": "specialization", "value": "fool's cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are fool's cap. \n        Output: ", "result": "\n        fool's cap, fool's cap, fool's cap, fool's cap, fool's cap, fool's cap, fool's cap, fool's cap, fool's cap, fool's cap. \n        \"\"\"\n        category = input(\"Enter category: \")\n        condition = input(\"Enter condition: \")\n        words = []\n        for word in text:\n            if word.lower() in category.lower() and word.lower() in condition.lower():\n                words.append(word)\n        print(\", \".join(words))\n"}
{"cat": "clothes", "slot": "specialization", "value": "eye mask", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are eye mask. \n        Output: ", "result": "\n            \n    \"\"\"\n    category = 'clothes'\n    condition = 'are eye mask'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    words = []\n    with open('words.txt', 'r') as f:\n        for line in f:\n            line = line.strip()\n            if line.startswith(category) and line.endswith(condition):\n                words.append(line)\n    return words\n\nif __name__ == '"}
{"cat": "clothes", "slot": "specialization", "value": "tee shirt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are tee shirt. \n        Output: ", "result": "\n        tee, shirt, t-shirt, top, blouse, dress, skirt, pants, jeans, shorts\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split(\" \")\n    condition_words = condition.split(\" \")\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        # Check if the word"}
{"cat": "clothes", "slot": "specialization", "value": "sunhat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are sunhat. \n        Output: ", "result": "\n        sunhat, hat, headwear, accessory, summer, warmth, shade, protection, beach, holiday \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as f:\n        for line in f:\n            line = line.strip()\n            if line.startswith(category"}
{"cat": "clothes", "slot": "specialization", "value": "pinny", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are pinny. \n        Output: ", "result": "\n        pinafore, apron, smock, overalls, jumper, frock, dress, blouse, shirt, skirt \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as f:\n        for line in f:\n            line = line.strip()\n            if line."}
{"cat": "clothes", "slot": "specialization", "value": "bed jacket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are bed jacket. \n        Output: ", "result": "\n```\nbed jacket, coat, sweater, shirt, pants, dress, socks, scarf, gloves\n```\n\n```\nDesired input:\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are bed jacket. \n        Input: \n```\nbed jacket, coat, sweater, shirt, pants, dress, socks, scarf, gloves\n```\n\n"}
{"cat": "clothes", "slot": "specialization", "value": "high hat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are high hat. \n        Output: ", "result": "\n            top hat, \n            bowler hat, \n            trilby, \n            fedora, \n            cowboy hat, \n            baseball cap, \n            newsboy cap, \n            beret, \n            tam o'shanter. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are high hat'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_category_clothes_condition_are_high_hat(self"}
{"cat": "clothes", "slot": "specialization", "value": "balaclava", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are balaclava. \n        Output: ", "result": "\n        balaclava, beanie, beret, cap, cloak, hood, mask, scarf, tuque \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"balaclava\" in word:\n            words.append(word)\n    return words\n\nif __name__ == \"__main__\":\n    word_list = [\n        \"scarf\",\n        \"tuque\",\n        \"beanie\",\n        \"balaclava\",\n        \"beret\",\n        \"cap\",\n        \"hood\","}
{"cat": "clothes", "slot": "specialization", "value": "polonaise", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are polonaise. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "specialization", "value": "sport shirt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are sport shirt. \n        Output: ", "result": "\n          shirt, shorts, socks, shoes, hat, jersey, pants, jacket, t-shirt, sweatshirt.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    if category == \"clothes\":\n        if condition == \"are sport shirt\":\n            words.append(\"shirt\")\n           "}
{"cat": "clothes", "slot": "specialization", "value": "garrison cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are garrison cap. \n        Output: ", "result": "\n        garrison,cap,garrisoncap,garrison-cap,garrisoncap,garrison-cap,garrisoncap,garrison-cap,garrisoncap,garrison-cap. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are garrison cap'\n        words = []\n        for word in text.split():\n            if word.lower() in category_map[category] and word.lower() in condition_map[condition]:\n                words.append(word)\n        return ', '.join(words)\n\ndef main():"}
{"cat": "clothes", "slot": "specialization", "value": "knee-high", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are knee-high. \n        Output: ", "result": "\n            boots, socks, pants, shorts, skirts, dresses, coats, jackets, vests, shirts. \n        \"\"\"\n        category = input(\"Enter category: \")\n        condition = input(\"Enter condition: \")\n        words = []\n        for word in text:\n            if word.lower() in category.lower() and word.lower() in condition.lower():\n                words.append(word.lower())\n        print(\", \".join(words))\n```\nExample usage:\n```\npython solve.py clothes,are\n"}
{"cat": "clothes", "slot": "specialization", "value": "opera hat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are opera hat. \n        Output: ", "result": "\n            opera, hat, hat, hat, hat, hat, hat, hat, hat, \n            hat, hat, hat, hat, hat, hat, hat, hat, hat, \n            hat, hat, hat, hat, hat, hat, hat, hat, hat, \n            hat, hat, hat, hat, hat, hat, hat, hat, hat, \n            hat, hat, hat, hat, hat, hat, hat, hat, hat, \n            hat, hat, hat, hat, hat, hat, hat, hat, hat, \n           "}
{"cat": "clothes", "slot": "specialization", "value": "crinoline", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are crinoline. \n        Output: ", "result": "\n```\ncrinoline, petticoat, hoopskirt, bustle, corset, bustle, bustle, bustle, bustle, bustle\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\norange, lemon, lime, grapef"}
{"cat": "clothes", "slot": "specialization", "value": "pinner", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are pinner. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "specialization", "value": "calpack", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are calpack. \n        Output: ", "result": "\n        \n    Examples: \n        Given the category \"clothes\" and the condition \"are calpack\", \n        return the following list of 10 words: \n        \"shirt, pants, dress, jacket, socks, shoes, belt, hat, scarf, sweater\" \n        Given the category \"vehicles\" and the condition \"have wheels\", \n        return the following list of 10 words: \n        \"car, truck, bus, bike, train, plane, boat, subway, taxi"}
{"cat": "clothes", "slot": "specialization", "value": "lumber jacket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are lumber jacket. \n        Output: ", "result": "\n```\nwool, plaid, flannel, denim, chambray, corduroy, leather, tweed, plaid, denim\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are lumber jacket\" are: wool, plaid, flannel, denim, chambray, corduroy, leather, tweed, plaid, denim.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output:"}
{"cat": "clothes", "slot": "specialization", "value": "Mother Hubbard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are Mother Hubbard. \n        Output: ", "result": "\n        dress,shirt,skirt,pants,socks,shoes,hat,scarf,jacket,coat \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"Mother\" in word and \"Hubbard\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count"}
{"cat": "clothes", "slot": "specialization", "value": "straw hat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are straw hat. \n        Output: ", "result": "\n```\nstraw,hat,strawhat,straw-hat,strawhat,straw-strawhat,straw-straw-hat,straw-straw-strawhat,straw-straw-straw-hat,straw-straw-straw-strawhat\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are apple."}
{"cat": "clothes", "slot": "specialization", "value": "woman's hat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are woman's hat. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "specialization", "value": "sarong", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are sarong. \n        Output: ", "result": "\n```\nsarong, kebaya, batik, songket, baju kurung, baju melayu, baju panjang, kain, sarong kebaya\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are sarong\" are: sarong, kebaya, batik, songket, baju kurung, baju melayu, baju panjang, kain, sarong kebaya.\n```\nProvide a list of 10 words that belong to the"}
{"cat": "clothes", "slot": "specialization", "value": "jeweled headdress", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are jeweled headdress. \n        Output: ", "result": "\n          diamond, tiara, crown, necklace, earrings, bracelet, brooch, sash, tiara, diadem\n\"\"\"\n\nword_list = [\"diamond\", \"tiara\", \"crown\", \"necklace\", \"earrings\", \"bracelet\", \"brooch\", \"sash\", \"tiara\", \"diadem\"]\ncategory = \"clothes\"\ncondition = \"are jeweled headdress\"\n\nif category == \"clothes\" and condition == \"are jeweled headdress\":\n    print(\", \".join"}
{"cat": "clothes", "slot": "specialization", "value": "donkey jacket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are donkey jacket. \n        Output: ", "result": "\n        donkey, jacket, coat, jumper, pullover, sweater, cardigan, vest, cape, cloak. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are donkey jacket'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == 'animals':\n        words"}
{"cat": "clothes", "slot": "specialization", "value": "bonnet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are bonnet. \n        Output: ", "result": "\n        hat, bonnet, beret, cap, toque, scarf, gloves, mittens, socks, shoe.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if word.lower() in ['bonnet', 'bonnets']:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n    \"\"\"\n    vowels = 'aeiouAEIOU"}
{"cat": "clothes", "slot": "specialization", "value": "tam", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are tam. \n        Output: ", "result": "\n        */\n        public List<string> GetWords(string category, string condition)\n        {\n            List<string> words = new List<string>();\n\n            using (SqlConnection connection = new SqlConnection(connectionString))\n            {\n                connection.Open();\n\n                using (SqlCommand command = new SqlCommand(\"GetWords\", connection))\n                {\n                    command.CommandType = CommandType.StoredProcedure;\n                    command.Parameters.AddWithValue(\"@Category\", category);\n                    command.Parameters.AddWithValue(\"@Condition\", condition"}
{"cat": "clothes", "slot": "specialization", "value": "shako", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are shako. \n        Output: ", "result": "\n```\nshako, hat, helmet, cap, headwear, military, uniform, headgear, headpiece\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are shako\" are \"hat\", \"helmet\", \"cap\", \"headwear\", \"military\", \"uniform\", \"headgear\", \"headpiece\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n"}
{"cat": "clothes", "slot": "specialization", "value": "wimple", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are wimple. \n        Output: ", "result": "\n            cloak, gown, hood, mantle, robe, surcoat, tabard, tunic, veil, wimple \n        \"\"\"\n        category = 'clothes'\n        condition = 'are wimple'\n        words = []\n        for word in text.split():\n            if word.lower() in category_words[category] and word.lower() == 'wimple':\n                words.append(word)\n        result = ', '.join(words)\n        print(result)\n```\nExplanation:\n\n"}
{"cat": "clothes", "slot": "specialization", "value": "titfer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are titfer. \n        Output: ", "result": "\n        titfer, hat, scarf, gloves, earrings, necklace, bracelet, dress, blouse, skirt \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"titfer\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count"}
{"cat": "clothes", "slot": "specialization", "value": "mess jacket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are mess jacket. \n        Output: ", "result": "\n          jacket, shirt, pants, coat, dress, scarf, gloves, hat, socks.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in text:\n        if word.lower() in category.lower() and word.lower() in condition.lower():\n            words.append(word.lower())\n    print(\", \".join(words))\n```\nExample:\n```\npython word_category.py\nEnter category: clothes\nEnter condition: are mess jack"}
{"cat": "clothes", "slot": "specialization", "value": "camise", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are camise. \n        Output: ", "result": "\n            1. camisole\n            2. camiset\n            3. camisole\n            4. camiset\n            5. camisole\n            6. camiset\n            7. camisole\n            8. camiset\n            9. camisole\n            10. camiset\n        \"\"\"\n        words = []\n        for word in word_list:\n            if word.lower().startswith(\"camis\"):\n                words.append(word)\n        return \", \".join(words)\n\ndef get_category(word):"}
{"cat": "clothes", "slot": "specialization", "value": "bearskin", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are bearskin. \n        Output: ", "result": "\n        bearskin coat, bearskin hat, bearskin gloves, bearskin boots, bearskin scarf, bearskin mittens, bearskin socks, bearskin vest, bearskin pants, bearskin underwear\n```\n\n```"}
{"cat": "clothes", "slot": "specialization", "value": "peacoat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are peacoat. \n        Output: ", "result": "\n        coat, pea, coat, pea, coat, pea, coat, pea, coat, pea. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are peacoat'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def get_words(self, category, condition):\n        \"\"\"\n        Given a category and a condition, return a list of words that satisfy the condition in that category.\n        \"\"\"\n        raise NotImplementedError\n\nif __name__ =="}
{"cat": "clothes", "slot": "specialization", "value": "sari", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are sari. \n        Output: ", "result": "\n```\nsari, saree, salwar, kameez, lehnga, choli, ghagra, churidar, salwar kameez, saree blouse\n```\nExplanation:\nThe words that belong to the category \"clothes\" and satisfy the condition \"are sari\" are: sari, saree, salwar, kameez, lehnga, choli, ghagra, churidar, salwar kameez, saree blouse.\n```\nProvide a list of 10 words"}
{"cat": "clothes", "slot": "specialization", "value": "shovel hat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are shovel hat. \n        Output: ", "result": "\n        shovel,hat,shovelhat,shovelhats,shovelhat,shovelhats,shovelhat,shovelhats,shovelhat,shovelhats\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"shovel\" in word and \"hat\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels"}
{"cat": "clothes", "slot": "specialization", "value": "ballet skirt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are ballet skirt. \n        Output: ", "result": "\n```\nskirt, tutu, leotard, ballet shoes, tights, ballet bag, ballet slippers, ballet barre, ballet belt, ballet hair ribbon\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are ballet skirt\" are \"skirt\", \"tutu\", \"leotard\", \"ballet shoes\", \"tights\", \"ballet bag\", \"ballet slippers\", \"ballet barre\", \"ballet belt\", and \"ballet hair"}
{"cat": "clothes", "slot": "specialization", "value": "kaffiyeh", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are kaffiyeh. \n        Output: ", "result": "\n        ```\nkaffiyeh,scarf,headscarf,shemagh,keffiyeh,checkered,headdress,Arab,Middle Eastern\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are sweet. \n        Output: \n        ```\napple,banana,cherry,date,fig,grapes,honeydew,"}
{"cat": "clothes", "slot": "specialization", "value": "liberty cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are liberty cap. \n        Output: ", "result": "\n        hat, liberty, cap, headwear, fashion, accessory, \n        topper, headpiece, headgear \n    \"\"\"\n    liberty_cap_words = [\n        \"hat\",\n        \"liberty\",\n        \"cap\",\n        \"headwear\",\n        \"fashion\",\n        \"accessory\",\n        \"topper\",\n        \"headpiece\",\n        \"headgear\"\n    ]\n    return comma_separated_list(liberty_cap_words, category=\"clothes\", condition=\""}
{"cat": "clothes", "slot": "specialization", "value": "tammy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are tammy. \n        Output: ", "result": "\n```\ntammy,tammy,tammy,tammy,tammy,tammy,tammy,tammy,tammy\n```"}
{"cat": "clothes", "slot": "specialization", "value": "ski cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are ski cap. \n        Output: ", "result": "\n        ski,cap,hat,helmet,gloves,jacket,pants,socks,boots,sunglasses\n```\n\n```\nDescribe a scenario where the user wants to find words that start with the letter \"k\" and are related to the category of \"animals\". \n        Provide a list of 10 words that satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: start with letter \"k\". \n        Output: \n        kangaroo"}
{"cat": "clothes", "slot": "specialization", "value": "suede glove", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are suede glove. \n        Output: ", "result": "\n        suede,glove,suede,glove,suede,glove,suede,glove,\n```"}
{"cat": "clothes", "slot": "specialization", "value": "bluebonnet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are bluebonnet. \n        Output: ", "result": "\n```\nbluebonnet, cowboy, hat, boots, denim, dungarees, overalls, shirt, jacket, vest\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are bluebonnet\" are: bluebonnet, cowboy, hat, boots, denim, dungarees, overalls, shirt, jacket, vest.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list"}
{"cat": "clothes", "slot": "specialization", "value": "dunce cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are dunce cap. \n        Output: ", "result": "\n```\nhat, cap, dunce, fool, knucklehead, imbecile, idiot, moron, dullard\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are sweet. \n        Output: \n```\napple, banana, cherry, date, fig, grape, melon, orange, peach, plum\n```\n\n"}
{"cat": "clothes", "slot": "specialization", "value": "dressing sack", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are dressing sack. \n        Output: ", "result": "\n        dressing,sack,sacks,dress,dresses,suit,suits,jacket,jackets,shirt,shirts,pant,pants,skirt,skirts,blouse,blouses,tie,ties,coat,coats,overcoat,overcoats,underwear,underwear,socks,socks,shoes,shoes,sandals,sandals,hat,hat,scarf,scarf,gloves,gloves,purse,purse,"}
{"cat": "clothes", "slot": "specialization", "value": "culotte", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are culotte. \n        Output: ", "result": "\n```\nculotte, pantalon, jumpsuit, overalls, capri, shorts, skirt, dress, blouse, shirt\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are culotte\" are \"culotte, pantalon, jumpsuit, overalls, capri, shorts, skirt, dress, blouse, shirt\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of"}
{"cat": "clothes", "slot": "specialization", "value": "watch cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are watch cap. \n        Output: ", "result": "\n```\nwatch cap, beanie, knit cap, skull cap, toque, tuque, cap, beret, newsboy cap, stocking cap\n```\nExplanation:\nThe words that belong to the category \"clothes\" and satisfy the condition \"are watch cap\" are: watch cap, beanie, knit cap, skull cap, toque, tuque, cap, beret, newsboy cap, stocking cap.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output"}
{"cat": "clothes", "slot": "specialization", "value": "dressing sacque", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are dressing sacque. \n        Output: ", "result": "\n        dressing, sacque, coat, jacket, blouse, skirt, pants, shirt, dress, suit \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in text:\n        if word.lower() in category.lower() and word.lower() in condition.lower():\n            words.append(word)\n    print(\", \".join(words))\n```\nExample:\n```\nEnter category: clothes\nEnter condition: are dressing sacque\ndressing"}
{"cat": "clothes", "slot": "specialization", "value": "sheath", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are sheath. \n        Output: ", "result": "\n        dress, skirt, blouse, coat, jacket, pants, shirt, tie, scarf, gloves.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"sheath\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n        Desired output: a dictionary where the keys are words and the values are the number of vowels in each"}
{"cat": "clothes", "slot": "specialization", "value": "cocktail dress", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are cocktail dress. \n        Output: ", "result": "\n        evening, gown, cocktail, dress, formal, party, black, white, colorful, sequin. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are cocktail dress'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def example_2():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals"}
{"cat": "clothes", "slot": "specialization", "value": "wishing cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are wishing cap. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "specialization", "value": "top hat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are top hat. \n        Output: ", "result": "\n```\ntop hat, bow tie, monocle, tuxedo, cummerbund, waistcoat, shirt, cufflinks, suspenders, vest\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are top hat\" are: top hat, bow tie, monocle, tuxedo, cummerbund, waistcoat, shirt, cufflinks, suspenders, vest.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n       "}
{"cat": "clothes", "slot": "specialization", "value": "service cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are service cap. \n        Output: ", "result": "\n```\nservice cap\n```\n\n### Example 2:\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are sweet. \n        Output: \n```\napple, banana, cherry, date, fig, grape, honeydew, kiwi, mango, strawberry\n```\n\n### Example 3:\n```python\nProvide a list of "}
{"cat": "clothes", "slot": "specialization", "value": "overseas cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are overseas cap. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "specialization", "value": "cockscomb", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are cockscomb. \n        Output: ", "result": "\n```\ncock, comb, cockade, cockalorum, cockalorum, cockalorum, cockalorum, cockalorum, cockalorum, cockalorum, cockalorum, cockalorum, cockalorum, cockalorum, cockalorum, cockalorum, cockalorum, cockalorum, cockalorum, cockalorum, cockalorum, cockalorum, cockalorum, cockalorum, cockalorum, cockalorum, cock"}
{"cat": "clothes", "slot": "specialization", "value": "batting glove", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are batting glove. \n        Output: ", "result": "\n        bat, batting, batting glove, baseball, catcher, fielder, glove, hand, \n        mitt, protector, wrist. \n    \"\"\"\n    category = 'clothes'\n    condition = 'are batting glove'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == 'cloth"}
{"cat": "clothes", "slot": "specialization", "value": "skimmer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are skimmer. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "specialization", "value": "coonskin", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are coonskin. \n        Output: ", "result": "\n        coonskin\n        Category: clothes. \n        Condition: are not coonskin. \n        Output: \n        jeans\n        Category: clothes. \n        Condition: are not coonskin. \n        Output: \n        t-shirt\n        Category: clothes. \n        Condition: are not coonskin. \n        Output: \n        socks\n        Category: clothes. \n        Condition: are not coonskin. \n        Output: \n        underwear\n        Category: clothes. \n"}
{"cat": "clothes", "slot": "specialization", "value": "grass skirt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are grass skirt. \n        Output: ", "result": "\n```\ngrass, skirt, hula, lei, coconut, tropical, Hawaiian, floral, island, paradise\n```\n\nExplanation:\n```\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Desired output: comma separated list of words.\n3. Category: clothes.\n4. Condition: are grass skirt.\n5. Output: \n```\ngrass, skirt, hula, lei, coconut, tropical, Hawaiian, floral, island, parad"}
{"cat": "clothes", "slot": "specialization", "value": "lavalava", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are lavalava. \n        Output: ", "result": "\n        lavalava, sarong, kilt, yukata, kimono, dashiki, dhoti, lungi, pagne, banyan. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are lavalava'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_category_clothes_condition_lavalava(self):\n        result = self.get_words('clothes', 'are lavalava')\n        self"}
{"cat": "clothes", "slot": "specialization", "value": "homburg", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are homburg. \n        Output: ", "result": "\n        */\n        public List<string> GetWords(string category, string condition)\n        {\n            List<string> words = new List<string>();\n\n            using (SqlConnection connection = new SqlConnection(connectionString))\n            {\n                connection.Open();\n\n                using (SqlCommand command = new SqlCommand(\"GetWords\", connection))\n                {\n                    command.CommandType = CommandType.StoredProcedure;\n                    command.Parameters.AddWithValue(\"@Category\", category);\n                    command.Parameters.AddWithValue(\"@Condition\", condition"}
{"cat": "clothes", "slot": "specialization", "value": "anklet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are anklet. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "specialization", "value": "skullcap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are skullcap. \n        Output: ", "result": "\n```\nskullcap, hat, cap, headgear, headwear, head covering, head protection, head gear, headpiece\n```\nExplanation: The word `skullcap` belongs to the category `clothes` and satisfies the condition of being a `skullcap`. The output is a comma-separated list of 10 words that belong to the category `clothes` and satisfy the condition of being a `skullcap`.\n```"}
{"cat": "clothes", "slot": "specialization", "value": "work-shirt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are work-shirt. \n        Output: ", "result": "\n        shirt,pants,jacket,tie,dress,skirt,blouse,shoes,socks,jeans\n\"\"\"\n\nword_list = [\"shirt\", \"pants\", \"jacket\", \"tie\", \"dress\", \"skirt\", \"blouse\", \"shoes\", \"socks\", \"jeans\"]\ncategory = \"clothes\"\ncondition = \"are work-shirt\"\n\nif category == \"clothes\" and condition == \"are work-shirt\":\n    print(\", \".join(word"}
{"cat": "clothes", "slot": "specialization", "value": "leghorn", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are leghorn. \n        Output: ", "result": "\n```\nhat, shoes, socks, trousers, shirt, coat, scarf, gloves, skirt, pants\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are leghorn\" are \"hat\", \"shoes\", \"socks\", \"trousers\", \"shirt\", \"coat\", \"scarf\", \"gloves\", \"skirt\" and \"pants\"."}
{"cat": "clothes", "slot": "specialization", "value": "miter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are miter. \n        Output: ", "result": "\n        */\n        public List<string> GetWords(string category, string condition)\n        {\n            List<string> words = new List<string>();\n\n            using (SqlConnection connection = new SqlConnection(connectionString))\n            {\n                connection.Open();\n\n                using (SqlCommand command = new SqlCommand(\"GetWords\", connection))\n                {\n                    command.CommandType = CommandType.StoredProcedure;\n                    command.Parameters.AddWithValue(\"@Category\", category);\n                    command.Parameters.AddWithValue(\"@Condition\", condition"}
{"cat": "clothes", "slot": "specialization", "value": "banian", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are banian. \n        Output: ", "result": "\n```\nbanian, sari, salwar, kameez, dupatta, kurta, lungi, dhoti, pyjama\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are banian\" are \"banian, sari, salwar, kameez, dupatta, kurta, lungi, dhoti, pyjama\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words."}
{"cat": "clothes", "slot": "specialization", "value": "coonskin cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are coonskin cap. \n        Output: ", "result": "\n```\ncoonskin cap, raccoon coat, raccoon hat, raccoon pajamas, raccoon slippers, raccoon skin, raccoon fur, raccoon tail, raccoon mask, raccoon costume\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are coonskin cap\" are: coonskin cap, raccoon coat, raccoon hat, raccoon pajamas, raccoon slippers, raccoon skin, raccoon fur, raccoon tail, raccoon mask, raccoon costume.\n```"}
{"cat": "clothes", "slot": "specialization", "value": "toboggan cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are toboggan cap. \n        Output: ", "result": "\n        toboggan, cap, ski, snow, winter, jacket, gloves, scarf, hat, boots \n    \"\"\"\n    category = \"clothes\"\n    condition = \"are toboggan cap\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "clothes", "slot": "specialization", "value": "boater", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are boater. \n        Output: ", "result": "\n```\nboater, hat, sunhat, strawhat, panama, fedora, bowler, trilby, porkpie, newsboy\n```\n\nExample 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine, clementine, mand"}
{"cat": "clothes", "slot": "specialization", "value": "yachting cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are yachting cap. \n        Output: ", "result": "\n```\nyachting,cap,sailor,hat,water,protection,fashion,accessory,adventure,style\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are sweet. \n        Output: \n```\napple,banana,cherry,date,fig,grapes,honeydew,kiwi,mango,orange,pe"}
{"cat": "clothes", "slot": "specialization", "value": "tyrolean", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are tyrolean. \n        Output: ", "result": "\n          jeans, overalls, shorts, skirt, dress, shirt, blouse, jacket, coat, pants\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Iterate over the words in the category\n    for word in category_words:\n        # Check if the word satisfies the condition"}
{"cat": "clothes", "slot": "specialization", "value": "bathing cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are bathing cap. \n        Output: ", "result": "\n        bathing,cap,swim,hat,cover,protection,sun,beach,water,goggles \n    \"\"\"\n    category = \"clothes\"\n    condition = \"are bathing cap\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "clothes", "slot": "specialization", "value": "jersey", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are jersey. \n        Output: ", "result": "\n          t-shirt,sweatshirt,hoodie,jersey,pullover,sweater,sweatpants,sweatshirt and pants,sweatshirt and jacket,sweatshirt and hoodie\n```\n\nExample 2:\n```\nQuestion: Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: colors. \n        Condition: are blue. \n        Output: "}
{"cat": "clothes", "slot": "specialization", "value": "mitre", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are mitre. \n        Output: ", "result": "\n```\nmitre, coat, scarf, gloves, hat, socks, shirt, pants, shoes, jacket\n```\n\n```\nmitre, coat, scarf, gloves, hat, socks, shirt, pants, shoes, jacket\n```\n\n```\nmitre, coat, scarf, gloves, hat, socks, shirt, pants, shoes, jacket\n```\n\n```\nmitre, coat, scarf, gloves, hat, socks, shirt, pants, shoes, jack"}
{"cat": "clothes", "slot": "specialization", "value": "argyle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are argyle. \n        Output: ", "result": "\n        argyle, sock, sweater, scarf, vest, cardigan, dress sock, turtleneck, pullover, stocking. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are argyle'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n# Sample usage\nprint(get_words('clothes', 'are argyle'))\n# Output: argyle, sock, sweater, scarf, vest, cardigan, dress sock, turtl"}
{"cat": "clothes", "slot": "specialization", "value": "daishiki", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are daishiki. \n        Output: ", "result": "\n        daishiki, kimono, hakama, yukata, obi, tabi, geta, zori, socks, sandals \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == '__main__':\n    main()\n```\n```"}
{"cat": "clothes", "slot": "specialization", "value": "balaclava helmet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are balaclava helmet. \n        Output: ", "result": "\n        balaclava, helmet, balaclava, helmet, balaclava, helmet, balaclava, helmet, balaclava, helmet. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are balaclava helmet'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('clothes', 'are balaclava helmet'))\n```\nOutput:\nbalaclava, helmet, balaclava, helmet, balaclava,"}
{"cat": "clothes", "slot": "specialization", "value": "dress shirt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are dress shirt. \n        Output: ", "result": "\n        dress, shirt, blouse, suit, jacket, tie, pants, skirt, shoes, socks \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as f:\n        for line in f:\n            line = line.strip()\n            if line.startswith(category"}
{"cat": "clothes", "slot": "specialization", "value": "tutu", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are tutu. \n        Output: ", "result": "\n```\ntutu, tutu skirt, tutu dress, tutu shorts, tutu pants, tutu leggings, tutu top, tutu sweater, tutu jacket, tutu coat\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are tutu\" are: tutu, tutu skirt, tutu dress, tutu shorts, tutu pants, tutu leggings, tutu top, tutu sweater, tutu jacket, tutu coat.\n```\n"}
{"cat": "clothes", "slot": "specialization", "value": "sweat sock", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are sweat sock. \n        Output: ", "result": "\n        sock,sweat,sock,sweat,sock,sweat,sock,sweat,sock,sweat,sock,sweat. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are sweat sock'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    print(get_words('clothes', 'are sweat sock'))\n\nif __name__ == '__main__':\n    main()\n```\n```"}
{"cat": "clothes", "slot": "specialization", "value": "poke bonnet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are poke bonnet. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "specialization", "value": "morning coat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are morning coat. \n        Output: ", "result": "\n          morning, coat, tailcoat, frockcoat, dress coat, black tie, white tie, lounge coat, smoking jacket, morning suit.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in text:\n        if word.lower() in category.lower() and word.lower() in condition.lower():\n            words.append(word)\n    print(\", \".join(words))\n```\nExample:\n```python\nEnter category: clothes\nEnter condition:"}
{"cat": "clothes", "slot": "specialization", "value": "morning dress", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are morning dress. \n        Output: ", "result": "\n        morning,dress,suit,tie,shirt,pants,jacket,shoes,socks,bowtie\n```\n\n```\nDescribe the behavior of the following code.\n```\n\n```\nint x = 10;\nint y = 20;\nif (x > y) {\n    int z = x + y;\n    System.out.println(z);\n}\n```\n\n```\nDescribe the behavior of the following code.\n```\n\n```\nint x = 10;\nint y ="}
{"cat": "clothes", "slot": "specialization", "value": "Panama hat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are Panama hat. \n        Output: ", "result": "\n```\nPanama, hat, straw, brim, sun, protection, headwear, headgear, headwear, headwear\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, raspberry, red delicious, watermelon, p"}
{"cat": "clothes", "slot": "specialization", "value": "tam-o'-shanter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are tam-o'-shanter. \n        Output: ", "result": "\n        tam-o'-shanter, kilt, trews, sporran, sgian-dubh, ghillie-brogues, knee-boots, tam-o'-shanter, kilt, trews, sporran, sgian-dubh, ghillie-brogues, knee-boots, tam-o'-shanter, kilt, trews, sporran, sgian-dubh, ghillie-brogues, knee-boots, tam-o'-shanter, kilt"}
{"cat": "clothes", "slot": "specialization", "value": "sundress", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are sundress. \n        Output: ", "result": "\n          sundress, sunhat, sandals, blouse, skirt, shorts, sunglasses, scarf, shirt, dress \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as f:\n        for line in f:\n            line = line.strip()\n            if category"}
{"cat": "clothes", "slot": "specialization", "value": "jewelled headdress", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are jewelled headdress. \n        Output: ", "result": "\n        diamond, tiara, necklace, earrings, bracelet, brooch, ring, anklet, bangle, cuff.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in text.split():\n        if word.lower() in category.lower() and word.lower() in condition.lower():\n            words.append(word.lower())\n    print(\", \".join(words))\n\ndef main():\n    text = input(\"Enter text: \")\n"}
{"cat": "clothes", "slot": "specialization", "value": "trilby", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are trilby. \n        Output: ", "result": "\n```\ntrilby, hat, fedora, bowler, cap, baseball cap, newsboy cap, panama hat, straw hat, cowboy hat\n```\n\nExample 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine, clementine,"}
{"cat": "clothes", "slot": "specialization", "value": "topknot", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are topknot. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "specialization", "value": "jockey cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are jockey cap. \n        Output: ", "result": "\n```\njockey,cap,hat,headwear,riding,equipment,equestrian,racing,apparel\n```\nExplanation: The words that belong to the category `clothes` and satisfy the condition `are jockey cap` are `jockey`, `cap`, `hat`, `headwear`, `riding`, `equipment`, `equestrian`, `racing`, and `apparel`."}
{"cat": "clothes", "slot": "specialization", "value": "Glengarry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are Glengarry. \n        Output: ", "result": "\n        */\n        public List<string> GetWords(string category, string condition)\n        {\n            List<string> words = new List<string>();\n\n            using (SqlConnection connection = new SqlConnection(connectionString))\n            {\n                connection.Open();\n\n                using (SqlCommand command = new SqlCommand(\"GetWords\", connection))\n                {\n                    command.CommandType = CommandType.StoredProcedure;\n                    command.Parameters.AddWithValue(\"@Category\", category);\n                    command.Parameters.AddWithValue(\"@Condition\", condition"}
{"cat": "clothes", "slot": "specialization", "value": "kepi", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are kepi. \n        Output: ", "result": "\n```\nkepi,cap,hat,capital,capitalize,capitalize,capitalize,capitalize,capitalize,capitalize\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple,banana,cherry,date,fig,grape,lemon,orange,peach,straw"}
{"cat": "clothes", "slot": "specialization", "value": "biggin", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are biggin. \n        Output: ", "result": "\n        jeans, jacket, shirt, pants, coat, hat, scarf, gloves, boots, socks \n    \"\"\"\n    biggin_words = [\"jeans\", \"jacket\", \"shirt\", \"pants\", \"coat\", \"hat\", \"scarf\", \"gloves\", \"boots\", \"socks\"]\n    biggin_words = [word for word in biggin_words if word.lower() == \"biggin\"]\n    return \", \".join(biggin_words)\n\ndef get_category(word):\n"}
{"cat": "clothes", "slot": "specialization", "value": "millinery", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are millinery. \n        Output: ", "result": "\n        scarf, hat, gloves, earrings, necklace, bracelet, ring, brooch, fascinator, headband\n\"\"\"\n\nword_list = [\"scarf\", \"hat\", \"gloves\", \"earrings\", \"necklace\", \"bracelet\", \"ring\", \"brooch\", \"fascinator\", \"headband\"]\ncategory = \"clothes\"\ncondition = \"are millinery\"\n\nif category == \"clothes\" and condition == \"are millinery\":\nprint(\", \".join(word_"}
{"cat": "clothes", "slot": "specialization", "value": "golf cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are golf cap. \n        Output: ", "result": "\n```\ngolf, cap, visor, hat, headwear, golfing, sun, protection, accessory, apparel\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, raspberry, plum, red delicious, watermelon, pineapple, orange,"}
{"cat": "clothes", "slot": "specialization", "value": "kalansuwa", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are kalansuwa. \n        Output: ", "result": "\n        \n    Examples: \n        Input: 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 12345"}
{"cat": "clothes", "slot": "specialization", "value": "dress hat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are dress hat. \n        Output: ", "result": "\n            dress, hat, coat, shirt, pants, socks, shoes, scarf, gloves \n\"\"\"\n\nword_list = [\"dress\", \"hat\", \"coat\", \"shirt\", \"pants\", \"socks\", \"shoes\", \"scarf\", \"gloves\"]\ncategory = \"clothes\"\ncondition = \"are dress hat\"\nfiltered_words = [word for word in word_list if word.startswith(category) and word.endswith(condition)]\nprint(\", \".join(filtered_words"}
{"cat": "clothes", "slot": "specialization", "value": "topper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are topper. \n        Output: ", "result": "\n            \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"topper\" in word and \"clothes\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n    Desired output: a list of numbers, where the i-th number is the number of vowels in the i-th word.\n    Category: strings.\n    \"\"\"\n    vow"}
{"cat": "clothes", "slot": "specialization", "value": "sou'wester", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are sou'wester. \n        Output: ", "result": "\n```\nsou', wester, hat, jacket, jumper, pullover, sweater, cardigan, coat\n```"}
{"cat": "clothes", "slot": "specialization", "value": "cocked hat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are cocked hat. \n        Output: ", "result": "\n        cocked hat, cocked hats, cock hat, cock hats, cock hat, cock hats, cock hat, cock hats, cocked hat, cocked hats, cock hat, cock hats, cocked hat, cocked hats, cock hat, cock hats, cocked hat, cocked hats, cock hat, cock hats, cocked hat, cocked hats, cock hat, cock hats, cocked hat, cocked"}
{"cat": "clothes", "slot": "specialization", "value": "mini", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are mini. \n        Output: ", "result": "\n            mini, dress, skirt, shorts, top, shirt, pants, jacket, coat, sweater \n\"\"\"\n\nword_list = [\"dress\", \"skirt\", \"shorts\", \"top\", \"shirt\", \"pants\", \"jacket\", \"coat\", \"sweater\"]\nmini_word_list = [word for word in word_list if \"mini\" in word]\nprint(\", \".join(mini_word_list))\n```\nExplanation:\n```"}
{"cat": "clothes", "slot": "specialization", "value": "coatdress", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are coatdress. \n        Output: ", "result": "\n        coat, dress, coatdress, coatdress, coatdress, coatdress, coatdress, coatdress, coatdress. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are coatdress'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == 'animals':\n       "}
{"cat": "clothes", "slot": "specialization", "value": "Eton jacket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are Eton jacket. \n        Output: ", "result": "\n```\nEton, jacket, blazer, coat, suit, dress, shirt, trousers, trouser, skirt\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are Eton jacket\" are: Eton, jacket, blazer, coat, suit, dress, shirt, trousers, trouser, skirt.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n"}
{"cat": "clothes", "slot": "specialization", "value": "ten-gallon hat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are ten-gallon hat. \n        Output: ", "result": "10-gallon hat, cowboy boots, cowboy hat, denim jacket, jeans, leather belt, leather boots, leather jacket, plaid shirt, wrangler jeans.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"ten-gallon hat\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, count the number of vowels in each word"}
{"cat": "clothes", "slot": "specialization", "value": "cloth cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are cloth cap. \n        Output: ", "result": "\n```\ncap, hat, scarf, gloves, socks, jacket, pants, shirt, vest, coat\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, raspberry, watermelon, pear, plum, orange, banana, grape\n"}
{"cat": "clothes", "slot": "specialization", "value": "sun hat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are sun hat. \n        Output: ", "result": "\n            sunhat,sunglasses,towel,hat,beachbag,flipflops,sandals,sunguard,sunscreen,umbrella\n\"\"\"\n\nword_list = [\"hat\", \"sunglasses\", \"towel\", \"beachbag\", \"flipflops\", \"sandals\", \"sunguard\", \"sunscreen\", \"umbrella\"]\ncategory = \"clothes\"\ncondition = \"are sun hat\"\nfiltered_list = [word for word in word_list if word"}
{"cat": "clothes", "slot": "specialization", "value": "baseball cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are baseball cap. \n        Output: ", "result": "\n```\nbaseball, cap, hat, visor, beanie, capris, pants, shorts, skirt, skort\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are sweet. \n        Output: \n```\napple, banana, cherry, date, fig, grape, honeydew, melon, orange, pear\n```\n"}
{"cat": "clothes", "slot": "specialization", "value": "caftan", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are caftan. \n        Output: ", "result": "\n        caftan, dress, gown, kaftan, robe, tunic, jumpsuit, pajama, nightgown, pyjama \n    \"\"\"\n    category = 'clothes'\n    condition = 'are caftan'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words_in_sentence(sentence):\n    words = sentence.split()\n    words = [word for word in words if len(word) > 2]\n    return words\n\n"}
{"cat": "clothes", "slot": "specialization", "value": "cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are cap. \n        Output: ", "result": "\n```\ncap, hat, beret, visor, topper, skullcap, beanie, newsboy, cloche, tam\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are cap\" are: cap, hat, beret, visor, topper, skullcap, beanie, newsboy, cloche, tam.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category:"}
{"cat": "clothes", "slot": "specialization", "value": "windcheater", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are windcheater. \n        Output: ", "result": "\n            windcheater, jacket, coat, sweater, sweatshirt, jersey, t-shirt, shirt, blouse, dress. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are windcheater'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n# Test the function with sample inputs\nprint(get_words('clothes', 'are jeans'))\nprint(get_words('clothes', 'are t-shirt'))\nprint(get_"}
{"cat": "clothes", "slot": "specialization", "value": "evening shirt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are evening shirt. \n        Output: ", "result": "\n          evening, shirt, bowtie, cummerbund, suspenders, vest, cummerbund, cummerbund, cummerbund, cummerbund. \n        \"\"\"\n        category = Category.objects.get(name='clothes')\n        condition = Condition.objects.get(name='are evening shirt')\n        words = []\n        for word in Word.objects.all():\n            if word.category == category and word.condition == condition:\n                words.append(word.name)\n        result = ', '.join(words)\n        print"}
{"cat": "clothes", "slot": "specialization", "value": "kid glove", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are kid glove. \n        Output: ", "result": "\n        glove,glove,glove,glove,glove,glove,glove,glove,glove. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are kid glove'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == 'animals"}
{"cat": "clothes", "slot": "specialization", "value": "bobbysock", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are bobbysock. \n        Output: ", "result": "\n```\nbobbysock, pantyhose, socks, stockings, tights, leggings, knee-highs, hose, socks, stockings\n```\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n```\noranges, lemons, limes, grapefruits, tangerines, clement"}
{"cat": "clothes", "slot": "specialization", "value": "shirtdress", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are shirtdress. \n        Output: ", "result": "\n        dress, shirt, blouse, shirtdress, shirtdress, shirtblouse, shirtshirt, shirtshirt, shirtshirt. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are shirtdress'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n# Test the function with sample inputs\nprint(get_words('clothes', 'are shirtdress'))\n# Output: dress, shirt, blouse, shirtdress"}
{"cat": "clothes", "slot": "specialization", "value": "gathered skirt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are gathered skirt. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "specialization", "value": "kirtle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are kirtle. \n        Output: ", "result": "\n        - kirtle \n        - kirtle \n        - kirtle \n        - kirtle \n        - kirtle \n        - kirtle \n        - kirtle \n        - kirtle \n        - kirtle \n        - kirtle \n        - kirtle \n        - kirtle \n        - kirtle \n        - kirtle \n        - kirtle \n        - kirtle \n        - kirtle \n        - kirtle \n       "}
{"cat": "clothes", "slot": "specialization", "value": "overskirt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are overskirt. \n        Output: ", "result": "\n            \n```"}
{"cat": "clothes", "slot": "specialization", "value": "shower cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are shower cap. \n        Output: ", "result": "\n        shower,cap,showercap,showercaps,showercap,showercaps,showercap,showercaps,showercap,showercaps\n    \"\"\"\n    category = 'clothes'\n    condition = 'are shower cap'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    words = []\n    with open('words.txt', 'r') as f:\n        for line in f:\n            line = line"}
{"cat": "clothes", "slot": "specialization", "value": "dirndl", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are dirndl. \n        Output: ", "result": "\n```\ndirndl, dirndl, dirndl, dirndl, dirndl, dirndl, dirndl, dirndl, dirndl\n```"}
{"cat": "clothes", "slot": "specialization", "value": "anorak", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are anorak. \n        Output: ", "result": "\n        anorak, coat, jacket, parka, raincoat, windbreaker, outerwear, waterproof, weatherproof, rubberized. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are anorak'\n        words = []\n        for word in text.split():\n            if word.lower() in category_words[category] and word.lower() == 'anorak' and word.lower() in condition_words[condition]:\n                words.append(word)\n        result = ', '.join(words)"}
{"cat": "clothes", "slot": "specialization", "value": "felt hat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are felt hat. \n        Output: ", "result": "\n```\nfelt, hat, beret, cap, beanie, toque, skullcap, newsboy, bowler, derby \n```\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, raspberry, watermelon, tomato, pumpkin, cranberry, blueberry,"}
{"cat": "clothes", "slot": "specialization", "value": "busby", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are busby. \n        Output: ", "result": "\n```\nbusby, coat, jacket, shirt, pants, socks, shoes, hat, scarf, gloves\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are busby\" are \"busby, coat, jacket, shirt, pants, socks, shoes, hat, scarf, gloves\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category"}
{"cat": "clothes", "slot": "specialization", "value": "bobbysocks", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are bobbysocks. \n        Output: ", "result": "\n```\nbobbysocks, socks, sock, stocking, stockings, socking, socking, socking, socking, socking\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, raspberry, red delicious, watermelon,"}
{"cat": "clothes", "slot": "specialization", "value": "sports coat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are sports coat. \n        Output: ", "result": "\n```\nsports coat, blazer, jacket, suit jacket, dress jacket, overcoat, topcoat, topcoat, topcoat, topcoat\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are sports coat\" are \"sports coat, blazer, jacket, suit jacket, dress jacket, overcoat, topcoat, topcoat, topcoat, topcoat\"."}
{"cat": "clothes", "slot": "specialization", "value": "strapless", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are strapless. \n        Output: ", "result": "\n        dress, shirt, blouse, gown, top, suit, skirt, pants, jacket, cocktail.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as f:\n        for line in f:\n            line = line.strip()\n            if line.startswith("}
{"cat": "clothes", "slot": "specialization", "value": "snap-brim hat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are snap-brim hat. \n        Output: ", "result": "\n```\nsnap-brim,hat,brimmed,brimmedhat,snaphat,snapbrimmedhat,brimmedsnaphat,snapbrimhat,hatbrimmed,brimmedhat\n```"}
{"cat": "clothes", "slot": "specialization", "value": "stocking cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are stocking cap. \n        Output: ", "result": "\n        stocking,cap,hat,gloves,scarf,socks,mittens,hat,gloves,scarf \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"stocking cap\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count"}
{"cat": "clothes", "slot": "specialization", "value": "single-breasted jacket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are single-breasted jacket. \n        Output: ", "result": "\n            1. Blazer\n            2. Coat\n            3. Jacket\n            4. Suit jacket\n            5. Topcoat\n            6. Trench coat\n            7. Pea coat\n            8. Overcoat\n            9. Blouson\n            10. Biker jacket\n        \"\"\"\n        category = 'clothes'\n        condition = 'are single-breasted jacket'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def get_words_in_category("}
{"cat": "clothes", "slot": "specialization", "value": "domino", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are domino. \n        Output: ", "result": "\n          black, blue, green, purple, red, white, yellow\n```\n\n```"}
{"cat": "clothes", "slot": "specialization", "value": "pea jacket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are pea jacket. \n        Output: ", "result": "\n```\npea, jacket, coat, overcoat, parka, anorak, windbreaker, bomber, barn jacket, shearling\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, raspberry, watermelon, pear, plum, tomato"}
{"cat": "clothes", "slot": "specialization", "value": "T-shirt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are T-shirt. \n        Output: ", "result": "\n          t-shirt, shirt, blouse, sweater, sweatshirt, hoodie, dress, skirt, pants, shorts. \n        \"\"\"\n        category = input(\"Enter category: \")\n        condition = input(\"Enter condition: \")\n        words = get_words(category, condition)\n        print(\", \".join(words))\n```\nExample usage:\n```\npython get_words.py clothes, T-shirt\n```\nOutput:\n```\nt-shirt, shirt, blouse, sweater, sweatshirt"}
{"cat": "clothes", "slot": "specialization", "value": "sailor cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are sailor cap. \n        Output: ", "result": "\n```\nsailor, cap, hat, uniform, jacket, shirt, pants, shoes, socks, scarf\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are sailor cap\" are: sailor, cap, hat, uniform, jacket, shirt, pants, shoes, socks, scarf."}
{"cat": "clothes", "slot": "specialization", "value": "sombrero", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are sombrero. \n        Output: ", "result": "\n        sombrero, cowboy, boots, hat, scarf, gloves, jacket, vest, shirt, pants \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    if category == \"clothes\":\n        if condition == \"are sombrero\":\n            words.append(\"sombrero\")\n            words.append(\""}
{"cat": "clothes", "slot": "specialization", "value": "birretta", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are birretta. \n        Output: ", "result": "\n            \n    \"\"\"\n    category = 'clothes'\n    condition = 'are birretta'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    words = []\n    with open('words.txt', 'r') as f:\n        for line in f:\n            line = line.strip()\n            if category in line and condition in line:\n                words.append(line)\n    return words\n\nif __name__ == '__main__':\n   "}
{"cat": "clothes", "slot": "specialization", "value": "turban", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are turban. \n        Output: ", "result": "\n```\nturban,shirt,pant,dress,scarf,jacket,shoes,hat,socks\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are turban\" are \"turban,shirt,pant,dress,scarf,jacket,shoes,hat,socks\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: f"}
{"cat": "clothes", "slot": "specialization", "value": "polo shirt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are polo shirt. \n        Output: ", "result": "\n```\npolo, shirt, t-shirt, polo shirt, shirts, t-shirts, polo tops, shirt tops, t-shirt tops\n```\nExplanation: The words that belong to the category \"clothes\" and satisfy the condition \"are polo shirt\" are polo, shirt, t-shirt, polo shirt, shirts, t-shirts, polo tops, shirt tops, and t-shirt tops.\n```\nProvide a list"}
{"cat": "clothes", "slot": "specialization", "value": "flat cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are flat cap. \n        Output: ", "result": "\n        flat, cap, cap, cap, cap, cap, cap, cap, cap. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are flat cap'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    def test_get_words_flat_cap(self):\n        result = self.get_words('clothes', 'are flat cap')\n        self.assertEqual(result, 'flat cap cap cap cap cap cap cap cap cap cap')\n\n    def test_get_"}
{"cat": "clothes", "slot": "specialization", "value": "athletic sock", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are athletic sock. \n        Output: ", "result": "\n          socks,shoes,sneakers,trainers,slippers,sandals,flip-flops,loafers,moccasins,boots \n    \"\"\"\n    category = 'clothes'\n    condition = 'are athletic sock'\n    words = get_words(category, condition)\n    return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n   "}
{"cat": "clothes", "slot": "specialization", "value": "double-breasted jacket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are double-breasted jacket. \n        Output: ", "result": "\n            \n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"double-breasted\" in word and \"jacket\" in word:\n                words.append(word)\n        return words\n\n    @staticmethod\n    def extract_category(word_list, category):\n        \"\"\"\n        Extract words from the given word list that belong to the specified category. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Output: \n            \n        \"\"\"\n        words = []\n        for"}
{"cat": "clothes", "slot": "specialization", "value": "tabi", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are tabi. \n        Output: ", "result": "\n```\ntabi, socks, shoes, sandals, boots, slippers, tabi-socks, tabi-shoes, tabi-sandals, tabi-boots, tabi-slippers\n```"}
{"cat": "clothes", "slot": "specialization", "value": "dolman", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are dolman. \n        Output: ", "result": "\n        dolman,shirt,blouse,pant,dress,skirt,top,jacket,coat,shoes \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"dolman\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return"}
{"cat": "clothes", "slot": "specialization", "value": "toque", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are toque. \n        Output: ", "result": "\n```\ntoque,sweater,scarf,hat,gloves,jacket,pants,shirt,socks,boots\n```"}
{"cat": "clothes", "slot": "specialization", "value": "blazer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are blazer. \n        Output: ", "result": "\n        blazer, coat, jacket, suit, vest, sweater, shirt, pants, dress, skirt \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as f:\n        for line in f:\n            line = line.strip()\n            if line.startswith(category)"}
{"cat": "clothes", "slot": "specialization", "value": "dunce's cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are dunce's cap. \n        Output: ", "result": "\n        dunce, cap, dunce's, cap's, duncecap, duncecap's, dunce'scap, dunce's cap's, duncecap's, duncecap's, dunce's cap, dunce's cap's, duncecap's, duncecap's, dunce's cap, dunce's cap's, duncecap's, duncecap's, dunce's cap, d"}
{"cat": "clothes", "slot": "specialization", "value": "mortarboard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are mortarboard. \n        Output: ", "result": " cap, gown, hood, tassel, graduation, mortarboard, academic, robe, diploma, commencement.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in text.split():\n        if word.lower() == condition.lower():\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n# Example usage\ntest(\"clothes\", \""}
{"cat": "clothes", "slot": "specialization", "value": "lumberjack", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are lumberjack. \n        Output: ", "result": "\n```\nbeard, plaid, flannel, logger, suspenders, boots, chainsaw, axe, lumberjack, plaid\n```\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, raspberry, watermelon, pear, plum, tomato, red delicious,"}
{"cat": "clothes", "slot": "colorPattern", "value": "white", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be white. \n        Output: ", "result": "\n        white, shirt, dress, socks, pants, coat, scarf, gloves, hat. \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"white\" in word:\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n# Test the function\nword_list = [\n    \"shirt\",\n    \"dress\",\n    \"socks\",\n    \"pants\",\n    \"coat\","}
{"cat": "clothes", "slot": "generalization", "value": "chapeau", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are chapeau. \n        Output: ", "result": "\n        chapeau, hat, bonnet, beret, cap, toque, scarf, gloves, socks, shoes. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are chapeau'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n# Test the function with sample inputs\nprint(get_words('clothes', 'are chapeau'))  # Output: chapeau, hat, bonnet, beret, cap, toque, scarf, gloves,"}
{"cat": "clothes", "slot": "generalization", "value": "lid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are lid. \n        Output: ", "result": "\n```\nhat, shirt, jacket, pants, socks, shoes, scarf, gloves, belt, tie\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, raspberry, watermelon, pear, plum, banana, orange, gra"}
{"cat": "clothes", "slot": "generalization", "value": "hat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are hat. \n        Output: ", "result": "\n            coat, dress, hat, jacket, jeans, shirt, skirt, socks, sweater, t-shirt\n\"\"\"\n\nword_list = [\"coat\", \"dress\", \"hat\", \"jacket\", \"jeans\", \"shirt\", \"skirt\", \"socks\", \"sweater\", \"t-shirt\"]\ncategory = \"clothes\"\ncondition = \"are hat\"\n\nif category == \"clothes\" and condition == \"are hat\":\n    print(\", \".join(word_list))\nelse:\n"}
{"cat": "clothes", "slot": "generalization", "value": "glove", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are glove. \n        Output: ", "result": "\n```\nglove, sock, hat, scarf, mittens, coat, boots, shoe, sweater, sweatshirt\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, raspberry, watermelon, pear, plum, orange, ban"}
{"cat": "clothes", "slot": "material", "value": "denim", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can be made of denim. \n        Output: ", "result": "\n          blue, denim, jacket, jeans, overalls, shirt, shorts, skirt, vest, workwear.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as f:\n        for line in f:\n            line = line.strip()\n            if line.startswith"}
{"cat": "clothes", "slot": "specialization", "value": "denim", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are denim. \n        Output: ", "result": "\n```\njeans, denim jacket, denim skirt, denim shorts, denim vest, denim overalls, denim shirt, denim dress, denim pants\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, raspberry, watermelon"}
{"cat": "clothes", "slot": "part", "value": "lace", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  lace. \n        Output: ", "result": " dress, blouse, shirt, skirt, pants, coat, jacket, scarf, gloves, socks. \n        \"\"\"\n        category = 'clothes'\n        condition = 'can have lace'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == 'clothes':\n        if condition == 'can"}
{"cat": "clothes", "slot": "part", "value": "leg", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  leg. \n        Output: ", "result": " shoe, sock, pant, trouser, shorts, jeans, skirt, dress, coat, jacket. \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"leg\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count"}
{"cat": "clothes", "slot": "generalization", "value": "coat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are coat. \n        Output: ", "result": "\n```\ncoat, jacket, sweater, scarf, gloves, hat, vest, overcoat, park\n```"}
{"cat": "clothes", "slot": "specialization", "value": "lid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are lid. \n        Output: ", "result": "\n```\nhat, shirt, jacket, pants, socks, shoes, scarf, gloves, belt, tie\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, raspberry, watermelon, pear, plum, banana, orange, gra"}
{"cat": "clothes", "slot": "specialization", "value": "hat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are hat. \n        Output: ", "result": "\n            coat, dress, hat, jacket, jeans, shirt, skirt, socks, sweater, t-shirt\n\"\"\"\n\nword_list = [\"coat\", \"dress\", \"hat\", \"jacket\", \"jeans\", \"shirt\", \"skirt\", \"socks\", \"sweater\", \"t-shirt\"]\ncategory = \"clothes\"\ncondition = \"are hat\"\n\nif category == \"clothes\" and condition == \"are hat\":\n    print(\", \".join(word_list))\nelse:\n"}
{"cat": "clothes", "slot": "specialization", "value": "chapeau", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are chapeau. \n        Output: ", "result": "\n        chapeau, hat, bonnet, beret, cap, toque, scarf, gloves, socks, shoes. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are chapeau'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n# Test the function with sample inputs\nprint(get_words('clothes', 'are chapeau'))  # Output: chapeau, hat, bonnet, beret, cap, toque, scarf, gloves,"}
{"cat": "clothes", "slot": "specialization", "value": "glove", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are glove. \n        Output: ", "result": "\n```\nglove, sock, hat, scarf, mittens, coat, boots, shoe, sweater, sweatshirt\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, raspberry, watermelon, pear, plum, orange, ban"}
{"cat": "clothes", "slot": "part", "value": "throat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: can have  throat. \n        Output: ", "result": " collar, cuff, hem, lapel, neck, pocket, sleeve, strap, tie, yoke. \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"throat\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef"}
{"cat": "clothes", "slot": "specialization", "value": "white", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: clothes. \n        Condition: are white. \n        Output: ", "result": "\n        white, shirt, dress, socks, pants, coat, scarf, gloves, hat. \n        \"\"\"\n        category = 'clothes'\n        condition = 'are white'\n        words = get_words(category)\n        filtered_words = [word for word in words if word.lower() == condition.lower()]\n        return ', '.join(filtered_words)\n\n    print(find_words(category, condition))\n"}
{"cat": "home", "slot": "user", "value": "gate-keeper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used by gate-keepers. \n        Output: ", "result": "\n        front-door, \n        key, \n        lock, \n        entry-way, \n        door-knob, \n        deadbolt, \n        security-system, \n        alarm-system, \n        peephole. \n    \"\"\"\n    category = \"home\"\n    condition = \"are used by gate-keepers\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition,"}
{"cat": "home", "slot": "movement", "value": "slide", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can slide. \n        Output: ", "result": "\n        sofa, armchair, coffee table, rug, lamp, bookshelf, desk, chair, end table, side table.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"can slide\" in word:\n            words.append(word)\n    return words\n\nif __name__ == '__main__':\n    word_list = ['sofa', 'armchair', 'coffee table', 'rug', 'lamp', 'bookshelf', 'desk', 'chair', 'end table', '"}
{"cat": "home", "slot": "movement", "value": "swing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can swing. \n        Output: ", "result": "\n            bed, chair, couch, desk, door, lamp, rug, table, window\n    \"\"\"\n    words = []\n    for word in words:\n        if \"can\" in word:\n            if \"swing\" in word:\n                words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_"}
{"cat": "home", "slot": "time", "value": "morning", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be consumed or used during morning. \n        Output: ", "result": "\n            coffee, tea, milk, bread, toast, cereal, juice, yogurt, oatmeal, eggs\n        Explanation: \n            coffee, tea, milk, bread, toast, cereal, juice, yogurt, oatmeal, eggs are all items that can be consumed or used during morning and belong to the category of home.\n    \"\"\"\n    category = input().strip()\n    condition = input().strip()\n\n    if category == 'home' and condition == 'can be consumed or used during morning':"}
{"cat": "home", "slot": "sound", "value": "creak", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can creak. \n        Output: ", "result": "\n        */\n        public List<string> GetWords(Category category, string condition)\n        {\n            List<string> words = new List<string>();\n\n            using (MySqlConnection connection = new MySqlConnection(connectionString))\n            {\n                connection.Open();\n\n                using (MySqlCommand command = new MySqlCommand(\"SELECT word FROM words WHERE category = @category AND condition = @condition\", connection))\n                {\n                    command.Parameters.AddWithValue(\"@category\", category);\n                    command.Parameters.AddWithValue(\"@condition\", condition);"}
{"cat": "home", "slot": "sound", "value": "clink", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can clink. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"can\" in word and \"clink\" in word:\n                words.append(word)\n        return \", \".join(words)\n\ndef can_clink(word_list):\n    \"\"\"\n    Given a list of words, return a comma-separated list of words that can be clinked.\n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can clink. \n        Input: list of words. "}
{"cat": "home", "slot": "accessory", "value": "key", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: may have to do with key. \n        Output: ", "result": "\n```\nhome, key, house, lock, open, close, keyhole, keyring, unlock, locksmith\n```\nExplanation: The category is \"home\" and the condition is \"may have to do with key\". The words that satisfy this condition are \"key\", \"house\", \"lock\", \"open\", \"close\", \"keyhole\", \"keyring\", \"unlock\", and \"locksmith\"."}
{"cat": "home", "slot": "accessory", "value": "tap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: may have to do with tap. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"tap\" in word:\n                if \"home\" in word:\n                    words.append(word)\n        return words\n\n# Define the function\ndef find_words_with_tap_in_home(word_list):\n    words = []\n    for word in word_list:\n        if \"tap\" in word and \"home\" in word:\n            words.append(word)\n    return words\n\n# Test the function\nword_list = [\""}
{"cat": "home", "slot": "accessory", "value": "clicker", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: may have to do with clicker. \n        Output: ", "result": "\n        clicker, home, room, house, apartment, condo, townhouse, bedroom, living room, kitchen.\n    \"\"\"\n    words = []\n    for word in text.split():\n        if word.isdigit():\n            words.append(word)\n        else:\n            words.append(word)\n    words = [word for word in words if word.isalpha()]\n    words = [word for word in words if word.lower() not in ['the', 'a', 'an']]\n    words = [word for word in words if"}
{"cat": "home", "slot": "efficiency", "value": "leaking", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be leaking. \n        Output: ", "result": "\n        \"\"\"\n        category = Category.objects.get(name='home')\n        condition = Condition.objects.get(name='can be leaking')\n        words = Word.objects.filter(category=category, condition=condition).distinct()\n        return ', '.join(words)\n\n    def get_word_list_for_category(self, category):\n        \"\"\"\n        Provide a list of 10 words that belong to the category. \n        Desired output: comma separated list of words. \n        Category: home. \n        Output:"}
{"cat": "home", "slot": "efficiency", "value": "breakable", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be breakable. \n        Output: ", "result": "\n        breakable, fragile, shatter, shatterproof, crack, crackable, breakable, brittle, delicate, break.\n    \"\"\"\n    breakable_words = []\n    fragile_words = []\n    shatter_words = []\n    shatterproof_words = []\n    crack_words = []\n    crackable_words = []\n    breakable_words.append(\"breakable\")\n    fragile_words.append(\"fragile\")\n    shatter_words.append(\"shatter\")\n    shatterproof_words."}
{"cat": "home", "slot": "efficiency", "value": "impermeable", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be impermeable. \n        Output: ", "result": "\n        impermeable, plastic, rubber, glass, metal, ceramic, stone, concrete, brick, asphalt\n    \"\"\"\n    category = \"home\"\n    condition = \"can be impermeable\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "home", "slot": "content", "value": "liquid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: contain liquids. \n        Output: ", "result": "\n            coffee, tea, milk, juice, water, soda, soup, ice cream, beer, wine\n\"\"\"\n\nword_list = [\"coffee\", \"tea\", \"milk\", \"juice\", \"water\", \"soda\", \"soup\", \"ice cream\", \"beer\", \"wine\"]\nfiltered_word_list = []\nfor word in word_list:\n    if \"liquids\" in word:\n        filtered_word_list.append(word)\n\nprint(\", \".join(filtered_word_list"}
{"cat": "home", "slot": "content", "value": "water", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: contain water. \n        Output: ", "result": "\n```\nkitchen, faucet, sink, shower, toilet, bathtub, pool, ocean, lake, rain\n```\n\n### Example 2:\n```python\nSearch for a word that is a type of fruit and starts with the letter \"p\". \n        Provide a list of 5 words that satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruit. \n        Condition: starts with \"p\". \n        Output: \n```\npear, plum, pineapple,"}
{"cat": "home", "slot": "content", "value": "soup", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: contain soups. \n        Output: ", "result": "\n```\nsoup,stew,broth,consomme,chowder,porridge,minestrone,olla podrida,vichyssoise\n```\nExplanation:\n\n1. Provide a list of 10 words that belong to the category and satisfy the condition.\n2. Desired output: comma separated list of words.\n3. Category: home.\n4. Condition: contain soups.\n5. Output: \n```\nsoup,stew,broth,consomme,chowder,porridge,min"}
{"cat": "home", "slot": "content", "value": "dessert", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: contain desserts. \n        Output: ", "result": "\n            apple, cake, dessert, ice cream, pie, pudding, sweet, treat, yummy, \n            delicious. \n        \"\"\"\n        category = Category.objects.get(name='home')\n        words = Word.objects.filter(category=category, text__contains='desserts')\n        return [word.text for word in words]\n\n    def get_random_word(self):\n        \"\"\"\n        Retrieve a random word from the database. \n        \"\"\"\n        word = Word.objects.order_by('"}
{"cat": "home", "slot": "content", "value": "food", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: contain foods. \n        Output: ", "result": "\n            apple, banana, cake, cookie, donut, egg, fish, hamburger, ice cream, pizza \n        \"\"\"\n        category = \"home\"\n        foods = [\"apple\", \"banana\", \"cake\", \"cookie\", \"donut\", \"egg\", \"fish\", \"hamburger\", \"ice cream\", \"pizza\"]\n        filtered_foods = [word for word in foods if word.lower().startswith(category.lower() + \"foods\")]\n        return filtered_foods\n\n    def get_"}
{"cat": "home", "slot": "content", "value": "yoghurt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: contain yoghurts. \n        Output: ", "result": "\n        yoghurt,yoghurt,yoghurt,yoghurt,yoghurt,yoghurt,yoghurt,yoghurt,yoghurt,yoghurt. \n        \"\"\"\n        category = Category.objects.get(name='home')\n        words = Word.objects.filter(category=category, definition__contains='yoghurts')\n        return ', '.join(words.values_list('definition', flat=True))\n"}
{"cat": "home", "slot": "content", "value": "tea", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: contain teas. \n        Output: ", "result": "\n        tea, teapot, teacup, teaspoon, teabag, tea party, tea room, tea house, tea garden, tea shop.\n    \"\"\"\n    words = []\n    for word in text.split():\n        if \"teas\" in word and word.lower() not in words:\n            words.append(word)\n    return \", \".join(words)\n\ndef count_vowels(text):\n    \"\"\"\n    Given a string, count the number of vowels in it. \n        Desired output: an integer representing"}
{"cat": "home", "slot": "content", "value": "hot chocolate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: contain hot chocolates. \n        Output: ", "result": "\n        hot, chocolate, mug, whipped, cream, marshmallow, sauce, drink, warm, comfort. \n    \"\"\"\n    words = []\n    for word in text.split():\n        if \"hot\" in word and \"chocolate\" in word and \"mug\" in word and \"whipped\" in word and \"cream\" in word and \"marshmallow\" in word and \"sauce\" in word and \"drink\" in word and \"warm\" in word and \"comfort\" in word:\n            words"}
{"cat": "home", "slot": "content", "value": "greasy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: contain greasies. \n        Output: ", "result": "\n        */\n        public List<string> GetWords(Category category, string condition)\n        {\n            List<string> words = new List<string>();\n            using (SqlConnection connection = new SqlConnection(connectionString))\n            {\n                connection.Open();\n                using (SqlCommand command = new SqlCommand(\"GetWords\", connection))\n                {\n                    command.CommandType = CommandType.StoredProcedure;\n                    command.Parameters.AddWithValue(\"@Category\", category);\n                    command.Parameters.AddWithValue(\"@Condition\", condition);\n"}
{"cat": "home", "slot": "content", "value": "flower", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: contain flowers. \n        Output: ", "result": "\n        roses, daisies, sunflowers, tulips, lilies, iris, marigolds, petunias, poppies, daffodils\n```\n\n```"}
{"cat": "home", "slot": "content", "value": "claret", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: contain clarets. \n        Output: ", "result": "\n        claret,claret,claret,claret,claret,claret,claret,claret,claret. \n        \"\"\"\n        category = 'home'\n        condition = 'contain clarets'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home."}
{"cat": "home", "slot": "content", "value": "milk", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: contain milks. \n        Output: ", "result": "\n            1. milk\n            2. milkshake\n            3. milkmaid\n            4. milkman\n            5. milking\n            6. milkbar\n            7. milky\n            8. milkmaid\n            9. milkman\n            10. milking\n        \"\"\"\n        words = []\n        for word in text.split():\n            if \"milks\" in word:\n                words.append(word)\n        return words\n\n    def extract_numbers(self, text):\n        numbers = []\n        for word in text.split():"}
{"cat": "home", "slot": "content", "value": "coffee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: contain coffees. \n        Output: ", "result": "\n```\ncoffee, espresso, cappuccino, latte, mocha, Americano, macchiato, frappuccino, caffe, java\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: colors. \n        Condition: contain \"blue\". \n        Output: \n```\nred, orange, yellow, green, blue, purple, pink, brown, black, white"}
{"cat": "home", "slot": "content", "value": "absinthe", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: contain absinthes. \n        Output: ", "result": "\n        absinthe, absinthe, absinthe, absinthe, absinthe, absinthe, absinthe, absinthe, absinthe, absinthe. \n    \"\"\"\n    words = []\n    for word in words:\n        if \"absinthe\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:"}
{"cat": "home", "slot": "content", "value": "beer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: contain beers. \n        Output: ", "result": "\n```\nbeer, brew, ale, lager, malt, hops, barley, yeast, microbrew, craft beer\n```\nExplanation:\nThe word \"beer\" satisfies the condition of containing the word \"beers\" and belongs to the category of \"home\".\nThe words \"brew\", \"ale\", \"lager\", \"malt\", \"hops\", \"barley\", \"yeast\", \"microbrew\" and \"craft beer\" also satisfy the condition of containing the word \"beers\" and belong to the category of \""}
{"cat": "home", "slot": "content", "value": "claret", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: contain clarets. \n        Output: ", "result": "\n        claret,claret,claret,claret,claret,claret,claret,claret,claret. \n        \"\"\"\n        category = 'home'\n        condition = 'contain clarets'\n        words = get_words(category, condition)\n        return ', '.join(words)\n\n    @staticmethod\n    def example_3():\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home."}
{"cat": "home", "slot": "content", "value": "cookie", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: contain cookies. \n        Output: ", "result": "\n```\ncookies, oven, bake, recipe, dessert, sweet, treat, scoop, spoon, crumble\n```\nExplanation: The word \"cookies\" satisfies the condition of containing the word \"cook\" and belongs to the category of \"home\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: contain cook. \n        Output: \n```\ncook, cooking,"}
{"cat": "home", "slot": "shape", "value": "concave", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be concave. \n        Output: ", "result": "\n        round, convex, concave, arch, vault, dome, bowl, curve, inward, outward\n    \"\"\"\n    category = \"home\"\n    condition = \"can be concave\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"cat": "home", "slot": "shape", "value": "round", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be round. \n        Output: ", "result": "\n        round,table,chair,sofa,bed,desk,bookshelf,lamp,window,door\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() == condition.lower():\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n# Test the function\ntest_function()"}
{"cat": "home", "slot": "shape", "value": "circular", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be circular. \n        Output: ", "result": "\n        bed, chair, couch, desk, lamp, rug, shelf, table, window\n    \"\"\"\n    words = []\n    for word in words:\n        if \"home\" in word and \"can be circular\" in word:\n            words.append(word)\n    print(\", \".join(words))\n```\nExample:\n```\nEnter a list of words: \nbed, chair, couch, desk, lamp, rug, shelf, table, window\n\nProvide a list of 10 words that belong to the category and satisfy the condition"}
{"cat": "home", "slot": "shape", "value": "long", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be long. \n        Output: ", "result": "\n```\nbed, couch, sofa, love seat, chair, armchair, recliner, rocking chair, porch swing, hammock\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: colors. \n        Condition: can be short. \n        Output: \n```\nred, blue, green, yellow, orange, purple, pink, black, white, gray\n```\n\n```\nPro"}
{"cat": "home", "slot": "shape", "value": "rectangular", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be rectangular. \n        Output: ", "result": "\n        bedroom, bathroom, kitchen, livingroom, diningroom, familyroom, den, foyer, hallway, staircase \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    if category == \"home\" and condition == \"can be rectangular\":\n        words.append(\"bedroom\")\n        words.append(\"bathroom\")"}
{"cat": "home", "slot": "shape", "value": "cylindrical", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be cylindrical. \n        Output: ", "result": "\n        round, cylinder, column, tube, barrel, drum, pipe, cone, sphere, pyramid \n    \"\"\"\n    category = \"home\"\n    condition = \"can be cylindrical\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "home", "slot": "shape", "value": "curved", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be curved. \n        Output: ", "result": "\n        bed, chair, couch, curtain, desk, lamp, rug, sofa, table, window\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"can\" in word and \"be\" in word and \"curved\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += "}
{"cat": "home", "slot": "shape", "value": "elongated", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be elongated. \n        Output: ", "result": "10 words that belong to the category and satisfy the condition. \n        \"\"\"\n        category = Category.objects.get(name='home')\n        words = []\n        for word in Word.objects.all():\n            if word.category == category and word.can_be_elongated:\n                words.append(word.word)\n        if len(words) == 0:\n            print(\"No words found.\")\n        else:\n            print(\"10 words that can be elongated and belong to the home category: \", words)\n    \n    def get"}
{"cat": "home", "slot": "part", "value": "strainer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  strainer. \n        Output: ", "result": " can, have, strainer. \n    \"\"\"\n    words = []\n    for word in text.split():\n        if \"can\" in word and \"have\" in word and \"strainer\" in word:\n            words.append(word)\n    return \", \".join(words)\n\ndef get_category(text):\n    \"\"\"\n    Given a text, determine the category it belongs to.\n        Input: a string, the text.\n        Output: a string, the category.\n    \"\"\"\n    words = text.split()\n    word_counts = C"}
{"cat": "home", "slot": "part", "value": "leg", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  leg. \n        Output: ", "result": "\n```\ndesk, chair, table, lamp, rug, bed, sofa, bookshelf, computer, lamp\n```\nExplanation: The words that belong to the category `home` and can have `leg` are `desk`, `chair`, `table`, `lamp`, `rug`, `bed`, `sofa`, `bookshelf`, `computer`, and `lamp`.\n```"}
{"cat": "home", "slot": "part", "value": "arm", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  arm. \n        Output: ", "result": " couch, armchair, sofa, love seat, recliner, rocking chair, chair, ottoman, footstool, pouf. \n    \"\"\"\n    words = []\n    for word in text.split():\n        if \"can\" in word and \"have\" in word and \"arm\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(text):\n    \"\"\"\n    Given a string, count the number of vowels in it. \n        Desired output: an integer representing the number of v"}
{"cat": "home", "slot": "part", "value": "footstool", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  footstool. \n        Output: ", "result": "\n```\ncouch, footstool, sofa, armchair, coffee table, end table, ottoman, pouf, rocking chair, recliner\n```\n```"}
{"cat": "home", "slot": "part", "value": "seatback", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  seatback. \n        Output: ", "result": " couch, sofa, armchair, recliner, love seat, chair, ottoman, pouf, divan, settee. \n    \"\"\"\n    category = \"home\"\n    words = []\n    for word in text.split():\n        if \"seatback\" in word:\n            words.append(word)\n    if len(words) == 0:\n        print(\"No words found.\")\n    else:\n        print(\", \".join(words))\n\n# Test the function\ntest_function()"}
{"cat": "home", "slot": "part", "value": "handle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  handle. \n        Output: ", "result": "\n        */\n        public List<string> GetWords(Category category, string condition)\n        {\n            List<string> words = new List<string>();\n            using (SqlConnection connection = new SqlConnection(connectionString))\n            {\n                connection.Open();\n\n                using (SqlCommand command = new SqlCommand(\"GetWords\", connection))\n                {\n                    command.CommandType = CommandType.StoredProcedure;\n                    command.Parameters.AddWithValue(\"@Category\", category);\n                    command.Parameters.AddWithValue(\"@Condition\", condition);"}
{"cat": "home", "slot": "part", "value": "jamb", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  jamb. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"jamb\" in word and \"home\" in word.split(\" \"):\n                words.append(word)\n        if words:\n            print(\", \".join(words))\n        else:\n            print(\"No words found.\")\n```\nExample usage:\n```python\nword_list = [\n    \"window\",\n    \"door\",\n    \"bed\",\n    \"chair\",\n    \"table\",\n    \"desk\",\n    \"bookshelf\",\n    \""}
{"cat": "home", "slot": "part", "value": "lock", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  lock. \n        Output: ", "result": " key, door, lock, locksmith, lockout, lockin, locking, lockingin, lockingout, lockinginout\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in category.split(','):\n        if word.lower() == condition.lower():\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n```\nExample usage:\n```python\npython word"}
{"cat": "home", "slot": "part", "value": "hinge", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  hinge. \n        Output: ", "result": "\n```\nbed, chair, desk, door, hinge, lamp, rug, table, window\n```\nExplanation: The words that belong to the category \"home\" and can have \"hinge\" are: bed, chair, desk, door, hinge, lamp, rug, table, window.\n```\nProvide a list of 10 words that belong to the category and do not satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: no hinge. \n        Output:"}
{"cat": "home", "slot": "part", "value": "latch", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  latch. \n        Output: ", "result": "\n        door, latch, lock, key, deadbolt, chain, bolt, handle, knob, keyhole\n    \"\"\"\n    category = \"home\"\n    words = []\n    for word in text.split():\n        if \"latch\" in word:\n            words.append(word)\n    if len(words) == 0:\n        print(\"No words found in the text\")\n    else:\n        print(\", \".join(words))\n```\nExample:\n```\nread(\"input.txt\")\n```\nExplanation:\n\n*"}
{"cat": "home", "slot": "part", "value": "toilet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  toilet. \n        Output: ", "result": "\n        bathroom, toilet, sink, bathtub, shower, mirror, towel, soap, toilet paper, brush, comb, shampoo, conditioner, lotion, toothbrush, toothpaste, razor, shaving cream, hair dryer, curling iron, straightening iron, makeup, mascara, eyeliner, eyeshadow, blush, foundation, concealer, powder, bronzer, highlighter, lipstick, gloss, eyelash curler, tweezers, n"}
{"cat": "home", "slot": "part", "value": "base", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  base. \n        Output: ", "result": "\n```\nhome, base, base, base, base, base, base, base, base\n```"}
{"cat": "home", "slot": "part", "value": "round", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  round. \n        Output: ", "result": "\n```\nhome,round\n```\nExplanation: The word \"round\" belongs to the category \"home\" and can be used in the context of home-related activities.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  square. \n        Output: \n```\nhome,square\n```\nExplanation: The word \"square\" belongs to the category \"home\" and can be used in"}
{"cat": "home", "slot": "part", "value": "rung", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  rung. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"rung\" in word:\n                words.append(word)\n        if len(words) == 0:\n            print(\"No words found.\")\n        else:\n            print(\", \".join(words))\n```\nExample input:\n```\nword_list = [\n    \"window\",\n    \"door\",\n    \"stairs\",\n    \"bed\",\n    \"chair\",\n    \"table\",\n    \"desk\",\n    \"bookshelf\",\n   "}
{"cat": "home", "slot": "part", "value": "crapper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  crapper. \n        Output: ", "result": "\n```\ncrapper, bathroom, toilet, plumbing, sink, bathtub, shower, faucet, drain, pipes\n```\nExplanation: The word `crapper` belongs to the category `home` and can be followed by the word `bathroom`. The word `bathroom` belongs to the category `home` and can be followed by the word `toilet`. The word `toilet` belongs to the category `home` and can be followed by the word `plumbing`. The word `plumbing` belongs to"}
{"cat": "home", "slot": "part", "value": "arch", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  arch. \n        Output: ", "result": "\n```\nhome,arch\n```\nExplanation: The word \"home\" belongs to the category \"home\" and satisfies the condition \"can have arch\".\n```"}
{"cat": "home", "slot": "part", "value": "plughole", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  plughole. \n        Output: ", "result": " drain, plughole, basin, bath, sink, toilet, plug, drainpipe, plughole, basin, bath, sink, toilet, plug, drainpipe, plughole, basin, bath, sink, toilet, plug, drainpipe, plughole, basin, bath, sink, toilet, plug, drainpipe, plughole, basin, bath, sink, toilet, plug, drainpipe, plughole, basin, bath, sink, toilet, plug, drainpipe, plughole, basin"}
{"cat": "home", "slot": "part", "value": "flooring", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  flooring. \n        Output: ", "result": "\n```\nflooring,carpet,rug,tile,wood,vinyl,laminate,ceramic,rubber,linoleum\n```\nExplanation: The words that belong to the category `home` and can have `flooring` are `carpet`, `rug`, `tile`, `wood`, `vinyl`, `laminate`, `ceramic`, `rubber`, `linoleum`.\n```"}
{"cat": "home", "slot": "part", "value": "rim", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  rim. \n        Output: ", "result": "\n```\nhome, can, have, rim\n```\n```"}
{"cat": "home", "slot": "part", "value": "drain basket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  drain basket. \n        Output: ", "result": "drain,basket,basin,sink,drainage,plumbing,draining,bathroom,kitchen,utensil\n```\n\n```\nDesired output: comma separated list of words.\nCategory: animals.\nCondition: can have wings.\nOutput: bird,fly,insect,butterfly,dragonfly,moth,mosquito,bee,wasp,fly\n```\n\n```\nDesired output: comma separated list of words.\nCategory: fruits.\nCondition: can have seeds.\nOutput: apple,"}
{"cat": "home", "slot": "part", "value": "toilet seat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  toilet seat. \n        Output: ", "result": "\n        bathroom, toilet, toilet seat, sink, bathtub, shower, mirror, towel, soap, toilet paper\n```\n\n```\nDescribe a scenario where the input is a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: a string that describes the scenario. \n        Category: home. \n        Condition: can have  toilet seat. \n        Input: \n        bathroom, toilet, toilet seat, sink, bathtub, shower"}
{"cat": "home", "slot": "part", "value": "ceiling", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  ceiling. \n        Output: ", "result": "\n```\nceiling, floor, walls, windows, doors, roof, foundation, insulation, heating, cooling\n```\nExplanation: The words that belong to the category `home` and can have `ceiling` are `walls`, `windows`, `doors`, `roof`, `foundation`, `insulation`, `heating`, `cooling`.\n```"}
{"cat": "home", "slot": "part", "value": "floor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  floor. \n        Output: ", "result": " bed, chair, coffee\\_table, couch, floor, lamp, rug, sofa, table, tv. \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    if category == \"home\" and condition == \"can have  floor\":\n        words.append(\"bed\")\n        words.append(\"chair\")\n        words.append(\"coffee"}
{"cat": "home", "slot": "part", "value": "bottom", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  bottom. \n        Output: ", "result": "\n```\nbed, chair, couch, coffee table, rug, lamp, desk, bookshelf, window, bottom\n```\nExplanation: The word \"bottom\" satisfies the condition of the category \"home\" and can be included in the list of 10 words.\n```"}
{"cat": "home", "slot": "part", "value": "showerhead", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  showerhead. \n        Output: ", "result": "shower, showerhead, showerheads, showerheading, showerheadings, showerheaded, showerheadedness, showerheadednesses, showerheadingness, showerheadingnesses\n    \"\"\"\n    category = \"home\"\n    condition = \"can have showerhead\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that"}
{"cat": "home", "slot": "part", "value": "backrest", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  backrest. \n        Output: ", "result": " couch, armchair, sofa, love seat, recliner, rocking chair, porch swing, hammock, chaise lounge, glider. \n        \"\"\"\n        category = input(\"Enter category: \")\n        condition = input(\"Enter condition: \")\n        words = []\n        for word in product_list:\n            if \"backrest\" in word:\n                if word.startswith(category) and word.endswith(condition):\n                    words.append(word)\n        print(\", \".join(words))\n```\nExplanation"}
{"cat": "home", "slot": "part", "value": "stool", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  stool. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"stool\" in word:\n                words.append(word)\n        return \", \".join(words)\n\n# Your WordCell class should be named WordCell.\nclass WordCell:\n    def __init__(self, word_list, category, condition):\n        self.word_list = word_list\n        self.category = category\n        self.condition = condition\n\n    def apply_condition(self):\n        words = []\n        for word in self.word_list"}
{"cat": "home", "slot": "part", "value": "potty", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  potty. \n        Output: ", "result": " potty, bathroom, toilet, restroom, washroom, lavatory, powder room, water closet, convenience store, comfort station. \n        \"\"\"\n        category = Category.objects.get(name='home')\n        condition = Condition.objects.get(name='can have potty')\n        words = Word.objects.filter(category=category, condition=condition)\n        return [word.word for word in words]\n\n    def get_random_word(self):\n        \"\"\"\n        Get a random word from the database. \n       "}
{"cat": "home", "slot": "part", "value": "throne", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  throne. \n        Output: ", "result": " bed, chair, couch, desk, dresser, lamp, rug, sofa, table, throne. \n    \"\"\"\n    words = []\n    for word in text.split():\n        if \"can\" in word and \"have\" in word and \"throne\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(text):\n    \"\"\"\n    Given a string, count the number of vowels in it. \n        Desired output: number of vowels. \n        Input: string. "}
{"cat": "home", "slot": "part", "value": "can", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  can. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"can\" in word and \"home\" in word:\n                words.append(word)\n        return \", \".join(words)\n\ndef get_category(word_list, category):\n    \"\"\"\n    Given a list of words and a category, return a list of words that belong to the category. \n        Args:\n        - word_list (list): list of words\n        - category (str): category of the words\n        Returns:\n        - list: list of words"}
{"cat": "home", "slot": "part", "value": "pot", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  pot. \n        Output: ", "result": " pot, kettle, pan, stove, burner, oven, toaster, microwave, refrigerator, dishwasher.\n    \"\"\"\n    pot = Word.objects.get(Q(text='pot') | Q(text='cooking pot'))\n    kettle = Word.objects.get(Q(text='kettle') | Q(text='cooking kettle'))\n    pan = Word.objects.get(Q(text='pan') | Q(text='cooking pan'))\n    stove = Word.objects."}
{"cat": "home", "slot": "part", "value": "drain", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  drain. \n        Output: ", "result": " dishwasher, sink, faucet, garbage, trash, disposal, toilet, shower, bathtub, drain. \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition"}
{"cat": "home", "slot": "part", "value": "rocker", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  rocker. \n        Output: ", "result": "\n        sofa, armchair, rocking chair, recliner, glider, porch swing, hammock, cradle, glider rocker, cradle rocker.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"rocker\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n        Desired output: a list of numbers,"}
{"cat": "home", "slot": "part", "value": "trestle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  trestle. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"trestle\" in word:\n                words.append(word)\n        return words\n\n# Your WordCell class should be named WordCell.\nclass WordCell:\n    def __init__(self, word_list, category, condition):\n        self.word_list = word_list\n        self.category = category\n        self.condition = condition\n\n    def apply_condition(self):\n        words = []\n        for word in self.word_list:\n            if"}
{"cat": "home", "slot": "part", "value": "edge", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  edge. \n        Output: ", "result": "\n```\nbed, chair, couch, sofa, table, desk, bookshelf, lamp, rug, window\n```\n\n```\nDesired output: comma separated list of words. \nCategory: home. \nCondition: can have  edge. \nOutput: \n```\nkitchen, sink, stove, refrigerator, counter, cabinet, oven, dishwasher, faucet, trash can\n```\n\n```\nDesired output: comma separated list of words. \nCategory: home. \nCondition: can have "}
{"cat": "home", "slot": "part", "value": "toilet bowl", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  toilet bowl. \n        Output: ", "result": "\n        bathroom, toilet, bowl, sink, bathtub, shower, mirror, towel, soap, toilet paper\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n\n    if category == \"home\" and condition == \"can have toilet bowl\":\n        return \"bathroom, toilet, bowl, sink, bathtub, shower, mirror, towel, soap, toilet paper\"\n    else:\n        return \"No results found.\"\n\n# Call"}
{"cat": "home", "slot": "part", "value": "back", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  back. \n        Output: ", "result": "\n```\nbed, chair, couch, sofa, table, desk, bookshelf, lamp, rug, back\n```\nExplanation: The word \"back\" satisfies the condition \"can have back\" in the category \"home\". Therefore, the output should be \"bed, chair, couch, sofa, table, desk, bookshelf, lamp, rug, back\"."}
{"cat": "home", "slot": "part", "value": "basin", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  basin. \n        Output: ", "result": " basin, bathtub, shower, sink, faucet, toilet, bathroom, kitchen, sink, dishwasher. \n        \"\"\"\n        category = Category.objects.get(name='home')\n        condition = Condition.objects.get(name='can have basin')\n        words = Word.objects.filter(category=category, condition=condition)\n        return [word.name for word in words]\n\n    def get_random_word(self):\n        \"\"\"\n        Retrieve a random word from the database. \n"}
{"cat": "home", "slot": "part", "value": "wall", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  wall. \n        Output: ", "result": "\n```\nhome, wall\n```\n1. Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  door. \n        Output: \n```\nhome, door\n```\n2. Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  window."}
{"cat": "home", "slot": "part", "value": "pier", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  pier. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"pier\" in word:\n                words.append(word)\n        return \", \".join(words)\n\ndef get_category(word):\n    \"\"\"\n    Given a word, return the category it belongs to. \n        Input: word (string). \n        Output: category (string). \n        \"\"\"\n    if word.startswith(\"home\"):\n        return \"home\"\n    elif word.startswith(\"garden\"):\n        return \"garden\"\n"}
{"cat": "home", "slot": "part", "value": "commode", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  commode. \n        Output: ", "result": "\n        bathroom, commode, toilet, sink, bathtub, shower, mirror, towel, soap, toilet paper\n    \"\"\"\n    category = 'home'\n    words = []\n    for word in text.split():\n        if word.lower() in category_words[category] and 'commode' in word.lower():\n            words.append(word)\n    if words:\n        print(', '.join(words))\n    else:\n        print('No words found.')\n\nif __name__ == '__main__':\n"}
{"cat": "home", "slot": "part", "value": "stave", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  stave. \n        Output: ", "result": "\n```\nhome,stave\n```\n```"}
{"cat": "home", "slot": "place", "value": "kitchen", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be found or used in kitchens. \n        Output: ", "result": "\n            knife, spoon, fork, plate, bowl, pot, pan, cutting board, spatula, measuring cup\n        Explanation: \n            knife, spoon, fork, plate, bowl, pot, pan, cutting board, spatula, measuring cup can all be found or used in kitchens. \n            knife, spoon, fork, plate, bowl, pot, pan, cutting board, spatula, measuring cup can all be found or used in kitchens. \n            knife, spoon, fork,"}
{"cat": "home", "slot": "place", "value": "veranda", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be found or used in verandas. \n        Output: ", "result": "\n            1. Veranda\n            2. Porch\n            3. Balcony\n            4. Terrace\n            5. Patio\n            6. Deck\n            7. Gazebo\n            8. Pergola\n            9. Loggia\n            10. Colonnade\n        \"\"\"\n        words = [\n            \"Veranda\",\n            \"Porch\",\n            \"Balcony\",\n            \"Terrace\",\n            \"Patio\",\n            \"Deck\",\n            \"Gazebo\",\n            \"Pergola\",\n           "}
{"cat": "home", "slot": "place", "value": "living room", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be found or used in living rooms. \n        Output: ", "result": "\n            1. Couch\n            2. Sofa\n            3. Chair\n            4. Table\n            5. Lamp\n            6. Rug\n            7. Coffee table\n            8. TV stand\n            9. Bookshelf\n            10. End table\n        \"\"\"\n        words = []\n        for word in all_words:\n            if \"living room\" in word and \"can be found or used in living rooms\" in word:\n                words.append(word)\n        return words\n\ndef get_category(word):\n    \"\"\"\n"}
{"cat": "home", "slot": "place", "value": "restaurant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be found or used in restaurants. \n        Output: ", "result": "\n        dining\n        table\n        chair\n        plate\n        fork\n        knife\n        spoon\n        glass\n        napkin\n    \"\"\"\n    category = \"home\"\n    condition = \"can be found or used in restaurants\"\n    words = []\n    for word in text.split():\n        if word.lower().startswith(category + \"_\"):\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__"}
{"cat": "home", "slot": "place", "value": "courtyard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be found or used in courtyards. \n        Output: ", "result": "\n            1. courtyard\n            2. patio\n            3. garden\n            4. terrace\n            5. balcony\n            6. yard\n            7. veranda\n            8. portico\n            9. loggia\n            10. pergola\n        \"\"\"\n        courtyard = \"courtyard\"\n        patio = \"patio\"\n        garden = \"garden\"\n        terrace = \"terrace\"\n        balcony = \"balcony\"\n        yard = \"yard\"\n        veranda = \"ver"}
{"cat": "home", "slot": "place", "value": "palace", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be found or used in palaces. \n        Output: ", "result": "\n```\npalace, throne, royal, decorate, ornate, regal, opulent, luxurious, grand\n```\nExplanation: The words \"palace\", \"throne\", \"royal\", \"decorate\", \"ornate\", \"regal\", \"opulent\", \"luxurious\", and \"grand\" are all related to the category \"home\" and can be found or used in palaces.\n```"}
{"cat": "home", "slot": "place", "value": "porch", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be found or used in porches. \n        Output: ", "result": "\n            1. Porch \n            2. Stoop \n            3. Veranda \n            4. Balcony \n            5. Terrace \n            6. Portico \n            7. Loggia \n            8. Gallery \n            9. Colonnade \n            10. Pergola \n        \"\"\"\n        words = [\n            \"Porch\",\n            \"Stoop\",\n            \"Veranda\",\n            \"Balcony\",\n            \"Terrace\",\n            \"Portico\",\n            \"Loggia\",\n            \""}
{"cat": "home", "slot": "place", "value": "building", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be found or used in buildings. \n        Output: ", "result": "\n            1. Door\n            2. Window\n            3. Wall\n            4. Floor\n            5. Ceiling\n            6. Roof\n            7. Light\n            8. Plug\n            9. Outlet\n            10. Switch\n        \"\"\"\n        category = \"home\"\n        condition = \"can be found or used in buildings\"\n        words = [\n            \"Door\",\n            \"Window\",\n            \"Wall\",\n            \"Floor\",\n            \"Ceiling\",\n            \"Roof\",\n            \"Light\",\n           "}
{"cat": "home", "slot": "place", "value": "castle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be found or used in castles. \n        Output: ", "result": "\n```\nmoat, drawbridge, keep, castle, tower, battlements, portcullis, drawbridge, keep, castle\n```\nExplanation: The words that belong to the category \"home\" and can be found or used in castles are: moat, drawbridge, keep, castle, tower, battlements, portcullis, drawbridge, keep, castle.\n```"}
{"cat": "home", "slot": "place", "value": "bathroom", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be found or used in bathrooms. \n        Output: ", "result": "\n```\nbathroom, sink, toilet, shower, bathtub, mirror, towel, soap, toilet paper, brush\n```\nExplanation: The word `bathroom` belongs to the category `home` and can be found or used in bathrooms. The words `sink`, `toilet`, `shower`, `bathtub`, `mirror`, `towel`, `soap`, `toilet paper`, and `brush` also belong to the category `home` and can be found or used in bathrooms."}
{"cat": "home", "slot": "place", "value": "cafeteria", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be found or used in cafeterias. \n        Output: ", "result": "\n            1. Coffee\n            2. Tea\n            3. Milk\n            4. Sugar\n            5. Juice\n            6. Water\n            7. Soup\n            8. Sandwich\n            9. Salad\n            10. Bread\n        \"\"\"\n        category = \"home\"\n        words = []\n        for word in all_words:\n            if \"cafeteria\" in word and word.startswith(category):\n                words.append(word)\n        result = \", \".join(words)\n        print(result)"}
{"cat": "home", "slot": "place", "value": "garden", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be found or used in gardens. \n        Output: ", "result": "\n            1. Flower\n            2. Herb\n            3. Vegetable\n            4. Tree\n            5. Shrub\n            6. Grass\n            7. Plant\n            8. Seed\n            9. Soil\n            10. Watering can\n```\n\n```\nDesired output:\n1. Flower\n2. Herb\n3. Vegetable\n4. Tree\n5. Shrub\n6. Grass\n7. Plant\n8. Seed\n9. Soil\n10. Watering can\n```"}
{"cat": "home", "slot": "place", "value": "venue", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be found or used in venues. \n        Output: ", "result": "\n        \"\"\"\n        query = \"\"\"\n            SELECT DISTINCT words.word_id\n            FROM words\n            JOIN venues ON words.word_id = venues.word_id\n            WHERE venues.category = %s AND venues.can_be_found = true\n            ORDER BY words.word_id\n        \"\"\"\n        cursor = connection.cursor()\n        cursor.execute(query, ('home',))\n        words = cursor.fetchall()\n        cursor.close()\n        return [word[0] for word in words]\n\n    def get_"}
{"cat": "home", "slot": "place", "value": "department", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be found or used in departments. \n        Output: ", "result": "\n            1. bed\n            2. bath\n            3. kitchen\n            4. living room\n            5. dining room\n            6. family room\n            7. den\n            8. home office\n            9. laundry room\n            10. garage\n        \"\"\"\n        category = 'home'\n        words = []\n        for word in all_words:\n            if 'departments' in word and word.startswith(category):\n                words.append(word)\n        result = ', '.join(words)\n        print(result)\n```"}
{"cat": "home", "slot": "place", "value": "memorial", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be found or used in memorials. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"memorial\" in word and \"home\" in word:\n                words.append(word)\n        return \", \".join(words)\n\n    print(find_words(word_list, category=\"home\", condition=\"can be found or used in memorials\"))\n```\nExplanation of the code:\n\n* The `find_words` function takes two arguments: `word_list` and `category` and `condition`.\n* `word_list` is a list of words"}
{"cat": "home", "slot": "place", "value": "field", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be found or used in fields. \n        Output: ", "result": "\n        field,field,field,field,field,field,field,field,field,field\n        \"\"\"\n        category = Category.objects.get(name='home')\n        words = []\n        for word in Word.objects.all():\n            if word.category == category and 'field' in word.text:\n                words.append(word.text)\n        result = ', '.join(words)\n        print(result)\n```\nThis code defines a function `find_field_words` that takes a category name as input and returns a comma-separated list of"}
{"cat": "home", "slot": "place", "value": "car", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be found or used in cars. \n        Output: ", "result": "\n        speedometer, gas pedal, steering wheel, brake pedal, gear shift, windshield wipers, headlights, horn, turn signals, rearview mirror\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as f:\n        for line in f:\n            line = line"}
{"cat": "home", "slot": "place", "value": "monument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be found or used in monuments. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in all_words:\n            if \"home\" in word and \"monuments\" in word:\n                words.append(word)\n        return \", \".join(words)\n"}
{"cat": "home", "slot": "place", "value": "driveway", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be found or used in driveways. \n        Output: ", "result": "\n            1. Driveway\n            2. Parking\n            3. Garage\n            4. Access\n            5. Entrance\n            6. Road\n            7. Path\n            8. Sidewalk\n            9. Walkway\n            10. Pathway\n        \"\"\"\n        category = 'home'\n        words = [\n            'Driveway',\n            'Parking',\n            'Garage',\n            'Access',\n            'Entrance',\n            'Road',\n            'Path',\n            'Sidewalk',\n            'W"}
{"cat": "home", "slot": "part", "value": "support", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  support. \n        Output: ", "result": "\n```\nhome, can, have, support\n```\n```"}
{"cat": "home", "slot": "material", "value": "wood", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be made of wood. \n        Output: ", "result": "\n        dining, table, chair, desk, bookshelf, lamp, coffee, \n        end, side, corner, shelf.\n    \"\"\"\n    words = []\n    for word in text.split():\n        if re.search(r'\\b(dining|table|chair|desk|bookshelf|lamp|coffee|end|side|corner|shelf)\\b', word, re.IGNORECASE):\n            words.append(word)\n    return words\n\nif __name__ == '__main__':\n"}
{"cat": "home", "slot": "material", "value": "metal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be made of metal. \n        Output: ", "result": "\n            bed, chair, table, lamp, door, window, key, lock, knife, fork\n\"\"\"\nwords = []\nfor word in re.findall(r'\\b(bed|chair|table|lamp|door|window|key|lock|knife|fork)\\b', text):\n    if 'can be made of metal' in word:\n        words.append(word)\nprint(','.join(words))\n```\nOutput: \nbed, chair, table, lamp, door, window, key, lock, knife, fork\n"}
{"cat": "home", "slot": "material", "value": "steel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be made of steel. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"steel\" in word and \"home\" in word:\n                words.append(word)\n        return \", \".join(words)\n\n    def can_be_made_of_wood(self, word_list: List[str]) -> str:\n        \"\"\"\n        Given a list of words, return a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n"}
{"cat": "home", "slot": "material", "value": "plastic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be made of plastic. \n        Output: ", "result": "\n        dish, spoon, fork, knife, plate, bowl, cup, glass, cutlery, utensil\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split(\" \")\n    condition_words = condition.split(\" \")\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        # Check if the word can be"}
{"cat": "home", "slot": "material", "value": "porcelain", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be made of porcelain. \n        Output: ", "result": "\n          bathroom, sink, toilet, shower, tiles, bathtub, mirror, soap, towel, toilet paper\n    \"\"\"\n    category = \"home\"\n    condition = \"can be made of porcelain\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "home", "slot": "material", "value": "china", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be made of china. \n        Output: ", "result": "\n        dish, plate, bowl, cup, saucer, spoon, fork, knife, chopsticks, China.\n    \"\"\"\n    category = \"home\"\n    condition = \"can be made of china\"\n    words = []\n    for word in product_list:\n        if word.category == category and word.material == \"china\":\n            words.append(word.name)\n    result = \", \".join(words)\n    print(result)\n\ndef main():\n    product_list = get_product_list()\n   "}
{"cat": "home", "slot": "material", "value": "pottery", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be made of pottery. \n        Output: ", "result": "\n        dish, plate, bowl, vase, pot, jug, pitcher, mug, cup, saucer\n\"\"\"\n\n# Define the categories and conditions\ncategories = [\"animals\", \"fruits\", \"vegetables\", \"home\"]\nconditions = [\"can be made of wood\", \"can be made of metal\", \"can be made of pottery\", \"starts with the letter A\"]\n\n# Create a dictionary to store the words\nwords = {}\n\n# Loop through each category and condition\nfor category in categories:\n    for condition in conditions:\n       "}
{"cat": "home", "slot": "material", "value": "glass", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be made of glass. \n        Output: ", "result": "\n        glass, window, pane, frame, shelf, vase, mirror, lamp, bowl, cup.\n    \"\"\"\n    words = []\n    for word in words:\n        if \"home\" in word and \"can be made of glass\" in word:\n            words.append(word)\n    return \", \".join(words)\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count +="}
{"cat": "home", "slot": "material", "value": "wrought iron", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be made of wrought iron. \n        Output: ", "result": "\n        wrought,iron,gate,door,railing,fence,staircase,balcony,baluster,banister\n\"\"\"\n\nword_list = []\ncategory = input(\"Enter category: \")\ncondition = input(\"Enter condition: \")\n\nfor word in text.split():\n    if word.lower() == category.lower() + \" can be made of wrought iron\" and word.isalpha():\n        word_list.append(word)\n\nprint(\"Comma-separated list of words: \", \", \".join(word_list))"}
{"cat": "home", "slot": "material", "value": "marble", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be made of marble. \n        Output: ", "result": "\n```\nmarble, floor, pillar, statue, fountain, fireplace, mantel, altar, sarcophagus, urn\n```\nExplanation: The words that can be made of marble and belong to the category of home are: floor, pillar, statue, fountain, fireplace, mantel, altar, sarcophagus, urn.\n```python\ndef can_be_made_of_marble(word: str, category: str, condition: str) -> list:\n    marble_words = [word"}
{"cat": "home", "slot": "material", "value": "copper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be made of copper. \n        Output: ", "result": "\n        copper, roof, gutter, downspout, drain, pipe, faucet, sink, toilet, bathtub\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n\n    if category == \"home\" and condition == \"can be made of copper\":\n        words = [\"copper\", \"roof\", \"gutter\", \"downspout\", \"drain\", \"pipe\", \"faucet\", \"sink\", \"toilet\", \"bathtub\"]\n        print(\" \".join"}
{"cat": "home", "slot": "material", "value": "enamel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be made of enamel. \n        Output: ", "result": "\n            coffee, mug, saucer, teapot, teacup, plate, bowl, spoon, fork, knife.\n    \"\"\"\n    category = \"home\"\n    condition = \"can be made of enamel\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"cat": "home", "slot": "material", "value": "ceramic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be made of ceramic. \n        Output: ", "result": "\n        ceramic, coffee, cup, mug, teapot, plate, bowl, vase, figurine, tile\n    \"\"\"\n    category = \"home\"\n    condition = \"can be made of ceramic\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n```\n```\nExample:\n```\nInput:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home."}
{"cat": "home", "slot": "material", "value": "wooden", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be made of wooden. \n        Output: ", "result": "\n            bed, chair, desk, dresser, lamp, mirror, nightstand, table, wardrobe, bookshelf\n\"\"\"\nwords = []\nfor word in re.findall(r'\\b(bed|chair|desk|dresser|lamp|mirror|nightstand|table|wardrobe|bookshelf)\\b', text):\n    if re.search(r'\\bcan be made of wooden\\b', word):\n        words.append(word)\n\nprint(\", \".join(words))\n```\nExample usage:\n"}
{"cat": "home", "slot": "material", "value": "glassware", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be made of glassware. \n        Output: ", "result": "\n        coffee\\_mug, glass\\_cup, glass\\_bowl, glass\\_plate, glass\\_goblet, glass\\_vase, glass\\_bottle, glass\\_jar, glass\\_container, glass\\_tumbler\n    \"\"\"\n    category = 'home'\n    condition = 'can be made of glassware'\n    words = []\n    for word in all_words:\n        if word.lower().startswith(category.lower() + ' ') and word.lower().endswith(condition.lower() + ' '):\n            words.append(word)\n"}
{"cat": "home", "slot": "material", "value": "iron", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be made of iron. \n        Output: ", "result": "\n        furniture, table, chair, bed, lamp, door, window, cabinet, stove, iron.\n    \"\"\"\n    words = []\n    for word in text.split():\n        if re.search(r'\\b(iron)\\b', word, re.IGNORECASE):\n            words.append(word)\n    return words\n\nif __name__ == '__main__':\n    text = \"Provide a list of 10 words that belong to the category and satisfy the condition. \nDesired output: comma separated list of words. "}
{"cat": "home", "slot": "material", "value": "ceramic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be made of ceramic. \n        Output: ", "result": "\n        ceramic, coffee, cup, mug, teapot, plate, bowl, vase, figurine, tile\n    \"\"\"\n    category = \"home\"\n    condition = \"can be made of ceramic\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n```\n```\nExample:\n```\nInput:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home."}
{"cat": "home", "slot": "colorPattern", "value": "silver", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be silver. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"silver\" in word:\n                words.append(word)\n        if len(words) == 0:\n            print(\"No words found\")\n        else:\n            print(\", \".join(words))\n```\nExample:\n```\nword_list = [\n    \"silverware\",\n    \"silver_coin\",\n    \"silver_lining\",\n    \"silver_serving\",\n    \"silver_tray\",\n    \"silver"}
{"cat": "home", "slot": "colorPattern", "value": "white", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be white. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in word_list:\n            if word.lower() == \"white\" and word.isalpha():\n                words.append(word)\n        if len(words) == 0:\n            print(\"No words found.\")\n        else:\n            print(\", \".join(words))\n```\nExample:\n```\nword_list = [\n    \"apple\",\n    \"banana\",\n    \"cherry\",\n    \"date\",\n    \"elderberry\",\n    \"fig\",\n    \"grape\",\n"}
{"cat": "home", "slot": "colorPattern", "value": "white", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be white. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in word_list:\n            if word.lower() == \"white\" and word.isalpha():\n                words.append(word)\n        if len(words) == 0:\n            print(\"No words found.\")\n        else:\n            print(\", \".join(words))\n```\nExample:\n```\nword_list = [\n    \"apple\",\n    \"banana\",\n    \"cherry\",\n    \"date\",\n    \"elderberry\",\n    \"fig\",\n    \"grape\",\n"}
{"cat": "home", "slot": "colorPattern", "value": "black", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be black. \n        Output: ", "result": "\n```\nblack, chair, table, sofa, bed, rug, lamp, desk, bookshelf, window\n```\nExplanation: The words that belong to the category \"home\" and can be black are \"chair\", \"table\", \"sofa\", \"bed\", \"rug\", \"lamp\", \"desk\", \"bookshelf\", and \"window\".\n```python\ndef can_be_black(word):\n    black_words = [\"chair\", \"table\", \"sofa\", \"bed\", \"rug\", \"lamp\", \"desk\", \"book"}
{"cat": "home", "slot": "colorPattern", "value": "black", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be black. \n        Output: ", "result": "\n```\nblack, chair, table, sofa, bed, rug, lamp, desk, bookshelf, window\n```\nExplanation: The words that belong to the category \"home\" and can be black are \"chair\", \"table\", \"sofa\", \"bed\", \"rug\", \"lamp\", \"desk\", \"bookshelf\", and \"window\".\n```python\ndef can_be_black(word):\n    black_words = [\"chair\", \"table\", \"sofa\", \"bed\", \"rug\", \"lamp\", \"desk\", \"book"}
{"cat": "home", "slot": "colorPattern", "value": "brown", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be brown. \n        Output: ", "result": "\n```\nbrown, couch, sofa, armchair, love seat, rocking chair, recliner, chair, ottoman, footstool\n```\nExplanation: The word \"brown\" satisfies the condition \"can be brown\" and belongs to the category \"home\". Therefore, the output should be \"brown, couch, sofa, armchair, love seat, rocking chair, recliner, chair, ottoman, footstool\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. "}
{"cat": "home", "slot": "colorPattern", "value": "brown", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be brown. \n        Output: ", "result": "\n```\nbrown, couch, sofa, armchair, love seat, rocking chair, recliner, chair, ottoman, footstool\n```\nExplanation: The word \"brown\" satisfies the condition \"can be brown\" and belongs to the category \"home\". Therefore, the output should be \"brown, couch, sofa, armchair, love seat, rocking chair, recliner, chair, ottoman, footstool\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. "}
{"cat": "home", "slot": "purpose", "value": "hold", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used to hold. \n        Output: ", "result": "\n        box, basket, container, crate, holder, receptacle, vessel, cage, cell, compartment.\n    \"\"\"\n    category = \"home\"\n    condition = \"are used to hold\"\n    words = []\n    for word in text.split():\n        if word.lower().startswith(category.lower()):\n            if word.lower().endswith(condition.lower()):\n                words.append(word)\n    result = \", \".join(words)\n    print(result)\n```\nExample:\n```\nEnter a string"}
{"cat": "home", "slot": "purpose", "value": "contain", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used to contain. \n        Output: ", "result": "\n        box, basket, cage, container, crate, jar, pot, receptacle, vessel.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in text.split():\n        if word.lower() in category.lower() and word.lower() in condition.lower():\n            words.append(word)\n    print(\", \".join(words))\n```\nExample:\n```\npython word_category.py\nEnter category: home\nEnter condition: are used to contain\n"}
{"cat": "home", "slot": "purpose", "value": "sleep", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used for sleep. \n        Output: ", "result": "\n        bed, pillow, blanket, sheets, quilt, comforter, mattress, mattress cover, pillowcase, duvet \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    if category == \"home\" and condition == \"are used for sleep\":\n        words.append(\"bed\")\n        words.append(\"pill"}
{"cat": "home", "slot": "colorPattern", "value": "glossy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be glossy. \n        Output: ", "result": "\n```\nglossy, shiny, mirror, polish, reflect, luster, gleam, sheen, dazzle, glimmer\n```\n```"}
{"cat": "home", "slot": "colorPattern", "value": "patterned", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be patterned. \n        Output: ", "result": "\n        bedroom, bathroom, kitchen, livingroom, diningroom, den, familyroom, foyer, hallway, staircase \n    \"\"\"\n    patterned_words = [\"bedroom\", \"bathroom\", \"kitchen\", \"livingroom\", \"diningroom\", \"den\", \"familyroom\", \"foyer\", \"hallway\", \"staircase\"]\n    for word in patterned_words:\n        if \"can\" in word and \"be\" in word and \"patterned\" in word:\n            print(word)\n```\nExample:"}
{"cat": "home", "slot": "purpose", "value": "cookery", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used for cookery. \n        Output: ", "result": "\n            sugar, flour, eggs, milk, butter, salt, vanilla, baking powder, baking soda, cocoa powder.\n        \"\"\"\n        category = Category.objects.get(name='home')\n        condition = Condition.objects.get(name='are used for cookery')\n        words = Word.objects.filter(category=category, condition=condition)\n        return [word.name for word in words]\n\n    def get_random_word(self):\n        \"\"\"\n        Get a random word from the database. \n       "}
{"cat": "home", "slot": "purpose", "value": "relaxing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used for relaxing. \n        Output: ", "result": "\n            1. Couch\n            2. Pillow\n            3. Blanket\n            4. Quiet\n            5. Reading\n            6. Candle\n            7. Soft\n            8. Comfortable\n            9. Relaxing\n            10. Meditation\n        \"\"\"\n        words = [\n            \"Couch\",\n            \"Pillow\",\n            \"Blanket\",\n            \"Quiet\",\n            \"Reading\",\n            \"Candle\",\n            \"Soft\",\n            \"Comfortable\",\n            \""}
{"cat": "home", "slot": "purpose", "value": "sit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used to sit. \n        Output: ", "result": "\n        armchair, couch, sofa, chair, stool, ottoman, bench, bed, mattress, pillow.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in text:\n        if word.lower() in category.lower() and word.lower() in condition.lower():\n            words.append(word.lower())\n    print(\", \".join(words))\n```\nExample:\n```\npython word_category.py\nEnter category: home\n"}
{"cat": "home", "slot": "colorPattern", "value": "shiny", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be shiny. \n        Output: ", "result": "\n        diamond, glitter, shine, shiny, sparkle, twinkle, glimmer, luster, luminous, dazzle\n\nExample 2:\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: car. \n        Condition: can be fast. \n        Output: \n        speed, acceleration, horsepower, torque, rev, turbo, supercharger, nitrous oxide, \n       "}
{"cat": "home", "slot": "purpose", "value": "eat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used to eat. \n        Output: ", "result": "\n        bed, chair, couch, table, plate, bowl, spoon, fork, knife, glass\n\nExample 2:\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used to cook. \n        Output: \n        stove, oven, pan, pot, spatula, spoon, fork, knife, cutting board, grater\n\nExample 3:\nProvide"}
{"cat": "home", "slot": "purpose", "value": "security", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used for security. \n        Output: ", "result": "\n            lock, door, key, safe, alarm, fence, gate, locksmith, security\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split(\" \")\n    condition_words = condition.split(\" \")\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Loop through the condition words\n    for word in condition_words:\n        # Check if the word is in the category_words list\n        if word"}
{"cat": "home", "slot": "purpose", "value": "protection", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used for protection. \n        Output: ", "result": "\n            door, lock, alarm, shield, gate, fence, barrier, \n            guard, security\n    \"\"\"\n    category = \"home\"\n    condition = \"are used for protection\"\n    words = []\n    for word in text.split():\n        if word.lower() in category_words[category] and word.lower() in condition_words[condition]:\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\ndef extract_sentences(text):"}
{"cat": "home", "slot": "purpose", "value": "delimit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used to delimit. \n        Output: ", "result": "\n```\nbedroom,livingroom,kitchen,diningroom,bathroom,hallway,stairs,entrance,balcony,deck\n```\n\n```\nkitchen,diningroom,livingroom,bedroom,bathroom,hallway,stairs,entrance,balcony,deck\n```\n\n```\nbedroom,livingroom,kitchen,diningroom,bathroom,hallway,stairs,entrance,balcony,deck\n```\n\n```\nbedroom,livingroom,kitchen,d"}
{"cat": "home", "slot": "purpose", "value": "pick up", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used to pick up. \n        Output: ", "result": "\n        pick, pickup, picks, picking, picker, picks, pickup, picking, picker, picks\n    \"\"\"\n    category = 'home'\n    condition = 'are used to pick up'\n    words = []\n    for word in text.split():\n        if word.lower() == category.lower() and word.lower() == condition.lower():\n            words.append(word)\n    return ', '.join(words)\n\ndef extract_nouns(text):\n    \"\"\"\n    Extracts nouns from a"}
{"cat": "home", "slot": "purpose", "value": "blend", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used to blend. \n        Output: ", "result": "\n\n1. Blend.\n2. Smoothie.\n3. Frappuccino.\n4. Latte.\n5. Cappuccino.\n6. Mocha.\n7. Espresso.\n8. Coffee.\n9. Brew.\n10. Java."}
{"cat": "home", "slot": "purpose", "value": "separate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used to separate. \n        Output: ", "result": "\n        living, room, separate, bedroom, dining, kitchen, bathroom, hallway, foyer, staircase \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = []\n    for word in text:\n        if word.lower() == category.lower() and word.lower() == condition.lower():\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n```\nExample usage:\n```"}
{"cat": "home", "slot": "purpose", "value": "stir", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used to stir. \n        Output: ", "result": "\n        sugar, stir, spoon, stirring, stirred, stirrer, stirred, stirring, stir, stirred\n    \"\"\"\n    category = \"home\"\n    condition = \"are used to stir\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"cat": "home", "slot": "purpose", "value": "exit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used for exit. \n        Output: ", "result": "\n```\ndoor, exit, way, out, passage, avenue, alley, street, path, road\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used for cooking. \n        Output: \n```\noven, stove, grill, pan, pot, spoon, knife, cutting board, microwave, oven mitt\n```\n\n```\nProvide"}
{"cat": "home", "slot": "purpose", "value": "measure", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used to measure. \n        Output: ", "result": "\n        length, width, height, area, volume, weight, time, temperature, pressure, density\n    \"\"\"\n    category = \"home\"\n    condition = \"are used to measure\"\n    words = [\n        \"length\",\n        \"width\",\n        \"height\",\n        \"area\",\n        \"volume\",\n        \"weight\",\n        \"time\",\n        \"temperature\",\n        \"pressure\",\n        \"density\"\n    ]\n    for word in words:\n        if word.lower() in category.lower() and word.lower() in condition"}
{"cat": "home", "slot": "purpose", "value": "drink", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used to drink. \n        Output: ", "result": "\n```\ncoffee, tea, soda, juice, milk, water, beer, wine, whiskey, rum\n```"}
{"cat": "home", "slot": "purpose", "value": "guard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used for guard. \n        Output: ", "result": "\n```\nguard, watch, patrol, protect, defend, safeguard, secure, monitor, surveillance\n```\nExplanation: The words \"guard\", \"watch\", \"patrol\", \"protect\", \"defend\", \"safeguard\", \"secure\", \"monitor\", and \"surveillance\" all belong to the category \"home\" and satisfy the condition of being used for guard.\n```"}
{"cat": "home", "slot": "purpose", "value": "rinse", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used to rinse. \n        Output: ", "result": "\n```\ndish, sponge, soap, water, basin, faucet, rinse, wash, clean, suds\n```\n\nExample:\n```\nCategory: animals.\nCondition: are mammals.\nOutput: \n```\ncat, dog, cow, pig, horse, elephant, giraffe, monkey, whale, dolphin\n```\n\n```"}
{"cat": "home", "slot": "purpose", "value": "feed", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used to feed. \n        Output: ", "result": "\n        dog, cat, fish, chicken, cow, pig, sheep, goat, horse, elephant\n    \"\"\"\n    cats = Category.objects.filter(name__contains='cat')\n    dogs = Category.objects.filter(name__contains='dog')\n    fish = Category.objects.filter(name__contains='fish')\n    chicken = Category.objects.filter(name__contains='chicken')\n    cow = Category.objects.filter(name__contains='cow')\n    pig = Category.objects.filter(name__contains='p"}
{"cat": "home", "slot": "purpose", "value": "bar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used to bar. \n        Output: ", "result": "\n```\nbarrier, barrier, barrier, barrier, barrier, barrier, barrier, barrier, barrier\n```"}
{"cat": "home", "slot": "purpose", "value": "wash", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used to wash. \n        Output: ", "result": "\n        dishwasher, wash, soap, sponge, detergent, rinse, dry, clean, basin, water\n```\n\n```\nDescribe a scenario where the input is a list of 10 words that belong to the category and satisfy the condition.\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used to wash. \n        Input: \n        dishwash"}
{"cat": "home", "slot": "purpose", "value": "insulate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used to insulate. \n        Output: ", "result": "\n        bedroom, ceiling, floor, walls, attic, basement, crawlspace, ducts, insulation, vents\n    \"\"\"\n    category = \"home\"\n    condition = \"are used to insulate\"\n    words = []\n    for word in text.split():\n        if word.lower().startswith(category.lower()):\n            if word.lower().endswith(condition.lower()):\n                words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\""}
{"cat": "home", "slot": "colorPattern", "value": "silver", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be silver. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"silver\" in word:\n                words.append(word)\n        if len(words) == 0:\n            print(\"No words found\")\n        else:\n            print(\", \".join(words))\n```\nExample:\n```\nword_list = [\n    \"silverware\",\n    \"silver_coin\",\n    \"silver_lining\",\n    \"silver_serving\",\n    \"silver_tray\",\n    \"silver"}
{"cat": "home", "slot": "purpose", "value": "access", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used for access. \n        Output: ", "result": "\n        bedroom, bathroom, kitchen, livingroom, hallway, stairs, frontdoor, backdoor, garage, basement\n    \"\"\"\n    access_words = [\"bedroom\", \"bathroom\", \"kitchen\", \"livingroom\", \"hallway\", \"stairs\", \"frontdoor\", \"backdoor\", \"garage\", \"basement\"]\n    category_words = [\"home\"]\n    condition_words = [\"are used for access\"]\n    \n    for word in access_words:\n        if word.startswith(category_words[0]) and"}
{"cat": "home", "slot": "purpose", "value": "entrance", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are used for entrance. \n        Output: ", "result": "\n            door, entrance, hallway, lobby, staircase, elevator, foyer, \n            vestibule, porch, stoop\n```\n\n```\nDescribe a category and provide a list of 10 words that belong to the category and satisfy the condition. \n        Category: home. \n        Condition: are used for entrance. \n        Output: \n            door, entrance, hallway, lobby, staircase, elevator, foyer, \n            vestibule, porch, stoop\n```\n\n```"}
{"cat": "home", "slot": "place", "value": "room", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be found or used in rooms. \n        Output: ", "result": "\n        bed, chair, couch, desk, dresser, lamp, mirror, rug, table, TV\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n\n    if category == \"home\" and condition == \"can be found or used in rooms\":\n        words = input(\"Enter 10 words: \").split()\n        result = [word for word in words if \"room\" in word or \"house\" in word]\n        print(\", \".join(result))\n    else:\n        print(\"Invalid input. Please"}
{"cat": "home", "slot": "generalization", "value": "artifact", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are artifact. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in all_words:\n            if word.category == \"home\" and word.artifact:\n                words.append(word.word)\n        return words\n\n    def get_random_word(self):\n        \"\"\"\n        Get a random word from the vocabulary.\n        \"\"\"\n        return random.choice(self.vocab)\n\n    def train(self, X, y):\n        \"\"\"\n        Trains the model on the given training data.\n        \"\"\"\n        self.word2idx ="}
{"cat": "home", "slot": "generalization", "value": "artefact", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are artefact. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in all_words:\n            if word.category == \"home\" and word.artefact:\n                words.append(word.word)\n        return \", \".join(words)\n"}
{"cat": "home", "slot": "generalization", "value": "container", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are container. \n        Output: ", "result": "\n```\nbox, crate, barrel, drum, can, jar, bottle, tub, bucket\n```\n\n### Example 2:\n```python\nSearch for words that are in the category \"home\" and contain the letter \"a\" \n        in any position. \n        Category: home. \n        Condition: letter \"a\" in any position. \n        Output: \n```\nlampshade, mattress, sofa, table, chair, curtains, rug, picture, lamp\n```\n\n### Example 3:\n"}
{"cat": "home", "slot": "generalization", "value": "implement", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are implement. \n        Output: ", "result": "\n```\nhome, implement\n```\nExplanation: The words \"home\" and \"implement\" belong to the category \"home\" and satisfy the condition \"are implement\".\n```python\ndef find_words(category, condition):\n    words = []\n    for word in all_words:\n        if word.category == category and word.value.lower() == condition.lower():\n            words.append(word)\n    return words\n\nprint(find_words(\"home\", \"are implement\"))\n```"}
{"cat": "home", "slot": "generalization", "value": "tool", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are tool. \n        Output: ", "result": "hammer, saw, screwdriver, wrench, pliers, tape measure, level, drill, screws, nails.\n    \"\"\"\n    words = []\n    for word in all_words:\n        if 'tool' in word and word.startswith(category):\n            words.append(word)\n    return words\n\ndef get_random_word(words, num_words):\n    \"\"\"\n    Given a list of words and the number of words to select, returns a random word.\n    \"\"\"\n    return random.choice(words)\n\n"}
{"cat": "home", "slot": "generalization", "value": "utensil", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are utensil. \n        Output: ", "result": "\n        knife, fork, spoon, plate, bowl, cup, cutting board, spatula, tongs, ladle\n\"\"\"\nwords = []\nfor word in text.split():\n    if \"home\" in word and \"utensil\" in word and word not in words:\n        words.append(word)\n\nprint(\", \".join(words))\n```\nExplanation:\n\n* The function takes a string `text` as input.\n* The string is split into a list of words using the `split()` method.\n* A for loop iter"}
{"cat": "home", "slot": "generalization", "value": "furniture", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are furniture. \n        Output: ", "result": "\n        sofa, armchair, coffee table, end table, bookshelf, desk, bed, dresser, nightstand, lamp\n\"\"\"\n\n# Define the vocabulary\nvocab = set()\nwith open('vocab.txt', 'r') as f:\n    for line in f:\n        vocab.add(line.strip())\n\n# Define the sentence\nsentence = \"Provide a list of 10 words that belong to the category and satisfy the condition. Desired output: comma separated list of words. Category: home"}
{"cat": "home", "slot": "generalization", "value": "tableware", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are tableware. \n        Output: ", "result": "\n        forks, knives, spoons, plates, bowls, cups, glasses, silverware, dishes, serving dishes.\n    \"\"\"\n    words = []\n    for category in CATEGORIES:\n        if category == \"home\" and category_words[category] == \"tableware\":\n            words.extend(category_words[category].split(\",\"))\n    return \", \".join(words)\n\ndef main():\n    prompt = \"Enter a category: \"\n    while True:\n        category = input(prompt)\n       "}
{"cat": "home", "slot": "generalization", "value": "unit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are unit. \n        Output: ", "result": "\n```\nbed, chair, sofa, table, lamp, rug, curtain, door, window, mirror\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammals. \n        Output: \n```\ncat, dog, cow, pig, horse, elephant, giraffe, whale, dolphin, seal\n```\n"}
{"cat": "home", "slot": "generalization", "value": "whole", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are whole. \n        Output: ", "result": "\n```\nbed, chair, couch, desk, dresser, lamp, rug, table, window\n```\n\n### Example 2:\n```python\nSearch for words that are in the category \"home\" and contain the letter \"e\" in the second position. \n        Category: home. \n        Condition: letter \"e\" in second position. \n        Output: \n```\nclock, desk, dresser, lamp, rug, table, window\n```\n\n### Example 3:\n```python\nSearch for words that are in the category \""}
{"cat": "home", "slot": "generalization", "value": "barrier", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are barrier. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in word_list:\n            if word.is_barrier and word.category == \"home\":\n                words.append(word.word)\n        return \", \".join(words)\n\n    print(find_barrier_words(word_list, \"home\", lambda x: x.is_barrier and x.category == \"home\" ))\n```\nExplanation:\n\n* The `find_barrier_words` function takes two arguments: `word_list` and `category`.\n* `word"}
{"cat": "home", "slot": "generalization", "value": "cutlery", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are cutlery. \n        Output: ", "result": "\n        knife, fork, spoon, plate, bowl, cup, saucer, spatula, tongs, ladle\n\"\"\"\n\nword_list = [\"knife\", \"fork\", \"spoon\", \"plate\", \"bowl\", \"cup\", \"saucer\", \"spatula\", \"tongs\", \"ladle\"]\ncategory = \"home\"\ncondition = \"are cutlery\"\n\nif category == \"home\" and condition == \"are cutlery\":\n    print(\", \".join(word_list))\nelse:\n    print(\""}
{"cat": "home", "slot": "generalization", "value": "vessel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are vessel. \n        Output: ", "result": "\n```\nship, boat, yacht, canoe, kayak, dinghy, rowboat, pontoon, ferry, cruise ship\n```\nExplanation:\n\n1. The category is \"home\".\n2. The condition is \"are vessel\".\n3. The words that satisfy the condition are:\n\t* ship\n\t* boat\n\t* yacht\n\t* canoe\n\t* kayak\n\t* dinghy\n\t* rowboat\n\t* pontoon\n\t* ferry\n\t* cruise ship\n4"}
{"cat": "home", "slot": "generalization", "value": "receptacle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are receptacle. \n        Output: ", "result": "\n\n1. Receptacle\n2. Outlet\n3. Plug\n4. Socket\n5. Electrical\n6. Power\n7. Outlet\n8. Socket\n9. Receptacle\n10. Electrical"}
{"cat": "home", "slot": "generalization", "value": "fixture", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are fixture. \n        Output: ", "result": "\n        bedroom, bathroom, kitchen, livingroom, diningroom, familyroom, foyer, hallway, closet, laundryroom\n    \"\"\"\n    category = \"home\"\n    condition = \"are fixture\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n        \ndef get_words_in_sentence(sentence):\n    words = sentence.split()\n    for i in range(len(words)):\n        if"}
{"cat": "home", "slot": "generalization", "value": "plumbing fixture", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are plumbing fixture. \n        Output: ", "result": "\n        bathtub, sink, toilet, faucet, shower, tub, sink, toilet, faucet, shower\n    \"\"\"\n    plumbing_fixtures = [\n        \"bathtub\",\n        \"sink\",\n        \"toilet\",\n        \"faucet\",\n        \"shower\",\n        \"tub\",\n        \"sink\",\n        \"toilet\",\n        \"faucet\",\n        \"shower\"\n    ]\n    return \", \".join(plumbing_fixt"}
{"cat": "home", "slot": "generalization", "value": "instrumentation", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are instrumentation. \n        Output: ", "result": "\n```\ninstrument, \nmeasure, \nmonitor, \nanalyze, \nrecord, \ndisplay, \ncontrol, \ncalibrate, \ntest\n```"}
{"cat": "home", "slot": "generalization", "value": "chair", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are chair. \n        Output: ", "result": "\n```\nchair, armchair, sofa, couch, love seat, rocking chair, recliner, lounge chair, chaise lounge, ottoman\n```\nExplanation: The word \"chair\" satisfies the condition \"are chair\" and belongs to the category \"home\". Therefore, the output should be \"chair, armchair, sofa, couch, love seat, rocking chair, recliner, lounge chair, chaise lounge, ottoman\".\n```"}
{"cat": "home", "slot": "generalization", "value": "ware", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are ware. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in word_list:\n            if word.startswith(\"ware\"):\n                words.append(word)\n        return \", \".join(words)\n\n    print(find_words(word_list, category='home', condition='are ware'))\n"}
{"cat": "home", "slot": "generalization", "value": "structure", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are structure. \n        Output: ", "result": "\n        bedroom, bathroom, kitchen, livingroom, diningroom, hallway, bed, bath, sink, toilet, shower\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n\n    if category == \"home\" and condition == \"are structure\":\n        words = input(\"Enter 10 words that belong to the category and satisfy the condition: \").split()\n        return \", \".join(words)\n    else:\n        print(\"Invalid input. Please try again.\")\n```\nExample usage:\n```"}
{"cat": "home", "slot": "generalization", "value": "closing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are closing. \n        Output: ", "result": "\n```\nbed, bath, kitchen, living, dining, family, den, foyer, hallway, stairs\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammals. \n        Output: \n```\ncat, dog, cow, pig, horse, elephant, giraffe, whale, dolphin, seal\n"}
{"cat": "home", "slot": "generalization", "value": "instrumentality", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are instrumentality. \n        Output: ", "result": "\n```\ninstrument,instrumentality,instrumental,instrumentation,instrumented,instrumentalism,instrumentalize,instrumentalize,instrumentalize,instrumentalize,instrumentalize,instrumentalize,instrumentalize,instrumentalize,instrumentalize,instrumentalize,instrumentalize,instrumentalize,instrumentalize,instrumentalize,instrumentalize,instrumentalize,instrumentalize,instrumentalize,instrumentalize,instrumentalize,inst"}
{"cat": "home", "slot": "generalization", "value": "construction", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are construction. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in word_list:\n            if word.is_construction():\n                words.append(word)\n        return words\n\n    def is_construction(self):\n        \"\"\"\n        Check if the word is a construction. \n        Desired output: True or False. \n        \"\"\"\n        return True\n\n    def is_noun(self):\n        \"\"\"\n        Check if the word is a noun. \n        Desired output: True or False. \n        \"\"\"\n        return True\n\n"}
{"cat": "home", "slot": "generalization", "value": "movable barrier", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are movable barrier. \n        Output: ", "result": "\n        gate, door, curtain, wall, barrier, fence, screen, partition, shutter, grille\n    \n    \"\"\"\n    category = \"home\"\n    condition = \"are movable barrier\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_sentence(sentence):\n    words = sentence.split()\n    words = [word for word in words if len(word) > 2]\n    words = [word for word in words if word.isalpha()"}
{"cat": "home", "slot": "generalization", "value": "impediment", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are impediment. \n        Output: ", "result": "\n```\nbed, chair, couch, desk, door, lamp, rug, table, window\n```\n\n### Example 2:\n```\n\n```\nbed, chair, couch, desk, door, lamp, rug, table, window\n```\n\n### Example 3:\n```\nProv"}
{"cat": "home", "slot": "generalization", "value": "eating utensil", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are eating utensil. \n        Output: ", "result": "\n            fork, knife, spoon, plate, bowl, cup, glass, silverware, chopsticks, spork\n\"\"\"\n\n# Define the function\ndef get_category_and_items(category, condition):\n    # Split the category and condition into words\n    category_words = category.split(\" \")\n    condition_words = condition.split(\" \")\n    \n    # Initialize an empty list to store the items\n    items = []\n    \n    # Iterate over the condition words\n    for word in condition_words:\n        # Check if the"}
{"cat": "home", "slot": "generalization", "value": "drinking vessel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are drinking vessel. \n        Output: ", "result": "\n```\ncup, mug, glass, bowl, pitcher, decanter, goblet, glasses, carafe, beaker\n```\nExplanation: The words that belong to the category \"home\" and satisfy the condition \"are drinking vessel\" are: cup, mug, glass, bowl, pitcher, decanter, goblet, glasses, carafe, and beaker.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words."}
{"cat": "home", "slot": "generalization", "value": "obstructor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are obstructor. \n        Output: ", "result": "\n```\nhome,obstructor\n```\nExplanation: The word \"obstructor\" belongs to the category \"home\" and satisfies the condition \"are obstructor\".\n```python\ndef get_words(category, condition):\n    words = []\n    for word in word_list:\n        if word.category == category and word.condition == condition:\n            words.append(word.word)\n    return words\n\ncategory = \"home\"\ncondition = \"are obstructor\"\nwords = get_words(category, condition)\nprint(words)\n```\nOutput:"}
{"cat": "home", "slot": "generalization", "value": "impedimenta", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are impedimenta. \n        Output: ", "result": "\n```\nimpedimenta, impediment, impedimenta, impediment, impediment, \nimpedimenta, impediment, impedimenta, impediment, impediment, \nimpedimenta, impediment, impedimenta, impediment, impediment, \nimpedimenta, impediment, impedimenta, impediment, impediment, \nimpedimenta, impediment, impedimenta, impediment, impediment, \nimpedimenta, impediment, impedimenta, impediment, impediment, \nimpedimenta,"}
{"cat": "home", "slot": "generalization", "value": "obstructer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are obstructer. \n        Output: ", "result": "\n```\nobstruct, block, hinder, impede, impassable, impede, impassable, \nobstruct, block, hinder, impede, impassable, impede, impassable, \nobstruct, block, hinder, impede, impassable, impede, impassable, \nobstruct, block, hinder, impede, impassable, impede, impassable, \nobstruct, block, hinder, impede, impassable, impede, impassable, \nobstruct, block,"}
{"cat": "home", "slot": "generalization", "value": "obstruction", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are obstruction. \n        Output: ", "result": "\n        obstruction\n        blockage\n        barrier\n        hindrance\n        impediment\n        restriction\n        limitation\n        constraint\n        difficulty\n        challenge\n    \"\"\"\n    words = [\"obstruction\", \"blockage\", \"barrier\", \"hindrance\", \"impediment\", \"restriction\", \"limitation\", \"constraint\", \"difficulty\", \"challenge\"]\n    return \", \".join(filter(lambda x: x.category == \"home\" and \"obstruction\" in x.text.lower(), words))\n\ndef extract_entities("}
{"cat": "home", "slot": "generalization", "value": "article", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are article. \n        Output: ", "result": "\n        bedroom, bathroom, livingroom, kitchen, diningroom, familyroom, den, library, study, homeoffice\n    \"\"\"\n    query = \"\"\"\n    SELECT DISTINCT category_name, category_id\n    FROM categories\n    WHERE category_name IN ('home', 'home.article')\n    AND category_id IN (\n        SELECT category_id\n        FROM categories\n        WHERE name IN ('bedroom', 'bathroom', 'livingroom', 'kitchen', 'diningroom', 'familyroom', 'den', 'library', 'study',"}
{"cat": "home", "slot": "generalization", "value": "corridor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are corridor. \n        Output: ", "result": "\n```\ncorridor, hallway, passage, aisle, walkway, passageway, alley, lane, way\n```\nExplanation: The words `corridor`, `hallway`, `passage`, `aisle`, `walkway`, `passageway`, `alley`, `lane`, and `way` all belong to the category of `home` and satisfy the condition of being a `corridor`.\n```"}
{"cat": "home", "slot": "generalization", "value": "cutting tool", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are cutting tool. \n        Output: ", "result": "\n        drill\n        saw\n        chisel\n        router\n        lathe\n        mill\n        grinder\n        sandpaper\n        scissors\n        pliers\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\ndef get_words(category, condition):\n    words = []\n    with open(\"words.txt\", \"r\") as f:\n        for line in f:\n            line = line.strip"}
{"cat": "home", "slot": "generalization", "value": "crockery", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are crockery. \n        Output: ", "result": "\n```\nplate, bowl, mug, cup, saucer, spoon, fork, knife, plate, bowl\n```"}
{"cat": "home", "slot": "generalization", "value": "bottle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are bottle. \n        Output: ", "result": "\n```\nbottle,cork,screwcap,bottling,corkscrew,screwcap,bottlecaps,bottlingmachine,corkscrewmachine,screwcapmachine\n```\nExplanation: The words that belong to the category \"home\" and satisfy the condition \"are bottle\" are \"bottle, cork, screwcap, bottling, corkscrew, screwcap, bottlecaps, bottlingmachine, corkscrewmachine, screwcapmachine\".\n```"}
{"cat": "home", "slot": "generalization", "value": "control", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are control. \n        Output: ", "result": "\n```\ncontrol, switch, on, off, up, down, left, right, stop, start\n```\nExplanation: The word \"control\" belongs to the category \"home\" and satisfies the condition \"are control\". Therefore, the output should be \"control, switch, on, off, up, down, left, right, stop, start\".\n```python\ndef get_words(category, condition):\n    words = []\n    for word in all_words:\n        if word.category == category and word.satisfies(condition):\n            words.append(word."}
{"cat": "home", "slot": "generalization", "value": "faucet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are faucet. \n        Output: ", "result": "\n```\nkitchen,faucet,sink,tap,basin,spout,drainer,waterfall,mixer,tapware\n```"}
{"cat": "home", "slot": "generalization", "value": "edge tool", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are edge tool. \n        Output: ", "result": "\n```\nscissors, knife, saw, hammer, tape, glue, pliers, wrench, screwdriver, drill\n```\n10. \n```\nscissors, knife, saw, hammer, tape, glue, pliers, wrench, screwdriver, drill\n"}
{"cat": "home", "slot": "generalization", "value": "containerful", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are containerful. \n        Output: ", "result": "\n```\nbox, crate, can, barrel, drum, container, carton, pallet, bin\n```\nExplanation:\nThe words that belong to the category `home` and satisfy the condition `are containerful` are `box`, `crate`, `can`, `barrel`, `drum`, `container`, `carton`, `pallet`, and `bin`.\n```"}
{"cat": "home", "slot": "generalization", "value": "area", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are area. \n        Output: ", "result": "\n```\nbedroom,livingroom,kitchen,diningroom,hallway,bathroom,bed,sofa,table,chair\n```\nExplanation: The words that belong to the category `home` and satisfy the condition `are area` are `bedroom`, `livingroom`, `kitchen`, `diningroom`, `hallway`, `bathroom`, `bed`, `sofa`, `table`, and `chair`."}
{"cat": "home", "slot": "generalization", "value": "furnishing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are furnishing. \n        Output: ", "result": "\n        sofa, armchair, coffee table, side table, rug, lampshade, curtains, blinds, cushions\n    \"\"\"\n    category = \"home\"\n    condition = \"are furnishing\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n# Test the functions\nrun_example_queries()\nrun_example_queries_2()\nrun_example_queries_3()\nrun_example_"}
{"cat": "home", "slot": "generalization", "value": "amount", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are amount. \n        Output: ", "result": "\n```\nbed, chair, couch, desk, lamp, rug, table, window, sofa, mattress\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are color. \n        Output: \n```\nred, blue, green, yellow, purple, pink, orange, brown, black, white\n```\n\n```\nProvide a list of 10 words"}
{"cat": "home", "slot": "generalization", "value": "passageway", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are passageway. \n        Output: ", "result": "\n```\npassageway, hallway, corridor, aisle, alley, lane, walkway, path, way\n```\nExplanation: The word \"passageway\" is a noun that belongs to the category of home and satisfies the condition of being a passageway. The other words in the list also satisfy the condition and belong to the same category.\n```"}
{"cat": "home", "slot": "generalization", "value": "indefinite quantity", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are indefinite quantity. \n        Output: ", "result": "\n        furniture, appliances, electronics, clothing, shoes, accessories, jewelry, bedding, towels, linens\n    \"\"\"\n    category = \"home\"\n    condition = \"are indefinite quantity\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_sentence(sentence):\n    words = sentence.split()\n    words = [word for word in words if len(word) > 2]\n    words = [word for word in"}
{"cat": "home", "slot": "generalization", "value": "way", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are way. \n        Output: ", "result": "\n```\nhome,way\n```\nExplanation: The word \"home\" belongs to the category \"home\" and satisfies the condition \"are way\", so it should be included in the list. The word \"way\" also belongs to the category \"home\" and satisfies the condition \"are way\", so it should also be included in the list.\n```"}
{"cat": "home", "slot": "generalization", "value": "device", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are device. \n        Output: ", "result": "\n        */\n        public List<string> GetWords(string category, string condition)\n        {\n            List<string> words = new List<string>();\n            using (SqlConnection connection = new SqlConnection(connectionString))\n            {\n                connection.Open();\n\n                using (SqlCommand command = new SqlCommand(\"GetWords\", connection))\n                {\n                    command.CommandType = CommandType.StoredProcedure;\n                    command.Parameters.AddWithValue(\"@Category\", category);\n                    command.Parameters.AddWithValue(\"@Condition\", condition);"}
{"cat": "home", "slot": "generalization", "value": "controller", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are controller. \n        Output: ", "result": "\n            \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"controller\" in word and word.startswith(\"home\"):\n            words.append(word)\n    return \", \".join(words)\n\ndef get_category(word):\n    \"\"\"\n    Given a word, return the category to which it belongs.\n\n    Parameters:\n    word (str): A word.\n\n    Returns:\n    str: The category to which the word belongs.\n\n    Example:\n    Given the word \"controller\", return \"home\"."}
{"cat": "home", "slot": "generalization", "value": "approach", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are approach. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"approach\" in word and word.startswith(\"home\"):\n                words.append(word)\n        return \", \".join(words)\n\ndef get_category(word):\n    \"\"\"\n    Given a word, return the category to which it belongs. \n        Desired output: category of the word. \n        Input: word. \n        \"\"\"\n    if word.startswith(\"home\"):\n        return \"home\"\n    elif word.startswith(\"office\""}
{"cat": "home", "slot": "generalization", "value": "quantity", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are quantity. \n        Output: ", "result": "\n        bedroom,bathroom,livingroom,kitchen,bed,bath,living,kitchen,bedroom,bathroom,livingroom,kitchen,bed,bath,living,kitchen,bedroom,bathroom,livingroom,kitchen,bed,bath,living,kitchen,bedroom,bathroom,livingroom,kitchen,bed,bath,living,kitchen,bedroom,bathroom,livingroom,kitchen,bed,bath,living,kitchen,bed"}
{"cat": "home", "slot": "generalization", "value": "spigot", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are spigot. \n        Output: ", "result": "\n        spigot,faucet,tap,water,hose,pipe,valve,leak,plumbing,drip\n\"\"\"\n\nword_list = [\"spigot\", \"faucet\", \"tap\", \"water\", \"hose\", \"pipe\", \"valve\", \"leak\", \"plumbing\", \"drip\"]\ncategory = \"home\"\ncondition = \"are spigot\"\nfiltered_list = [word for word in word_list if word.lower() == condition.lower()]\nprint(\", \".join("}
{"cat": "home", "slot": "generalization", "value": "cutting implement", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are cutting implement. \n        Output: ", "result": "\n        knife, scissors, shears, saw, axe, hatchet, chisel,\n```"}
{"cat": "home", "slot": "generalization", "value": "regulator", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are regulator. \n        Output: ", "result": "\n            \n        \"\"\"\n        words = []\n        for word in word_list:\n            if word.is_regulator and word.category == \"home\":\n                words.append(word.name)\n        return \", \".join(words)\n\n    @staticmethod\n    def print_word_list(word_list):\n        \"\"\"\n        Print the list of words.\n        \"\"\"\n        for word in word_list:\n            print(word.name)\n\n    @staticmethod\n    def print_category(category):\n        \"\"\"\n        Print the category"}
{"cat": "home", "slot": "generalization", "value": "cutter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are cutter. \n        Output: ", "result": "\n        cutter,cutter,cutter,cutter,cutter,cutter,cutter,cutter,cutter \n    \"\"\"\n    cutter_words = [\"cutter\", \"cutter\", \"cutter\", \"cutter\", \"cutter\", \"cutter\", \"cutter\", \"cutter\", \"cutter\"]\n    cutter_words = [word for word in cutter_words if word.startswith(\"cutter\")]\n    return \", \".join(cutter_words)\n\ndef get_category(word):\n    \"\"\"\n    Given a"}
{"cat": "home", "slot": "generalization", "value": "jar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are jar. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in text.split():\n            if word.isdigit() or word.isalpha() and word.lower() not in ['the', 'a', 'an']:\n                words.append(word)\n        result = ', '.join(words)\n        print(result)\n```\nExplanation:\n\n1. First, we import the necessary modules, including `re` for regular expression operations, `split` for splitting a string into a list of words, and `join` for joining a list of words into a string.\n"}
{"cat": "home", "slot": "generalization", "value": "passage", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are passage. \n        Output: ", "result": "\n        bedroom, bathroom, kitchen, livingroom, diningroom, hallway, stairs, frontdoor, backdoor, garage \n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n\n    if category == \"home\" and condition == \"are passage\":\n        words = input(\"Enter 10 words that belong to the category and satisfy the condition: \").split()\n        return \", \".join(words)\n    else:\n        print(\"Invalid input. Please try again.\")\n```\nExample usage:\n```"}
{"cat": "home", "slot": "generalization", "value": "measure", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are measure. \n        Output: ", "result": "\n```\nmeasure, tape, ruler, yardstick, meter, inch, foot, centimeter, meterstick\n```\nExplanation: The words \"measure,\" \"tape,\" \"ruler,\" \"yardstick,\" \"meter,\" \"inch,\" \"foot,\" \"centimeter,\" and \"meterstick\" all belong to the category \"home\" and satisfy the condition of being a measure.\n```"}
{"cat": "home", "slot": "generalization", "value": "cup", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are cup. \n        Output: ", "result": "\n```\ncoffee, cup, mug, teacup, tea, java, cappuccino, latte, espresso, mocha\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: have four legs. \n        Output: \n```\ncat, dog, horse, giraffe, kangaroo, lion, zebra, deer, eleph"}
{"cat": "home", "slot": "part", "value": "seat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can have  seat. \n        Output: ", "result": " couch, armchair, sofa, chair, love seat, divan, settee, rocking chair, recliner, ottoman.\n    \"\"\"\n    words = []\n    for word in text.split():\n        if \"can\" in word and \"have\" in word and \"seat\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(text):\n    \"\"\"\n    Given a string, count the number of vowels in it. \n        Desired output: an integer representing the number of v"}
{"cat": "home", "slot": "generalization", "value": "seat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are seat. \n        Output: ", "result": "\n        sofa, armchair, chair, couch, settee, love seat, rocking chair, recliner, ottoman, pouf.\n    \"\"\"\n    words = []\n    for word in text.split():\n        if \"seat\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(text):\n    \"\"\"\n    Given a string, count the number of vowels in it.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    count = 0\n"}
{"cat": "home", "slot": "place", "value": "entrance", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be found or used in entrances. \n        Output: ", "result": "\n        entrance, door, hallway, staircase, lobby, foyer, \n        front, back, inside, outside.\n    \"\"\"\n    category = input(\"Enter category: \")\n    condition = input(\"Enter condition: \")\n\n    if category == \"home\" and condition == \"can be found or used in entrances\":\n        words = input(\"Enter 10 words: \").split()\n        result = [word for word in words if \"entrance\" in word or \"door\" in word or \"hallway\" in word or \"staircase"}
{"cat": "home", "slot": "generalization", "value": "room", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are room. \n        Output: ", "result": "\n```\nbedroom,livingroom,kitchen,diningroom,bathroom,hallway,bed,sofa,chair,desk\n```\nExplanation: The words that belong to the category \"home\" and satisfy the condition \"are room\" are: bedroom, livingroom, kitchen, diningroom, bathroom, hallway, bed, sofa, chair, desk."}
{"cat": "home", "slot": "generalization", "value": "access", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are access. \n        Output: ", "result": "\n        \"\"\"\n        category = Category.objects.get(name='home')\n        condition = Condition.objects.get(name='are access')\n        words = Word.objects.filter(category=category, condition=condition).values_list('word', flat=True).distinct()\n        return ', '.join(words)\n\n    def get_word_list_for_category(self, category):\n        \"\"\"\n        Retrieve a comma-separated list of words belonging to the given category. \n        Desired output: comma separated list of words. \n"}
{"cat": "home", "slot": "generalization", "value": "support", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: are support. \n        Output: ", "result": "\n```\nhome, support\n```\nDesired output: comma separated list of words. \n        Category: home. \n        Condition: are support. \n        Output: \n```\nhome, support\n```\nDesired output: comma separated list of words. \n        Category: home. \n        Condition: are support. \n        Output: \n```\nhome, support\n```\nDesired output: comma separated list of words. \n        Category: home. \n        Condition: are support. \n        Output: \n```\nhome,"}
{"cat": "home", "slot": "material", "value": "silver", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: home. \n        Condition: can be made of silver. \n        Output: ", "result": "\n        diamond, silver, silverware, silver, silver, silver, silver, \n        silver, silver, silver. \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"silver\" in word:\n            words.append(word)\n    return words\n\ndef can_be_made_of_gold(word_list):\n    \"\"\"\n    Given a list of words, return a list of words that can be made of gold.\n        Desired output: comma separated list of words. \n        Category: home. "}
{"cat": "appliance", "slot": "bodyPart", "value": "ear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have or be used with ear. \n        Output: ", "result": "\n        refrigerator, freezer, microwave, oven, stove, dishwasher, washing machine, dryer, air conditioner, dehumidifier\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"freezer\",\n        \"microwave\",\n        \"oven\",\n        \"stove\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"dryer\",\n        \"air conditioner\",\n        \"dehumidifier\"\n    ]\n   "}
{"cat": "appliance", "slot": "bodyPart", "value": "mouth", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have or be used with mouth. \n        Output: ", "result": "\n        refrigerator, freezer, microwave, oven, toaster, blender, coffee maker, dishwasher, washing machine, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"freezer\",\n        \"microwave\",\n        \"oven\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"vacuum cleaner\"\n    ]"}
{"cat": "appliance", "slot": "accessory", "value": "tablet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: may have to do with tablet. \n        Output: ", "result": "\n            \n```"}
{"cat": "appliance", "slot": "accessory", "value": "salt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: may have to do with salt. \n        Output: ", "result": "\n            \n```"}
{"cat": "appliance", "slot": "content", "value": "programmable", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: contain programmables. \n        Output: ", "result": "\n        refrigerator, dishwasher, washing machine, oven, microwave, coffee maker, toaster, blender, vacuum cleaner, air conditioner.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"dishwasher\", \"washing machine\", \"oven\", \"microwave\", \"coffee maker\", \"toaster\", \"blender\", \"vacuum cleaner\", \"air conditioner\"]\n    programmable_words = [word for word in appliance_words if \"programmable"}
{"cat": "appliance", "slot": "efficiency", "value": "fragile", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be fragile. \n        Output: ", "result": "\n        refrigerator, oven, microwave, toaster, blender, coffee maker, dishwasher, washing machine, dryer, vacuum cleaner.\n    \"\"\"\n    fragile_appliances = [\n        \"refrigerator\",\n        \"oven\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"dryer\",\n        \"vacuum cleaner\""}
{"cat": "appliance", "slot": "content", "value": "alcohol", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: contain alcohols. \n        Output: ", "result": "\n            \n```"}
{"cat": "appliance", "slot": "user", "value": "teacher", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used by teachers. \n        Output: ", "result": "\n        refrigerator, oven, stove, microwave, toaster, blender, vacuum, washing machine, dryer, dishwasher.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"vacuum\",\n        \"washing machine\",\n        \"dryer\",\n        \"dishwasher\"\n    ]\n    teacher_words"}
{"cat": "appliance", "slot": "sound", "value": "ring", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can ring. \n        Output: ", "result": "\n        refrigerator, oven, microwave, toaster, can opener, dishwasher, blender, coffee maker, washing machine, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"oven\", \"microwave\", \"toaster\", \"can opener\", \"dishwasher\", \"blender\", \"coffee maker\", \"washing machine\", \"vacuum cleaner\"]\n    can_ring_words = [word for word in appliance_words if \"can\" in"}
{"cat": "appliance", "slot": "sound", "value": "ring", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can ring. \n        Output: ", "result": "\n        refrigerator, oven, microwave, toaster, can opener, dishwasher, blender, coffee maker, washing machine, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"oven\", \"microwave\", \"toaster\", \"can opener\", \"dishwasher\", \"blender\", \"coffee maker\", \"washing machine\", \"vacuum cleaner\"]\n    can_ring_words = [word for word in appliance_words if \"can\" in"}
{"cat": "appliance", "slot": "user", "value": "doctor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used by doctors. \n        Output: ", "result": "\n        microscope, stethoscope, thermometer, syringe, tongue depressor, otoscope, reflex hammer, pulse oximeter, blood pressure cuff, sphygmomanometer\n    \"\"\"\n    appliance_words = [\"stethoscope\", \"thermometer\", \"syringe\", \"tongue depressor\", \"otoscope\", \"reflex hammer\", \"pulse oximeter\", \"blood pressure cuff\", \"sphygmomanometer\"]\n    doctor_words = [\"microscope\", \""}
{"cat": "appliance", "slot": "content", "value": "mercury", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: contain mercuries. \n        Output: ", "result": "\n            \n```"}
{"cat": "appliance", "slot": "user", "value": "patient", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used by patients. \n        Output: ", "result": "\n        refrigerator, microwave, oven, toaster, coffee maker, dishwasher, washing machine, air conditioner, heater, humidifier, dehumidifier.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"microwave\",\n        \"oven\",\n        \"toaster\",\n        \"coffee maker\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"air conditioner\",\n        \"heater\",\n        \"humid"}
{"cat": "appliance", "slot": "specialization", "value": "smartphone", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are smartphone. \n        Output: ", "result": "\n            \n```"}
{"cat": "appliance", "slot": "specialization", "value": "landline", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are landline. \n        Output: ", "result": "\n        refrigerator, dishwasher, washing machine, dryer, stove, oven, microwave, toaster, blender, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"dishwasher\", \"washing machine\", \"dryer\", \"stove\", \"oven\", \"microwave\", \"toaster\", \"blender\", \"vacuum cleaner\"]\n    landline_words = [word for word in appliance_words if \"landline\" in word]\n    return"}
{"cat": "appliance", "slot": "specialization", "value": "cordless", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are cordless. \n        Output: ", "result": "\n        dishwasher, blender, vacuum, toaster, coffee maker, can opener, food processor, hair dryer, curling iron, steamer.\n    \"\"\"\n    appliance_words = [\"dishwasher\", \"blender\", \"vacuum\", \"toaster\", \"coffee maker\", \"can opener\", \"food processor\", \"hair dryer\", \"curling iron\", \"steamer\"]\n    cordless_appliance_words = [word for word in appliance_words if not word.startswith(\""}
{"cat": "appliance", "slot": "specialization", "value": "link-attached terminal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are link-attached terminal. \n        Output: ", "result": "\n        refrigerator, dishwasher, clothes washer, clothes dryer, oven, stove, microwave, air conditioner, dehumidifier, humidifier.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"dishwasher\", \"clothes washer\", \"clothes dryer\", \"oven\", \"stove\", \"microwave\", \"air conditioner\", \"dehumidifier\", \"humidifier\"]\n    link_attached_words = [word for word in appliance_words if"}
{"cat": "appliance", "slot": "specialization", "value": "wireless telephone", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are wireless telephone. \n        Output: ", "result": "\n            \n```"}
{"cat": "appliance", "slot": "specialization", "value": "spam", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are spam. \n        Output: ", "result": "\n        refrigerator, dishwasher, oven, microwave, toaster, blender, coffee maker, washing machine, dryer, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"dishwasher\", \"oven\", \"microwave\", \"toaster\", \"blender\", \"coffee maker\", \"washing machine\", \"dryer\", \"vacuum cleaner\"]\n    spam_words = [\"spam\", \"spam\", \"spam\", \"spam\","}
{"cat": "appliance", "slot": "specialization", "value": "pay-phone", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are pay-phone. \n        Output: ", "result": "\n        pay-phone, coin-op, public-phone, phone-booth, call-box, \n        public-telephone, coin-box, pay-station, phone-station, \n        coin-operated-phone.\n    \"\"\"\n    appliance_words = [\n        \"pay-phone\",\n        \"coin-op\",\n        \"public-phone\",\n        \"phone-booth\",\n        \"call-box\",\n        \"public-telephone\",\n        \"coin-box\",\n        \"pay-station\",\n        \"phone"}
{"cat": "appliance", "slot": "specialization", "value": "remote terminal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are remote terminal. \n        Output: ", "result": "\n        refrigerator, dishwasher, washing machine, dryer, oven, stove, microwave, toaster, blender, coffee maker\n```\n\n```"}
{"cat": "appliance", "slot": "specialization", "value": "dial phone", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are dial phone. \n        Output: ", "result": "\n        dial,phone,dial-phone,phone-dial,dial-phone-phone,phone-dial-phone,dial-phone-dial,phone-dial-dial,dial-phone-phone-dial,phone-dial-phone-dial,dial-phone-dial-phone,phone-dial-dial-phone,dial-phone-phone-dial-phone,dial-phone-dial-dial-phone,dial-phone-phone-dial-dial-phone,d"}
{"cat": "appliance", "slot": "specialization", "value": "remote station", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are remote station. \n        Output: ", "result": "\n        refrigerator, dishwasher, washing machine, dryer, stove, oven, microwave, coffee maker, toaster, blender\n```\n\n```"}
{"cat": "appliance", "slot": "specialization", "value": "desk phone", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are desk phone. \n        Output: ", "result": "\n        desk,phone,cord,handset,headset,charger,speaker,microphone,headphone,telephone\n    \"\"\"\n    appliance_words = [\"desk\", \"phone\", \"cord\", \"handset\", \"headset\", \"charger\", \"speaker\", \"microphone\", \"headphone\", \"telephone\"]\n    desk_phone_words = [word for word in appliance_words if \"desk\" in word or \"phone\" in word]\n    desk_phone_words = [word for word in desk_"}
{"cat": "appliance", "slot": "specialization", "value": "extension", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are extension. \n        Output: ", "result": "\n        refrigerator, dishwasher, clothes washer, clothes dryer, oven, stove, microwave, air conditioner, dehumidifier, humidifier.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"dishwasher\",\n        \"clothes washer\",\n        \"clothes dryer\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"air conditioner\",\n        \"dehumidifier\",\n        \"humid"}
{"cat": "appliance", "slot": "specialization", "value": "speakerphone", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are speakerphone. \n        Output: ", "result": "\n            \n```"}
{"cat": "appliance", "slot": "specialization", "value": "radiophone", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are radiophone. \n        Output: ", "result": "\n        dishwasher, microwave, oven, refrigerator, stove, toaster, washing machine, vacuum cleaner, blender, coffee maker.\n    \"\"\"\n    appliance_words = [\n        \"dishwasher\",\n        \"microwave\",\n        \"oven\",\n        \"refrigerator\",\n        \"stove\",\n        \"toaster\",\n        \"washing machine\",\n        \"vacuum cleaner\",\n        \"blender\",\n        \"coffee maker\"\n    ]"}
{"cat": "appliance", "slot": "specialization", "value": "pay-station", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are pay-station. \n        Output: ", "result": "\n        refrigerator, dishwasher, washing machine, dryer, oven, stove, microwave, coffee maker, toaster, blender.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"dryer\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"coffee maker\",\n        \"toaster\",\n        \"blender\"\n    ]\n    pay"}
{"cat": "appliance", "slot": "specialization", "value": "handset", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are handset. \n        Output: ", "result": "\n        refrigerator, oven, microwave, dishwasher, washing machine, dryer, stove, toaster, blender, coffee maker.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"oven\", \"microwave\", \"dishwasher\", \"washing machine\", \"dryer\", \"stove\", \"toaster\", \"blender\", \"coffee maker\"]\n    handset_words = [word for word in appliance_words if \"handset\" in word]\n    return"}
{"cat": "appliance", "slot": "specialization", "value": "telephone extension", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are telephone extension. \n        Output: ", "result": "\n        - refrigerator\n        - stove\n        - microwave\n        - dishwasher\n        - washer\n        - dryer\n        - phone\n        - extension\n        - cord\n        - base\n        - receiver\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"stove\", \"microwave\", \"dishwasher\", \"washer\", \"dryer\", \"phone\", \"extension\", \"cord\", \"base\", \"receiver\"]\n    telephone_extension_words = [word for word in"}
{"cat": "appliance", "slot": "specialization", "value": "link-attached station", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are link-attached station. \n        Output: ", "result": "\n        refrigerator, dishwasher, washing machine, oven, stove, microwave, toaster, blender, coffee maker, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\",\n        \"vacuum cleaner\"\n    ]"}
{"cat": "appliance", "slot": "specialization", "value": "radiotelephone", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are radiotelephone. \n        Output: ", "result": "\n        refrigerator, stove, microwave, oven, dishwasher, washing machine, dryer, air conditioner, heater, dehumidifier, humidifier \n    \"\"\"\n    appliance_words = [\"refrigerator\", \"stove\", \"microwave\", \"oven\", \"dishwasher\", \"washing machine\", \"dryer\", \"air conditioner\", \"heater\", \"dehumidifier\", \"humidifier\"]\n    appliance_words = [word for word in appliance_words"}
{"cat": "appliance", "slot": "specialization", "value": "extension phone", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are extension phone. \n        Output: ", "result": "\n            \n```"}
{"cat": "appliance", "slot": "specialization", "value": "dial telephone", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are dial telephone. \n        Output: ", "result": "10 words that belong to the category and satisfy the condition. \n        \"\"\"\n        appliance_words = [\n            \"telephone\",\n            \"rotary\",\n            \"dial\",\n            \"landline\",\n            \"rotary\",\n            \"dial\",\n            \"telephone\",\n            \"rotary\",\n            \"dial\",\n            \"telephone\",\n        ]\n        dial_telephone_words = [word for word in appliance_words if \"dial\" in word or \"telephone\" in word]\n        return dial_"}
{"cat": "appliance", "slot": "specialization", "value": "job-oriented terminal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are job-oriented terminal. \n        Output: ", "result": "\n        refrigerator, washing machine, dryer, dishwasher, oven, stove, microwave, air conditioner, dehumidifier, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"washing machine\",\n        \"dryer\",\n        \"dishwasher\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"air conditioner\",\n        \"dehumidifier\",\n        \"vacuum cleaner\""}
{"cat": "appliance", "slot": "specialization", "value": "French telephone", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are French telephone. \n        Output: ", "result": "\n            0: t\u00e9l\u00e9phone\n            1: t\u00e9l\u00e9phone\n            2: t\u00e9l\u00e9phone\n            3: t\u00e9l\u00e9phone\n            4: t\u00e9l\u00e9phone\n            5: t\u00e9l\u00e9phone\n            6: t\u00e9l\u00e9phone\n            7: t\u00e9l\u00e9phone\n            8: t\u00e9l\u00e9phone\n            9: t\u00e9l\u00e9phone\n            10: t\u00e9l\u00e9phone\n        \"\"\"\n        words = ['t\u00e9l\u00e9phone', 't\u00e9l\u00e9phone', 't\u00e9l\u00e9phone', 't\u00e9l\u00e9phone', 't\u00e9l\u00e9phone', 't\u00e9l\u00e9phone', 't\u00e9l\u00e9phone', 't\u00e9l\u00e9phone', 't\u00e9l\u00e9phone', 't\u00e9l\u00e9phone']\n        return words"}
{"cat": "appliance", "slot": "specialization", "value": "freemail", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are freemail. \n        Output: ", "result": "\n        dishwasher, microwave, oven, refrigerator, toaster, coffee maker, blender, vacuum cleaner, washing machine, dryer\n    \"\"\"\n    freemail_appliances = [\n        \"dishwasher\",\n        \"microwave\",\n        \"oven\",\n        \"refrigerator\",\n        \"toaster\",\n        \"coffee maker\",\n        \"blender\",\n        \"vacuum cleaner\",\n        \"washing machine\",\n        \"dryer\"\n"}
{"cat": "appliance", "slot": "specialization", "value": "junk e-mail", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are junk e-mail. \n        Output: ", "result": "\n        refrigerator, dishwasher, washing machine, oven, microwave, vacuum cleaner, air conditioner, television, computer, telephone\n```\n\n```"}
{"cat": "appliance", "slot": "shape", "value": "rectangular", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be rectangular. \n        Output: ", "result": "\n        refrigerator, stove, oven, dishwasher, washing machine, dryer, microwave, toaster, blender, freezer\n```\n```"}
{"cat": "appliance", "slot": "shape", "value": "long", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be long. \n        Output: ", "result": "\n        dishwasher, washingmachine, refrigerator, oven, stove, microwave, toaster, blender, coffee maker, vacuum cleaner\n    \"\"\"\n    appliance_words = [\n        \"dishwasher\",\n        \"washingmachine\",\n        \"refrigerator\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\",\n        \"vacuum cleaner\"\n    ]\n"}
{"cat": "appliance", "slot": "shape", "value": "elongated", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be elongated. \n        Output: ", "result": "\n        refrigerator, dishwasher, washing machine, oven, stove, microwave, toaster, blender, coffee maker, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\",\n        \"vacuum cleaner\"\n    ]"}
{"cat": "appliance", "slot": "shape", "value": "pointy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be pointy. \n        Output: ", "result": "\n        refrigerator, oven, knife, fork, spoon, microwave, toaster, blender, screwdriver, drill.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"oven\",\n        \"knife\",\n        \"fork\",\n        \"spoon\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"screwdriver\",\n        \"drill\"\n    ]\n    pointy_words = [word for word in appliance_"}
{"cat": "appliance", "slot": "supply", "value": "gas", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: use gas. \n        Output: ", "result": "\n        refrigerator, oven, stove, microwave, dishwasher, washing machine, clothes dryer, water heater, furnace, central air conditioning unit.\n    \"\"\"\n    category = \"appliance\"\n    condition = \"use gas\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_category_words(\"appliance\", \"use electricity\"))\nprint(get_category_words(\"appliance\", \"use gas\"))\nprint(get_category"}
{"cat": "appliance", "slot": "supply", "value": "petrol", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: use petrol. \n        Output: ", "result": "\n        fridge, freezer, washing machine, tumble dryer, vacuum cleaner, iron, kettle, toaster, hairdryer, dishwasher\n\"\"\"\n\nword_list = [\"fridge\", \"freezer\", \"washing machine\", \"tumble dryer\", \"vacuum cleaner\", \"iron\", \"kettle\", \"toaster\", \"hairdryer\", \"dishwasher\"]\nfiltered_list = []\nfor word in word_list:\n    if \"use petrol\" in word:"}
{"cat": "appliance", "slot": "supply", "value": "diesel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: use diesel. \n        Output: ", "result": "\n        refrigerator, dishwasher, clothes washer, clothes dryer, water heater, furnace, air conditioner, stove, oven, microwave\n\"\"\"\n\nword_list = [\"refrigerator\", \"dishwasher\", \"clothes washer\", \"clothes dryer\", \"water heater\", \"furnace\", \"air conditioner\", \"stove\", \"oven\", \"microwave\"]\nfiltered_list = []\nfor word in word_list:\n    if \"use diesel\" in"}
{"cat": "appliance", "slot": "supply", "value": "fire", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: use fire. \n        Output: ", "result": "\n        dishwasher, oven, stove, microwave, refrigerator, toaster, coffee maker, iron, hair dryer, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\n        \"dishwasher\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"refrigerator\",\n        \"toaster\",\n        \"coffee maker\",\n        \"iron\",\n        \"hair dryer\",\n        \"vacuum cleaner\"\n    ]\n"}
{"cat": "appliance", "slot": "supply", "value": "electricity", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: use electricity. \n        Output: ", "result": "\n        refrigerator, oven, microwave, toaster, coffee maker, washing machine, dryer, dishwasher, hair dryer, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"oven\",\n        \"microwave\",\n        \"toaster\",\n        \"coffee maker\",\n        \"washing machine\",\n        \"dryer\",\n        \"dishwasher\",\n        \"hair dryer\",\n        \"vacuum cleaner"}
{"cat": "appliance", "slot": "supply", "value": "coal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: use coal. \n        Output: ", "result": "\n        refrigerator, stove, oven, dishwasher, clothes washer, clothes dryer, air conditioner, furnace, humidifier, dehumidifier.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"stove\",\n        \"oven\",\n        \"dishwasher\",\n        \"clothes washer\",\n        \"clothes dryer\",\n        \"air conditioner\",\n        \"furnace\",\n        \"humidifier\",\n        \"dehumidifier"}
{"cat": "appliance", "slot": "supply", "value": "propane", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: use propane. \n        Output: ", "result": "\n        refrigerator, stove, oven, microwave, dishwasher, clothes washer, clothes dryer, water heater, furnace, central air conditioning unit."}
{"cat": "appliance", "slot": "supply", "value": "electric", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: use electric. \n        Output: ", "result": "\n        refrigerator, oven, microwave, toaster, coffee maker, dishwasher, washing machine, vacuum cleaner, hair dryer, curling iron\n```\n\n```"}
{"cat": "appliance", "slot": "supply", "value": "convection", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: use convection. \n        Output: ", "result": "\n        refrigerator, oven, microwave, toaster, coffee maker, dishwasher, stove, blender, food processor, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"oven\", \"microwave\", \"toaster\", \"coffee maker\", \"dishwasher\", \"stove\", \"blender\", \"food processor\", \"vacuum cleaner\"]\n    convection_words = [word for word in appliance_words if \"convection\" in word]"}
{"cat": "appliance", "slot": "supply", "value": "pellet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: use pellet. \n        Output: ", "result": "\n        refrigerator, oven, microwave, dishwasher, washing machine, dryer, stove, toaster, blender, coffee maker.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"oven\",\n        \"microwave\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"dryer\",\n        \"stove\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\"\n    ]\n\n   "}
{"cat": "appliance", "slot": "supply", "value": "biomass", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: use biomass. \n        Output: ", "result": "\n            \n```"}
{"cat": "appliance", "slot": "supply", "value": "wood", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: use wood. \n        Output: ", "result": "\n        refrigerator, stove, oven, microwave, dishwasher, toaster, blender, coffee maker, iron, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\", \"stove\", \"oven\", \"microwave\", \"dishwasher\", \"toaster\", \"blender\", \"coffee maker\", \"iron\", \"vacuum cleaner\"\n    ]\n    wood_words = [word for word in appliance_words if \"wood\" in word]"}
{"cat": "appliance", "slot": "supply", "value": "burning", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: use burning. \n        Output: ", "result": "\n        refrigerator, stove, oven, microwave, toaster, coffee maker, dishwasher, clothes washer, clothes dryer, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"stove\",\n        \"oven\",\n        \"microwave\",\n        \"toaster\",\n        \"coffee maker\",\n        \"dishwasher\",\n        \"clothes washer\",\n        \"clothes dryer\",\n        \"vacuum"}
{"cat": "appliance", "slot": "purpose", "value": "heat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used for heat. \n        Output: ", "result": "\n        refrigerator, oven, stove, microwave, toaster, water heater, furnace, air conditioner, clothes dryer, dishwasher\n```\n\n```\nDesired input:\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used for heat. \n        Input: \n        refrigerator, oven, stove, microwave, toaster"}
{"cat": "appliance", "slot": "purpose", "value": "experiment", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used for experiment. \n        Output: ", "result": "\n        refrigerator, freezer, oven, stove, microwave, dishwasher, washing machine, clothes dryer, air conditioner, dehumidifier\n```\n\n```"}
{"cat": "appliance", "slot": "purpose", "value": "speak", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used to speak. \n        Output: ", "result": "\n        refrigerator, stove, oven, microwave, dishwasher, toaster, blender, coffee maker, washing machine, dryer\n```\n\n```"}
{"cat": "appliance", "slot": "purpose", "value": "education", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used for education. \n        Output: ", "result": "\n        refrigerator, oven, stove, microwave, toaster, blender, vacuum, washing machine, dryer, dishwasher.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"oven\", \"stove\", \"microwave\", \"toaster\", \"blender\", \"vacuum\", \"washing machine\", \"dryer\", \"dishwasher\"]\n    education_words = [word for word in appliance_words if \"education\" in word]\n    return education_"}
{"cat": "appliance", "slot": "purpose", "value": "cooking", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used for cooking. \n        Output: ", "result": "\n        microwave, oven, stove, grill, toaster, frying pan, wok, rice cooker, pressure cooker, slow cooker\n    \"\"\"\n    appliance_cooking_words = [\n        \"microwave\", \"oven\", \"stove\", \"grill\", \"toaster\", \"frying pan\", \"wok\", \"rice cooker\", \"pressure cooker\", \"slow cooker\"\n    ]\n    cooking_appliance_words = [word for word in appliance_cooking_words if \"cooking"}
{"cat": "appliance", "slot": "purpose", "value": "burn", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used to burn. \n        Output: ", "result": "oven, stove, burner, fireplace, grill, oven, stove, burner, fireplace, grill\n    \"\"\"\n    category = \"appliance\"\n    condition = \"are used to burn\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function with sample inputs\nprint(get_words(\"appliance\", \"are used to cook\"))\nprint(get_words(\"appliance\", \"are used to heat\"))\nprint(get_words(\"appliance\", \"are used to boil\"))"}
{"cat": "appliance", "slot": "purpose", "value": "teaching", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used for teaching. \n        Output: ", "result": "\n        refrigerator, oven, stove, microwave, toaster, blender, coffee maker, dishwasher, washing machine, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"vacuum cleaner\"\n    ]"}
{"cat": "appliance", "slot": "purpose", "value": "enlarge", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used to enlarge. \n        Output: ", "result": "\n        refrigerator, freezer, microwave, oven, stove, dishwasher, washing machine, clothes dryer, air conditioner, dehumidifier.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"freezer\",\n        \"microwave\",\n        \"oven\",\n        \"stove\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"clothes dryer\",\n        \"air conditioner\",\n        \"dehumidifier\"\n"}
{"cat": "appliance", "slot": "purpose", "value": "presentation", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used for presentation. \n        Output: ", "result": "\n        refrigerator, oven, stove, microwave, toaster, blender, coffee maker, dishwasher, washing machine, dryer \n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"dryer\"\n    ]\n    app"}
{"cat": "appliance", "slot": "purpose", "value": "call", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used for call. \n        Output: ", "result": "\n        refrigerator, dishwasher, oven, stove, microwave, toaster, blender, coffee maker, washing machine, dryer \n    \"\"\"\n    appliance_words = [\"refrigerator\", \"dishwasher\", \"oven\", \"stove\", \"microwave\", \"toaster\", \"blender\", \"coffee maker\", \"washing machine\", \"dryer\"]\n    call_words = [word for word in appliance_words if \"call\" in word]\n    return call_"}
{"cat": "appliance", "slot": "purpose", "value": "measure", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used to measure. \n        Output: ", "result": "\n        refrigerator, freezer, oven, stove, microwave, dishwasher, washing machine, dryer, air conditioner, dehumidifier\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"freezer\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"dryer\",\n        \"air conditioner\",\n        \"dehumidifier\"\n    ]\n   "}
{"cat": "appliance", "slot": "purpose", "value": "project", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used to project. \n        Output: ", "result": "\n        refrigerator, oven, stove, dishwasher, washing machine, dryer, microwave, toaster, blender, coffee maker.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"oven\",\n        \"stove\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"dryer\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\"\n    ]\n    used"}
{"cat": "appliance", "slot": "purpose", "value": "service", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used for service. \n        Output: ", "result": "\n        dishwasher, oven, refrigerator, washing machine, dryer, stove, microwave, toaster, blender, coffee maker.\n    \"\"\"\n    appliance_words = [\n        \"dishwasher\",\n        \"oven\",\n        \"refrigerator\",\n        \"washing machine\",\n        \"dryer\",\n        \"stove\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\"\n    ]\n    service"}
{"cat": "appliance", "slot": "purpose", "value": "telephone", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used for telephone. \n        Output: ", "result": "\n        refrigerator, telephone, dishwasher, microwave, oven, stove, washing machine, dryer, vacuum cleaner, air conditioner.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"telephone\", \"dishwasher\", \"microwave\", \"oven\", \"stove\", \"washing machine\", \"dryer\", \"vacuum cleaner\", \"air conditioner\"]\n    telephone_words = [word for word in appliance_words if \"telephone\" in word]\n"}
{"cat": "appliance", "slot": "purpose", "value": "phone", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used for phone. \n        Output: ", "result": "\n        refrigerator, microwave, oven, toaster, phone, answering machine, fax, modem, phone jack, phone charger.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"microwave\", \"oven\", \"toaster\", \"phone\", \"answering machine\", \"fax\", \"modem\", \"phone jack\", \"phone charger\"]\n    phone_words = [word for word in appliance_words if \"phone\" in word]\n    print(\", \".join(phone_words))\n```\nExplanation:"}
{"cat": "appliance", "slot": "purpose", "value": "wash", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used for wash. \n        Output: ", "result": "\n        dishwasher, washer, washing machine, clothes washer, clothes washer and dryer, washing machine and dryer, washer and dryer, clothes washer and dryer, dishwasher and dryer, washer and dryer.\n    \"\"\"\n    appliance_words = [\"dishwasher\", \"washer\", \"washing machine\", \"clothes washer\", \"clothes washer and dryer\", \"washing machine and dryer\", \"washer and dryer\", \"clothes was"}
{"cat": "appliance", "slot": "purpose", "value": "cook", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used to cook. \n        Output: ", "result": " stove, oven, microwave, toaster, grill, pan, pot, kettle, wok, rice cooker. \n        \"\"\"\n        category = \"appliance\"\n        condition = \"are used to cook\"\n        words = get_words(category, condition)\n        if words:\n            print(\", \".join(words))\n        else:\n            print(\"No words found.\")\n```\nExample usage:\n```python\n# Call the function\nget_cooking_appliances()\n```\nThis function uses the `get_words` function"}
{"cat": "appliance", "slot": "purpose", "value": "cook", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used for cook. \n        Output: ", "result": "\n        refrigerator, oven, stove, microwave, toaster, coffee maker, dishwasher, blender, food processor, slow cooker\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"toaster\",\n        \"coffee maker\",\n        \"dishwasher\",\n        \"blender\",\n        \"food processor\",\n        \"slow cooker\"\n    ]\n    cook_words"}
{"cat": "appliance", "slot": "purpose", "value": "display", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used to display. \n        Output: ", "result": "\n        refrigerator, oven, stove, dishwasher, microwave, toaster, blender, coffee maker, washing machine, dryer\n```\n\n```"}
{"cat": "appliance", "slot": "purpose", "value": "truck", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used for truck. \n        Output: ", "result": "\n        refrigerator, freezer, stove, oven, microwave, dishwasher, washing machine, dryer, air conditioner, heater.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"freezer\", \"stove\", \"oven\", \"microwave\", \"dishwasher\", \"washing machine\", \"dryer\", \"air conditioner\", \"heater\"]\n    truck_appliance_words = [word for word in appliance_words if \"truck\" in word]\n   "}
{"cat": "appliance", "slot": "purpose", "value": "communication", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used for communication. \n        Output: ", "result": "\n        refrigerator, freezer, microwave, oven, stove, dishwasher, washing machine, dryer, vacuum, air conditioner\n```\n\nExample 3:\n```\nQuestion: Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicle. \n        Condition: are used for transportation. \n        Output: \n        car, truck, van, bus, train, subway, bike"}
{"cat": "appliance", "slot": "place", "value": "restaurant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be found or used in restaurants. \n        Output: ", "result": "\n            \n```"}
{"cat": "appliance", "slot": "place", "value": "cinema", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be found or used in cinemas. \n        Output: ", "result": "\n        refrigerator, microwave, popcorn, soda, candy, \n        movie theater, projector, screen, speakers, \n        concession stand.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\", \"microwave\", \"popcorn\", \"soda\", \"candy\", \n        \"movie theater\", \"projector\", \"screen\", \"speakers\", \n        \"concession stand\"\n    ]\n    appliance_words = [word for word in appliance_words"}
{"cat": "appliance", "slot": "place", "value": "weather station", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be found or used in weather stations. \n        Output: ", "result": "\n            1. Barometer\n            2. Anemometer\n            3. Hygrometer\n            4. Thermometer\n            5. Rain gauge\n            6. Solar panel\n            7. Wind vane\n            8. UV sensor\n            9. Temperature sensor\n            10. Humidity sensor\n        \"\"\"\n        appliance_words = [\n            \"barometer\",\n            \"anemometer\",\n            \"hygrometer\",\n            \"thermometer\",\n            \"rain_gauge\",\n            \"solar_panel\","}
{"cat": "appliance", "slot": "place", "value": "planetarium", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be found or used in planetariums. \n        Output: ", "result": "\n            1. Projector\n            2. Dome\n            3. Telescope\n            4. Star chart\n            5. Planetarium software\n            6. Speakers\n            7. Lighting\n            8. Seating\n            9. Control system\n            10. Interactive displays\n        \"\"\"\n        appliance_words = [\n            \"projector\",\n            \"dome\",\n            \"telescope\",\n            \"star chart\",\n            \"planetarium software\",\n            \"speakers\",\n            \"lighting\",\n            \"seating\",\n           "}
{"cat": "appliance", "slot": "place", "value": "hospital", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be found or used in hospitals. \n        Output: ", "result": "\n            \n```"}
{"cat": "appliance", "slot": "place", "value": "hotel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be found or used in hotels. \n        Output: ", "result": "\n            \n```"}
{"cat": "appliance", "slot": "place", "value": "car", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be found or used in cars. \n        Output: ", "result": "\n            1. GPS\n            2. Radio\n            3. CD player\n            4. Air conditioning\n            5. Heater\n            6. Cooling fan\n            7. Power windows\n            8. Power steering\n            9. Cruise control\n            10. Tire pressure monitoring system\n        \"\"\"\n        appliance_words = [\"GPS\", \"Radio\", \"CD player\", \"Air conditioning\", \"Heater\", \"Cooling fan\", \"Power windows\", \"Power steering\", \"Cruise control\", \"Tire pressure monitoring system\"]\n"}
{"cat": "appliance", "slot": "place", "value": "classroom", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be found or used in classrooms. \n        Output: ", "result": "\n            \n```"}
{"cat": "appliance", "slot": "place", "value": "bakery", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be found or used in bakeries. \n        Output: ", "result": "\n            oven, bread, flour, sugar, yeast, mixer, dough, pans, timer, scale\n        Explanation: Oven, bread, flour, sugar, yeast, mixer, dough, pans, timer, scale are all appliances that can be found or used in bakeries. \n        \"\"\"\n        category = Category.objects.get(name='appliance')\n        bakeries = Bakeries.objects.filter(category=category)\n        words = []\n        for bakery in bakeries:\n           "}
{"cat": "appliance", "slot": "place", "value": "theater", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be found or used in theaters. \n        Output: ", "result": "\n        dishwasher, oven, refrigerator, stove, microwave, toaster, blender, coffee maker, washing machine, dryer\n    \"\"\"\n    appliance_words = [\n        \"dishwasher\",\n        \"oven\",\n        \"refrigerator\",\n        \"stove\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\",\n        \"washing machine\",\n        \"dryer\"\n    ]\n    theater"}
{"cat": "appliance", "slot": "place", "value": "baker", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be found or used in bakers. \n        Output: ", "result": "\n        oven, mixer, blender, toaster, microwave, grill, frying pan, food processor, bread maker, dishwasher.\n    \"\"\"\n    category = \"appliance\"\n    condition = \"can be found or used in bakers\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of 10 words that belong to that category.\n        Desired output: comma"}
{"cat": "appliance", "slot": "place", "value": "factory", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be found or used in factories. \n        Output: ", "result": "\n        refrigerator, freezer, oven, stove, dishwasher, washing machine, dryer, vacuum cleaner, air conditioner, dehumidifier.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\", \"freezer\", \"oven\", \"stove\", \"dishwasher\", \"washing machine\", \n        \"dryer\", \"vacuum cleaner\", \"air conditioner\", \"dehumidifier\"\n    ]\n    factory_words = [word for word in appliance_"}
{"cat": "appliance", "slot": "place", "value": "office", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be found or used in offices. \n        Output: ", "result": "\n            1. Computer\n            2. Printer\n            3. Fax machine\n            4. Copier\n            5. Scanner\n            6. Phone\n            7. Desk lamp\n            8. Coffee maker\n            9. Water cooler\n            10. Vending machine\n        \"\"\"\n        appliance_words = [\n            \"computer\",\n            \"printer\",\n            \"fax machine\",\n            \"copier\",\n            \"scanner\",\n            \"phone\",\n            \"desk lamp\",\n            \"coffee maker\","}
{"cat": "appliance", "slot": "place", "value": "conference room", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be found or used in conference rooms. \n        Output: ", "result": "\n            \n```"}
{"cat": "appliance", "slot": "place", "value": "school", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be found or used in schools. \n        Output: ", "result": "\n        refrigerator, microwave, oven, stove, dishwasher, toaster, blender, coffee maker, water cooler, vacuum cleaner.\n    \"\"\"\n    category = \"appliance\"\n    condition = \"can be found or used in schools\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(find_words(\"appliance\", \"can be found or used in schools\"))\n# Output: refrigerator, microwave, oven,"}
{"cat": "appliance", "slot": "place", "value": "home", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be found or used in homes. \n        Output: ", "result": "\n        dishwasher, refrigerator, oven, stove, microwave, toaster, blender, coffee maker, washing machine, dryer\n    \"\"\"\n    appliance_words = [\n        \"dishwasher\",\n        \"refrigerator\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\",\n        \"washing machine\",\n        \"dryer\"\n    ]\n    category_"}
{"cat": "appliance", "slot": "place", "value": "lab", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be found or used in labs. \n        Output: ", "result": "\n        refrigerator, stove, oven, dishwasher, microwave, toaster, blender, coffee maker, washing machine, dryer\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"stove\",\n        \"oven\",\n        \"dishwasher\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\",\n        \"washing machine\",\n        \"dryer\"\n    ]\n    category_"}
{"cat": "appliance", "slot": "place", "value": "kitchen", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be found or used in kitchens. \n        Output: ", "result": "\n        refrigerator, oven, stove, microwave, dishwasher, toaster, blender, coffee maker, sink, trash can.\n```\n\n```"}
{"cat": "appliance", "slot": "place", "value": "room", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be found or used in rooms. \n        Output: ", "result": "\n        refrigerator, stove, oven, microwave, dishwasher, washing machine, dryer, air conditioner, heater, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"stove\",\n        \"oven\",\n        \"microwave\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"dryer\",\n        \"air conditioner\",\n        \"heater\",\n        \"vacuum cleaner\"\n    ]\n"}
{"cat": "appliance", "slot": "material", "value": "metal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be made of metal. \n        Output: ", "result": "\n        refrigerator, stove, oven, microwave, dishwasher, washing machine, iron, vacuum cleaner, air conditioner, freezer.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"stove\",\n        \"oven\",\n        \"microwave\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"iron\",\n        \"vacuum cleaner\",\n        \"air conditioner\",\n        \"freezer\"\n    ]\n    metal"}
{"cat": "appliance", "slot": "material", "value": "plastic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be made of plastic. \n        Output: ", "result": "\n        refrigerator, dishwasher, washing machine, oven, microwave, toaster, blender, vacuum cleaner, air conditioner, television.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"oven\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"vacuum cleaner\",\n        \"air conditioner\",\n        \"television\"\n    ]\n    pl"}
{"cat": "appliance", "slot": "material", "value": "steel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be made of steel. \n        Output: ", "result": "\n        refrigerator, stove, oven, dishwasher, washing machine, iron, vacuum cleaner, air conditioner, freezer, microwave.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"stove\",\n        \"oven\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"iron\",\n        \"vacuum cleaner\",\n        \"air conditioner\",\n        \"freezer\",\n        \"microwave\"\n    ]\n    steel"}
{"cat": "appliance", "slot": "material", "value": "glass", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be made of glass. \n        Output: ", "result": "\n        dishwasher, glass, microwave, oven, refrigerator, stove, toaster, washing machine, window, light\\_bulb \n    \"\"\"\n    category = \"appliance\"\n    condition = \"can be made of glass\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"appliance\", \"can be made of metal\"))\nprint(get_words(\"appliance\", \"can be made of plastic\"))\nprint(get_"}
{"cat": "appliance", "slot": "material", "value": "cast iron", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be made of cast iron. \n        Output: ", "result": "\n        refrigerator, stove, oven, iron, washing machine, sink, toilet, bathtub, dishwasher, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"stove\", \"oven\", \"iron\", \"washing machine\", \"sink\", \"toilet\", \"bathtub\", \"dishwasher\", \"vacuum cleaner\"]\n    can_be_made_of_cast_iron_words = [word for word in appliance_words if \""}
{"cat": "appliance", "slot": "purpose", "value": "screen", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are used for screen. \n        Output: ", "result": "\n        refrigerator, oven, stove, microwave, dishwasher, washing machine, dryer, TV, air conditioner, dehumidifier\n```\n\nExample 3:\n```\nQuestion: Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: car. \n        Condition: are used for transportation. \n        Output: \n        car, truck, van, SUV, minivan, sedan, sports"}
{"cat": "appliance", "slot": "colorPattern", "value": "black", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be black. \n        Output: ", "result": "\n        refrigerator, stove, oven, dishwasher, microwave, toaster, blender, coffee maker, washing machine, dryer.\n    \"\"\"\n    black_words = [\"refrigerator\", \"stove\", \"oven\", \"dishwasher\", \"microwave\", \"toaster\", \"blender\", \"coffee maker\", \"washing machine\", \"dryer\"]\n    appliance_words = [\"refrigerator\", \"stove\", \"oven\", \"dishwasher\", \""}
{"cat": "appliance", "slot": "colorPattern", "value": "silver", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be silver. \n        Output: ", "result": "\n        refrigerator, oven, stove, microwave, dishwasher, washing machine, vacuum cleaner, air conditioner, freezer, silver. \n    \"\"\"\n    appliance_words = [\"refrigerator\", \"oven\", \"stove\", \"microwave\", \"dishwasher\", \"washing machine\", \"vacuum cleaner\", \"air conditioner\", \"freezer\"]\n    can_be_silver_words = [word for word in appliance_words if \"silver\" in word]\n   "}
{"cat": "appliance", "slot": "colorPattern", "value": "black", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be black. \n        Output: ", "result": "\n        refrigerator, stove, oven, dishwasher, microwave, toaster, blender, coffee maker, washing machine, dryer.\n    \"\"\"\n    black_words = [\"refrigerator\", \"stove\", \"oven\", \"dishwasher\", \"microwave\", \"toaster\", \"blender\", \"coffee maker\", \"washing machine\", \"dryer\"]\n    appliance_words = [\"refrigerator\", \"stove\", \"oven\", \"dishwasher\", \""}
{"cat": "appliance", "slot": "colorPattern", "value": "silver", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be silver. \n        Output: ", "result": "\n        refrigerator, oven, stove, microwave, dishwasher, washing machine, vacuum cleaner, air conditioner, freezer, silver. \n    \"\"\"\n    appliance_words = [\"refrigerator\", \"oven\", \"stove\", \"microwave\", \"dishwasher\", \"washing machine\", \"vacuum cleaner\", \"air conditioner\", \"freezer\"]\n    can_be_silver_words = [word for word in appliance_words if \"silver\" in word]\n   "}
{"cat": "appliance", "slot": "colorPattern", "value": "white", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be white. \n        Output: ", "result": "\n        refrigerator, dishwasher, oven, stove, microwave, washing machine, dryer, air conditioner, dehumidifier, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"dishwasher\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"washing machine\",\n        \"dryer\",\n        \"air conditioner\",\n        \"dehumidifier\",\n        \"vacuum cleaner\""}
{"cat": "appliance", "slot": "colorPattern", "value": "white", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be white. \n        Output: ", "result": "\n        refrigerator, dishwasher, oven, stove, microwave, washing machine, dryer, air conditioner, dehumidifier, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"dishwasher\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"washing machine\",\n        \"dryer\",\n        \"air conditioner\",\n        \"dehumidifier\",\n        \"vacuum cleaner\""}
{"cat": "appliance", "slot": "part", "value": "handle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  handle. \n        Output: ", "result": " refrigerator, microwave, oven, dishwasher, toaster, blender, coffee maker, washing machine, dryer, vacuum cleaner. \n        \"\"\"\n        category = \"appliance\"\n        condition = \"can have handle\"\n        words = get_words(category, condition)\n        if words:\n            print(\", \".join(words))\n        else:\n            print(\"No words found.\")\n```\nExample usage:\n```\npython appliance_words.py\n```\nThis will output:\n```\nrefriger"}
{"cat": "appliance", "slot": "part", "value": "cord", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  cord. \n        Output: ", "result": " blender, coffee-maker, curling-iron, dishwasher, dryer, \n                 hair-dryer, iron, microwave, oven, refrigerator. \n    \"\"\"\n    appliance_words = [\"blender\", \"coffee-maker\", \"curling-iron\", \"dishwasher\", \"dryer\", \"hair-dryer\", \"iron\", \"microwave\", \"oven\", \"refrigerator\"]\n    cord_words = [word for word in appliance_words if"}
{"cat": "appliance", "slot": "part", "value": "plug", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  plug. \n        Output: ", "result": " refrigerator, microwave, toaster, lamp, iron, vacuum, hair dryer, blender, coffee maker, oven\n```\n\nExample 2:\n```\nInput:\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicle. \n        Condition: can have 4 wheels. \n        Output:  car, truck, van, SUV, minivan, bus, motorcycle, scooter,"}
{"cat": "appliance", "slot": "part", "value": "push-button", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  push-button. \n        Output: ", "result": " refrigerator, dishwasher, washing machine, oven, stove, microwave, toaster, blender, coffee maker, vacuum cleaner. \n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\",\n        \"vacuum cleaner\"\n    ]\n"}
{"cat": "appliance", "slot": "part", "value": "knob", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  knob. \n        Output: ", "result": " refrigerator, stove, oven, dishwasher, microwave, toaster, blender, coffee maker, washing machine, dryer.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"stove\",\n        \"oven\",\n        \"dishwasher\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\",\n        \"washing machine\",\n        \"dryer\"\n    ]\n    knob_"}
{"cat": "appliance", "slot": "part", "value": "door", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  door. \n        Output: ", "result": " refrigerator, oven, stove, dishwasher, microwave, toaster, blender, coffee maker, washing machine, dryer.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"oven\", \"stove\", \"dishwasher\", \"microwave\", \"toaster\", \"blender\", \"coffee maker\", \"washing machine\", \"dryer\"]\n    door_words = [\"refrigerator\", \"oven\", \"stove\", \"dishwasher\", \"microw"}
{"cat": "appliance", "slot": "part", "value": "rotor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  rotor. \n        Output: ", "result": "\n        refrigerator, dishwasher, washing machine, oven, stove, microwave, toaster, blender, coffee maker, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\",\n        \"vacuum cleaner\"\n    ]"}
{"cat": "appliance", "slot": "part", "value": "scale bar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  scale bar. \n        Output: ", "result": " fridge, freezer, microwave, oven, stove, dishwasher, washing machine, dryer, air conditioner, dehumidifier \n    \"\"\"\n    appliance_words = [\"fridge\", \"freezer\", \"microwave\", \"oven\", \"stove\", \"dishwasher\", \"washing machine\", \"dryer\", \"air conditioner\", \"dehumidifier\"]\n    appliance_words = [word for word in appliance_words if \"scale bar\" in word]\n    return \", \".join("}
{"cat": "appliance", "slot": "part", "value": "bulb", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  bulb. \n        Output: ", "result": " lamp,bulb. \n    \"\"\"\n    appliance_words = [\"light\", \"lamp\", \"bulb\"]\n    can_have_bulb_words = [word for word in appliance_words if \"bulb\" in word]\n    return \", \".join(can_have_bulb_words)\n\nprint(get_appliance_words(category=\"appliance\", condition=\"can have  bulb\"))\n```\nOutput:\n```\nlamp,bulb\n```"}
{"cat": "appliance", "slot": "part", "value": "sensor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  sensor. \n        Output: ", "result": " refrigerator, oven, microwave, toaster, coffee maker, dishwasher, washing machine, dryer, blender, vacuum cleaner. \n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"oven\",\n        \"microwave\",\n        \"toaster\",\n        \"coffee maker\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"dryer\",\n        \"blender\",\n        \"vacuum cleaner\"\n    ]"}
{"cat": "appliance", "slot": "part", "value": "sprayer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  sprayer. \n        Output: ", "result": " blender, coffee-maker, dishwasher, food-processor, microwave, oven, refrigerator, toaster, vacuum-cleaner, washing-machine\n```\n\n```"}
{"cat": "appliance", "slot": "part", "value": "rack", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  rack. \n        Output: ", "result": " refrigerator, dishwasher, oven, stove, microwave, toaster, blender, coffee maker, washing machine, dryer.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"dishwasher\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\",\n        \"washing machine\",\n        \"dryer\"\n    ]\n    rack_"}
{"cat": "appliance", "slot": "part", "value": "microwave", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  microwave. \n        Output: ", "result": " refrigerator, oven, stove, microwave, dishwasher, toaster, blender, coffee maker, washing machine, dryer.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"oven\", \"stove\", \"microwave\", \"dishwasher\", \"toaster\", \"blender\", \"coffee maker\", \"washing machine\", \"dryer\"]\n    appliance_words = [word for word in appliance_words if word.lower().startswith(\"microwave\")]\n"}
{"cat": "appliance", "slot": "part", "value": "hearthstone", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  hearthstone. \n        Output: ", "result": " stove, oven, microwave, refrigerator, dishwasher, toaster, blender, coffee maker, washing machine, dryer \n    \"\"\"\n    appliance_words = [\"stove\", \"oven\", \"microwave\", \"refrigerator\", \"dishwasher\", \"toaster\", \"blender\", \"coffee maker\", \"washing machine\", \"dryer\"]\n    can_have_hearthstone_words = [word for word in appliance_words if \"hearthstone\" in word"}
{"cat": "appliance", "slot": "part", "value": "fireside", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  fireside. \n        Output: ", "result": "oven, stove, fireplace, heater, grill, oven, stove, fireplace, heater, grill.\n    \"\"\"\n    appliance_words = [\"oven\", \"stove\", \"fireplace\", \"heater\", \"grill\", \"oven\", \"stove\", \"fireplace\", \"heater\", \"grill\"]\n    can_have_fireside_words = [word for word in appliance_words if \"fireside\" in word]\n    return \", \".join(can_have_fireside_words)\n\nprint("}
{"cat": "appliance", "slot": "part", "value": "capillary tubing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  capillary tubing. \n        Output: ", "result": "\n            \n```"}
{"cat": "appliance", "slot": "part", "value": "fire iron", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  fire iron. \n        Output: ", "result": " refrigerator, stove, oven, iron, fireplace, microwave, toaster, blender, coffee maker, dishwasher.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"stove\", \"oven\", \"iron\", \"fireplace\", \"microwave\", \"toaster\", \"blender\", \"coffee maker\", \"dishwasher\"]\n    appliance_words = [word for word in appliance_words if \"fire\" in word or \"iron\" in word]\n    return \","}
{"cat": "appliance", "slot": "part", "value": "steam whistle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  steam whistle. \n        Output: ", "result": " refrigerator, stove, oven, microwave, toaster, kettle, iron, vacuum cleaner, washing machine, dishwasher \n    \"\"\"\n    appliance_words = [\"refrigerator\", \"stove\", \"oven\", \"microwave\", \"toaster\", \"kettle\", \"iron\", \"vacuum cleaner\", \"washing machine\", \"dishwasher\"]\n    appliance_words = [word for word in appliance_words if \"steam whistle\" in word]\n   "}
{"cat": "appliance", "slot": "part", "value": "grating", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  grating. \n        Output: ", "result": "blender, coffee-maker, dishwasher, dryer, \n        oven, refrigerator, toaster, vacuum, washing \n        machine\n    \"\"\"\n    appliance_words = [\n        \"blender\", \"coffee-maker\", \"dishwasher\", \"dryer\", \"oven\", \n        \"refrigerator\", \"toaster\", \"vacuum\", \"washing machine\"\n    ]\n    appliance_words = [word for word in appliance_words if \"grating\" in"}
{"cat": "appliance", "slot": "part", "value": "refrigerator", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  refrigerator. \n        Output: ", "result": "\n        refrigerator, stove, oven, microwave, dishwasher, toaster, blender, coffee maker, washing machine, dryer \n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"stove\",\n        \"oven\",\n        \"microwave\",\n        \"dishwasher\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\",\n        \"washing machine\",\n        \"dryer\"\n    ]\n    app"}
{"cat": "appliance", "slot": "part", "value": "fireplace", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  fireplace. \n        Output: ", "result": " stove, oven, microwave, refrigerator, dishwasher, fireplace, toaster, coffee maker, washer, dryer \n    \"\"\"\n    appliance_words = [\"stove\", \"oven\", \"microwave\", \"refrigerator\", \"dishwasher\", \"fireplace\", \"toaster\", \"coffee maker\", \"washer\", \"dryer\"]\n    can_have_fireplace_words = [word for word in appliance_words if \"fireplace\" in word]\n    return"}
{"cat": "appliance", "slot": "part", "value": "pipe", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  pipe. \n        Output: ", "result": "\n        refrigerator, dishwasher, washing\\_machine, oven, stove, microwave, toaster, blender, coffee\\_maker, vacuum.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"dishwasher\",\n        \"washing_machine\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee_maker\",\n        \"vacuum\"\n    ]"}
{"cat": "appliance", "slot": "part", "value": "refrigeration system", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  refrigeration system. \n        Output: ", "result": "\n        - stove\n        - oven\n        - microwave\n        - dishwasher\n        - freezer\n        - refrigerator\n        - washing machine\n        - clothes dryer\n        - air conditioner\n        - dehumidifier\n        \"\"\"\n        appliance_words = [\"stove\", \"oven\", \"microwave\", \"dishwasher\", \"freezer\", \"refrigerator\", \"washing machine\", \"clothes dryer\", \"air conditioner\", \"dehumidifier\"]\n        appliance"}
{"cat": "appliance", "slot": "part", "value": "capillary tube", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  capillary tube. \n        Output: ", "result": "\n        refrigerator, freezer, air conditioner, dehumidifier, humidifier, oven, microwave, toaster, coffee maker, dishwasher\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"freezer\",\n        \"air conditioner\",\n        \"dehumidifier\",\n        \"humidifier\",\n        \"oven\",\n        \"microwave\",\n        \"toaster\",\n        \"coffee maker\",\n        \"dishwasher\"\n    ]"}
{"cat": "appliance", "slot": "part", "value": "hearth", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  hearth. \n        Output: ", "result": " stove, oven, microwave, refrigerator, dishwasher, toaster, coffee maker, washing machine, dryer, freezer\n```\n\n```"}
{"cat": "appliance", "slot": "part", "value": "mantlepiece", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  mantlepiece. \n        Output: ", "result": "\n        - lamp\n        - stove\n        - oven\n        - microwave\n        - refrigerator\n        - dishwasher\n        - toaster\n        - coffee maker\n        - iron\n        - vacuum\n        \"\"\"\n        appliance_words = [\"lamp\", \"stove\", \"oven\", \"microwave\", \"refrigerator\", \"dishwasher\", \"toaster\", \"coffee maker\", \"iron\", \"vacuum\"]\n        appliance_words = [word for word in app"}
{"cat": "appliance", "slot": "part", "value": "flashlight battery", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  flashlight battery. \n        Output: ", "result": " lamp,torch,flashlight,battery,bulb,light,lamp-battery,torch-battery,flashlight-battery,bulb-battery,light-battery. \n    \"\"\"\n    appliance_words = [\"lamp\", \"torch\", \"flashlight\", \"battery\", \"bulb\", \"light\", \"lamp-battery\", \"torch-battery\", \"flashlight-battery\", \"bulb-battery\", \"light-battery\"]\n    flash"}
{"cat": "appliance", "slot": "part", "value": "drip pan", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  drip pan. \n        Output: ", "result": " refrigerator, dishwasher, oven, stove, microwave, toaster, coffee maker, washing machine, dryer, dishwasher. \n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"dishwasher\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"toaster\",\n        \"coffee maker\",\n        \"washing machine\",\n        \"dryer\",\n        \"dishwasher\"\n"}
{"cat": "appliance", "slot": "part", "value": "lens", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  lens. \n        Output: ", "result": "\n        - lamp \n        - microwave \n        - oven \n        - refrigerator \n        - stove \n        - toaster \n        - blender \n        - coffee maker \n        - dishwasher \n        - washing machine \n        - vacuum cleaner \n    \"\"\"\n    appliance_words = [\"lamp\", \"microwave\", \"oven\", \"refrigerator\", \"stove\", \"toaster\", \"blender\", \"coffee maker\", \"dishwasher"}
{"cat": "appliance", "slot": "part", "value": "light", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  light. \n        Output: ", "result": " fridge, lamp, light\\_bulb, toaster, kettle, iron, oven, microwave, dishwasher, washing\\_machine. \n    \"\"\"\n    appliance_words = [\"fridge\", \"lamp\", \"light\\_bulb\", \"toaster\", \"kettle\", \"iron\", \"oven\", \"microwave\", \"dishwasher\", \"washing\\_machine\"]\n    light_appliance_words = [word for word in appliance_words if \"light\" in word]\n    return light_app"}
{"cat": "appliance", "slot": "part", "value": "button", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  button. \n        Output: ", "result": " refrigerator, microwave, oven, dishwasher, washing machine, dryer, stove, toaster, blender, coffee maker.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"microwave\", \"oven\", \"dishwasher\", \"washing machine\", \"dryer\", \"stove\", \"toaster\", \"blender\", \"coffee maker\"]\n    button_words = []\n    for word in appliance_words:\n        if \"can have\" in word:\n           "}
{"cat": "appliance", "slot": "part", "value": "shutter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  shutter. \n        Output: ", "result": "blender, coffee-maker, dishwasher, dryer, freezer, microwave, oven, refrigerator, washer, window-shutter. \n        \"\"\"\n        category = \"appliance\"\n        condition = \"can have shutter\"\n        words = get_words(category, condition)\n        if words:\n            print(\", \".join(words))\n        else:\n            print(\"No words found.\")\n\n# Test the functions\ntest_get_words_in_category()\ntest_get_words_in_category_with"}
{"cat": "appliance", "slot": "part", "value": "wire", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  wire. \n        Output: ", "result": " fridge, microwave, oven, toaster, kettle, iron, hair dryer, vacuum cleaner, washing machine, dishwasher.\n    \"\"\"\n    appliance_words = [\"fridge\", \"microwave\", \"oven\", \"toaster\", \"kettle\", \"iron\", \"hair dryer\", \"vacuum cleaner\", \"washing machine\", \"dishwasher\"]\n    appliance_words = [word for word in appliance_words if \"wire\" in word]\n    return appliance_words"}
{"cat": "appliance", "slot": "part", "value": "grate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  grate. \n        Output: ", "result": "stove, oven, grate. \n    \"\"\"\n    appliance_words = [\"stove\", \"oven\", \"fridge\", \"freezer\", \"dishwasher\", \"washer\", \"dryer\", \"oven\", \"grate\"]\n    appliance_words = [word for word in appliance_words if word.lower().endswith(\"ate\")]\n    appliance_words = [word for word in appliance_words if word.lower() not in [\"stove\", \"oven\", \"fridge\", \"freezer\", \"dishwash"}
{"cat": "appliance", "slot": "part", "value": "mantel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  mantel. \n        Output: ", "result": "\n        refrigerator, stove, oven, microwave, dishwasher, toaster, coffee maker, iron, hair dryer, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"stove\", \"oven\", \"microwave\", \"dishwasher\", \"toaster\", \"coffee maker\", \"iron\", \"hair dryer\", \"vacuum cleaner\"]\n    can_have_mantel_words = [word for word in appliance_words if \"mant"}
{"cat": "appliance", "slot": "part", "value": "telephone receiver", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  telephone receiver. \n        Output: ", "result": " refrigerator, microwave, toaster, telephone, telephone receiver, stove, oven, dishwasher, washing machine, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"microwave\", \"toaster\", \"telephone\", \"telephone receiver\", \"stove\", \"oven\", \"dishwasher\", \"washing machine\", \"vacuum cleaner\"]\n    appliance_words = [word for word in appliance_words if \"telephone\" not in word and \"telephone"}
{"cat": "appliance", "slot": "part", "value": "capillary", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  capillary. \n        Output: ", "result": "fridge, microwave, oven, toaster, kettle, iron, hair dryer, vacuum cleaner, washing machine, dishwasher.\n    \"\"\"\n    appliance_words = [\"fridge\", \"microwave\", \"oven\", \"toaster\", \"kettle\", \"iron\", \"hair dryer\", \"vacuum cleaner\", \"washing machine\", \"dishwasher\"]\n    can_have_capillary_words = [word for word in appliance_words if \"capillary\" in word]"}
{"cat": "appliance", "slot": "part", "value": "oven", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  oven. \n        Output: ", "result": "oven, stove, microwave, toaster, refrigerator, dishwasher, blender, coffee maker, washing machine, dryer.\n    \"\"\"\n    appliance_words = [\"oven\", \"stove\", \"microwave\", \"toaster\", \"refrigerator\", \"dishwasher\", \"blender\", \"coffee maker\", \"washing machine\", \"dryer\"]\n    if \"can have\" in category:\n        appliance_words = [word for word in appliance_words if word.lower"}
{"cat": "appliance", "slot": "part", "value": "bimetallic strip", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  bimetallic strip. \n        Output: ", "result": "\n        refrigerator, freezer, oven, stove, microwave, dishwasher, washing machine, clothes dryer, air conditioner, dehumidifier \n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"freezer\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"clothes dryer\",\n        \"air conditioner\",\n        \"dehumidifier\"\n"}
{"cat": "appliance", "slot": "part", "value": "mouthpiece", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  mouthpiece. \n        Output: ", "result": "\n        refrigerator, oven, microwave, toaster, blender, coffee maker, dishwasher, washing machine, air conditioner, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"oven\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"air conditioner\",\n        \"vacuum cleaner\"\n"}
{"cat": "appliance", "slot": "part", "value": "water back", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  water back. \n        Output: ", "result": " refrigerator, dishwasher, washing machine, oven, microwave, toaster, coffee maker, humidifier, air conditioner, dehumidifier \n```\n\n```"}
{"cat": "appliance", "slot": "part", "value": "mantelpiece", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  mantelpiece. \n        Output: ", "result": "\n        - lamp\n        - stove\n        - refrigerator\n        - oven\n        - microwave\n        - dishwasher\n        - toaster\n        - coffee maker\n        - iron\n        - vacuum cleaner\n        \"\"\"\n        appliance_words = [\n            'lamp',\n            'stove',\n            'refrigerator',\n            'oven',\n            'microwave',\n            'dishwasher',\n            'toaster',\n            'coffee maker',\n            'ir"}
{"cat": "appliance", "slot": "part", "value": "platform", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  platform. \n        Output: ", "result": " refrigerator, dishwasher, oven, stove, microwave, toaster, blender, coffee maker, washing machine, dryer\n```\n\n```"}
{"cat": "appliance", "slot": "part", "value": "cable", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  cable. \n        Output: ", "result": " refrigerator, stove, dishwasher, oven, microwave, toaster, blender, coffee maker, washer, dryer \n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"stove\",\n        \"dishwasher\",\n        \"oven\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\",\n        \"washer\",\n        \"dryer\"\n    ]\n    appliance_words ="}
{"cat": "appliance", "slot": "part", "value": "keypad", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  keypad. \n        Output: ", "result": "\n        dishwasher, microwave, oven, refrigerator, stove, toaster, blender, coffee maker, washing machine, dryer\n    \"\"\"\n    appliance_words = [\n        \"dishwasher\",\n        \"microwave\",\n        \"oven\",\n        \"refrigerator\",\n        \"stove\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\",\n        \"washing machine\",\n        \"dryer\"\n    ]\n    appliance"}
{"cat": "appliance", "slot": "part", "value": "chimneypiece", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  chimneypiece. \n        Output: ", "result": "oven, cooker, hob, chimneypiece, fireplace, grill, stove, oven, cooker, hob. \n        \"\"\"\n        category = \"appliance\"\n        words = [\"oven\", \"cooker\", \"hob\", \"chimneypiece\", \"fireplace\", \"grill\", \"stove\", \"oven\", \"cooker\", \"hob\"]\n        words = [word for word in words if word.lower().startswith(category.lower() + \" can have \")]\n        return \", \".join(words)\n"}
{"cat": "appliance", "slot": "part", "value": "mantle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  mantle. \n        Output: ", "result": "\n        refrigerator, stove, oven, microwave, toaster, coffee maker, dishwasher, clothes washer, clothes dryer, air conditioner, dehumidifier\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"stove\", \"oven\", \"microwave\", \"toaster\", \"coffee maker\", \"dishwasher\", \"clothes washer\", \"clothes dryer\", \"air conditioner\", \"dehumidifier\"]\n    appliance_words = [word for word"}
{"cat": "appliance", "slot": "generalization", "value": "appliance", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are appliance. \n        Output: ", "result": "\n        refrigerator, oven, dishwasher, washing machine, dryer, stove, microwave, toaster, blender, coffee maker.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"oven\", \"dishwasher\", \"washing machine\", \"dryer\", \"stove\", \"microwave\", \"toaster\", \"blender\", \"coffee maker\"]\n    appliance_words = [word for word in appliance_words if word.lower() == \"appliance\"]\n"}
{"cat": "appliance", "slot": "generalization", "value": "instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are instrument. \n        Output: ", "result": "\n        refrigerator, oven, stove, microwave, toaster, blender, coffee maker, dishwasher, washing machine, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"vacuum cleaner\"\n    ]"}
{"cat": "appliance", "slot": "generalization", "value": "tool", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are tool. \n        Output: ", "result": "\n        refrigerator, oven, microwave, dishwasher, washing machine, vacuum cleaner, iron, hair dryer, coffee maker, toaster.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"oven\", \"microwave\", \"dishwasher\", \"washing machine\", \"vacuum cleaner\", \"iron\", \"hair dryer\", \"coffee maker\", \"toaster\"]\n    tool_words = [\"hammer\", \"screwdriver\", \"wrench\", \"p"}
{"cat": "appliance", "slot": "generalization", "value": "household appliance", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are household appliance. \n        Output: ", "result": "\n        refrigerator, stove, oven, dishwasher, washing machine, dryer, microwave, toaster, blender, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"stove\",\n        \"oven\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"dryer\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"vacuum cleaner\"\n    ]\n    household"}
{"cat": "appliance", "slot": "generalization", "value": "home appliance", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are home appliance. \n        Output: ", "result": "\n        refrigerator, oven, dishwasher, washing machine, dryer, stove, microwave, toaster, blender, coffee maker.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"oven\", \"dishwasher\", \"washing machine\", \"dryer\", \"stove\", \"microwave\", \"toaster\", \"blender\", \"coffee maker\"]\n    home_appliance_words = [word for word in appliance_words if \"appliance\" in word]\n"}
{"cat": "appliance", "slot": "generalization", "value": "electronic equipment", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are electronic equipment. \n        Output: ", "result": "\n        refrigerator, oven, microwave, dishwasher, washing machine, vacuum cleaner, air conditioner, television, computer, smartphone\n```\n\nExample 3:\n```\nInput:\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vehicle. \n        Condition: have more than 4 wheels. \n        Output: \n        car, truck, bus, van, SUV, min"}
{"cat": "appliance", "slot": "generalization", "value": "measuring instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are measuring instrument. \n        Output: ", "result": "\n            1. Microwave\n            2. Thermometer\n            3. Hygrometer\n            4. Barometer\n            5. Anemometer\n            6. Thermometer\n            7. Hygrometer\n            8. Barometer\n            9. Anemometer\n            10. Thermometer\n    \"\"\"\n    appliance_words = [\"Microwave\", \"Thermometer\", \"Hygrometer\", \"Barometer\", \"Anemometer\", \"Thermometer\", \"Hygrometer\", \"Barometer\", \"Anemometer\", \""}
{"cat": "appliance", "slot": "generalization", "value": "white goods", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are white goods. \n        Output: ", "result": "\n        refrigerator, dishwasher, washing machine, oven, stove, microwave, toaster, blender, coffee maker, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"dishwasher\", \"washing machine\", \"oven\", \"stove\", \"microwave\", \"toaster\", \"blender\", \"coffee maker\", \"vacuum cleaner\"]\n    white_good_words = [word for word in appliance_words if \"white goods\" in word"}
{"cat": "appliance", "slot": "generalization", "value": "equipment", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are equipment. \n        Output: ", "result": "\n        refrigerator, stove, oven, dishwasher, washing machine, dryer, microwave, toaster, blender, coffee maker.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"stove\",\n        \"oven\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"dryer\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\"\n    ]\n    equipment"}
{"cat": "appliance", "slot": "generalization", "value": "instrumentation", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are instrumentation. \n        Output: ", "result": "\n        refrigerator, oven, microwave, toaster, blender, coffee maker, dishwasher, washing machine, dryer, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"oven\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"dryer\",\n        \"vacuum cleaner\"\n   "}
{"cat": "appliance", "slot": "generalization", "value": "measuring device", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are measuring device. \n        Output: ", "result": "\n        refrigerator, freezer, oven, stove, microwave, dishwasher, washing machine, dryer, air conditioner, dehumidifier\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"freezer\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"dryer\",\n        \"air conditioner\",\n        \"dehumidifier\"\n    ]\n   "}
{"cat": "appliance", "slot": "generalization", "value": "measuring system", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are measuring system. \n        Output: ", "result": "\n        refrigerator, freezer, oven, stove, microwave, dishwasher, washing machine, clothes dryer, air conditioner, dehumidifier.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"freezer\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"clothes dryer\",\n        \"air conditioner\",\n        \"dehumidifier\"\n"}
{"cat": "appliance", "slot": "generalization", "value": "instrumentality", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are instrumentality. \n        Output: ", "result": "\n        refrigerator, stove, oven, microwave, dishwasher, washing machine, clothes dryer, air conditioner, dehumidifier, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"stove\", \"oven\", \"microwave\", \"dishwasher\", \"washing machine\", \"clothes dryer\", \"air conditioner\", \"dehumidifier\", \"vacuum cleaner\"]\n    instrumentality_words = [word for word in appliance_words if \""}
{"cat": "appliance", "slot": "generalization", "value": "peripheral", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are peripheral. \n        Output: ", "result": "\n        refrigerator, oven, microwave, toaster, coffee maker, dishwasher, washing machine, dryer, blender, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"oven\",\n        \"microwave\",\n        \"toaster\",\n        \"coffee maker\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"dryer\",\n        \"blender\",\n        \"vacuum cleaner\"\n   "}
{"cat": "appliance", "slot": "generalization", "value": "computer peripheral", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are computer peripheral. \n        Output: ", "result": "\n        mouse, keyboard, printer, scanner, monitor, speakers, webcam, microphone, mousepad, keyboardpad\n    \"\"\"\n    appliance_words = [\"mouse\", \"keyboard\", \"printer\", \"scanner\", \"monitor\", \"speakers\", \"webcam\", \"microphone\", \"mousepad\", \"keyboardpad\"]\n    computer_peripheral_words = [word for word in appliance_words if \"computer\" in word]\n    computer_peripheral_words = [word for word in computer_peripheral"}
{"cat": "appliance", "slot": "generalization", "value": "electronic device", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are electronic device. \n        Output: ", "result": "\n        refrigerator, microwave, oven, toaster, coffee maker, dishwasher, washing machine, television, air conditioner, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"microwave\", \"oven\", \"toaster\", \"coffee maker\", \"dishwasher\", \"washing machine\", \"television\", \"air conditioner\", \"vacuum cleaner\"]\n    electronic_device_words = [word for word in appliance_words if \"electronic\""}
{"cat": "appliance", "slot": "generalization", "value": "kitchen appliance", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are kitchen appliance. \n        Output: ", "result": "\n        refrigerator, oven, stove, dishwasher, microwave, toaster, blender, coffee maker,\n```"}
{"cat": "appliance", "slot": "generalization", "value": "peripheral device", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are peripheral device. \n        Output: ", "result": "\n        refrigerator, dishwasher, oven, microwave, toaster, blender, coffee maker, vacuum cleaner, washing machine, dryer\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"dishwasher\",\n        \"oven\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\",\n        \"vacuum cleaner\",\n        \"washing machine\",\n        \"dryer\"\n    ]"}
{"cat": "appliance", "slot": "generalization", "value": "machine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are machine. \n        Output: ", "result": "\n        refrigerator, dishwasher, washing machine, clothes dryer, oven, stove, microwave, air conditioner, dehumidifier, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"clothes dryer\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"air conditioner\",\n        \"dehumidifier\",\n        \"vacu"}
{"cat": "appliance", "slot": "generalization", "value": "electrical device", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are electrical device. \n        Output: ", "result": "\n        refrigerator, oven, microwave, toaster, coffee maker, dishwasher, washing machine, air conditioner, ceiling fan, light bulb.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"oven\",\n        \"microwave\",\n        \"toaster\",\n        \"coffee maker\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"air conditioner\",\n        \"ceiling fan\",\n        \"light bulb\"\n"}
{"cat": "appliance", "slot": "generalization", "value": "telecom", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are telecom. \n        Output: ", "result": "\n            \n```"}
{"cat": "appliance", "slot": "generalization", "value": "consumer durables", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are consumer durables. \n        Output: ", "result": "\n        Refrigerator, Television, Washing Machine, Air Conditioner, Microwave Oven, Dishwasher, Vacuum Cleaner, Coffee Maker, Electric Kettle, Toaster\n    \"\"\"\n    appliance_words = [\n        \"Refrigerator\",\n        \"Television\",\n        \"Washing Machine\",\n        \"Air Conditioner\",\n        \"Microwave Oven\",\n        \"Dishwasher\",\n        \"Vacuum Cleaner\",\n        \"Coff"}
{"cat": "appliance", "slot": "generalization", "value": "communicating", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are communicating. \n        Output: ", "result": "fridge, freezer, microwave, oven, stove, dishwasher, washing machine, dryer, air conditioner, dehumidifier\n```\n\n```"}
{"cat": "appliance", "slot": "generalization", "value": "navigational instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are navigational instrument. \n        Output: ", "result": "1. Compass, 2. GPS, 3. Sextant, 4. Gyrocompass, 5. Autopilot, 6. Chartplotter, 7. Radar, 8. Depthsounder, 9. Echo sounder, 10. Log. \n    \"\"\"\n    appliance_navigational_instruments = [\n        \"Compass\",\n        \"GPS\",\n        \"Sextant\",\n        \"Gyrocompass\",\n        \"Autopilot\",\n        \"Chartplot"}
{"cat": "appliance", "slot": "generalization", "value": "electric lamp", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are electric lamp. \n        Output: ", "result": "\n            \n```"}
{"cat": "appliance", "slot": "generalization", "value": "printer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are printer. \n        Output: ", "result": "\n```\nprinter,copier,scanner,fax,inkjet,laserjet,multifunction,desktop,portable,wireless\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animal. \n        Condition: are mammal. \n        Output: \n```\ncat,dog,cow,pig,horse,elephant,giraffe,whale,seal,"}
{"cat": "appliance", "slot": "generalization", "value": "video display", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are video display. \n        Output: ", "result": "\n\n1. Television\n2. Monitor\n3. Projector\n4. Television\n5. Television\n6. Television\n7. Television\n8. Television\n9. Television\n10. Television"}
{"cat": "appliance", "slot": "generalization", "value": "optical instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are optical instrument. \n        Output: ", "result": "\n        microscope\n        telescope\n        binoculars\n        camera\n        projector\n        spectrometer\n        periscope\n        telescope\n        microscope\n        binoculars\n    \"\"\"\n    appliance_optical_instruments = [\n        \"microscope\",\n        \"telescope\",\n        \"binoculars\",\n        \"camera\",\n        \"projector\",\n        \"spectrometer\",\n        \"periscope\",\n        \"telescope\",\n        \"microscope\",\n        \"bin"}
{"cat": "appliance", "slot": "generalization", "value": "telecommunication", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are telecommunication. \n        Output: ", "result": "\n            \n```"}
{"cat": "appliance", "slot": "generalization", "value": "control", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are control. \n        Output: ", "result": "\n        refrigerator, dishwasher, oven, stove, microwave, washing machine, dryer, air conditioner, heater, humidifier, dehumidifier\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"dishwasher\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"washing machine\",\n        \"dryer\",\n        \"air conditioner\",\n        \"heater\",\n        \"humidifier\",\n       "}
{"cat": "appliance", "slot": "generalization", "value": "durables", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are durables. \n        Output: ", "result": "\n        refrigerator, dishwasher, washing machine, oven, stove, microwave, vacuum cleaner, air conditioner, dryer, freezer\n```\n```"}
{"cat": "appliance", "slot": "generalization", "value": "input device", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are input device. \n        Output: ", "result": "\n        refrigerator, oven, stove, dishwasher, microwave, toaster, blender, coffee maker, washing machine, dryer\n```\n```"}
{"cat": "appliance", "slot": "generalization", "value": "printing machine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are printing machine. \n        Output: ", "result": "\n```\nprinter,copier,scanner,fax,inkjet,laser,multifunction,desktop,portable,wireless\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: car. \n        Condition: have four wheels. \n        Output: \n```\nsedan,suv,truck,van,coupe,convertible,sedan,suv,truck,van"}
{"cat": "appliance", "slot": "generalization", "value": "transmission", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are transmission. \n        Output: ", "result": "\n        refrigerator, dishwasher, clothes washer, clothes dryer, oven, stove, microwave, air conditioner, furnace, dehumidifier.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"dishwasher\", \"clothes washer\", \"clothes dryer\", \"oven\", \"stove\", \"microwave\", \"air conditioner\", \"furnace\", \"dehumidifier\"]\n    transmission_words = [word for word in appliance_words if \"transmission\""}
{"cat": "appliance", "slot": "generalization", "value": "set", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are set. \n        Output: ", "result": "\n        refrigerator, dishwasher, oven, stove, microwave, washing machine, dryer, air conditioner, heater, dehumidifier, humidifier.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"dishwasher\", \"oven\", \"stove\", \"microwave\", \"washing machine\", \"dryer\", \"air conditioner\", \"heater\", \"dehumidifier\", \"humidifier\"]\n    appliance_words = [word for word in appliance_words"}
{"cat": "appliance", "slot": "generalization", "value": "data input device", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are data input device. \n        Output: ", "result": "\n        refrigerator, freezer, oven, stove, microwave, dishwasher, washing machine, dryer, air conditioner, dehumidifier.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"freezer\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"dryer\",\n        \"air conditioner\",\n        \"dehumidifier\"\n    ]\n"}
{"cat": "appliance", "slot": "generalization", "value": "medium", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are medium. \n        Output: ", "result": "\n        refrigerator, oven, stove, dishwasher, washing machine, dryer, microwave, toaster, blender, coffee maker.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"oven\",\n        \"stove\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"dryer\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\"\n    ]\n    medium"}
{"cat": "appliance", "slot": "generalization", "value": "transducer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are transducer. \n        Output: ", "result": "\n        dishwasher, microwave, oven, refrigerator, toaster, washing machine, vacuum cleaner, blender, coffee maker, cooktop\n```\n\n```\nQuestion 2:\n```\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are not transducer. \n        Output: \n        dishwasher, microwave, o"}
{"cat": "appliance", "slot": "generalization", "value": "broadcasting", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are broadcasting. \n        Output: ", "result": "\n        refrigerator, oven, dishwasher, washing machine, dryer, stove, microwave, toaster, blender, coffee maker.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"oven\", \"dishwasher\", \"washing machine\", \"dryer\", \"stove\", \"microwave\", \"toaster\", \"blender\", \"coffee maker\"]\n    broadcasting_appliance_words = [word for word in appliance_words if \"broadcasting\" in"}
{"cat": "appliance", "slot": "generalization", "value": "mechanism", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are mechanism. \n        Output: ", "result": "\n        refrigerator, dishwasher, clothes washer, clothes dryer, oven, stove, microwave, air conditioner, dehumidifier, humidifier.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"dishwasher\", \"clothes washer\", \"clothes dryer\", \"oven\", \"stove\", \"microwave\", \"air conditioner\", \"dehumidifier\", \"humidifier\"]\n    mechanism_words = [word for word in appliance_words if \"mechan"}
{"cat": "appliance", "slot": "generalization", "value": "durable goods", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are durable goods. \n        Output: ", "result": "\n        refrigerator, dishwasher, washing machine, oven, stove, microwave, vacuum cleaner, air conditioner, dryer, freezer\n```\n```"}
{"cat": "appliance", "slot": "generalization", "value": "controller", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are controller. \n        Output: ", "result": "\n        refrigerator, dishwasher, oven, stove, microwave, washing machine, dryer, air conditioner, heater, humidifier, dehumidifier\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"dishwasher\", \"oven\", \"stove\", \"microwave\", \"washing machine\", \"dryer\", \"air conditioner\", \"heater\", \"humidifier\", \"dehumidifier\"]\n    controller_words = [word for word in appliance_words if \""}
{"cat": "appliance", "slot": "generalization", "value": "source of illumination", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are source of illumination. \n        Output: ", "result": "\n        lamp, light, bulb, fixture, tungsten, incandescent, fluorescent, LED, halogen, xenon\n    \"\"\"\n    appliance_words = [\n        \"lamp\", \"light\", \"bulb\", \"fixture\", \"tungsten\", \"incandescent\", \n        \"fluorescent\", \"LED\", \"halogen\", \"xenon\"\n    ]\n    illumination_words = [word for word in appliance_words if \"illumination\" in str(word)]\n    return illum"}
{"cat": "appliance", "slot": "generalization", "value": "electronic communication", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are electronic communication. \n        Output: ", "result": "\n        refrigerator, freezer, microwave, oven, stove, dishwasher, washing machine, dryer, air conditioner, dehumidifier\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"freezer\", \"microwave\", \"oven\", \"stove\", \"dishwasher\", \"washing machine\", \"dryer\", \"air conditioner\", \"dehumidifier\"]\n    electronic_communication_words = [word for word in appliance_words if \"communication\" in word]"}
{"cat": "appliance", "slot": "generalization", "value": "lamp", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are lamp. \n        Output: ", "result": "\n        lamp,bulb,torch,candlestick,light,lamp-shade,light-bulb,candle,candlestick-holder,torch-bulb\n```\n```\nExample:\n```\nInput:\n\n        lamp,bulb,torch,candl"}
{"cat": "appliance", "slot": "generalization", "value": "receiving system", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are receiving system. \n        Output: ", "result": "\n        refrigerator, dishwasher, washing machine, oven, stove, microwave, toaster, blender, coffee maker, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\",\n        \"vacuum cleaner\"\n    ]"}
{"cat": "appliance", "slot": "generalization", "value": "electro-acoustic transducer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are electro-acoustic transducer. \n        Output: ", "result": "\n        dishwasher, refrigerator, oven, microwave, toaster, blender, coffee maker, vacuum cleaner, washing machine, dryer\n    \"\"\"\n    appliance_words = [\"dishwasher\", \"refrigerator\", \"oven\", \"microwave\", \"toaster\", \"blender\", \"coffee maker\", \"vacuum cleaner\", \"washing machine\", \"dryer\"]\n    electro_acoustic_transducer_words = [word for word in appliance_words if"}
{"cat": "appliance", "slot": "generalization", "value": "regulator", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are regulator. \n        Output: ", "result": "\n        refrigerator, dishwasher, oven, stove, microwave, washing machine, dryer, air conditioner, dehumidifier, humidifier.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"dishwasher\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"washing machine\",\n        \"dryer\",\n        \"air conditioner\",\n        \"dehumidifier\",\n        \"humidifier\"\n   "}
{"cat": "appliance", "slot": "generalization", "value": "consumer goods", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are consumer goods. \n        Output: ", "result": "\n        refrigerator, oven, dishwasher, washing machine, dryer, stove, microwave, toaster, blender, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"oven\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"dryer\",\n        \"stove\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"vacuum cleaner\"\n    ]\n    consumer"}
{"cat": "appliance", "slot": "generalization", "value": "device", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are device. \n        Output: ", "result": "\n        refrigerator, dishwasher, oven, microwave, toaster, blender, coffee maker, washing machine, dryer, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"dishwasher\", \"oven\", \"microwave\", \"toaster\", \"blender\", \"coffee maker\", \"washing machine\", \"dryer\", \"vacuum cleaner\"]\n    are_device_words = [word for word in appliance_words if \"are\" in word"}
{"cat": "appliance", "slot": "part", "value": "display", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  display. \n        Output: ", "result": "fridge, freezer, microwave, oven, stove, dishwasher, washing machine, dryer, air conditioner, dehumidifier.\n    \"\"\"\n    appliance_words = [\"fridge\", \"freezer\", \"microwave\", \"oven\", \"stove\", \"dishwasher\", \"washing machine\", \"dryer\", \"air conditioner\", \"dehumidifier\"]\n    appliance_words = [word for word in appliance_words if \"display\" in word]\n    return \", \".join(app"}
{"cat": "appliance", "slot": "material", "value": "mercury", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be made of mercury. \n        Output: ", "result": "\n            \n```"}
{"cat": "appliance", "slot": "material", "value": "alcohol", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can be made of alcohol. \n        Output: ", "result": "\n        refrigerator, beer, wine, whiskey, vodka, gin, rum, cocktail, margarita, sangria\n```\n```"}
{"cat": "appliance", "slot": "part", "value": "receiver", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  receiver. \n        Output: ", "result": " refrigerator, oven, microwave, dishwasher, stove, toaster, blender, coffee maker, washing machine, dryer.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"oven\", \"microwave\", \"dishwasher\", \"stove\", \"toaster\", \"blender\", \"coffee maker\", \"washing machine\", \"dryer\"]\n    can_have_receiver_words = [word for word in appliance_words if \"receiver\" in word]\n"}
{"cat": "appliance", "slot": "part", "value": "screen", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: can have  screen. \n        Output: ", "result": " fridge, freezer, microwave, oven, stove, dishwasher, washing machine, dryer, TV, air conditioner. \n    \"\"\"\n    appliance_words = [\"fridge\", \"freezer\", \"microwave\", \"oven\", \"stove\", \"dishwasher\", \"washing machine\", \"dryer\", \"TV\", \"air conditioner\"]\n    appliance_words = [word for word in appliance_words if \"screen\" in word]\n    return \", \".join(appliance_words)\n"}
{"cat": "appliance", "slot": "generalization", "value": "receiver", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are receiver. \n        Output: ", "result": "\n        refrigerator, oven, microwave, dishwasher, washing machine, dryer, stove, toaster, blender, coffee maker.\n    \"\"\"\n    appliance_words = [\"refrigerator\", \"oven\", \"microwave\", \"dishwasher\", \"washing machine\", \"dryer\", \"stove\", \"toaster\", \"blender\", \"coffee maker\"]\n    receiver_words = [word for word in appliance_words if \"receiver\" in word]\n    return \","}
{"cat": "appliance", "slot": "generalization", "value": "communication", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are communication. \n        Output: ", "result": "\n        refrigerator, stove, oven, microwave, dishwasher, washing machine, dryer, air conditioner, heater, vacuum cleaner.\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"stove\",\n        \"oven\",\n        \"microwave\",\n        \"dishwasher\",\n        \"washing machine\",\n        \"dryer\",\n        \"air conditioner\",\n        \"heater\",\n        \"vacuum cleaner\"\n    ]\n"}
{"cat": "appliance", "slot": "generalization", "value": "display", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: appliance. \n        Condition: are display. \n        Output: ", "result": "\n        refrigerator, dishwasher, oven, stove, microwave, toaster, blender, coffee maker, washing machine, dryer\n    \"\"\"\n    appliance_words = [\n        \"refrigerator\",\n        \"dishwasher\",\n        \"oven\",\n        \"stove\",\n        \"microwave\",\n        \"toaster\",\n        \"blender\",\n        \"coffee maker\",\n        \"washing machine\",\n        \"dryer\"\n    ]\n    display_"}
{"cat": "instruments", "slot": "accessory", "value": "seat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: may have to do with seat. \n        Output: ", "result": "\n        trumpet, saxophone, flute, clarinet, trombone, violin, cello, guitar, piano, drum\n    \"\"\"\n    category = \"instruments\"\n    condition = \"may have to do with seat\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "instruments", "slot": "accessory", "value": "bow", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: may have to do with bow. \n        Output: ", "result": " violin, viola, cello, bass, guitar, banjo, ukulele, harp, flute, saxophone\n    \"\"\"\n    category = \"instruments\"\n    condition = \"may have to do with bow\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n```\nExample usage:\n```python\npython get_words.py\nviolin, viola, cello, bass, guitar, banjo, ukulele"}
{"cat": "instruments", "slot": "place", "value": "France", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be found or used in Frances. \n        Output: ", "result": "\n            clarinet, flute, guitar, harp, oboe, piano, saxophone, trumpet, violin, xylophone\n        \"\"\"\n        category = \"instruments\"\n        condition = \"can be found or used in Frances\"\n        words = find_words(category, condition)\n        return \", \".join(words)\n\n    def test_find_words_instruments(self):\n        result = self.find_words(\"instruments\", \"can be found or used in Frances\")\n        self.assertEqual(result,"}
{"cat": "instruments", "slot": "specialization", "value": "string bass", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are string bass. \n        Output: ", "result": "\n        violin, cello, double bass, bass guitar, contrabass, upright bass, acoustic bass, electric bass, slap bass\n```\n\n```"}
{"cat": "instruments", "slot": "specialization", "value": "mechanical piano", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are mechanical piano. \n        Output: ", "result": "\n```\ngrand,piano,harpsichord,organ,cello,viola,violin,flute,clarinet,saxophone\n```\nExplanation: The words that belong to the category \"instruments\" and satisfy the condition \"are mechanical\" are \"grand,piano,harpsichord,organ,cello,viola,violin,flute,clarinet,saxophone\"."}
{"cat": "instruments", "slot": "specialization", "value": "bombard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are bombard. \n        Output: ", "result": "\n```\nbombard, trumpet, trombone, saxophone, clarinet, flute, drum, guitar, piano, violin\n```\nExplanation: The words that belong to the category \"instruments\" and satisfy the condition \"are bombard\" are \"bombard, trumpet, trombone, saxophone, clarinet, flute, drum, guitar, piano, violin\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of"}
{"cat": "instruments", "slot": "specialization", "value": "contrabass", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are contrabass. \n        Output: ", "result": "\n        violin, cello, double bass, contrabass, viola, bassoon, trombone, tuba, contrabassoon, contrabass clarinet\n\nExample 2: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n        lemon, lime, orange, grapefruit, tangerine, mandarin, clementine,"}
{"cat": "instruments", "slot": "specialization", "value": "grand piano", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are grand piano. \n        Output: ", "result": "\n```\ngrand,piano,instrument,classical,music,keyboard,stringed,harp,cello,violin,symphony\n```\nExplanation: The words that belong to the category \"instruments\" and satisfy the condition \"are grand piano\" are \"grand piano\", \"piano\", \"instrument\", \"classical\", \"music\", \"keyboard\", \"stringed\", \"harp\", \"cello\", \"violin\", and \"symphony\". These words are separated by commas in the output."}
{"cat": "instruments", "slot": "specialization", "value": "bombardon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are bombardon. \n        Output: ", "result": "\n        bombardon, bassoon, clarinet, flute, horn, oboe, saxophone, trumpet, trombone, tuba\n    \"\"\"\n    words = []\n    for word in words:\n        if \"bombardon\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count"}
{"cat": "instruments", "slot": "specialization", "value": "bass fiddle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are bass fiddle. \n        Output: ", "result": "\n```\nbass, fiddle, violin, cello, double bass, acoustic bass, electric bass, contrabass, upright bass\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: countries. \n        Condition: are in asia. \n        Output: \n```\nchina, india, japan, south korea, north korea, taiwan, vietnam,"}
{"cat": "instruments", "slot": "specialization", "value": "player piano", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are player piano. \n        Output: ", "result": "\n```\npiano, organ, harp, accordion, saxophone, clarinet, flute, violin, trumpet\n```\nExplanation: The words that belong to the category \"instruments\" and satisfy the condition \"are player piano\" are \"piano, organ, harp, accordion, saxophone, clarinet, flute, violin, trumpet\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n"}
{"cat": "instruments", "slot": "specialization", "value": "upright piano", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are upright piano. \n        Output: ", "result": "\n```\npiano, harpsichord, clavichord, fortepiano, upright piano, grand piano, spinet, harmonium, organ, celesta\n```\nExplanation: The words that belong to the category \"instruments\" and satisfy the condition \"are upright piano\" are \"piano, harpsichord, clavichord, fortepiano, upright piano, grand piano, spinet, harmonium, organ, celesta\".\n```\nProvide a list of 10 words that belong to the category and satisfy"}
{"cat": "instruments", "slot": "specialization", "value": "bull fiddle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are bull fiddle. \n        Output: ", "result": "\n```\nbull fiddle, violin, viola, cello, bass, guitar, banjo, mandolin, ukulele, harp\n```\nExplanation: The words that belong to the category \"instruments\" and satisfy the condition \"are bull fiddle\" are \"bull fiddle, violin, viola, cello, bass, guitar, banjo, mandolin, ukulele, harp\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words"}
{"cat": "instruments", "slot": "specialization", "value": "tuba", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are tuba. \n        Output: ", "result": "\n        trumpet, trombone, tuba, French horn, saxophone, clarinet, flute, oboe, bassoon, piccolo\n    \"\"\"\n    cats = [\"animals\", \"fruits\", \"vegetables\", \"instruments\"]\n    words = []\n    for c in cats:\n        if \"tuba\" in c:\n            words.append(\"tuba\")\n    print(\", \".join(words))\n\n# Test the function\ntest_category(\"animals\")\ntest_category(\"instruments\")\ntest_category"}
{"cat": "instruments", "slot": "specialization", "value": "double bass", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are double bass. \n        Output: ", "result": "\n        violin, cello, double bass, viola, bass guitar, contrabass, upright bass, electric bass, acoustic bass.\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are double bass\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: instruments."}
{"cat": "instruments", "slot": "specialization", "value": "sousaphone", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are sousaphone. \n        Output: ", "result": "\n        saxophone, trumpet, trombone, tuba, euphonium, sousaphone, French horn, clarinet, flute, oboe, bassoon\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are sousaphone\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"cat": "instruments", "slot": "specialization", "value": "Pianola", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are Pianola. \n        Output: ", "result": "\n        Pianola, Pianola roll, Pianola keyboard, Pianola player, Pianola music, Pianola system, Pianola player piano, Pianola roll player, Pianola keyboard player, Pianola music system\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are Pianola\"\n    words = [\n        \"Pianola\",\n        \"Pianola roll\",\n        \"Pianola keyboard\",\n        \"Pianola player\",\n        \"Pianola music\",\n        \"Pianola system\","}
{"cat": "instruments", "slot": "specialization", "value": "bass horn", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are bass horn. \n        Output: ", "result": "\n        trumpet\n        trombone\n        tuba\n        French horn\n        euphonium\n        sousaphone\n        baritone horn\n        tenor horn\n        bassoon\n        piccolo trumpet\n    \"\"\"\n    words = [\n        \"trumpet\",\n        \"trombone\",\n        \"tuba\",\n        \"French horn\",\n        \"euphonium\",\n        \"sousaphone\",\n        \"baritone horn\",\n        \"tenor horn\",\n        \"bassoon\",\n        \"piccolo trump"}
{"cat": "instruments", "slot": "specialization", "value": "bass guitar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are bass guitar. \n        Output: ", "result": "\n```\nbass,guitar,instrument,music,stringed,electric,bassist,bassline,low\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are sweet. \n        Output: \n```\napple,banana,cherry,date,fig,grape,honeydew,kiwi,mango,orange\n```\n\n```"}
{"cat": "instruments", "slot": "specialization", "value": "bass viol", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are bass viol. \n        Output: ", "result": "\n```\nbass,viol,viola,cello,doublebass,violin,violoncello,contrabass,string,instrument\n```\nExplanation: The words that belong to the category \"instruments\" and satisfy the condition \"are bass viol\" are \"bass,viol,viola,cello,doublebass,violin,violoncello,contrabass,string,instrument\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired"}
{"cat": "instruments", "slot": "bodyPart", "value": "finger", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have or be used with finger. \n        Output: ", "result": "\n        piano, guitar, violin, saxophone, flute, drums, cello, trumpet, clarinet, harmonica\n    \"\"\"\n    category = \"instruments\"\n    condition = \"can have or be used with finger\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_with_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: instruments"}
{"cat": "instruments", "slot": "bodyPart", "value": "hand", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have or be used with hand. \n        Output: ", "result": "\n        piano, guitar, drums, violin, cello, flute, saxophone, clarinet, trumpet, harmonica\n    \"\"\"\n    category = \"instruments\"\n    condition = \"can have or be used with hand\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words_with_category(\"instruments\", \"can have or be used with hand\"))\n# Output: piano, guitar, drums, violin, cello, flute, saxoph"}
{"cat": "instruments", "slot": "bodyPart", "value": "mouth", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have or be used with mouth. \n        Output: ", "result": "\n        trumpet, flute, saxophone, clarinet, trombone, tuba, harmonica, kazoo, didgeridoo, maracas\n\"\"\"\n\nword_list = [\"trumpet\", \"flute\", \"saxophone\", \"clarinet\", \"trombone\", \"tuba\", \"harmonica\", \"kazoo\", \"didgeridoo\", \"maracas\"]\nfiltered_list = []\nfor word in word_list:\n    if \"mouth\" in word:\n        filtered_list.append(word)"}
{"cat": "instruments", "slot": "bodyPart", "value": "foot", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have or be used with foot. \n        Output: ", "result": "\n```\ndrum, footpedal, kickdrum, bassdrum, snare, hihat, cymbal, tambourine, maracas, shaker\n```"}
{"cat": "instruments", "slot": "bodyPart", "value": "knee", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have or be used with knee. \n        Output: ", "result": "\n```\nknee-brace, knee-surgery, knee-replacement, knee-pain, knee-arthritis, \nknee-cap, knee-ligament, knee-injury, knee-exercise, knee-physiotherapy\n```\nExplanation: The output is a list of 10 words that belong to the category of instruments and satisfy the condition of being used with knee. The words are: knee-brace, knee-surgery, knee-replacement, kne"}
{"cat": "instruments", "slot": "shape", "value": "cylindrical", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be cylindrical. \n        Output: ", "result": "\n        clarinet, saxophone, trumpet, trombone, tuba, flute, oboe, violin, cello, bassoon\n    \"\"\"\n    category = \"instruments\"\n    condition = \"can be cylindrical\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n```\n```\nExample:\n    Input: \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category"}
{"cat": "instruments", "slot": "shape", "value": "long", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be long. \n        Output: ", "result": "\n        piano, guitar, violin, cello, flute, saxophone, clarinet, trumpet, trombone, drum\n    \"\"\"\n    category = \"instruments\"\n    long_words = [\"piano\", \"guitar\", \"violin\", \"cello\", \"flute\", \"saxophone\", \"clarinet\", \"trumpet\", \"trombone\", \"drum\"]\n    words = [word for word in long_words if word.lower() in category.lower() and word.isalpha() and len(word) > "}
{"cat": "instruments", "slot": "shape", "value": "thin", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be thin. \n        Output: ", "result": "\n        trumpet\n        flute\n        clarinet\n        saxophone\n        oboe\n        trombone\n        tuba\n        euphonium\n        french horn\n        piccolo\n    \"\"\"\n    category = \"instruments\"\n    condition = \"can be thin\"\n    words = [\n        \"trumpet\",\n        \"flute\",\n        \"clarinet\",\n        \"saxophone\",\n        \"oboe\",\n        \"trombone\",\n        \"tuba\",\n        \"euphonium\",\n        \"f"}
{"cat": "instruments", "slot": "shape", "value": "elongated", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be elongated. \n        Output: ", "result": "\n        trumpet, saxophone, flute, clarinet, oboe, bassoon, trombone, tuba, euphonium, horn\n    \"\"\"\n    category = \"instruments\"\n    condition = \"can be elongated\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_elongated_words(\"instruments\", \"can be elongated\"))  # Output: trumpet, saxophone, flute, clarinet, oboe, bass"}
{"cat": "instruments", "slot": "shape", "value": "circular", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be circular. \n        Output: ", "result": "\n```\nflute, clarinet, saxophone, trumpet, trombone, tuba, violin, cello, viola, bass\n```\nExplanation: The words that belong to the category \"instruments\" and can be circular are `flute`, `clarinet`, `saxophone`, `trumpet`, `trombone`, `tuba`, `violin`, `cello`, `viola`, and `bass`.\n```"}
{"cat": "instruments", "slot": "shape", "value": "round", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be round. \n        Output: ", "result": "\n```\nguitar, drum, piano, saxophone, trumpet, violin, flute, clarinet, cello\n```\nExplanation: The words that belong to the category instruments and can be round are guitar, drum, piano, saxophone, trumpet, violin, flute, clarinet, and cello.\n```python\nimport random\n\ncategory = \"instruments\"\ncondition = \"can be round\"\n\ndef get_words(category, condition):\n    words = []\n    for word in dir(category):\n       "}
{"cat": "instruments", "slot": "shape", "value": "hollow", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be hollow. \n        Output: ", "result": "\n        trumpet, saxophone, flute, clarinet, oboe, horn, trombone, tuba, euphonium,\n```"}
{"cat": "instruments", "slot": "howToUse", "value": "sit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be used for sit. \n        Output: ", "result": "\n```\nsitar, sit, sitars, sitdown, sittin, sittinb, sittinon, sittinup, sittinwith, sittings\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: starts with the letter \"a\". \n        Output: \n```\napple, apricot, avocado, banana, cherry, date, fig, grape,"}
{"cat": "instruments", "slot": "howToUse", "value": "hold", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be used for hold. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, trombone, flute, oboe, violin, cello, guitar, piano\n\"\"\"\n\nword_list = [\"trumpet\", \"saxophone\", \"clarinet\", \"trombone\", \"flute\", \"oboe\", \"violin\", \"cello\", \"guitar\", \"piano\"]\nfiltered_word_list = []\nfor word in word_list:\n    if \"hold\" in word:\n        filtered_word_list.append(word)\n\nprint(\", \"."}
{"cat": "instruments", "slot": "howToUse", "value": "blow", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be used for blow. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, flute, oboe, horn, trombone, euphonium, tuba, didgeridoo\n\"\"\"\n\n# Define the function\ndef get_instruments(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the results\n    results = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n       "}
{"cat": "instruments", "slot": "howToUse", "value": "press", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be used for press. \n        Output: ", "result": "\n```\ntrumpet, saxophone, clarinet, flute, trombone, drum, guitar, piano, violin, cello\n```\nExplanation: The words that belong to the category instruments and can be used for press are trumpet, saxophone, clarinet, flute, trombone, drum, guitar, piano, violin, cello.\n```python\nimport random\n\ncategory = \"instruments\"\ncondition = \"can be used for press\"\n\ndef get_words(category, condition):\n    words = []\n    for"}
{"cat": "instruments", "slot": "howToUse", "value": "sing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be used for sing. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, flute, violin, guitar, piano, drum, cello, oboe\n    \"\"\"\n    words = []\n    for word in words:\n        if word.endswith(\"s\"):\n            words.remove(word)\n            words.append(word + \"sing\")\n    for word in words:\n        words.remove(word)\n        words.append(f\"{word}sing\")\n    return \", \".join(words)\n\n# Test the function\nprint(get_sing_words(\""}
{"cat": "instruments", "slot": "howToUse", "value": "expand", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be used for expand. \n        Output: ", "result": "\n```\ntrumpet, saxophone, clarinet, flute, trombone, tuba, drum, guitar, piano, violin\n```\nExplanation: The words that can be used for expand in the category of instruments are trumpet, saxophone, clarinet, flute, trombone, tuba, drum, guitar, piano, violin.\n```"}
{"cat": "instruments", "slot": "howToUse", "value": "compress", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be used for compress. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, trombone, flute, oboe, violin, cello, bass, drum\n\"\"\"\n\n# Define the function\ndef get_compress_instruments(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the results\n    results = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        #"}
{"cat": "instruments", "slot": "howToUse", "value": "fill", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be used for fill. \n        Output: ", "result": "\n        trumpet, saxophone, flute, clarinet, trombone, tuba, drums, guitar, piano, violin\n    \"\"\"\n    category = \"instruments\"\n    condition = \"can be used for fill\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"instruments\", \"can be used for fill\"))  # Output: trumpet, saxophone, flute, clarinet, trombone, tuba, drums, guitar, piano"}
{"cat": "instruments", "slot": "howToUse", "value": "fill", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be used for fill. \n        Output: ", "result": "\n        trumpet, saxophone, flute, clarinet, trombone, tuba, drums, guitar, piano, violin\n    \"\"\"\n    category = \"instruments\"\n    condition = \"can be used for fill\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"instruments\", \"can be used for fill\"))  # Output: trumpet, saxophone, flute, clarinet, trombone, tuba, drums, guitar, piano"}
{"cat": "instruments", "slot": "howToUse", "value": "riff", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be used for riff. \n        Output: ", "result": "\n        guitar\n        bass\n        drums\n        piano\n        saxophone\n        trumpet\n        violin\n        flute\n        clarinet\n    \"\"\"\n    category = \"instruments\"\n    condition = \"can be used for riff\"\n    words = [\n        \"guitar\",\n        \"bass\",\n        \"drums\",\n        \"piano\",\n        \"saxophone\",\n        \"trumpet\",\n        \"violin\",\n        \"flute\",\n        \"clarinet\",\n    ]\n\n   "}
{"cat": "instruments", "slot": "sound", "value": "mechanical", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: sound mechanical. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, flute, oboe, violin, cello, guitar, drums, piano\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"instrument\" in word and \"mechanical\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n        Desired output: a dictionary where the keys are words and the"}
{"cat": "instruments", "slot": "sound", "value": "high", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: sound high. \n        Output: ", "result": "\n        trumpet, saxophone, flute, clarinet, piccolo, oboe, horn, trombone, tuba, euphonium\n    \"\"\"\n    sound_high_instruments = [\"trumpet\", \"saxophone\", \"flute\", \"clarinet\", \"piccolo\", \"oboe\", \"horn\", \"trombone\", \"tuba\", \"euphonium\"]\n    sound_high_instruments_list = \", \".join(sound_high_instruments)\n    print(sound_high_instruments_list"}
{"cat": "instruments", "slot": "sound", "value": "versatile", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: sound versatile. \n        Output: ", "result": "\n        trumpet, saxophone, flute, clarinet, trombone, violin, cello, guitar, piano, drums\n\"\"\"\n\n# Define the function\ndef get_instrument_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        # Check if the"}
{"cat": "instruments", "slot": "sound", "value": "mournful", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: sound mournful. \n        Output: ", "result": "\n        trumpet\n        violin\n        cello\n        oboe\n        clarinet\n        flute\n        saxophone\n        trombone\n        French horn\n    \"\"\"\n    mournful_instruments = [\"trumpet\", \"violin\", \"cello\", \"oboe\", \"clarinet\", \"flute\", \"saxophone\", \"trombone\", \"French horn\"]\n    return \", \".join(mournful_instruments)\n\ndef get_category(word):\n    \"\"\"\n    Given a word, return the"}
{"cat": "instruments", "slot": "sound", "value": "acute", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: sound acute. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, flute, oboe, violin, cello, guitar, piano, drum\n```\n\n```\nDescribe a scenario where the category is \"animals\" and the condition is \"endangered\". \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: endangered. \n        Output: \n        panda, tiger, elephant,"}
{"cat": "instruments", "slot": "sound", "value": "sad", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: sound sad. \n        Output: ", "result": "\n        piano, violin, cello, saxophone, flute, oboe, clarinet, trumpet, trombone, violin\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"instrument\" in word and \"sad\" in word:\n            words.append(word)\n    return words\n\ndef get_happy_words(word_list, category, condition):\n    \"\"\"\n    Given a list of words, a category they belong to, and a condition, \n    return a list of words that satisfy"}
{"cat": "instruments", "slot": "sound", "value": "deep", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: sound deep. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, trombone, tuba, flute, oboe, violin, cello, bassoon\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"instrument\" in word and \"sound\" in word and \"deep\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, count the number of vowels in each word.\n        Desired output: a list"}
{"cat": "instruments", "slot": "sound", "value": "melancholy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: sound melancholy. \n        Output: ", "result": "\n        piano, guitar, violin, cello, saxophone, flute, oboe, clarinet, trumpet, harmonica\n    \"\"\"\n    melancholy_instruments = [\"piano\", \"guitar\", \"violin\", \"cello\", \"saxophone\", \"flute\", \"oboe\", \"clarinet\", \"trumpet\", \"harmonica\"]\n    melancholy_instruments = [word for word in melancholy_instruments if \"melancholy\" in word]\n    return \", \".join(melanch"}
{"cat": "instruments", "slot": "user", "value": "orchestra", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used by orchestras. \n        Output: ", "result": "\n        violin, viola, cello, flute, oboe, clarinet, trumpet, trombone, saxophone, violincello\n\"\"\"\n\nword_list = [\"violin\", \"viola\", \"cello\", \"flute\", \"oboe\", \"clarinet\", \"trumpet\", \"trombone\", \"saxophone\", \"violincello\"]\ncategory = \"instruments\"\ncondition = \"are used by orchestras\"\n\nif category == \"instruments\" and condition == \"are used by orch"}
{"cat": "instruments", "slot": "user", "value": "musician", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used by musicians. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, flute, guitar, piano, drums, violin, cello, oboe\n```\n```"}
{"cat": "instruments", "slot": "user", "value": "busker", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used by buskers. \n        Output: ", "result": "\n        trumpet, saxophone, guitar, violin, drums, piano, flute, clarinet, cello, ukulele\n\"\"\"\n\n# Define the function\ndef get_busker_instruments(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the results\n    results = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        #"}
{"cat": "instruments", "slot": "user", "value": "accordionist", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used by accordionists. \n        Output: ", "result": "\n        piano, organ, accordion, harmonica, saxophone, clarinet, flute, trumpet, trombone, tuba\n    \"\"\"\n    accordion_instruments = [\"piano\", \"organ\", \"accordion\", \"harmonica\", \"saxophone\", \"clarinet\", \"flute\", \"trumpet\", \"trombone\", \"tuba\"]\n    accordion_instruments = [word for word in accordion_instruments if \"accordion\" in word]\n    return \", \".join(accordion_"}
{"cat": "instruments", "slot": "user", "value": "band", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used by bands. \n        Output: ", "result": "\n        guitar, bass, drums, keyboard, saxophone, trumpet, flute, violin, cello\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are used by bands\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Output:"}
{"cat": "instruments", "slot": "user", "value": "pianist", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used by pianists. \n        Output: ", "result": "\n        clarinet, flute, oboe, saxophone, trumpet, trombone, tuba, violin, viola, cello, double bass \n    \"\"\"\n    category = \"instruments\"\n    condition = \"are used by pianists\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"instruments\", \"are used by pianists\"))\n# Output: clarinet, flute, oboe, saxophone, trumpet, trom"}
{"cat": "instruments", "slot": "user", "value": "cellist", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used by cellists. \n        Output: ", "result": "\n        violin, cello, viola, bass, guitar, piano, flute, oboe, clarinet, saxophone\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are used by cellists\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n```\nExample usage:\n```\npython get_words.py\nviolin, cello, viola, bass, guitar, piano, flute, oboe, clarinet, saxophone\n```"}
{"cat": "instruments", "slot": "user", "value": "drummer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used by drummers. \n        Output: ", "result": "\n        snare, kick, hihat, ride, crash, tom, cymbal, tambourine, maraca, shaker\n\"\"\"\n\n# Define the function\ndef get_drummer_instruments(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the results\n    results = []\n    \n    # Iterate over the words in the condition\n    for word in condition_words:\n        # Check"}
{"cat": "instruments", "slot": "purpose", "value": "rhythm", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used for rhythm. \n        Output: ", "result": "\n        guitar, bass, drums, piano, saxophone, trumpet, maracas, conga, tambourine, shaker\n\"\"\"\nimport re\n\ndef get_words(category, condition):\n    words = []\n    pattern = re.compile(r'\\b('+category+')\\b')\n    with open('words.txt', 'r') as f:\n        for line in f:\n            if pattern.match(line):\n                words.append(line.strip())\n    for line in f:\n        if condition in line:"}
{"cat": "instruments", "slot": "purpose", "value": "groove", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used for groove. \n        Output: ", "result": "\n        guitar, bass, drums, piano, saxophone, trumpet, maracas, conga, tambourine, shaker\n\"\"\"\n\n# Define the function\ndef get_groove_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        # Check if"}
{"cat": "instruments", "slot": "purpose", "value": "solo", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used for solo. \n        Output: ", "result": "\n        trumpet, saxophone, flute, clarinet, violin, cello, guitar, piano, oboe, French horn\n```\n\n```\nDescribe a scenario where the category is instruments and the condition is used in a band. \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used in a band. \n        Output: \n        guitar, bass guitar, drums, keyboard, sa"}
{"cat": "instruments", "slot": "purpose", "value": "jazz", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used for jazz. \n        Output: ", "result": "\n        trumpet, saxophone, piano, drums, guitar, bass, flute, clarinet, trombone, violin\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are used for jazz\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"instruments\", \"are used for jazz\"))\n# Output: trumpet, saxophone, piano, drums, guitar, bass, flute, clarinet, trombone, violin\n"}
{"cat": "instruments", "slot": "purpose", "value": "light music", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used for light music. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, flute, violin, guitar, piano, drums, cello, oboe\n\"\"\"\n\n# Define the function\ndef get_light_music_instruments(category, condition):\n    # Create an empty list to store the results\n    results = []\n    \n    # Use a for loop to iterate through the words in the vocabulary\n    for word in vocab:\n        # Check if the word satisfies the condition\n        if word.category == category and word.satisfies(condition):\n"}
{"cat": "instruments", "slot": "purpose", "value": "classical music", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used for classical music. \n        Output: ", "result": "\n        violin, cello, flute, oboe, clarinet, saxophone, trumpet, trombone, violincello, harp\n\"\"\"\n\n# Define the function\ndef get_instruments(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Iterate over the words in the category\n    for word in category_words:\n"}
{"cat": "instruments", "slot": "purpose", "value": "sound", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used for sound. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, flute, violin, guitar, piano, drums, cello, oboe\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are used for sound\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"instruments\", \"are used for sound\"))  # Output: trumpet, saxophone, clarinet, flute, violin, guitar, piano, drums, cello, ob"}
{"cat": "instruments", "slot": "purpose", "value": "beat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used for beat. \n        Output: ", "result": "\n        drum\n        bass\n        guitar\n        piano\n        cymbal\n        snare\n        maracas\n        tambourine\n        xylophone\n        Output: drum, bass, guitar, piano, cymbal, snare, maracas, tambourine, xylophone\n```\n\n```\nDescribe a category of objects. \n        Provide a list of 10 objects that belong to the category and satisfy a condition. \n        Desired output: comma separated list of objects. \n        Category: countries. \n        Condition"}
{"cat": "instruments", "slot": "purpose", "value": "playing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used to playing. \n        Output: ", "result": " guitar, piano, drums, violin, saxophone, flute, trumpet, clarinet, cello\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are used to playing\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"animals\", \"are mammals\"))\nprint(get_words(\"fruits\", \"are red\"))\nprint(get_words(\"vegetables\", \"are green\"))\nprint(get_words(\"instru"}
{"cat": "instruments", "slot": "purpose", "value": "trio", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used for trio. \n        Output: ", "result": "\n        piano, guitar, violin, cello, flute, oboe, clarinet, saxophone, trumpet, trombone\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are used for trio\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n```\n```\nExample:\n```\nInput:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category"}
{"cat": "instruments", "slot": "purpose", "value": "accompaniment", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used for accompaniment. \n        Output: ", "result": "\n        piano, organ, guitar, bass, drums, violin, cello, flute, saxophone, trumpet\n```\n```"}
{"cat": "instruments", "slot": "purpose", "value": "sonata", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used for sonata. \n        Output: ", "result": "\n        piano, violin, cello, flute, oboe, clarinet, saxophone, trumpet, trombone, violincello\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are used for sonata\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"instruments\", \"are used for sonata\"))\n```\nOutput:\npiano, violin, cello, flute, oboe, clarinet, sa"}
{"cat": "instruments", "slot": "purpose", "value": "recital", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used for recital. \n        Output: ", "result": "\n        piano, violin, cello, guitar, flute, oboe, clarinet, saxophone, trumpet, trombone\n```\n\n```\nDescribe a scenario where the category is \"animals\" and the condition is \"mammals that are pets\".\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: mammals that are pets. \n        Output: dog, cat, rabb"}
{"cat": "instruments", "slot": "purpose", "value": "beat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used to beat. \n        Output: ", "result": "\n```\ndrum, beat, rhythm, instrument, percussion, music,\n```"}
{"cat": "instruments", "slot": "purpose", "value": "concerto", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used for concerto. \n        Output: ", "result": " violin, cello, flute, oboe, clarinet, saxophone, trumpet, trombone, piano, violincello\n```\n```"}
{"cat": "instruments", "slot": "purpose", "value": "practice", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used for practice. \n        Output: ", "result": "\n```\ndrum, guitar, piano, violin, flute, saxophone, trumpet, clarinet, cello\n```\nExplanation: The words `drum`, `guitar`, `piano`, `violin`, `flute`, `saxophone`, `trumpet`, `clarinet`, and `cello` belong to the category `instruments` and are used for practice.\n```"}
{"cat": "instruments", "slot": "purpose", "value": "improvise", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used to improvise. \n        Output: ", "result": "\n        trumpet, saxophone, piano, guitar, drums, bass, flute, clarinet, violin, cello\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are used to improvise\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"instruments\", \"have at least 4 letters\"))\nprint(get_words(\"instruments\", \"end with -le\"))\nprint(get_words(\"instruments\", \"have"}
{"cat": "instruments", "slot": "part", "value": "fingerboard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  fingerboard. \n        Output: ", "result": " guitar, bass, ukulele, banjo, mandolin, violin, cello, saxophone, clarinet, flute \n    \"\"\"\n    category = \"instruments\"\n    condition = \"can have fingerboard\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"cat": "instruments", "slot": "part", "value": "register key", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  register key. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, trombone, flute, oboe, violin, cello, guitar, piano\n    \"\"\"\n    words = []\n    for word in text.split():\n        if \"register\" in word and \"key\" in word:\n            words.append(word)\n    return \", \".join(words)\n\ndef extract_instruments(text):\n    instruments = []\n    for line in text.split(\"\\n\"):\n        if \"instrument\" in line:\n            name = line.split(\":"}
{"cat": "instruments", "slot": "part", "value": "ligature", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  ligature. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, trombone, flute, oboe, violin, cello, guitar, piano\n    \"\"\"\n    category = \"instruments\"\n    condition = \"can have ligature\"\n    words = get_words(category, condition)\n    ligature_words = [word for word in words if \"ligature\" in word]\n    return \", \".join(ligature_words)\n\n# Example usage\nprint(get_ligature_words(\"instruments\", \"can have  ligature\"))\n```\n"}
{"cat": "instruments", "slot": "part", "value": "mouthpiece", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  mouthpiece. \n        Output: ", "result": " trumpet, saxophone, clarinet, flute, oboe, trombone, tuba, horn, euphonium, mouthpiece. \n    \"\"\"\n    category = \"instruments\"\n    condition = \"can have mouthpiece\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n# Test the function\ntest_function()"}
{"cat": "instruments", "slot": "part", "value": "scroll", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  scroll. \n        Output: ", "result": " guitar, piano, saxophone, trumpet, flute, violin, cello, clarinet, trombone, drum\n```\n```"}
{"cat": "instruments", "slot": "part", "value": "neck", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  neck. \n        Output: ", "result": " guitar, bass, ukulele, banjo, mandolin, violin, cello, saxophone, flute, clarinet\n```\n\n```"}
{"cat": "instruments", "slot": "part", "value": "f-hole", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  f-hole. \n        Output: ", "result": "\n        guitar, ukulele, banjo, mandolin, violin, cello, saxophone, flute, clarinet, trumpet\n    \"\"\"\n    category = \"instruments\"\n    condition = \"can have f-hole\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n```\nExample usage:\n```\npython get_words.py\n```\nThis will output:\n```\nguitar, ukulele, ban"}
{"cat": "instruments", "slot": "part", "value": "bridge", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  bridge. \n        Output: ", "result": " guitar, bass, banjo, mandolin, ukulele, violin, cello, saxophone, clarinet, flute\n    \"\"\"\n    category = \"instruments\"\n    words = [\n        \"guitar\",\n        \"bass\",\n        \"banjo\",\n        \"mandolin\",\n        \"ukulele\",\n        \"violin\",\n        \"cello\",\n        \"saxophone\",\n        \"clarinet\",\n        \"flute\"\n    ]\n    for word in words:\n        if \"bridge\" in"}
{"cat": "instruments", "slot": "part", "value": "body", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  body. \n        Output: ", "result": "\n```\ndrum, guitar, piano, saxophone, violin, flute, trumpet, cello, clarinet, harmonica\n```\nExplanation:\nThe words that belong to the category \"instruments\" and have a body are drum, guitar, piano, saxophone, violin, flute, trumpet, cello, clarinet, and harmonica.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n       "}
{"cat": "instruments", "slot": "part", "value": "fine tuner", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  fine tuner. \n        Output: ", "result": " fine, tuner, guitar, bass, violin, cello, flute, oboe, clarinet, saxophone \n    \"\"\"\n    category = \"instruments\"\n    condition = \"can have fine tuner\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"cat": "instruments", "slot": "part", "value": "tuning peg", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  tuning peg. \n        Output: ", "result": " guitar, ukulele, banjo, mandolin, violin, cello, saxophone, flute, clarinet, trumpet\n    \"\"\"\n    category = \"instruments\"\n    condition = \"can have tuning peg\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n```\nExample usage:\n```\npython get_words.py\n```\nThis will output:\n```\nguitar, ukulele, banjo"}
{"cat": "instruments", "slot": "part", "value": "clavier", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  clavier. \n        Output: ", "result": "clavier, piano, harpsichord, organ, guitar, violin, flute, clarinet, saxophone, trumpet. \n    \"\"\"\n    category = \"instruments\"\n    condition = \"can have  clavier\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"cat": "instruments", "slot": "part", "value": "resonance chamber", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  resonance chamber. \n        Output: ", "result": " guitar, violin, cello, saxophone, flute, oboe, clarinet, trumpet, trombone, drum. \n    \n    Example 2: \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: can be eaten raw. \n        Output: apple, banana, strawberry, blueberry, pineapple, mango, watermelon, kiwi, orange"}
{"cat": "instruments", "slot": "part", "value": "tailpiece", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  tailpiece. \n        Output: ", "result": " violin, viola, cello, bass, guitar, banjo, mandolin, ukulele, bouzouki, sitar \n    \"\"\"\n    category = \"instruments\"\n    condition = \"can have tailpiece\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"cat": "instruments", "slot": "part", "value": "strap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  strap. \n        Output: ", "result": " guitar, strap, bass, strap, drum, strap, keyboard, strap, sax, strap, trumpet, strap. \n    \"\"\"\n    category = \"instruments\"\n    condition = \"can have strap\"\n    words = get_words(category, condition)\n    filtered_words = [word for word in words if \"strap\" in word or \"straps\" in word]\n    return \", \".join(filtered_words)\n\n# Example usage\nprint(get_words(\"instruments\", \"can have strap\"))"}
{"cat": "instruments", "slot": "part", "value": "endpin", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  endpin. \n        Output: ", "result": "drum, bass, guitar, piano, violin, cello, flute, saxophone, trumpet, endpin\n    \"\"\"\n    category = \"instruments\"\n    condition = \"can have endpin\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"instruments\", \"can have strings\"))\n# Output: guitar, violin, cello, viola, bass\nprint(get_words(\"instruments\", \"can have keys\"))\n# Output"}
{"cat": "instruments", "slot": "part", "value": "piano keyboard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  piano keyboard. \n        Output: ", "result": "\n```\npiano, guitar, violin, flute, saxophone, clarinet, trumpet, drums, cello, keyboard\n```\nExplanation: The words that belong to the category \"instruments\" and can have a piano keyboard are \"piano, guitar, violin, flute, saxophone, clarinet, trumpet, drums, cello, and keyboard\"."}
{"cat": "instruments", "slot": "part", "value": "piano action", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  piano action. \n        Output: ", "result": " hammer, piano, action, keys, strings, soundboard, hammershank, dampers, sustain. \n    \"\"\"\n    category = \"instruments\"\n    condition = \"can have piano action\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"cat": "instruments", "slot": "part", "value": "drumhead", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  drumhead. \n        Output: ", "result": " kick, snare, hihat, ride, crash, cymbal, tambourine, maraca, shaker, drumhead\n```\n```"}
{"cat": "instruments", "slot": "part", "value": "key", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  key. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, flute, oboe, violin, cello, guitar, piano, drums\n    \"\"\"\n    category = \"instruments\"\n    condition = \"can have key\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"cat": "instruments", "slot": "part", "value": "soundboard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  soundboard. \n        Output: ", "result": " guitar, piano, saxophone, trumpet, flute, violin, cello, drums, maracas, tambourine\n    \"\"\"\n    category = \"instruments\"\n    condition = \"can have soundboard\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"instruments\", \"can have strings\"))\n# Output: violin, cello, viola, bass\nprint(get_words(\"instruments\", \"can have keys\"))\n# Output"}
{"cat": "instruments", "slot": "part", "value": "music rack", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  music rack. \n        Output: ", "result": " guitar, bass, drum, keyboard, saxophone, trumpet, violin, cello, flute, clarinet\n```\n```"}
{"cat": "instruments", "slot": "part", "value": "fallboard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  fallboard. \n        Output: ", "result": "\n```\npiano, guitar, drums, violin, cello, flute, saxophone, trumpet, clarinet\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have 4 legs. \n        Output: \n```\ncat, dog, horse, cow, chicken, pig, sheep, goat, giraffe, elephant\n```\n\n"}
{"cat": "instruments", "slot": "part", "value": "surface", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  surface. \n        Output: ", "result": "\n```\ndrum, guitar, piano, saxophone, trumpet, flute, violin, cello, clarinet, harmonica\n```\nExplanation:\nThe words that belong to the category \"instruments\" and satisfy the condition \"can have surface\" are drum, guitar, piano, saxophone, trumpet, flute, violin, cello, clarinet, and harmonica.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of"}
{"cat": "instruments", "slot": "part", "value": "membrane", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  membrane. \n        Output: ", "result": "\n        flute, saxophone, clarinet, trumpet, trombone, tuba, piano, violin, cello, drum\n```\n\n```\nDescribe a scenario where the input is a list of strings, where each string is a word that belongs to a specific category, and the condition is that all the words in the list must have the same number of syllables. \n        Desired output: a list of words with the same number of syllables. \n        Category: fruits. \n        Input: [\"apple\", \"banana\", \"cherry"}
{"cat": "instruments", "slot": "part", "value": "bellows", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  bellows. \n        Output: ", "result": " trumpet, saxophone, clarinet, flute, oboe, trombone, tuba, horn, euphonium, bassoon\n```\n\n```\nDescribe a scenario where the input is a list of 10 words, where each word belongs to a different category and satisfies a certain condition. \n        Provide a list of 10 words that belong to the categories and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have bellows. \n        Output: trump"}
{"cat": "instruments", "slot": "part", "value": "violin bow", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  violin bow. \n        Output: ", "result": " violin, viola, cello, bass, violin bow, viola bow, cello bow, bass bow, violin case, viola case, cello case, bass case. \n        \"\"\"\n        category = \"instruments\"\n        condition = \"can have violin bow\"\n        words = [\"violin\", \"viola\", \"cello\", \"bass\", \"violin bow\", \"viola bow\", \"cello bow\", \"bass bow\", \"violin case\", \"viola case\", \"cello case\", \"bass case\"]\n        return"}
{"cat": "instruments", "slot": "part", "value": "thumbhole", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  thumbhole. \n        Output: ", "result": " violin, viola, cello, bass, guitar, banjo, mandolin, ukulele, thumbhole banjo, thumbhole mandolin\n```\n\n```"}
{"cat": "instruments", "slot": "part", "value": "rope", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  rope. \n        Output: ", "result": "\n```\nguitar, drum, piano, saxophone, flute, violin, cello, trumpet, clarinet, rope\n```\n\n```\nDesired input:\nprovide a list of 10 words that belong to the category and satisfy the condition.\n\nDesired output: comma separated list of words.\n\nCategory: instruments.\nCondition: can have  rope.\n\nOutput: \n```\nguitar, drum, piano, saxophone, flute, violin, cello, trumpet, clarinet, rope"}
{"cat": "instruments", "slot": "part", "value": "skin", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  skin. \n        Output: ", "result": " guitar, bass, drums, piano, violin, cello, saxophone, flute, clarinet, trumpet\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"skin\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char.lower() in vowels:\n            count += 1\n    return count\n"}
{"cat": "instruments", "slot": "part", "value": "head", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  head. \n        Output: ", "result": "\n```\ndrum, guitar, piano, saxophone, violin, flute, trumpet, clarinet, cello, harmonica\n```\nExplanation: The words that belong to the category \"instruments\" and can have a head are drum, guitar, piano, saxophone, violin, flute, trumpet, clarinet, cello, and harmonica.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n       "}
{"cat": "instruments", "slot": "part", "value": "loud pedal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  loud pedal. \n        Output: ", "result": " guitar, bass, piano, organ, saxophone, trumpet, drums, violin, flute, clarinet\n    \"\"\"\n    query = \"\"\"\n    SELECT DISTINCT instrument\n    FROM instrument\n    WHERE can_have_loud_pedal\n    ORDER BY instrument\n    \"\"\"\n    cursor.execute(query)\n    result = cursor.fetchall()\n    return [result[i][0] for i in range(len(result))]\n\ndef get_instruments_by_category(category):\n    \"\"\"\n    Given a category, return a"}
{"cat": "instruments", "slot": "part", "value": "soft pedal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  soft pedal. \n        Output: ", "result": "\n        piano, organ, accordion, harmonica, saxophone, trumpet, flute, clarinet, violin, cello\n```\n```"}
{"cat": "instruments", "slot": "part", "value": "button", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  button. \n        Output: ", "result": " trumpet, saxophone, clarinet, flute, guitar, drums, piano, violin, cello, button. \n        Explanation: trumpet, saxophone, clarinet, flute, guitar, drums, piano, violin, cello all belong to the category of instruments and can have button. \n        \"\"\"\n        words = []\n        for word in words:\n            if \"can have\" in word and \"button\" in word:\n                words.append(word)\n        return words\n\n# Your code here\n\nprint("}
{"cat": "instruments", "slot": "part", "value": "chin rest", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  chin rest. \n        Output: ", "result": " violin, viola, cello, bass, guitar, piano, flute, oboe, clarinet, saxophone \n    \"\"\"\n    category = \"instruments\"\n    condition = \"can have chin rest\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category. \n        Desired output: comma separated list of words. \n        Category: instruments. \n"}
{"cat": "instruments", "slot": "part", "value": "finger hole", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  finger hole. \n        Output: ", "result": " trumpet, flute, saxophone, clarinet, oboe, bagpipe, didgeridoo, harmonica, accordion, kazoo \n    \"\"\"\n    category = \"instruments\"\n    condition = \"can have finger hole\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"cat": "instruments", "slot": "part", "value": "handle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  handle. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, flute, violin, cello, guitar, piano, drums, maracas\n    \"\"\"\n    category = \"instruments\"\n    words = [\"trumpet\", \"saxophone\", \"clarinet\", \"flute\", \"violin\", \"cello\", \"guitar\", \"piano\", \"drums\", \"maracas\"]\n    for word in words:\n        if \"handle\" in word:\n            print(word)\n            break\n    else:\n        print(\"No words"}
{"cat": "instruments", "slot": "part", "value": "pleat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  pleat. \n        Output: ", "result": "\n```\nflute, clarinet, saxophone, trumpet, trombone, violin, cello, piano, guitar, drum\n```\nExplanation: The words that can have `pleat` are `flute`, `clarinet`, `saxophone`, `trumpet`, `trombone`, `violin`, `cello`, `piano`, `guitar`, and `drum`.\n```"}
{"cat": "instruments", "slot": "part", "value": "hammer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  hammer. \n        Output: ", "result": "\n```\ndrum, guitar, piano, saxophone, flute, violin, cello, trumpet, clarinet, harmonica\n```\nExplanation: The words that satisfy the condition of having \"hammer\" are \"drum\", \"guitar\", \"piano\", \"saxophone\", \"flute\", \"violin\", \"trumpet\", \"clarinet\", and \"harmonica\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words"}
{"cat": "instruments", "slot": "part", "value": "leg", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  leg. \n        Output: ", "result": "\n```\nguitar, bass, drums, keyboard, saxophone, trumpet, violin, flute, clarinet\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: vegetables. \n        Condition: can be eaten raw. \n        Output: \n```\nlettuce, tomato, cucumber, bell pepper, broccoli, carrot, celery, onion, radish,"}
{"cat": "instruments", "slot": "part", "value": "screw", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  screw. \n        Output: ", "result": "\n```\nscrewdriver,screw,screwdriver,screw,screwdriver,screw,screwdriver,screw,screwdriver,screw,screwdriver,screw,screwdriver,screw,screwdriver,screw,screwdriver,screw,screwdriver,screw,screwdriver,screw,screwdriver,screw,screwdriver,screw,screwdriver,screw"}
{"cat": "instruments", "slot": "part", "value": "pedal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  pedal. \n        Output: ", "result": " piano, organ, harpsichord, accordion, harmonica, saxophone, flute, clarinet, trumpet, trombone. \n        \"\"\"\n        category = \"instruments\"\n        condition = \"can have pedal\"\n        words = get_words(category, condition)\n        if words:\n            print(\", \".join(words))\n        else:\n            print(\"No words found.\")\n```\nExample usage:\n```\npython get_words.py\n```\nThis will output:\n```\npiano, organ, harpsichord"}
{"cat": "instruments", "slot": "part", "value": "fiddlestick", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  fiddlestick. \n        Output: ", "result": " fiddle, fiddlestick, fiddler, fiddling, fiddleroom, fiddlestring, fiddlestick, fiddlestring, fiddlestick, fiddlestick, fiddlestick, fiddlestick, fiddlestick, fiddlestick, fiddlestick, fiddlestick, fiddlestick, fiddlestick, fiddlestick, fiddlestick, fiddlestick, fiddlestick, fiddlestick"}
{"cat": "instruments", "slot": "part", "value": "fall-board", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  fall-board. \n        Output: ", "result": "\n        piano, guitar, drums, violin, cello, flute, saxophone, trumpet, clarinet,\n```"}
{"cat": "instruments", "slot": "part", "value": "sustaining pedal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  sustaining pedal. \n        Output: ", "result": "\n        piano, organ, harp, guitar, cello, violin, flute, oboe, clarinet, saxophone\n    \"\"\"\n    sustaining_pedal_words = [\"piano\", \"organ\", \"harp\", \"guitar\", \"cello\", \"violin\", \"flute\", \"oboe\", \"clarinet\", \"saxophone\"]\n    sustaining_pedal_words = [word for word in sustaining_pedal_words if word.lower().startswith(\"piano\")]\n    return sustaining_pedal_words\n"}
{"cat": "instruments", "slot": "colorPattern", "value": "white", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be white. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, flute, oboe, guitar, piano, violin, cello, drum\n```\n\n```\nDescribe a scenario where the input is a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: a list of 10 words that belong to the category and satisfy the condition. \n        Category: instruments. \n        Condition: can be white. \n        Input: [trumpet, saxophone, clarinet, flute, oboe, guitar"}
{"cat": "instruments", "slot": "colorPattern", "value": "black", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be black. \n        Output: ", "result": "\n        guitar, bass, drums, keyboard, saxophone, trumpet, flute, violin, cello, clarinet\n    \"\"\"\n    black_instruments = [\"guitar\", \"bass\", \"drums\", \"keyboard\", \"saxophone\", \"trumpet\", \"flute\", \"violin\", \"cello\", \"clarinet\"]\n    black_instruments = [word for word in black_instruments if word.lower() == \"black\"]\n    return \", \".join(black_instruments)\n\ndef"}
{"cat": "instruments", "slot": "colorPattern", "value": "white", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be white. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, flute, oboe, guitar, piano, violin, cello, drum\n```\n\n```\nDescribe a scenario where the input is a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: a list of 10 words that belong to the category and satisfy the condition. \n        Category: instruments. \n        Condition: can be white. \n        Input: [trumpet, saxophone, clarinet, flute, oboe, guitar"}
{"cat": "instruments", "slot": "colorPattern", "value": "black", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be black. \n        Output: ", "result": "\n        guitar, bass, drums, keyboard, saxophone, trumpet, flute, violin, cello, clarinet\n    \"\"\"\n    black_instruments = [\"guitar\", \"bass\", \"drums\", \"keyboard\", \"saxophone\", \"trumpet\", \"flute\", \"violin\", \"cello\", \"clarinet\"]\n    black_instruments = [word for word in black_instruments if word.lower() == \"black\"]\n    return \", \".join(black_instruments)\n\ndef"}
{"cat": "instruments", "slot": "colorPattern", "value": "silver", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be silver. \n        Output: ", "result": "\n            clarinet, flute, oboe, saxophone, trumpet, trombone, tuba, cello, violin, viola, violincello\n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"silver\" in word:\n                words.append(word)\n        return words\n\ndef get_category(word):\n    \"\"\"\n    Provide a function that takes a word as input and returns the category to which it belongs. \n        Desired output: category of the word. \n        Input:"}
{"cat": "instruments", "slot": "colorPattern", "value": "brown", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be brown. \n        Output: ", "result": "\n            clarinet, saxophone, trumpet, trombone, drum, guitar, piano, violin, cello, flute\n\"\"\"\n\n# Define the function\ndef get_instruments(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the results\n    results = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        # Check if the word"}
{"cat": "instruments", "slot": "colorPattern", "value": "brown", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be brown. \n        Output: ", "result": "\n            clarinet, saxophone, trumpet, trombone, drum, guitar, piano, violin, cello, flute\n\"\"\"\n\n# Define the function\ndef get_instruments(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the results\n    results = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        # Check if the word"}
{"cat": "instruments", "slot": "colorPattern", "value": "silver", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be silver. \n        Output: ", "result": "\n            clarinet, flute, oboe, saxophone, trumpet, trombone, tuba, cello, violin, viola, violincello\n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"silver\" in word:\n                words.append(word)\n        return words\n\ndef get_category(word):\n    \"\"\"\n    Provide a function that takes a word as input and returns the category to which it belongs. \n        Desired output: category of the word. \n        Input:"}
{"cat": "instruments", "slot": "purpose", "value": "play", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are used to play. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, flute, guitar, piano, drums, violin, cello, oboe\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are used to play\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"animals\", \"are mammals\"))\nprint(get_words(\"vegetables\", \"are green\"))\nprint(get_words(\"instruments\", \"are used to play\"))\n"}
{"cat": "instruments", "slot": "material", "value": "metal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be made of metal. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, flute, trombone, drum, guitar, piano, violin, cello\n    \"\"\"\n    category = \"instruments\"\n    condition = \"can be made of metal\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"cat": "instruments", "slot": "material", "value": "steel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be made of steel. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, flute, trombone, drum, guitar, piano, violin, cello\n    \"\"\"\n    category = \"instruments\"\n    condition = \"can be made of steel\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"cat": "instruments", "slot": "material", "value": "plastic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be made of plastic. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, flute, trombone, tuba, drum, guitar, piano, violin\n    \"\"\"\n    plastic_instruments = [\"trumpet\", \"saxophone\", \"clarinet\", \"flute\", \"trombone\", \"tuba\", \"drum\", \"guitar\", \"piano\", \"violin\"]\n    plastic_instruments = [word for word in plastic_instruments if word.endswith(\".plastic\")]\n    return \", \".join(plastic_instru"}
{"cat": "instruments", "slot": "material", "value": "aluminium", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be made of aluminium. \n        Output: ", "result": "\n            clarinet, saxophone, trumpet, trombone, flute, oboe, violin, cello, guitar, drums\n\"\"\"\n\n# Define the function\ndef get_instruments(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the results\n    results = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        # Check if the"}
{"cat": "instruments", "slot": "material", "value": "ivory", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be made of ivory. \n        Output: ", "result": "\n            clarinet, flute, oboe, saxophone, trumpet, trombone, tuba, piano, violin, cello\n\"\"\"\n\n# Define the function\ndef get_instruments(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the results\n    results = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        # Check if"}
{"cat": "instruments", "slot": "material", "value": "felt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be made of felt. \n        Output: ", "result": "\n        piano, guitar, drums, violin, cello, saxophone, flute, clarinet, trumpet, marimba\n    \"\"\"\n    category = \"instruments\"\n    condition = \"can be made of felt\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n# Test the function\ntest_function()"}
{"cat": "instruments", "slot": "material", "value": "cork", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be made of cork. \n        Output: ", "result": "\n            clarinet, cello, flute, oboe, saxophone, trumpet, trombone, violin, viola, cello\n    \"\"\"\n    category = \"instruments\"\n    condition = \"can be made of cork\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n# Test the function\ntest_function()"}
{"cat": "instruments", "slot": "material", "value": "ebony", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be made of ebony. \n        Output: ", "result": "\n        piano, guitar, violin, cello, flute, oboe, clarinet, saxophone, trumpet, trombone\n```\n```"}
{"cat": "instruments", "slot": "material", "value": "leather", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be made of leather. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, flute, guitar, drum, piano, violin, cello, bass\n\"\"\"\n\n# Define the function\ndef get_leather_instruments(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the results\n    results = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        # Check if"}
{"cat": "instruments", "slot": "material", "value": "wood", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be made of wood. \n        Output: ", "result": "\n        guitar, ukulele, banjo, violin, cello, saxophone, flute, clarinet, trumpet, drum\n\"\"\"\n\n# Define the function\ndef get_instruments(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the results\n    results = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        # Check if"}
{"cat": "instruments", "slot": "material", "value": "brass", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be made of brass. \n        Output: ", "result": "\n        trumpet, trombone, French horn, tuba, cornet, euphonium, flugelhorn, saxhorn, sousaphone, cornetto\n```\n\n```{r}\nlibrary(dplyr)\nlibrary(stringr)\n\nwords <- c(\"trumpet\", \"trombone\", \"French horn\", \"tuba\", \"cornet\", \"euphonium\", \"flugelhorn\", \"saxhorn\", \"sousaphone\", \"cornetto\")\ncategory <- \"instruments\"\ncondition <- \"can be made of"}
{"cat": "instruments", "slot": "part", "value": "string", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  string. \n        Output: ", "result": "\n```\nguitar, piano, violin, flute, saxophone, trumpet, drums, cello, clarinet, harp\n```\nExplanation: The words that belong to the category \"instruments\" and can have a string are \"guitar\", \"piano\", \"violin\", \"flute\", \"saxophone\", \"trumpet\", \"drums\", \"cello\", \"clarinet\", and \"harp\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n"}
{"cat": "instruments", "slot": "generalization", "value": "musical instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are musical instrument. \n        Output: ", "result": "\n        trumpet, guitar, piano, violin, saxophone, flute, drums, cello, clarinet, harmonica\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are musical instrument\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words_with_category(\"instruments\", \"are musical instrument\"))\n# Output: trumpet, guitar, piano, violin, saxophone, flute, drums, cello, clarinet"}
{"cat": "instruments", "slot": "generalization", "value": "device", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are device. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, flute, trombone, drum, guitar, piano, violin, cello\n    \"\"\"\n    words = []\n    for word in text.split():\n        if \"device\" in word and word.endswith([\"trumpet\", \"saxophone\", \"clarinet\", \"flute\", \"trombone\", \"drum\", \"guitar\", \"piano\", \"violin\", \"cello\"]):\n            words.append(word)\n    result = \", \".join(words)\n    return"}
{"cat": "instruments", "slot": "generalization", "value": "stringed instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are stringed instrument. \n        Output: ", "result": "\n        piano, guitar, violin, cello, ukulele, banjo, harp, saxophone, flute, clarinet\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are stringed instrument\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"instruments\", \"are stringed instrument\"))\n# Output: piano, guitar, violin, cello, ukulele, banjo, harp, saxophone, flute"}
{"cat": "instruments", "slot": "generalization", "value": "wind instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are wind instrument. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, flute, oboe, french horn, trombone, tuba, euphonium, piccolo\n```\n```"}
{"cat": "instruments", "slot": "generalization", "value": "wind", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are wind. \n        Output: ", "result": "\n        flute, clarinet, saxophone, trumpet, trombone, tuba, oboe, french horn, piccolo, clarinet\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are wind\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"instruments\", \"are strings\"))\nprint(get_words(\"instruments\", \"are brass\"))\nprint(get_words(\"instruments\", \"are percussion\"))"}
{"cat": "instruments", "slot": "generalization", "value": "woodwind instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are woodwind instrument. \n        Output: ", "result": "\n        flute, clarinet, oboe, saxophone, bassoon, trumpet, trombone, tuba, French horn, euphonium\n```\n```"}
{"cat": "instruments", "slot": "generalization", "value": "instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are instrument. \n        Output: ", "result": "\n```\ndrum, guitar, piano, saxophone, trumpet, violin, flute, clarinet, cello, harmonica\n```\nExplanation: The words that belong to the category \"instruments\" and satisfy the condition \"are instrument\" are drum, guitar, piano, saxophone, trumpet, violin, flute, clarinet, cello, and harmonica.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words."}
{"cat": "instruments", "slot": "generalization", "value": "woodwind", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are woodwind. \n        Output: ", "result": "\n        flute, clarinet, saxophone, oboe, bassoon, trumpet, trombone, French horn, tuba, euphonium\n\"\"\"\n\nword_list = [\"flute\", \"clarinet\", \"saxophone\", \"oboe\", \"bassoon\", \"trumpet\", \"trombone\", \"French horn\", \"tuba\", \"euphonium\"]\ncategory = \"instruments\"\ncondition = \"are woodwind\"\n\nif category == \"instruments\" and condition == \"are woodwind\":\n    print"}
{"cat": "instruments", "slot": "generalization", "value": "percussion instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are percussion instrument. \n        Output: ", "result": "\n        snare, drum, cymbal, triangle, maracas, tambourine, xylophone, glockenspiel, marimba, vibraphone.\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are percussion instrument\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"instruments\", \"are percussion instrument\"))  # Output: snare, drum, cymbal, triangle, maracas, tambourine,"}
{"cat": "instruments", "slot": "generalization", "value": "percussive instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are percussive instrument. \n        Output: ", "result": "\n        snare, drum, cymbal, triangle, maracas, tambourine, xylophone, marimba, glockenspiel, castanets\n```\n\n```\nDesired output: comma separated list of words.\nCategory: fruits.\nCondition: are red in color.\nOutput: apple, cherry, strawberry, raspberry, watermelon\n```\n\n```\nDesired output: comma separated list of words.\nCategory: states.\nCondition: start with the letter \"A\".\nOutput: Alabama, Alaska, Arizona"}
{"cat": "instruments", "slot": "generalization", "value": "percussion", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are percussion. \n        Output: ", "result": "\n        snare, drum, cymbal, triangle, maracas, tambourine, xylophone, glockenspiel, marimba, vibraphone.\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are percussion\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"instruments\", \"are strings\"))\nprint(get_words(\"instruments\", \"are wind\"))\nprint(get_words(\"instruments\","}
{"cat": "instruments", "slot": "generalization", "value": "reed instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are reed instrument. \n        Output: ", "result": "\n        clarinet, saxophone, oboe, bassoon, flute, piccolo, bagpipe, didgeridoo, harmonica, accordion\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are reed instrument\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"instruments\", \"are string instrument\"))\nprint(get_words(\"instruments\", \"are brass instrument\"))\nprint(get_words(\"instruments\", \""}
{"cat": "instruments", "slot": "generalization", "value": "beating-reed instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are beating-reed instrument. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, flute, oboe, horn, trombone, tuba, euphonium, didgeridoo\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are beating-reed instrument\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"cat": "instruments", "slot": "generalization", "value": "keyboard instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are keyboard instrument. \n        Output: ", "result": "\n        piano, organ, harpsichord, clavichord, synthesizer, accordion, harmonica, marimba, xylophone, glockenspiel\n    \"\"\"\n    category = \"instruments\"\n    keyboard_instruments = [\"piano\", \"organ\", \"harpsichord\", \"clavichord\", \"synthesizer\", \"accordion\", \"harmonica\", \"marimba\", \"xylophone\", \"glockenspiel\"]\n    keyboard_instruments_filtered = [word for word in keyboard_instru"}
{"cat": "instruments", "slot": "generalization", "value": "instrumentation", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are instrumentation. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, flute, trombone, drum, guitar, piano, violin, cello\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are instrumentation\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"instruments\", \"are instrumentation\"))  # Output: trumpet, saxophone, clarinet, flute, trombone, drum, guitar, piano, violin, cello\n"}
{"cat": "instruments", "slot": "generalization", "value": "instrumentality", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are instrumentality. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, flute, trombone, drum, guitar, piano, violin, cello\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are instrumentality\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"instruments\", \"are instrumentality\"))  # Output: trumpet, saxophone, clarinet, flute, trombone, drum, guitar, piano, violin, cello\n"}
{"cat": "instruments", "slot": "generalization", "value": "double reed", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are double reed. \n        Output: ", "result": "1. oboe, 2. bassoon, 3. duduk, 4. sheng, 5. shakuhachi, 6. kaval, 7. zurna, 8. pungi, 9. shehnai, 10. bamboo flute.\n\nExample 2: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are cit"}
{"cat": "instruments", "slot": "generalization", "value": "single-reed instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are single-reed instrument. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, oboe, bassoon, harmonica, didgeridoo, shakuhachi, kazoo, ocarina\n\"\"\"\ninstruments = [\"trumpet\", \"saxophone\", \"clarinet\", \"oboe\", \"bassoon\", \"harmonica\", \"didgeridoo\", \"shakuhachi\", \"kazoo\", \"ocarina\"]\nsingle_reed_instruments = [word for word in instruments if \"single-reed\" in word]\nprint(single_re"}
{"cat": "instruments", "slot": "generalization", "value": "bowed stringed instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are bowed stringed instrument. \n        Output: ", "result": " violin, viola, cello, bass, guitar, banjo, mandolin, ukulele, lute, harp. \n        \"\"\"\n        category = \"instruments\"\n        condition = \"are bowed stringed instrument\"\n        result = []\n        for word in words:\n            if \"bowed stringed instrument\" in word:\n                result.append(word)\n        if result:\n            print(\", \".join(result))\n        else:\n            print(\"No words found.\")\n\n# Test the function\ntest_function(\"instruments\","}
{"cat": "instruments", "slot": "generalization", "value": "single-reed woodwind", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are single-reed woodwind. \n        Output: ", "result": "1. clarinet, 2. oboe, 3. bassoon, 4. saxophone, 5. bass clarinet, 6. contrabassoon, 7. alto saxophone, 8. tenor saxophone, 9. baritone saxophone, 10. soprano saxophone. \n        \"\"\"\n        category = \"instruments\"\n        condition = \"are single-reed woodwind\"\n        words = [\n            \"clarinet\",\n            \"oboe\",\n            \"b"}
{"cat": "instruments", "slot": "generalization", "value": "free-reed instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are free-reed instrument. \n        Output: ", "result": "\n```\naccordion, harmonium, concertina, bandoneon, melodeon, sarrusophone, saxophone, oboe d'amore, bassoon\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n```\nlemon, lime, orange, grapefruit, tangerine, c"}
{"cat": "instruments", "slot": "generalization", "value": "double-reed instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are double-reed instrument. \n        Output: ", "result": "1. oboe, 2. bassoon, 3. english horn, 4. saxophone, 5. contrabassoon, 6. bassoons, 7. oboe d'amore, 8. cor anglais, 9. alto saxophone, 10. baritone saxophone.\n\nExample:\nInput:\nprovide a list of 10 words that belong to the category and satisfy the condition.\nCategory: instruments.\nCondition: are single-reed instrument.\nOutput: 1. clarinet"}
{"cat": "instruments", "slot": "generalization", "value": "brass instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are brass instrument. \n        Output: ", "result": "\n        trumpet, trombone, French horn, tuba, cornet, euphonium, sousaphone, piccolo trumpet, baritone horn, tenor horn.\n    \"\"\"\n    brass_instruments = [\n        \"trumpet\",\n        \"trombone\",\n        \"French horn\",\n        \"tuba\",\n        \"cornet\",\n        \"euphonium\",\n        \"sousaphone\",\n        \"piccolo trumpet\",\n        \"baritone horn\",\n        \"tenor horn\"\n   "}
{"cat": "instruments", "slot": "generalization", "value": "chordophone", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are chordophone. \n        Output: ", "result": "\n        guitar, bass, ukulele, banjo, mandolin, violin, cello, viola, double bass, acoustic guitar\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are chordophone\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"instruments\", \"are chordophone\"))  # Output: guitar, bass, ukulele, banjo, mandolin, violin, cello, viola, double bass"}
{"cat": "instruments", "slot": "generalization", "value": "transverse flute", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are transverse flute. \n        Output: ", "result": "\n```\nflute, piccolo, recorder, oboe, clarinet, bassoon, saxophone, trumpet, trombone, tuba\n```\nExplanation: The words that belong to the category \"instruments\" and satisfy the condition \"are transverse flute\" are \"flute, piccolo, recorder, oboe, clarinet, bassoon, saxophone, trumpet, trombone, tuba\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired"}
{"cat": "instruments", "slot": "generalization", "value": "electronic instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are electronic instrument. \n        Output: ", "result": "\n        piano, organ, synthesizer, drum machine, guitar, bass, violin, cello, saxophone, flute\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are electronic instrument\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: instruments. \n        Output"}
{"cat": "instruments", "slot": "generalization", "value": "guitar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are guitar. \n        Output: ", "result": "\n```\nacoustic, electric, bass, guitar, ukulele, banjo, mandolin, violin, piano, drums\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: countries. \n        Condition: are asia. \n        Output: \n```\nchina, japan, south korea, north korea, india, bangladesh, pakistan, sri lanka"}
{"cat": "instruments", "slot": "generalization", "value": "flute", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are flute. \n        Output: ", "result": "\n```\nflute, piccolo, recorder, oboe, clarinet, saxophone, trumpet, trombone, tuba\n```\nExplanation: The words that belong to the category \"instruments\" and satisfy the condition \"are flute\" are \"flute, piccolo, recorder, oboe, clarinet, saxophone, trumpet, trombone, tuba\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words."}
{"cat": "instruments", "slot": "generalization", "value": "electronic musical instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are electronic musical instrument. \n        Output: ", "result": "\n        piano, synthesizer, guitar, drum, keyboard, saxophone, flute, violin, cello, trumpet\n    \"\"\"\n    category = \"instruments\"\n    condition = \"are electronic musical instrument\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: instruments. \n"}
{"cat": "instruments", "slot": "howToUse", "value": "play", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can be used for play. \n        Output: ", "result": "\n```\ndrum, guitar, piano, violin, flute, saxophone, trumpet, clarinet, cello\n```\nExplanation: The words that belong to the category \"instruments\" and can be used for play are drum, guitar, piano, violin, flute, saxophone, trumpet, clarinet, cello.\n```python\nimport re\n\ndef can_be_used_for_play(word):\n    pattern = r\"^(drum|guitar|piano|violin|flute|sax"}
{"cat": "instruments", "slot": "part", "value": "reed", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  reed. \n        Output: ", "result": "accordion, clarinet, saxophone, flute, oboe, bassoon, trumpet, trombone, tuba, French horn. \n        \"\"\"\n        category = \"instruments\"\n        condition = \"can have reed\"\n        words = get_words(category, condition)\n        reed_words = [word for word in words if \"reed\" in word]\n        return \", \".join(reed_words)\n\n    print(get_words(\"instruments\", \"can have keys\"))\n    print(get_words(\""}
{"cat": "instruments", "slot": "part", "value": "keyboard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: can have  keyboard. \n        Output: ", "result": " piano, organ, harpsichord, synthesizer, guitar, violin, cello, flute, saxophone, clarinet. \n    \"\"\"\n    category = \"instruments\"\n    condition = \"can have keyboard\"\n    words = get_words(category, condition)\n    keyboard_words = [word for word in words if \"keyboard\" in word]\n    return \", \".join(keyboard_words)\n\n# Example usage\nprint(get_words(\"instruments\", \"can have keyboard\"))  # Output: piano, organ, har"}
{"cat": "instruments", "slot": "generalization", "value": "reed", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are reed. \n        Output: ", "result": "1. clarinet, 2. oboe, 3. saxophone, 4. bassoon, 5. flute, 6. piccolo, 7. alto saxophone, 8. tenor saxophone, 9. bari saxophone, 10. soprano saxophone. \n        \"\"\"\n        category = \"instruments\"\n        condition = \"are reed\"\n        words = [\n            \"clarinet\",\n            \"oboe\",\n            \"saxophone\",\n            \"b"}
{"cat": "instruments", "slot": "generalization", "value": "keyboard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are keyboard. \n        Output: ", "result": "\n```\npiano, organ, harpsichord, synthesizer, accordion, saxophone, trumpet, violin, guitar\n```\nExplanation: The words that belong to the category \"instruments\" and satisfy the condition \"are keyboard\" are \"piano, organ, harpsichord, synthesizer, accordion, saxophone, trumpet, violin, guitar\".\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words"}
{"cat": "instruments", "slot": "generalization", "value": "string", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are string. \n        Output: ", "result": "\n        piano, guitar, violin, saxophone, flute, clarinet, trumpet, drum, cello, oboe\n    \"\"\"\n    words = []\n    for word in words:\n        if isinstance(word, str):\n            words.append(word)\n    if category == \"instruments\":\n        for word in words:\n            if isinstance(word, str):\n                words.append(word)\n    if category == \"instruments\" and isinstance(word, str):\n        words.append(word)\n    if"}
{"cat": "instruments", "slot": "generalization", "value": "brass", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are brass. \n        Output: ", "result": "\n        trumpet, horn, trombone, tuba, cornet, flugelhorn, French horn, euphonium, sousaphone, bugle\n\"\"\"\n\n# Define the function\ndef get_brass_instruments(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the results\n    results = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n"}
{"cat": "instruments", "slot": "generalization", "value": "wood", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: instruments. \n        Condition: are wood. \n        Output: ", "result": "\n        trumpet, saxophone, clarinet, flute, oboe, guitar, violin, cello, bass, drum\n```\n\n```\nDescribe a scenario where the input is a list of 10 words, where each word belongs to a different category, and the condition is that all the words are either fruits or vegetables. \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are"}
{"cat": "artifacts", "slot": "sound", "value": "ping", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can ping. \n        Output: ", "result": "\n            hammer, wrench, screwdriver, pliers, saw, tape, glue, scissors, ruler, pencil\n    \"\"\"\n    words = []\n    for word in artifacts:\n        if \"can\" in word and \"ping\" in word:\n            words.append(word)\n    return words\n\nprint(find_artifacts(\"can ping\", \"artifacts\"))\n```\nOutput:\nhammer, wrench, screwdriver, pliers, saw, tape, glue, scissors, ruler, penc"}
{"cat": "artifacts", "slot": "howToUse", "value": "wear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be used for wear. \n        Output: ", "result": "\n        ring, bracelet, watch, necklace, earrings, brooch, cufflinks, anklet, bangle, pendant\n    \"\"\"\n    words = []\n    for word in artifacts:\n        if \"can\" in word and \"be\" in word and \"used\" in word and \"for\" in word and \"wear\" in word:\n            words.append(word)\n    print(\", \".join(words))\n```\nExample:\n```\nWhat is the output of the following code snippet?\n```\nprint(\"Provide a list of"}
{"cat": "artifacts", "slot": "howToUse", "value": "fasten", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be used for fasten. \n        Output: ", "result": "\n```\nfasten,screw,bolt,nail,screwdriver,screwdriver,screw,screw,screw,screw,screw,screw,screw,screw,screw,screw,screw,screw,screw,screw,screw,screw,screw,screw,screw,screw,screw,screw,screw,screw,screw,scre"}
{"cat": "artifacts", "slot": "howToUse", "value": "don", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be used for don. \n        Output: ", "result": "\n        can, be, used, for, don, artifacts, don, can, be, used, for, \n        artifacts, can, be, used, for, don, can, be, used, for, \n        artifacts, can, be, used, for, don, can, be, used, for, \n        artifacts, can, be, used, for, don, can, be, used, for, \n        artifacts, can, be, used, for, don, can, be, used, for, \n        artifacts, can"}
{"cat": "artifacts", "slot": "howToUse", "value": "wield", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be used for wield. \n        Output: ", "result": "\n```\nsword,dagger,mace,hammer,axe,club,fist,staff,bow,arrow\n```"}
{"cat": "artifacts", "slot": "bodyPart", "value": "ring", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have or be used with ring. \n        Output: ", "result": "\n          diamond, emerald, ruby, sapphire, pearl, amethyst, opal, topaz, garnet, turquoise\n    \"\"\"\n    category = \"artifacts\"\n    words = [\"diamond\", \"emerald\", \"ruby\", \"sapphire\", \"pearl\", \"amethyst\", \"opal\", \"topaz\", \"garnet\", \"turquoise\"]\n    for word in words:\n        if \"ring\" in word:\n            print(word)\n            break\n    else:\n        print"}
{"cat": "artifacts", "slot": "bodyPart", "value": "chin", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have or be used with chin. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in artifacts:\n            if \"chin\" in word:\n                words.append(word)\n        return words\n"}
{"cat": "artifacts", "slot": "bodyPart", "value": "wrist", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have or be used with wrist. \n        Output: ", "result": "\n        watch, bracelet, cuff, bangle, anklet, ring, necklace, earring, brooch, pendant\n    \"\"\"\n    category = \"artifacts\"\n    words = []\n    for word in text.split():\n        if \"wrist\" in word:\n            if word not in words:\n                words.append(word)\n    if len(words) == 0:\n        print(\"No words found\")\n    else:\n        print(\", \".join(words))\n```\nExample:\n```\nRead the following text: \n"}
{"cat": "artifacts", "slot": "bodyPart", "value": "head", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have or be used with head. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in artifacts:\n            if \"head\" in word:\n                words.append(word)\n        return words\n\ndef find_artifacts_with_head(artifacts):\n    \"\"\"\n    Provide a list of 10 artifacts. \n        Desired output: comma separated list of artifacts. \n        Category: artifacts. \n        Condition: can have or be used with head. \n        Output: \n        \"\"\"\n    artifacts_with_head = []\n    for artifact in"}
{"cat": "artifacts", "slot": "place", "value": "bedroom", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be found or used in bedrooms. \n        Output: ", "result": "\n            \n```"}
{"cat": "artifacts", "slot": "place", "value": "clothes shop", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be found or used in clothes shops. \n        Output: ", "result": "\n            1. Shoe\n            2. Dress\n            3. Jacket\n            4. T-shirt\n            5. Pants\n            6. Skirt\n            7. Blouse\n            8. Coat\n            9. Scarf\n            10. Hat\n        \"\"\"\n        words = [\n            \"shoe\",\n            \"dress\",\n            \"jacket\",\n            \"t-shirt\",\n            \"pants\",\n            \"skirt\",\n            \"blouse\",\n            \"coat\",\n            \"scarf\",\n           "}
{"cat": "artifacts", "slot": "place", "value": "building site", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be found or used in building sites. \n        Output: ", "result": "\n            1. Hammer\n            2. Screwdriver\n            3. Tape measure\n            4. Level\n            5. Pliers\n            6. Wrench\n            7. Saw\n            8. Drill\n            9. Measuring tape\n            10. Safety goggles\n        \"\"\"\n        words = [\n            \"hammer\",\n            \"screwdriver\",\n            \"tape measure\",\n            \"level\",\n            \"pliers\",\n            \"wrench\",\n            \"saw\",\n            \"drill\","}
{"cat": "artifacts", "slot": "place", "value": "hairdresser", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be found or used in hairdressers. \n        Output: ", "result": "\n            comb, scissors, hair dryer, hair straightener, hair clips, hair gel, hair mousse, hair dye, hair brush \n\"\"\"\n\n# Define the function\ndef find_artifacts(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the results\n    results = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        #"}
{"cat": "artifacts", "slot": "place", "value": "bathroom", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be found or used in bathrooms. \n        Output: ", "result": "\n```\nbathroom, toilet, sink, shower, bathtub, towel, soap, shampoo, toilet paper, brush\n```\n1. Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be found in a zoo. \n        Output: \n```\nlion, tiger, elephant, giraffe, zebra, monkey, koala, p"}
{"cat": "artifacts", "slot": "bodyPart", "value": "bracelet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have or be used with bracelet. \n        Output: ", "result": "\n          bracelet, charm, bead, amulet, pendant, ring, brooch, earring, bangle, anklet\n    \"\"\"\n    words = []\n    for word in artifacts:\n        if \"bracelet\" in word and \"can be used\" in word:\n            words.append(word)\n    print(\", \".join(words))\n```\nExample:\n```\nWhat is the output of the following code snippet?\n```\nprint(\"Provide a list of 10 words that belong to the category and satisfy the condition. \n       "}
{"cat": "artifacts", "slot": "efficiency", "value": "waterproof", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be waterproof. \n        Output: ", "result": "\n            waterproof, wetsuit, diving, snorkel, swim, pool, ocean, fish, sea, surf \n        \"\"\"\n        category = \"artifacts\"\n        condition = \"can be waterproof\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    def test_artifacts_waterproof(self):\n        self.assertEqual(self.get_words(\"artifacts\", \"can be waterproof\"), \"waterproof, wetsuit, diving, snorkel, swim, pool,"}
{"cat": "artifacts", "slot": "efficiency", "value": "fragile", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be fragile. \n        Output: ", "result": "\n            vase, china, glass, porcelain, pottery, bowl, cup, plate, mug, teapot\n\"\"\"\n\n# Define the function\ndef get_fragile_artifacts(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the fragile artifacts\n    fragile_artifacts = []\n    \n    # Loop through each word in the condition\n    for word in condition_"}
{"cat": "artifacts", "slot": "efficiency", "value": "strong", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be strong. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for i in range(10):\n            if random.random() < 0.5:\n                words.append(\"hammer\")\n            elif random.random() < 0.3:\n                words.append(\"screwdriver\")\n            elif random.random() < 0.2:\n                words.append(\"wrench\")\n            elif random.random() < 0.1:\n                words.append(\"pliers\")\n            else:\n                words.append(\"none\")\n        return \", \".join(words"}
{"cat": "artifacts", "slot": "efficiency", "value": "resistant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be resistant. \n        Output: ", "result": "\n        hammer, nail, screwdriver, wrench, pliers, saw, drill, screw, nuts, bolts \n    \"\"\"\n    category = \"artifacts\"\n    condition = \"can be resistant\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of 10 words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: artifact"}
{"cat": "artifacts", "slot": "purpose", "value": "write", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are used to write. \n        Output: ", "result": "\n```\npen, pencil, paper, ink, quill, parchment, chisel, charcoal, crayon, paintbrush\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, cherry, strawberry, raspberry, watermelon, pear, plum, tomato"}
{"cat": "artifacts", "slot": "purpose", "value": "safety", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are used for safety. \n        Output: ", "result": "\n```\nsafety,gloves,helmets,hardhats,reflectivevests,safetyglasses,earplugs,safetyharness,safetyrope,safetyboots\n```\n```\nDesired input: artifacts,used,safety\n\nDesired output: comma separated list of words.\n```\n\n```\nsafety,gloves,helmets,hardhats,reflectivevests,safetyglasses,earplugs,safetyharness,safetyrope,s"}
{"cat": "artifacts", "slot": "purpose", "value": "sport", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are used for sport. \n        Output: ", "result": "\n        soccer ball, basketball, football, tennis racket, golf club, baseball bat, skateboard, roller skates, skis, snowboard\n\"\"\"\n\n# Define the function\ndef get_artifacts_for_sport():\n    artifacts = [\"soccer ball\", \"basketball\", \"football\", \"tennis racket\", \"golf club\", \"baseball bat\", \"skateboard\", \"roller skates\", \"skis\", \"snowboard\"]\n    return artifacts\n\n# Call the function\nartifacts = get_artifacts_for"}
{"cat": "artifacts", "slot": "purpose", "value": "fight", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are used for fight. \n        Output: ", "result": "\n```\nsword,dagger,mace,warhammer,axe,spear,bow,crossbow,pitchfork,trident\n```\nExplanation:\nThe words that belong to the category \"artifacts\" and satisfy the condition \"are used for fight\" are: sword, dagger, mace, warhammer, axe, spear, bow, crossbow, pitchfork, and trident.\n```"}
{"cat": "artifacts", "slot": "purpose", "value": "climbing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are used for climbing. \n        Output: ", "result": " rope, harness, carabiners, quickdraws, climbing shoes, chalk, belay device, climbing helmet, climbing chalk, climbing gear.\n    \"\"\"\n    words = [\"rope\", \"harness\", \"carabiners\", \"quickdraws\", \"climbing shoes\", \"chalk\", \"belay device\", \"climbing helmet\", \"climbing chalk\", \"climbing gear\"]\n    for word in words:\n        if \"for\" in word and \"climbing\" in word"}
{"cat": "artifacts", "slot": "purpose", "value": "groom", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are used to groom. \n        Output: ", "result": "\n          comb, brush, razor, shaver, scissors, clippers, nail clippers, tweezers, toothbrush, toothpaste.\n    \"\"\"\n    category = \"artifacts\"\n    condition = \"are used to groom\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n"}
{"cat": "artifacts", "slot": "purpose", "value": "hang", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are used to hang. \n        Output: ", "result": "\n```\nhammer, nail, screw, hook, hanger, tack, pin, thumbtack, staple\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are edible. \n        Output: \n```\napple, banana, orange, pear, grape, strawberry, melon, kiwi, mango, pineapple\n```\n"}
{"cat": "artifacts", "slot": "purpose", "value": "reflect", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are used to reflect. \n        Output: ", "result": "\n```\nmirror, glass, reflect, shine, gleam, polish, luster, glint, twinkle, sparkle\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: have fur. \n        Output: \n```\ncat, dog, bear, fox, rabbit, sheep, goat, raccoon, skunk, otter\n```\n\n```python\n"}
{"cat": "artifacts", "slot": "user", "value": "woman", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are used by women. \n        Output: ", "result": "\n            earrings, bracelet, necklace, ring, watch, purse, handbag, shoes, belt, scarf\n\"\"\"\n\n# Define the function\ndef get_women_artifacts(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the artifacts\n    artifacts = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        #"}
{"cat": "artifacts", "slot": "user", "value": "secretary", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are used by secretaries. \n        Output: ", "result": "\n            pen, pencil, paper, stapler, tape, scissors, ruler, eraser, stapler, tape\n\"\"\"\nprint(\"Comma separated list of 10 words that belong to the category of artifacts and satisfy the condition that they are used by secretaries:\")\nwords = [\"pen\", \"pencil\", \"paper\", \"stapler\", \"tape\", \"scissors\", \"ruler\", \"eraser\", \"stapler\", \"tape\"]\nfor word in words:\n    if \"secretary\" in word"}
{"cat": "artifacts", "slot": "user", "value": "riot police", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are used by riot polices. \n        Output: ", "result": "\n            1. Tear Gas\n            2. Riot Shield\n            3. Baton\n            4. Helmet\n            5. Gas Mask\n            6. Pepper Spray\n            7. Handcuffs\n            8. Riot Baton\n            9. Riot Helmet\n            10. Riot Shield\n        \"\"\"\n        words = ['Tear Gas', 'Riot Shield', 'Baton', 'Helmet', 'Gas Mask', 'Pepper Spray', 'Handcuffs', 'Riot Baton', 'Riot"}
{"cat": "artifacts", "slot": "user", "value": "writer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are used by writers. \n        Output: ", "result": "\n        pen, pencil, paper, notebook, journal, ink, quill, parchment, scroll, tablet.\n    \"\"\"\n    words = []\n    for word in artifacts:\n        if \"used by writers\" in str(word):\n            words.append(word)\n    return words\n\nprint(find_artifacts(artifacts, \"are used by writers\"))\n```\nOutput:\n```\npen, pencil, paper, notebook, journal, ink, quill, parchment, scroll, tablet\n```\nEx"}
{"cat": "artifacts", "slot": "user", "value": "climber", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are used by climbers. \n        Output: ", "result": "1. rope, 2. harness, 3. carabiners, 4. crampons, 5. ice axe, 6. helmet, 7. gaiters, 8. climbing shoes, 9. chalk bag, 10. belay device.\n    \"\"\"\n    category = \"artifacts\"\n    condition = \"are used by climbers\"\n    words = [\n        \"rope\",\n        \"harness\",\n        \"carabiners\",\n        \"crampons\",\n        \"ice ax"}
{"cat": "artifacts", "slot": "user", "value": "soldier", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are used by soldiers. \n        Output: ", "result": "\n            bayonet, canteen, grenade, helmet, knapsack, musket, pistol, rifle, saber, sword.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"soldier\" in word and \"artifact\" in word:\n            words.append(word)\n    return words\n\ndef get_anagrams(word_list):\n    anagrams = []\n    for word in word_list:\n        anagrams.extend(word.split())\n    return anagrams\n"}
{"cat": "artifacts", "slot": "user", "value": "cyclist", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are used by cyclists. \n        Output: ", "result": "\n        handlebars, gears, pedals, saddle, tires, brakes, chain, cassette, derailleur, shifters\n    \"\"\"\n    category = \"artifacts\"\n    words = [\"handlebars\", \"gears\", \"pedals\", \"saddle\", \"tires\", \"brakes\", \"chain\", \"cassette\", \"derailleur\", \"shifters\"]\n    for word in words:\n        if \"used by cyclists\" in word:\n            print(word)\n            break\n    else:\n        print(\"No words"}
{"cat": "artifacts", "slot": "user", "value": "motorcyclist", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are used by motorcyclists. \n        Output: ", "result": "\n        helmet, goggles, gloves, jacket, boots, knee-pads, gloves, goggles, helmet, jacket, boots \n    \"\"\"\n    category = \"artifacts\"\n    words = [\"helmet\", \"goggles\", \"gloves\", \"jacket\", \"boots\", \"knee-pads\", \"gloves\", \"goggles\", \"helmet\", \"jacket\", \"boots\"]\n    for word in words:\n        if \"motorcyclists\""}
{"cat": "artifacts", "slot": "user", "value": "horseman", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are used by horsemen. \n        Output: ", "result": "\n        saddle, bridle, reins, stirrups, bit, spurs, saddlecloth, martingale, bridoon, curb bit.\n    \"\"\"\n    category = \"artifacts\"\n    words = [\"saddle\", \"bridle\", \"reins\", \"stirrups\", \"bit\", \"spurs\", \"saddlecloth\", \"martingale\", \"bridoon\", \"curb bit\"]\n    for word in words:\n        if \"horsemen\" in word.lower():\n            print(word)\n            break\n"}
{"cat": "artifacts", "slot": "shape", "value": "circular", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be circular. \n        Output: ", "result": "\n```\nknife, spoon, fork, plate, bowl, glass, cup, mug, tray, cutting board\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: colors. \n        Condition: can be circular. \n        Output: \n```\nred, blue, green, yellow, orange, purple, pink, brown, black, white\n```\n\n### Example"}
{"cat": "artifacts", "slot": "shape", "value": "round", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be round. \n        Output: ", "result": "\n        round, artifact, object, object, object, object, object, object, object, object. \n    \"\"\"\n    words = []\n    for word in words:\n        if \"round\" in word and word.endswith(\".object\"):\n            words.append(word)\n    return \", \".join(words)\n\nprint(find_round_artifacts(words))\n```\nOutput:\n```\nround, artifact, object, object, object, object, object, object, object, object.\n```"}
{"cat": "artifacts", "slot": "shape", "value": "arched", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be arched. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in ARTIFACTS:\n            if word.can_be_arched():\n                words.append(word)\n        return words\n\nprint(find_artifacts(can_be_arched=True))\nprint(find_artifacts(can_be_arched=False))\nprint(find_artifacts(can_be_arched=True))\nprint(find_artifacts(can_be_arched=False))\nprint(find_artifacts(can_be_arched=True"}
{"cat": "artifacts", "slot": "shape", "value": "rond", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be rond. \n        Output: ", "result": "\n        round, rounds, rounding, rounding, rounding, rounding, rounding, rounding, rounding. \n    \"\"\"\n    words = []\n    for word in words:\n        if \"round\" in word:\n            words.append(word)\n    return \", \".join(words)\n\nprint(get_round_words(words))\n```\nOutput: round, rounds, rounding, rounding, rounding, rounding, rounding, rounding, rounding.\n```"}
{"cat": "artifacts", "slot": "shape", "value": "spherical", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be spherical. \n        Output: ", "result": "\n        round, ball, sphere, orb, globe, kug, spheroid, boulder, pebble, marble \n    \"\"\"\n    category = \"artifacts\"\n    condition = \"can be spherical\"\n    words = []\n    for word in word_list:\n        if \"spherical\" in word and word not in words:\n            words.append(word)\n    result = \", \".join(words)\n    print(result)\n```\nExample:\n```\nInput: word_list = [\"sphere\", \"ball\","}
{"cat": "artifacts", "slot": "colorPattern", "value": "black", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be black. \n        Output: ", "result": "\n```\nblack,sword,knight,chess,king,queen,rook,bishop,pawn\n```"}
{"cat": "artifacts", "slot": "colorPattern", "value": "white", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be white. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in artifacts:\n            if word.color == \"white\":\n                words.append(word)\n        return words\n"}
{"cat": "artifacts", "slot": "colorPattern", "value": "black", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be black. \n        Output: ", "result": "\n```\nblack,sword,knight,chess,king,queen,rook,bishop,pawn\n```"}
{"cat": "artifacts", "slot": "colorPattern", "value": "white", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be white. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in artifacts:\n            if word.color == \"white\":\n                words.append(word)\n        return words\n"}
{"cat": "artifacts", "slot": "colorPattern", "value": "sparkly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be sparkly. \n        Output: ", "result": "\n        diamond, necklace, bracelet, ring, earrings, brooch, tiara, watch, cufflinks, bangle\n```\n\nExample 2:\n```\nInput: \nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be domesticated. \n        Output: \n        dog, cat, horse, cow, chicken, pig, sheep, goat, rabbit,"}
{"cat": "artifacts", "slot": "colorPattern", "value": "golden", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be golden. \n        Output: ", "result": "\n        golden, artifact, treasure, glitter, shiny, precious, valuable, priceless, golden\\_artifact, golden\\_treasure, golden\\_glitter, golden\\_shiny, golden\\_precious, golden\\_valuable, golden\\_priceless, golden\\_artifact, golden\\_treasure, golden\\_glitter, golden\\_shiny, golden\\_precious, golden\\_valuable, golden\\_priceless, golden\\_artifact, golden\\_treasure, golden\\_glitter, golden\\_shiny, golden\\_precious, golden\\_valuable, golden\\_pr"}
{"cat": "artifacts", "slot": "colorPattern", "value": "silver", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be silver. \n        Output: ", "result": "\n        silver, bracelet, necklace, ring, earrings, brooch, pendant, cufflinks, watch,\n        Desired output: silver, bracelet, necklace, ring, earrings, brooch, pendant, cufflinks, watch.\n        Category: artifacts. \n        Condition: can be gold. \n        Output: \n        gold, bracelet, necklace, ring, earrings, brooch, pendant, cufflinks, watch,\n        Desired output: gold, bracelet, necklace, ring,"}
{"cat": "artifacts", "slot": "purpose", "value": "shade", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are used for shade. \n        Output: ", "result": "\n```\nshade, awning, canopy, parasol, umbrella, shadecloth, sunshade, sunshelter, sunscreen, sunglasses\n```\nExplanation: The word `shade` satisfies the condition of being used for shade and belongs to the category of artifacts. The words `awning`, `canopy`, `parasol`, `umbrella`, `shadecloth`, `sunshade`, `sunshelter`, `sunscreen`, `sunglasses` also satisfy the condition and belong to the same category"}
{"cat": "artifacts", "slot": "purpose", "value": "shelter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are used for shelter. \n        Output: ", "result": "\n```\ntent, shelter, canopy, awning, hut, cabin, cottage, yurt, teepee, igloo\n```\n\nExample:\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammals. \n        Output: \n```\ncat, dog, cow, pig, horse, elephant, giraffe, whale, dolph"}
{"cat": "artifacts", "slot": "bodyPart", "value": "jewelry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have or be used with jewelry. \n        Output: ", "result": "\n```\ndiamond, pearl, ruby, sapphire, emerald, necklace, bracelet, ring, earring, brooch\n```\nExplanation:\nThe words that belong to the category of artifacts and can be used with jewelry are diamond, pearl, ruby, sapphire, emerald, necklace, bracelet, ring, earring, and brooch.\n```"}
{"cat": "artifacts", "slot": "part", "value": "fastener", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  fastener. \n        Output: ", "result": "\n```\nbolt, screw, nut, washer, bolt, screw, nut, washer, bolt, screw\n```"}
{"cat": "artifacts", "slot": "part", "value": "tip", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  tip. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for i in range(10):\n            word = random.choice([word for word in artifacts if 'tip' in word])\n            if word not in words:\n                words.append(word)\n        return words\n\n# Define a function to get a random word from a given category\ndef get_random_word(category):\n    \"\"\"\n    Provide a function to get a random word from a given category. \n        Category: string. \n        Desired output: string. \n        \"\"\"\n    words = ["}
{"cat": "artifacts", "slot": "part", "value": "clasp", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  clasp. \n        Output: ", "result": "\n```\nsword,dagger,clasp,brooch,pendant,ring,bracelet,earring,necklace,amulet\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have 4 legs. \n        Output: \n```\ncat,dog,horse,cow,pig,chicken,sheep,goat,deer,giraffe\n"}
{"cat": "artifacts", "slot": "part", "value": "lever", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  lever. \n        Output: ", "result": " hammer, wrench, screwdriver, pliers, saw, hatchet, chisel, drill, ruler, level. \n    \"\"\"\n    words = []\n    for word in artifacts:\n        if \"lever\" in word:\n            words.append(word)\n    return words\n\nprint(find_artifacts(\"hammer,wrench,screwdriver,pliers,saw,hatchet,chisel,drill,ruler,level,lever\"))\n# Output: hammer, wrench, screwdriver"}
{"cat": "artifacts", "slot": "part", "value": "ink", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  ink. \n        Output: ", "result": "\n    \"\"\"\n    words = []\n    for word in artifacts:\n        if \"ink\" in word:\n            words.append(word)\n    print(\", \".join(words))\n```\nExample:\nInput:\n```\nprovide a list of 10 words that belong to the category and satisfy the condition.\nDesired output: comma separated list of words.\nCategory: artifacts.\nCondition: can have  ink.\nOutput: \n```\nknife, inkwell, quill, pen, brush, pencil, paintbrush,"}
{"cat": "artifacts", "slot": "part", "value": "bead", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  bead. \n        Output: ", "result": " bead, bracelet, necklace, earrings, ring, brooch, amulet, pendants, anklet, bangle. \n    \"\"\"\n    category = \"artifacts\"\n    words = [\"bracelet\", \"necklace\", \"earrings\", \"ring\", \"brooch\", \"amulet\", \"pendants\", \"anklet\", \"bangle\"]\n    condition = \"can have bead\"\n    filtered_words = []\n    for word in words:\n        if word.lower().startswith(category.lower() + \""}
{"cat": "artifacts", "slot": "part", "value": "knob", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  knob. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in words:\n            if \"knob\" in word and \"artifact\" in word:\n                words.append(word)\n        return words\n\n# Your ArtifactFinder function is defined above.\n\n# Now you can call the function from your main program like this:\nartifact_words = ArtifactFinder(\"artifacts\", \"can have knob\")\nprint(artifact_words)\n```\nThis will output the following list of words:\n```\n[\"can\", \"have\", \"knob\", \"artifact\"]\n```"}
{"cat": "artifacts", "slot": "part", "value": "platen", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  platen. \n        Output: ", "result": "\n        can, plate, platens, platen, platen, platen, platen, platen, platen, \n        platen, platen, platen, platen, platen, platen, platen, platen, platen, \n        platen, platen, platen, platen, platen, platen, platen, platen, platen, \n        platen, platen, platen, platen, platen, platen, platen, platen, platen, \n        platen, platen, platen"}
{"cat": "artifacts", "slot": "part", "value": "shaft", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  shaft. \n        Output: ", "result": " hammer, chisel, pickaxe, shovel, wedge, plow, saw, axe, drill, chainsaw. \n    \"\"\"\n    category = \"artifacts\"\n    words = [\"hammer\", \"chisel\", \"pickaxe\", \"shovel\", \"wedge\", \"plow\", \"saw\", \"axe\", \"drill\", \"chainsaw\"]\n    for word in words:\n        if \"shaft\" in word:\n            print(word)\n            break\n    else:\n        print(\"No words"}
{"cat": "artifacts", "slot": "part", "value": "parasol", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  parasol. \n        Output: ", "result": "\n        umbrella, parasol, beach umbrella, sunshade, parasol umbrella, parasol canopy, parasol cover, parasol stand, parasol base, parasol holder\n    \"\"\"\n    words = []\n    for word in artifacts:\n        if \"parasol\" in word:\n            words.append(word)\n    print(\", \".join(words))\n```\nExample:\n```\nInput: \nprovide a list of 10 words that belong to the category and satisfy the condition. \n"}
{"cat": "artifacts", "slot": "part", "value": "pickup", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  pickup. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in words:\n            if \"pickup\" in word and \"artifact\" in word:\n                words.append(word)\n        return words\n\n# Your ArtifactFinder function\ndef find_artifacts_with_pickup(words):\n    artifact_words = []\n    for word in words:\n        if \"pickup\" in word and \"artifact\" in word:\n            artifact_words.append(word)\n    return artifact_words\n\n# Test the function\nprint(find_artifacts_with_"}
{"cat": "artifacts", "slot": "part", "value": "pickup arm", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  pickup arm. \n        Output: ", "result": "\n        pickup, arm, artifact, can, have, \n        pickup, arm, artifact, can, have, \n        pickup, arm, artifact, can, have, \n        pickup, arm, artifact, can, have, \n        pickup, arm, artifact, can, have, \n        pickup, arm, artifact, can, have, \n        pickup, arm, artifact, can, have, \n        pickup, arm, artifact, can, have, \n        pickup, arm, artifact, can, have, \n       "}
{"cat": "artifacts", "slot": "part", "value": "ferrule", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  ferrule. \n        Output: ", "result": " ferrule, spearhead, arrowhead, knife, axe, chisel, adze, awl, hammerstone, hand axe. \n    \"\"\"\n    category = \"artifacts\"\n    words = [\"ferrule\", \"spearhead\", \"arrowhead\", \"knife\", \"axe\", \"chisel\", \"adze\", \"awl\", \"hammerstone\", \"hand axe\"]\n    for word in words:\n        if \"ferrule\" in word:\n            print(word)\n            break\n    else:\n        print(\""}
{"cat": "artifacts", "slot": "part", "value": "carriage", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  carriage. \n        Output: ", "result": " carriage, artifacts, can, have,  comma,  separated,  list,  satisfy,  condition. \n    \"\"\"\n    words = [\"carriage\", \"artifacts\", \"can\", \"have\", \",\", \"separated\", \"list\", \"satisfy\", \"condition\"]\n    return \", \".join(words)\n\nprint(find_words(category='artifacts', condition='can have carriage'))\n```\nOutput:\n```\ncarriage, artifacts, can, have, comma, separated, list, satisfy, condition\n```"}
{"cat": "artifacts", "slot": "part", "value": "rim", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  rim. \n        Output: ", "result": "\n```\ncan, have, rim\n```\n```"}
{"cat": "artifacts", "slot": "part", "value": "pendent", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  pendent. \n        Output: ", "result": "\n```\nart, pendant, necklace, jewelry, accessory, adornment, decoration, ornament, trinket, amulet\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have 4 legs. \n        Output: \n```\ncat, dog, horse, cow, chicken, pig, sheep, goat, giraffe, eleph"}
{"cat": "artifacts", "slot": "part", "value": "cartridge", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  cartridge. \n        Output: ", "result": " camera, film, cartridge, lens, shutter, aperture, sensor, flash, viewfinder, focus.\n    \"\"\"\n    category = \"artifacts\"\n    words = [\"camera\", \"film\", \"cartridge\", \"lens\", \"shutter\", \"aperture\", \"sensor\", \"flash\", \"viewfinder\", \"focus\"]\n    for word in words:\n        if \"can have\" in word and \"cartridge\" in word:\n            print(word)\n\noutput: camera, film, cartridge, lens, shutter, a"}
{"cat": "artifacts", "slot": "part", "value": "tone arm", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  tone arm. \n        Output: ", "result": " record, tonearm, stylus, cartridge, turntable, needle, groove, vinyl, stereo. \n    \"\"\"\n    words = []\n    for word in words:\n        if \"can\" in word and \"have\" in word and \"tone arm\" in word:\n            words.append(word)\n    return \", \".join(words)\n\nprint(find_words(\"artifacts\", \"can have tone arm\"))\n# Output: record, tonearm, stylus, cartridge, turntable, needle, groove"}
{"cat": "artifacts", "slot": "part", "value": "beaver", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  beaver. \n        Output: ", "result": " can, have, beaver. \n    \"\"\"\n    words = []\n    for word in artifacts:\n        if \"beaver\" in word:\n            words.append(word)\n    return \", \".join(words)\n\nprint(find_artifacts(\"can\", \"have\", \"beaver\"))  # can, have, beaver\nprint(find_artifacts(\"can\", \"has\", \"beaver\"))  # can, has, beaver\nprint(find_artifacts(\"can\", \"had\", \"beaver\"))  # can, had, beaver\n"}
{"cat": "artifacts", "slot": "part", "value": "ribbon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  ribbon. \n        Output: ", "result": " ribbon, trophy, medal, banner, certificate, badge, plaque, trophy, ribbon, medal.\n    \"\"\"\n    category = \"artifacts\"\n    words = [\"trophy\", \"medal\", \"banner\", \"certificate\", \"badge\", \"plaque\", \"trophy\", \"ribbon\", \"medal\"]\n    for word in words:\n        if \"ribbon\" in word:\n            print(word)\n\n# Output:\n# ribbon\n# trophy\n# medal\n# banner\n# certificate\n#"}
{"cat": "artifacts", "slot": "part", "value": "visor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  visor. \n        Output: ", "result": "\n```\nvisor\nvisor\nvisor\nvisor\nvisor\nvisor\nvisor\nvisor\nvisor\n```vbnet\n\nExplanation: The words that belong to the category \"artifacts\" and satisfy the condition \"can have visor\" are \"visor\", \"visor\", \"visor\", \"visor\", \"visor\", \"visor\", \"visor\", \"visor\", \"visor\".\n```"}
{"cat": "artifacts", "slot": "part", "value": "changer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  changer. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in artifacts:\n            if \"changer\" in word:\n                words.append(word)\n        print(\", \".join(words))\n```\nExplanation:\n\n1. The function takes two arguments: a category and a condition.\n2. The function uses a for loop to iterate over the words in the category.\n3. For each word, the function checks if it satisfies the condition using an if statement.\n4. If the word satisfies the condition, it is added to the list of words.\n5. Finally,"}
{"cat": "artifacts", "slot": "part", "value": "record changer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  record changer. \n        Output: ", "result": "\n        record changer, \n        record changer, \n        record changer, \n        record changer, \n        record changer, \n        record changer, \n        record changer, \n        record changer, \n        record changer, \n        record changer, \n        record changer, \n        record changer, \n        record changer, \n        record changer, \n        record changer, \n        record changer, \n        record changer, \n        record changer, \n       "}
{"cat": "artifacts", "slot": "part", "value": "angle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  angle. \n        Output: ", "result": "\n```\nknife, spoon, fork, plate, bowl, glass, cup, mug, tray, cutting board\n```\n\nExplanation:\nThe words that belong to the category \"artifacts\" and can have an angle are: knife, spoon, fork, plate, bowl, glass, cup, mug, tray, and cutting board.\n```python\ndef get_words_with_angle(category, condition):\n    words = []\n    for word in category:\n        if \"angle\" in word:\n            words.append(word)"}
{"cat": "artifacts", "slot": "part", "value": "keyboard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  keyboard. \n        Output: ", "result": " computer, keyboard, mouse, trackball, joystick, gamepad, touchpad, pen, tablet, stylus. \n        \"\"\"\n        category = \"artifacts\"\n        condition = \"can have keyboard\"\n        words = get_words(category, condition)\n        keyboard_words = [word for word in words if \"keyboard\" in word]\n        return \", \".join(keyboard_words)\n\n    print(get_words(\"artifacts\", \"can have mouse\"))\n    print(get_words(\"artifacts\", \"can have trackball\"))\n"}
{"cat": "artifacts", "slot": "part", "value": "key", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  key. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in artifacts:\n            if \"key\" in word:\n                words.append(word)\n        print(\", \".join(words))\n```\nExplanation:\n\n1. First, we define a function `get_artifacts_with_key()` that takes a category as input and returns a list of words that belong to that category and satisfy the condition that they can have a \"key\".\n2. Inside the function, we use a for loop to iterate over all the words in the category.\n3. For each word, we"}
{"cat": "artifacts", "slot": "part", "value": "bell", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  bell. \n        Output: ", "result": " hammer, wrench, screwdriver, pliers, saw, knife, fork, spoon, bell, can opener. \n    \"\"\"\n    words = [\"hammer\", \"wrench\", \"screwdriver\", \"pliers\", \"saw\", \"knife\", \"fork\", \"spoon\", \"bell\", \"can opener\"]\n    for word in words:\n        if \"bell\" in word:\n            print(word)\n            break\n    else:\n        print(\"No words found.\")\n```\nExample:\n```python\nWhat is the"}
{"cat": "artifacts", "slot": "part", "value": "turntable", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  turntable. \n        Output: ", "result": "\n```\nturntable, record, vinyl, album, disc, 33rpm, 45rpm, needle, stylus, groove\n```\nExplanation: The word `turntable` belongs to the category of `artifacts` and can have `vinyl`, `record`, `album`, `disc`, `33rpm`, `45rpm`, `needle`, `stylus`, and `groove`.\n```"}
{"cat": "artifacts", "slot": "part", "value": "rib", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  rib. \n        Output: ", "result": " can, rib, artifacts."}
{"cat": "artifacts", "slot": "part", "value": "typewriter keyboard", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  typewriter keyboard. \n        Output: ", "result": "\n        typewriter \n        keyboard \n        computer \n        printer \n        scanner \n        mouse \n        monitor \n        keyboard \n        printer \n        scanner \n    \"\"\"\n    words = [\n        \"typewriter\",\n        \"keyboard\",\n        \"computer\",\n        \"printer\",\n        \"scanner\",\n        \"mouse\",\n        \"monitor\",\n        \"keyboard\",\n        \"printer\",\n        \"scanner\"\n    ]\n    filtered_words = [word for word in words if \"type"}
{"cat": "artifacts", "slot": "part", "value": "felly", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  felly. \n        Output: ", "result": "\n        artifacts, felly."}
{"cat": "artifacts", "slot": "part", "value": "radio chassis", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  radio chassis. \n        Output: ", "result": " radio, chassis, chassis, chassis, chassis, chassis, chassis, chassis, chassis. \n    \"\"\"\n    words = []\n    for word in artifacts:\n        if \"radio\" in word and \"chassis\" in word:\n            words.append(word)\n    print(\", \".join(words))\n"}
{"cat": "artifacts", "slot": "part", "value": "buckle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  buckle. \n        Output: ", "result": "\n```\nleather, belt, buckle, strap, saddle, harness, girth, gaiter, baldric, frog\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can have 4 legs. \n        Output: \n```\ncat, dog, horse, cow, sheep, pig, chicken, goat, lion, tiger\n```"}
{"cat": "artifacts", "slot": "part", "value": "panel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  panel. \n        Output: ", "result": "\n        artifacts, can, have, panel, \n        artifacts, can, have, panel, \n        artifacts, can, have, panel, \n        artifacts, can, have, panel, \n        artifacts, can, have, panel, \n        artifacts, can, have, panel, \n        artifacts, can, have, panel, \n        artifacts, can, have, panel, \n        artifacts, can, have, panel, \n        artifacts, can, have, panel, \n        artifacts, can, have"}
{"cat": "artifacts", "slot": "part", "value": "frame", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  frame. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in words:\n            if \"frame\" in word and \"artifacts\" in word:\n                words.append(word)\n        return \", \".join(words)\n\nprint(find_artifacts_with_frame(sentence))\n```\nExplanation of the code:\n\n* The `find_artifacts_with_frame(sentence)` function takes a sentence as input and returns a comma-separated list of 10 words that belong to the category of artifacts and satisfy the condition of having a frame.\n"}
{"cat": "artifacts", "slot": "part", "value": "pendant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  pendant. \n        Output: ", "result": "\n```\npendant, charm, amulet, necklace, bracelet, brooch, earring, ring, anklet, bangle\n```\nExplanation:\nThe words that belong to the category \"artifacts\" and can have \"pendant\" are: charm, amulet, necklace, bracelet, brooch, earring, ring, anklet, and bangle.\n```"}
{"cat": "artifacts", "slot": "part", "value": "typewriter carriage", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  typewriter carriage. \n        Output: ", "result": "\n        typewriter, carriage, \n```"}
{"cat": "artifacts", "slot": "part", "value": "strap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  strap. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in artifacts:\n            if \"strap\" in word:\n                words.append(word)\n        return words\n"}
{"cat": "artifacts", "slot": "part", "value": "gore", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  gore. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in words:\n            if \"gore\" in word and \"artifact\" in word.lower():\n                words.append(word)\n        return \", \".join(words)\n\n# Your Artifact Gore Check function is defined above.\n\n# Your main function\ndef main():\n    # Your main function code goes here.\nif __name__ == '__main__':\n    main()\n```\n\n```"}
{"cat": "artifacts", "slot": "part", "value": "handle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  handle. \n        Output: ", "result": "\n        artifact, handle, artifacts, handle, artifact, handle, \n        artifact, handle, artifacts, handle, artifact, handle, \n        artifact, handle, artifacts, handle, artifact, handle, \n        artifact, handle, artifacts, handle, artifact, handle, \n        artifact, handle, artifacts, handle, artifact, handle, \n        artifact, handle, artifacts, handle, artifact, handle, \n        artifact, handle, artifacts, handle, artifact, handle, \n        artifact, handle, artifacts, handle, artifact, handle, "}
{"cat": "artifacts", "slot": "part", "value": "eraser", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  eraser. \n        Output: ", "result": "\n```\neraser, pencil, pen, crayon, marker, ruler, protractor, compass, eraser, pencil, pen, crayon, marker, ruler, protractor, compass\n```"}
{"cat": "artifacts", "slot": "part", "value": "felloe", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  felloe. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in artifacts:\n            if \"felloe\" in word:\n                words.append(word)\n        return words\n\nprint(find_artifacts(\"can\", \"have\", \"felloe\"))  # ['can', 'have', 'felloe']\nprint(find_artifacts(\"can\", \"have\", \"felloef\"))  # []\nprint(find_artifacts(\"can\", \"have\", \"felloefg\"))  # []\nprint(find_artifacts(\"can\", \"have\", \""}
{"cat": "artifacts", "slot": "part", "value": "auto-changer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  auto-changer. \n        Output: ", "result": "\n        artifacts,auto-changer. \n    \"\"\"\n    words = []\n    for word in artifacts:\n        if \"auto-changer\" in word:\n            words.append(word)\n    return \", \".join(words)\n\n# Your ArtifactsAutoChanger function is now complete.\n\n# Call the function and print the result.\nprint(ArtifactsAutoChanger(\", \"))\n```\n\nOutput:\nartifacts,auto-changer.\n```"}
{"cat": "artifacts", "slot": "purpose", "value": "protection", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are used for protection. \n        Output: ", "result": "\n        shield, amulet, talisman, armor, helmet, breastplate, shield, amulet, talisman, \n        armor, helmet, breastplate, shield, amulet, talisman, armor, helmet, breastplate, \n        shield, amulet, talisman, armor, helmet, breastplate, shield, amulet, talisman, \n        armor, helmet, breastplate, shield, amulet, talisman, armor, helmet, breastplate, \n       "}
{"cat": "artifacts", "slot": "material", "value": "plastic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be made of plastic. \n        Output: ", "result": "\n        sunglasses, goggles, binoculars, camera, phone case, water bottle, toy, keychain, pen, wallet\n\"\"\"\n\noutput = [\"sunglasses\", \"goggles\", \"binoculars\", \"camera\", \"phone case\", \"water bottle\", \"toy\", \"keychain\", \"pen\", \"wallet\"]\n\nprint(output)"}
{"cat": "artifacts", "slot": "material", "value": "metal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be made of metal. \n        Output: ", "result": "\n        hammer, nail, wrench, screwdriver, saw, pliers, hatchet, chisel, punch, drill\n\"\"\"\n\noutput = [\"hammer\", \"nail\", \"wrench\", \"screwdriver\", \"saw\", \"pliers\", \"hatchet\", \"chisel\", \"punch\", \"drill\"]\n\nprint(output)"}
{"cat": "artifacts", "slot": "material", "value": "fibre", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be made of fibre. \n        Output: ", "result": "\n        rug, mat, basket, broom, brush, mop, fan, whisk, spoon, bowl.\n    \"\"\"\n    fibre_artifacts = [\"rug\", \"mat\", \"basket\", \"broom\", \"brush\", \"mop\", \"fan\", \"whisk\", \"spoon\", \"bowl\"]\n    fibre_artifacts = [word for word in fibre_artifacts if word.endswith([\"rug\", \"mat\", \"basket\", \"broom\", \"brush\", \"mop\", \"fan\", \"whisk"}
{"cat": "artifacts", "slot": "material", "value": "leather", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be made of leather. \n        Output: ", "result": "\n        saddle, bridle, gloves, boots, belt, wallet, bag, jacket, hat, shoes.\n    \"\"\"\n    leather_artifacts = [\n        \"saddle\",\n        \"bridle\",\n        \"gloves\",\n        \"boots\",\n        \"belt\",\n        \"wallet\",\n        \"bag\",\n        \"jacket\",\n        \"hat\",\n        \"shoes\"\n    ]\n    leather_artifacts = [word for word in leather_artifacts if word.endswith"}
{"cat": "artifacts", "slot": "material", "value": "pearl", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be made of pearl. \n        Output: ", "result": "\n          diamond, pearl, necklace, bracelet, earrings, ring, brooch, pendant, cufflinks, watch.\n    \"\"\"\n    words = []\n    for word in artifacts:\n        if \"pearl\" in word and \"made of\" in word:\n            words.append(word)\n    print(\", \".join(words))\n"}
{"cat": "artifacts", "slot": "material", "value": "elastic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be made of elastic. \n        Output: ", "result": "\n        rubber, band, ball, bouncy, elastic, eraser, gum, pencil, sponge, stretchy.\n    \"\"\"\n    category = \"artifacts\"\n    condition = \"can be made of elastic\"\n    words = []\n    for word in all_words:\n        if word.satisfies(condition):\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n# Test the function\ntest_function()\n```"}
{"cat": "artifacts", "slot": "material", "value": "thread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be made of thread. \n        Output: ", "result": "\n        rug, tapestry, embroidery, needlepoint, cross-stitch, knitting, crochet, weaving, macrame, quilting\n\"\"\"\n\n# Define the function\ndef get_artifact_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Iterate over the words in the condition\n    for word in condition_words:"}
{"cat": "artifacts", "slot": "material", "value": "wood", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be made of wood. \n        Output: ", "result": "\n        artifacts, can, be, made, of, wood. \n    \"\"\"\n    words = []\n    for word in artifacts:\n        if \"can\" in word and \"be\" in word and \"made\" in word and \"of\" in word and \"wood\" in word:\n            words.append(word)\n    return(\", \".join(words))\n\nprint(find_artifacts(artifacts, \"can be made of wood\"))\n```\nOutput: artifacts, can, be, made, of, wood.\n```"}
{"cat": "artifacts", "slot": "material", "value": "canvas", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be made of canvas. \n        Output: ", "result": "\n```\ncanvas, paintbrush, easel, palette, paint, artist, artwork, canvas, brush, paintings\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can be domesticated. \n        Output: \n```\ncat, dog, horse, cow, chicken, pig, sheep, goat, rabbit, mouse\n```\n\n```python\nProv"}
{"cat": "artifacts", "slot": "material", "value": "fiberglass", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be made of fiberglass. \n        Output: ", "result": "\n        fiberglass, boat, canoe, kayak, paddle, oar, sailboat, yacht, dinghy, catamaran.\n    \"\"\"\n    category = \"artifacts\"\n    condition = \"can be made of fiberglass\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == \"art\":"}
{"cat": "artifacts", "slot": "material", "value": "polycarbonate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be made of polycarbonate. \n        Output: ", "result": "\n            1. LCD\n            2. Monitor\n            3. Keyboard\n            4. Mouse\n            5. Printer\n            6. Scanner\n            7. Speaker\n            8. Microphone\n            9. Headset\n            10. Projector\n        \"\"\"\n        words = [\n            \"LCD\",\n            \"Monitor\",\n            \"Keyboard\",\n            \"Mouse\",\n            \"Printer\",\n            \"Scanner\",\n            \"Speaker\",\n            \"Microphone\",\n            \"Headset\",\n            \"Projector\"\n"}
{"cat": "artifacts", "slot": "material", "value": "steel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be made of steel. \n        Output: ", "result": "\n        hammer, wrench, screwdriver, pliers, saw, drill, hatchet, chisel, punch, file\n\"\"\"\n\n# Define the function\ndef get_artifacts_made_of_steel(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the artifacts\n    artifacts = []\n    \n    # Iterate over the words in the category\n    for word in category"}
{"cat": "artifacts", "slot": "material", "value": "grease", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be made of grease. \n        Output: ", "result": "\n        oil, grease, wax, butter, lube, lubricant, petroleum, oil-based, fat-based.\n    \"\"\"\n    category = \"artifacts\"\n    condition = \"can be made of grease\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: artifacts"}
{"cat": "artifacts", "slot": "material", "value": "glass", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be made of glass. \n        Output: ", "result": "\n        diamond, crystal, glass, window, vase, goblet, chandelier, mirror, bottle, bowl \n    \"\"\"\n    category = \"artifacts\"\n    condition = \"can be made of glass\"\n    words = []\n    for word in text.split():\n        if word.lower().startswith(category.lower()):\n            if \"made of glass\" in word.lower():\n                words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No"}
{"cat": "artifacts", "slot": "colorPattern", "value": "gold", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be gold. \n        Output: ", "result": "\n```\ngold, nugget, treasure, bullion, coin, ingot, relic, artifact, trinket, souvenir\n```\n\nExplanation:\nThe words that belong to the category \"artifacts\" and satisfy the condition \"can be gold\" are \"gold\", \"nugget\", \"treasure\", \"bullion\", \"coin\", \"ingot\", \"relic\", \"artifact\", \"trinket\", and \"souvenir\".\n```"}
{"cat": "artifacts", "slot": "part", "value": "canopy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  canopy. \n        Output: ", "result": "\n```\ncanopy, artifact, canopy, canopy, canopy, canopy, canopy, canopy, canopy, canopy\n```"}
{"cat": "artifacts", "slot": "material", "value": "silver", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be made of silver. \n        Output: ", "result": "\n        silver, necklace, bracelet, ring, earrings, brooch, pendant, cufflinks, watch,\n        Desired output: \n```"}
{"cat": "artifacts", "slot": "material", "value": "gold", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be made of gold. \n        Output: ", "result": "\n        gold\\_ring, gold\\_bracelet, gold\\_necklace, gold\\_earrings, \n        gold\\_watch, gold\\_pendant, gold\\_brooch, gold\\_cufflinks, \n        gold\\_money\\_clip, gold\\_jewelry\\_box\n    \"\"\"\n    category = \"artifacts\"\n    words = [\"gold\\_ring\", \"gold\\_bracelet\", \"gold\\_necklace\", \"gold\\_earrings\", \n             \"gold\\_watch\", \"gold\\_pendant\", \"gold\\_"}
{"cat": "artifacts", "slot": "material", "value": "cloth", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be made of cloth. \n        Output: ", "result": "\n        glove, sock, scarf, hat, shirt, pants, jacket, blanket, pillow, towel.\n    \"\"\"\n    category = \"artifacts\"\n    condition = \"can be made of cloth\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: artifacts. "}
{"cat": "artifacts", "slot": "material", "value": "fabric", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be made of fabric. \n        Output: ", "result": "\n        gloves, socks, scarf, hat, shirt, pants, jacket, blanket, pillow, curtains.\n    \"\"\"\n    category = \"artifacts\"\n    condition = \"can be made of fabric\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of 10 words that belong to that category.\n        Desired output: comma separated list of words. \n        Category:"}
{"cat": "artifacts", "slot": "colorPattern", "value": "silver", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be silver. \n        Output: ", "result": "\n        silver, bracelet, necklace, ring, earrings, brooch, pendant, cufflinks, watch,\n        Desired output: silver, bracelet, necklace, ring, earrings, brooch, pendant, cufflinks, watch.\n        Category: artifacts. \n        Condition: can be gold. \n        Output: \n        gold, bracelet, necklace, ring, earrings, brooch, pendant, cufflinks, watch,\n        Desired output: gold, bracelet, necklace, ring,"}
{"cat": "artifacts", "slot": "part", "value": "gem", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  gem. \n        Output: ", "result": "\n```\namethyst, diamond, emerald, opal, pearl, ruby, sapphire, topaz, turquoise, zircon\n```\nExplanation:\nThe words that belong to the category \"artifacts\" and can have \"gem\" are: amethyst, diamond, emerald, opal, pearl, ruby, sapphire, topaz, turquoise, and zircon.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired"}
{"cat": "artifacts", "slot": "part", "value": "shell", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  shell. \n        Output: ", "result": " hammer, screwdriver, wrench, pliers, saw, drill, chisel, hatchet, file, punch.\n    \"\"\"\n    words = []\n    for word in artifacts:\n        if \"shell\" in word:\n            words.append(word)\n    return words\n\nprint(find_artifacts(\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"saw\", \"drill\", \"chisel\", \"hatchet\", \"file\", \"punch\"))\n# Output: hammer, screw"}
{"cat": "artifacts", "slot": "part", "value": "bracelet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  bracelet. \n        Output: ", "result": " bracelet, watch, necklace, ring, earrings, brooch, pendant, cufflinks, anklet, bangle.\n```\n\n```"}
{"cat": "artifacts", "slot": "material", "value": "gem", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can be made of gem. \n        Output: ", "result": "\n```\ndiamond, emerald, ruby, sapphire, topaz, amethyst, pearl, opal, jade, turquoise\n```\nExplanation:\n\n1. diamond, emerald, ruby, sapphire, topaz, amethyst, pearl, opal, jade, turquoise\n2. diamond, emerald, ruby, sapphire, topaz, amethyst, pearl, opal, jade, turquoise\n3. diamond, emerald, ruby,"}
{"cat": "artifacts", "slot": "generalization", "value": "device", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are device. \n        Output: ", "result": "\n```\nphone, camera, watch, glasses, earbuds, fitness tracker, virtual reality headset, smart home device, smart car, smart wearable\n```\nExplanation: The words that belong to the category \"artifacts\" and satisfy the condition \"are device\" are: phone, camera, watch, glasses, earbuds, fitness tracker, virtual reality headset, smart home device, smart car, and smart wearable.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output"}
{"cat": "artifacts", "slot": "generalization", "value": "artifact", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are artifact. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in artifacts:\n            if \"artifact\" in word:\n                words.append(word)\n        return words\n"}
{"cat": "artifacts", "slot": "generalization", "value": "artefact", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are artefact. \n        Output: ", "result": "\n```\nknife, spoon, fork, plate, bowl, cup, spatula, ladle, tongs, fork, knife\n```\n1. Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammals. \n        Output: \n```\ncat, dog, cow, pig, horse, sheep, elephant, giraffe, monkey, whale, dolphin\n```"}
{"cat": "artifacts", "slot": "generalization", "value": "covering", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are covering. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in artifacts:\n            if \"covering\" in word:\n                words.append(word)\n        print(\", \".join(words))\n```\nExplanation:\n\n1. The function takes two arguments: a category and a condition.\n2. The function uses a for loop to iterate over the words in the category.\n3. For each word, the function checks if the word satisfies the condition using an if statement.\n4. If the word satisfies the condition, the function appends the word to a list.\n5."}
{"cat": "artifacts", "slot": "generalization", "value": "instrumentation", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are instrumentation. \n        Output: ", "result": "\n        hammer, wrench, screwdriver, pliers, ruler, tape measure, level, saw, drill, socket set.\n    \"\"\"\n    words = []\n    for word in artifacts:\n        if \"instrumentation\" in word:\n            words.append(word)\n    return words\n\nprint(find_artifacts(\"instrumentation\", artifacts))\n```\nOutput:\nhammer, wrench, screwdriver, pliers, ruler, tape measure, level, saw, drill, socket set\n```"}
{"cat": "artifacts", "slot": "generalization", "value": "instrumentality", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are instrumentality. \n        Output: ", "result": "\n        hammer, wrench, screwdriver, pliers, saw, drill, ruler, tape measure, level, pencil.\n    \"\"\"\n    category = \"artifacts\"\n    condition = \"are instrumentality\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of 10 words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: artifact"}
{"cat": "artifacts", "slot": "generalization", "value": "vesture", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are vesture. \n        Output: ", "result": "\n```\nshirt, jacket, pants, socks, shoes, hat, scarf, gloves, coat, vest\n```\n\nExample:\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are not vesture. \n        Output: \n```\nshirt, jacket, pants, socks, shoes, hat, scarf, gloves, coat, vest\n```"}
{"cat": "artifacts", "slot": "generalization", "value": "article of clothing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are article of clothing. \n        Output: ", "result": "\n```\nscarf, gloves, hat, socks, shirt, pants, jacket, vest, shoes, belt\n```\nExplanation: The words that belong to the category of artifacts and satisfy the condition of being article of clothing are scarf, gloves, hat, socks, shirt, pants, jacket, vest, shoes, and belt.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category:"}
{"cat": "artifacts", "slot": "generalization", "value": "habiliment", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are habiliment. \n        Output: ", "result": "\n```\nhat, scarf, gloves, coat, boots, hat, scarf, gloves, coat, boots\n```"}
{"cat": "artifacts", "slot": "generalization", "value": "wear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are wear. \n        Output: ", "result": "\n        glasses, watch, ring, bracelet, necklace, earrings, brooch, cufflinks, belt, shoes.\n    \"\"\"\n    words = []\n    for word in artifacts:\n        if \"wear\" in word:\n            words.append(word)\n    print(\", \".join(words))\n```\nExample:\n\nInput:\n```\nprovide a list of 10 words that belong to the category and satisfy the condition.\nCategory: artifacts.\nCondition: are wear.\n```\nOutput:\n```\nglass"}
{"cat": "artifacts", "slot": "generalization", "value": "wearable", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are wearable. \n        Output: ", "result": "\n```\nwatch, bracelet, ring, necklace, earrings, brooch, cufflinks, pendant, anklet, wristband\n```\nExplanation: The words that belong to the category \"artifacts\" and satisfy the condition \"are wearable\" are: watch, bracelet, ring, necklace, earrings, brooch, cufflinks, pendant, anklet, and wristband.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated"}
{"cat": "artifacts", "slot": "generalization", "value": "consumer goods", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are consumer goods. \n        Output: ", "result": "\n            \n```"}
{"cat": "artifacts", "slot": "generalization", "value": "furniture", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are furniture. \n        Output: ", "result": "\n        sofa, armchair, coffee table, end table, desk, bookshelf, lamp, rug, side table, dining table \n    \"\"\"\n    category = \"artifacts\"\n    furniture_words = [\"sofa\", \"armchair\", \"coffee table\", \"end table\", \"desk\", \"bookshelf\", \"lamp\", \"rug\", \"side table\", \"dining table\"]\n    furniture_words = [word for word in furniture_words if word.lower().startswith(category.lower() + \" are \")]"}
{"cat": "artifacts", "slot": "generalization", "value": "protective covering", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are protective covering. \n        Output: ", "result": "\n        armor, shield, helmet, breastplate, greaves, gauntlets, visor, visor, visor, visor.\n    \"\"\"\n    category = \"artifacts\"\n    condition = \"are protective covering\"\n    words = []\n    for word in text.split():\n        if word.lower() in category_map[category] and word.lower() in condition_map[condition]:\n            words.append(word)\n    return \", \".join(words)\n\ndef extract_category_and_condition(text):\n    \"\"\"\n   "}
{"cat": "artifacts", "slot": "generalization", "value": "clothing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are clothing. \n        Output: ", "result": "\n```\nscarf, gloves, hat, socks, shirt, pants, jacket, dress, skirt, blouse\n```\nExplanation: The words that belong to the category \"clothing\" and satisfy the condition \"are artifacts\" are scarf, gloves, hat, socks, shirt, pants, jacket, dress, skirt, blouse.\n```python\n# Provide a list of 10 words that belong to the category and satisfy the condition.\nwords = [\"scarf\", \"gloves\", \"hat\", \"socks"}
{"cat": "artifacts", "slot": "generalization", "value": "apparatus", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are apparatus. \n        Output: ", "result": "\n\n1. Microscope\n2. Telescope\n3. Camera\n4. Binoculars\n5. Magnifying glass\n6. Telescope\n7. Microscope\n8. Camera\n9. Binoculars\n10. Magnifying glass\n\nExplanation: The words \"Microscope\", \"Telescope\", \"Camera\", \"Binoculars\", \"Magnifying glass\", \"Telescope\", \"Microscope\", \"Camera\", \"Binoculars\", and \"Magnifying glass\" all belong to the category"}
{"cat": "artifacts", "slot": "generalization", "value": "duplicator", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are duplicator. \n        Output: ", "result": "\n```\nduplicator,replicator,clone,copy,mold,die,stamp,impression,matrix,negative\n```\nExplanation:\nThe word \"duplicator\" is a noun that belongs to the category of artifacts and satisfies the condition of being a duplicator.\nThe word \"replicator\" is a noun that also belongs to the category of artifacts and satisfies the condition of being a duplicator.\nThe word \"clone\" is a noun that also belongs to the category of artifacts and satisfies the condition of being a duplicator"}
{"cat": "artifacts", "slot": "generalization", "value": "equipment", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are equipment. \n        Output: ", "result": "\n```\nhammer, saw, screwdriver, wrench, pliers, tape measure, level, drill, chisel, ruler\n```\n\n### Question 3:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammals. \n        Output: \n```\ncat, dog, cow, pig, horse, elephant, giraffe, whale,"}
{"cat": "artifacts", "slot": "generalization", "value": "copier", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are copier. \n        Output: ", "result": "\n```\nscanner, photocopier, printer, fax machine, copier machine, xerox, duplicator, mimeograph, stencil, reprography\n```\n\n```markdown\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: have wings. \n        Output: \n```\neagle, butterfly, hummingbird, pterodactyl, bat, owl,"}
{"cat": "artifacts", "slot": "generalization", "value": "material", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are material. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in artifacts:\n            if \"material\" in word:\n                words.append(word)\n        return words\n"}
{"cat": "artifacts", "slot": "generalization", "value": "setup", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are setup. \n        Output: ", "result": "\n        artifacts,are,setup,condition,desired,satisfy,satisfy,satisfy,satisfy,satisfy,satisfy,satisfy,satisfy,satisfy,satisfy,satisfy,satisfy,satisfy,satisfy,satisfy,satisfy,satisfy,satisfy,satisfy,satisfy,satisfy,satisfy,satisfy,satisfy,satisfy,satisfy,satisfy,satisfy,satisf"}
{"cat": "artifacts", "slot": "generalization", "value": "printer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are printer. \n        Output: ", "result": "\n```\nprinter, inkjet, cartridge, toner, paper, print, copy, scan, fax, canon, hp, brother, lexmark\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammals. \n        Output: \n```\ncat, dog, elephant, giraffe, whale, dolphin,"}
{"cat": "artifacts", "slot": "generalization", "value": "body covering", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are body covering. \n        Output: ", "result": "\n        glove, sock, shoe, hat, scarf, sweater, jacket, coat, pants, underwear.\n    \"\"\"\n    words = []\n    for word in words:\n        if \"body covering\" in word:\n            words.append(word)\n    return words\n\ndef get_nouns(words, category, condition):\n    \"\"\"\n    Given a list of words and a category and condition, provide a list of \n    nouns that belong to the category and satisfy the condition. \n        Desired output: comma separated"}
{"cat": "artifacts", "slot": "generalization", "value": "character-at-a-time printer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are character-at-a-time printer. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for i in range(10):\n            word = input(\"Enter a word: \")\n            if word.lower() in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\":\n                words.append(word)\n                if len(words) == 10:\n                    break\n            else:\n                print(\"Invalid word. Please enter a word that starts with a letter.\")\n    \n   "}
{"cat": "artifacts", "slot": "generalization", "value": "trade good", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are trade good. \n        Output: ", "result": "\n```\ntrade,goods,barter,commerce,exchange,merchandise,merchandising,merchandise,merchandising\n```\nExplanation:\nThe words that belong to the category \"artifacts\" and satisfy the condition \"are trade good\" are: trade, goods, barter, commerce, exchange, merchandise, merchandising, merchandise, and merchandising.\n```"}
{"cat": "artifacts", "slot": "generalization", "value": "container", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are container. \n        Output: ", "result": "\n```\nbox, can, bottle, jar, tin, pot, pail, bag, crate\n```\n3. Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: have four legs. \n        Output: \n```\ncat, dog, horse, cow, pig, sheep, goat, chicken, elephant, giraffe\n```\n4. Provide a list of 10 words that belong"}
{"cat": "artifacts", "slot": "generalization", "value": "textile", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are textile. \n        Output: ", "result": "\n```\nscarf, shawl, pashmina, stole, wrap, kerchief, headscarf, hijab, turban, dastar\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are edible. \n        Output: \n```\napple, banana, orange, pear, grape, melon, berry, mango, kiwi,"}
{"cat": "artifacts", "slot": "generalization", "value": "bedclothes", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are bedclothes. \n        Output: ", "result": "\n        bedclothes, blanket, comforter, duvet, eiderdown, featherbed, quilt, sheet, pillow, mattress\n\"\"\"\nbedclothes, blanket, comforter, duvet, eiderdown, featherbed, quilt, sheet, pillow, mattress\n\n\"\"\"\nExample:\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition:"}
{"cat": "artifacts", "slot": "generalization", "value": "simple machine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are simple machine. \n        Output: ", "result": "\n        wheel, lever, pulley, inclined plane, screw, wedge, wheel and axle, pulley, lever, inclined plane, screw, wedge, wheel and axle, pulley, lever, inclined plane, screw, wedge, wheel and axle, pulley, lever, inclined plane, screw, wedge, wheel and axle, pulley, lever, inclined plane, screw, wedge, wheel and axle, pulley, lever, inclined plane, screw, wedge, wheel and axle, pulley, lever"}
{"cat": "artifacts", "slot": "generalization", "value": "bedding", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are bedding. \n        Output: ", "result": "\n```\nbed, quilt, pillow, comforter, blanket, sheet, mattress, pillowcase, duvet, down\n```\n\n```markdown\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammals. \n        Output: \n```\ncat, dog, cow, pig, horse, elephant, giraffe, whale, dolphin, seal"}
{"cat": "artifacts", "slot": "generalization", "value": "armour", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are armour. \n        Output: ", "result": "\n        armor, shield, helmet, breastplate, greaves, gauntlets, sword, spear, axe, mace\n\"\"\"\n\n# Define the function\ndef get_artifact_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        # Check if the word is"}
{"cat": "artifacts", "slot": "generalization", "value": "reflector", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are reflector. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in artifacts:\n            if \"reflector\" in word:\n                words.append(word)\n        print(\", \".join(words))\n```\nExplanation:\n\n1. The function takes two arguments: a category and a condition.\n2. The function uses a for loop to iterate over the words in the category.\n3. For each word, the function uses another for loop to iterate over the characters in the word.\n4. For each character, the function checks if it satisfies the condition. If it does, the function"}
{"cat": "artifacts", "slot": "generalization", "value": "writing paper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are writing paper. \n        Output: ", "result": "\n```\npen, paper, notebook, journal, ink, pencil, quill, parchment, scroll, tablet\n```\nExplanation: The words that belong to the category of artifacts and satisfy the condition of being writing paper are pen, paper, notebook, journal, ink, pencil, quill, parchment, scroll, and tablet.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals."}
{"cat": "artifacts", "slot": "generalization", "value": "scute", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are scute. \n        Output: ", "result": "\n        \"\"\"\n        scute_artifacts = [\"hammer\", \"sickle\", \"axe\", \"adze\", \"pestle\", \"mortar\", \"chisel\", \"awl\", \"needle\", \"spindle\"]\n        scute_artifacts = [word for word in scute_artifacts if \"scute\" in word]\n        scute_artifacts = [word for word in scute_artifacts for x in range(len(word)) if word[x:x+3] == \"scute\"]\n        scute_artifact"}
{"cat": "artifacts", "slot": "generalization", "value": "armour plate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are armour plate. \n        Output: ", "result": "\n        armour, plate, armor, shield, breastplate, helmet, greaves, gauntlets, cuirass, cuirassier\n\"\"\"\nwords = [\"armour\", \"plate\", \"armor\", \"shield\", \"breastplate\", \"helmet\", \"greaves\", \"gauntlets\", \"cuirass\", \"cuirassier\"]\ncategory = \"artifacts\"\ncondition = \"are armour plate\"\nfiltered_words = [word for word in words if word.startswith(category) and word.endswith(condition)]\n"}
{"cat": "artifacts", "slot": "generalization", "value": "stuff", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are stuff. \n        Output: ", "result": "\n```\nart, artifact, artifacts, stuff, object, objects, thing, things, item, items\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: have four legs. \n        Output: \n```\ncat, dog, horse, cow, chicken, pig, sheep, goat, giraffe, elephant\n```\n\n```python\nProvide a list of"}
{"cat": "artifacts", "slot": "generalization", "value": "bed clothing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are bed clothing. \n        Output: ", "result": "\n```\nbedding, pillow, quilt, comforter, sheet, blanket, towel, robe, slipper, pajama \n```\nExplanation: The words that belong to the category of artifacts and satisfy the condition of being bed clothing are: bedding, pillow, quilt, comforter, sheet, blanket, towel, robe, slipper, and pajama.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of"}
{"cat": "artifacts", "slot": "generalization", "value": "headgear", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are headgear. \n        Output: ", "result": "\n```\nhat, helmet, cap, visor, beanie, beret, toque, scarf, bandana, skullcap\n```\nExplanation: The words that belong to the category \"artifacts\" and satisfy the condition \"are headgear\" are: hat, helmet, cap, visor, beanie, beret, toque, scarf, bandana, skullcap.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n"}
{"cat": "artifacts", "slot": "generalization", "value": "shield", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are shield. \n        Output: ", "result": "\n```\nshield,shields,shielding,shielder,shieldlike,shielded,shielding,shieldless,shielded,shielding\n```\n\n```\nDesired output: comma separated list of words. \nCategory: animals. \nCondition: have wings. \nOutput: \n```\nbird,birds,wing,winged,winged creature,winged animal,winged bird,feather,feathered,feathers\n```\n\n```\nDesired output: comma separated list of words. \nCategory"}
{"cat": "artifacts", "slot": "generalization", "value": "plate armor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are plate armor. \n        Output: ", "result": "\n        armor, cuirass, breastplate, gauntlets, greaves, helmet, pauldrons, sabatons, vambraces, visor\n    \"\"\"\n    category = \"artifacts\"\n    condition = \"are plate armor\"\n    words = []\n    for word in all_words:\n        if re.search(condition, word):\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n# Example usage\nwhat_words("}
{"cat": "artifacts", "slot": "generalization", "value": "flat solid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are flat solid. \n        Output: ", "result": "\n```\nknife, spoon, fork, plate, bowl, cup, saucer, spatula, ladle, tongs\n```\n\nExample:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: have wings. \n        Output: \n```\nbird, bat, butterfly, hummingbird, pterodactyl, dragonfly, bee, mosquito, fly,"}
{"cat": "artifacts", "slot": "generalization", "value": "cloth covering", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are cloth covering. \n        Output: ", "result": "\n        shoe, sock, glove, scarf, hat, jacket, pants, dress, skirt, sock.\n    \"\"\"\n    category = \"artifacts\"\n    condition = \"are cloth covering\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Output"}
{"cat": "artifacts", "slot": "generalization", "value": "structure", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are structure. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in ARTIFACTS:\n            if word.endswith(\".structure\"):\n                words.append(word)\n        return \", \".join(words)\n"}
{"cat": "artifacts", "slot": "generalization", "value": "good", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are good. \n        Output: ", "result": "\n        \"\"\"\n        good_artifacts = [\n            \"apple\",\n            \"banana\",\n            \"cherry\",\n            \"date\",\n            \"elderberry\",\n            \"fig\",\n            \"grape\",\n            \"kiwi\",\n            \"lemon\",\n            \"orange\"\n        ]\n        good_artifacts = [word for word in good_artifacts if word.lower() == \"good\"]\n        return \", \".join(good_artifacts)\n\n    def describe_category(self, category):\n        \"\"\"\n        Provide"}
{"cat": "artifacts", "slot": "generalization", "value": "printing machine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are printing machine. \n        Output: ", "result": "\n```\nprinter, inkjet, laser, cartridge, toner, paper, print, document, feed, jam\n```"}
{"cat": "artifacts", "slot": "generalization", "value": "optical device", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are optical device. \n        Output: ", "result": "\n```\nbinoculars, camera, telescope, microscope, periscope, binocular, monocular, spotting scope, telescope eyepiece, microscope eyepiece\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammals. \n        Output: \n```\ncat, dog, cow, pig, horse, eleph"}
{"cat": "artifacts", "slot": "generalization", "value": "sheet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are sheet. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in artifacts:\n            if \"sheet\" in word:\n                words.append(word)\n        return words\n"}
{"cat": "artifacts", "slot": "generalization", "value": "plate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are plate. \n        Output: ", "result": "\n```\nplate, dish, bowl, mug, cup, spoon, fork, knife, silverware, china\n```\nExplanation: The words that belong to the category \"artifacts\" and satisfy the condition \"are plate\" are \"dish\", \"bowl\", \"mug\", \"cup\", \"spoon\", \"fork\", \"knife\", \"silverware\", and \"china\"."}
{"cat": "artifacts", "slot": "generalization", "value": "commodity", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are commodity. \n        Output: ", "result": "\n        diamond, gold, silver, pearl, ruby, sapphire, emerald, amethyst, platinum, \n        copper, iron, tin, lead, silverware, jewelry, coins, currency.\n    \"\"\"\n    words = []\n    for word in artifacts:\n        if word.is_commodity():\n            words.append(word)\n    return words\n\nprint(find_commodity_artifacts(artifacts))\n```\nExplanation:\n\n* The `find_commodity_"}
{"cat": "artifacts", "slot": "generalization", "value": "garment", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are garment. \n        Output: ", "result": "\n        shirt,pants,dress,jacket,tie,shoes,socks,hat,scarf,gloves\n```\n\n```\nDescribe a scenario where the input is a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: a string that describes the scenario. \n        Category: artifacts. \n        Condition: are garment. \n        Input: \n        shirt,pants,dress,jacket,tie,shoes,socks,hat,scar"}
{"cat": "artifacts", "slot": "generalization", "value": "character printer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are character printer. \n        Output: ", "result": "\n            1. Printer\n            2. Artifact\n            3. Character\n            4. Printer\n            5. Artifact\n            6. Character\n            7. Printer\n            8. Artifact\n            9. Character\n            10. Printer\n        \"\"\"\n        printer_words = [\n            \"Printer\",\n            \"Artifact\",\n            \"Character\",\n            \"Printer\",\n            \"Artifact\",\n            \"Character\",\n            \"Printer\",\n            \"Artifact\",\n            \"Character\",\n            \"Printer\"\n        ]"}
{"cat": "artifacts", "slot": "generalization", "value": "armor plate", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are armor plate. \n        Output: ", "result": "\n        armor, plate, shield, breastplate, helmet, greaves, gauntlets, cuirass, cuirassier, cuirassier's.\n    \"\"\"\n    armor_words = [word for word in artifacts if word.endswith(\".armor\")]\n    plate_words = [word for word in artifacts if word.endswith(\".plate\")]\n    shield_words = [word for word in artifacts if word.endswith(\".shield\")]\n    breastplate_words = [word for word in artifacts if word.endswith(\".bre"}
{"cat": "artifacts", "slot": "generalization", "value": "serial printer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are serial printer. \n        Output: ", "result": "\n            1. Printer\n            2. Ink\n            3. Toner\n            4. Cartridge\n            5. Ribbon\n            6. Printhead\n            7. Paper\n            8. Serial\n            9. Parallel\n            10. USB\n        \"\"\"\n        serial_printer_words = [\n            \"Printer\",\n            \"Ink\",\n            \"Toner\",\n            \"Cartridge\",\n            \"Ribbon\",\n            \"Printhead\",\n            \"Paper\",\n            \"Serial\",\n            \"Parallel\",\n"}
{"cat": "artifacts", "slot": "generalization", "value": "mechanical device", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are mechanical device. \n        Output: ", "result": "\n            hammer, screwdriver, wrench, pliers, saw, drill, ruler, tape measure, level, pencil.\n    \"\"\"\n    category = \"artifacts\"\n    condition = \"are mechanical device\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_sorted(category, condition):\n    words = get_words(category, condition)\n    sorted_words = sorted(words, key=lambda x: x.lower())\n    return \", \".join(sorted_words"}
{"cat": "artifacts", "slot": "generalization", "value": "plate armour", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are plate armour. \n        Output: ", "result": "\n```\nplate, armor, cuirass, breastplate, gauntlets, greaves, helmet, visor, pauldrons, aventail\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus fruits. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine"}
{"cat": "artifacts", "slot": "generalization", "value": "construction", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are construction. \n        Output: ", "result": "\n```\nhammer, saw, nail, screwdriver, wrench, drill, trowel, level, chisel, pliers\n```\nExplanation: The words that belong to the category of artifacts and satisfy the condition of being construction tools are hammer, saw, nail, screwdriver, wrench, drill, trowel, level, chisel, and pliers.\n```python\ndef get_artifact_tools(category: str, condition: str) -> list:\n    \"\"\"\n    Given a category and a condition, return a list"}
{"cat": "artifacts", "slot": "generalization", "value": "paper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are paper. \n        Output: ", "result": "\n```\npen, paper, notebook, journal, diary, scrapbook, sketchbook, memo, agenda\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, cherry, strawberry, raspberry, watermelon, tomato, pumpkin, cranberry,"}
{"cat": "artifacts", "slot": "generalization", "value": "armor plating", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are armor plating. \n        Output: ", "result": "\n        armor, plating, shield, breastplate, helmet, greaves, gauntlets, cuirass, cuirassier, cuirassier's.\n    \"\"\"\n    armor_plating_words = [\n        \"armor\",\n        \"plating\",\n        \"shield\",\n        \"breastplate\",\n        \"helmet\",\n        \"greaves\",\n        \"gauntlets\",\n        \"cuirass\",\n        \"cuirassier\",\n        \"cuirassier's\"\n    ]\n    return"}
{"cat": "artifacts", "slot": "generalization", "value": "armor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are armor. \n        Output: ", "result": "\n        armor, shield, helmet, breastplate, greaves, gauntlets, sword, spear, axe, mace\n\"\"\"\n\n# Define the function\ndef get_artifact_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        # Check if the word is"}
{"cat": "artifacts", "slot": "generalization", "value": "mechanism", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are mechanism. \n        Output: ", "result": "\n```\nhammer, wrench, screwdriver, pliers, saw, drill, screw, nut, bolt, hinge\n```\nExplanation: The words that belong to the category \"artifacts\" and satisfy the condition \"are mechanism\" are hammer, wrench, screwdriver, pliers, saw, drill, screw, nut, bolt, and hinge.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category"}
{"cat": "artifacts", "slot": "generalization", "value": "scale", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are scale. \n        Output: ", "result": "\n```\nscale, ruler, microscope, magnifying glass, compass, protractor, level, tape measure, yardstick, ruler\n```\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: have wings. \n        Output: \n```\nbird, butterfly, bat, bee, mosquito, dragonfly, hummingbird, moth, pterodactyl,"}
{"cat": "artifacts", "slot": "generalization", "value": "source of illumination", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are source of illumination. \n        Output: ", "result": "\n```\nlight, bulb, lamp, illuminate, illumination, shine, glow, radiance, luminous, source\n```\nExplanation: The words \"light,\" \"bulb,\" \"lamp,\" \"illuminate,\" \"illumination,\" \"shine,\" \"glow,\" \"radiance,\" \"luminous,\" and \"source\" all belong to the category of artifacts and satisfy the condition of being a source of illumination.\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n"}
{"cat": "artifacts", "slot": "generalization", "value": "implement", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are implement. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in ARTIFACTS:\n            if \"implement\" in word:\n                words.append(word)\n        return words\n\nprint(find_artifacts(\"implement\"))\nprint(find_artifacts(\"are implement\"))\nprint(find_artifacts(\"is implement\"))\nprint(find_artifacts(\"implemented\"))\nprint(find_artifacts(\"implementable\"))\nprint(find_artifacts(\"implementing\"))\nprint(find_artifacts(\"implementation\"))\nprint(find_artifacts"}
{"cat": "artifacts", "slot": "generalization", "value": "ornamentation", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are ornamentation. \n        Output: ", "result": "\n```\namulet, bracelet, brooch, earring, necklace, pendant, ring, scarab, seal, talisman\n```\nExplanation:\nThe words that belong to the category \"artifacts\" and satisfy the condition \"are ornamentation\" are: amulet, bracelet, brooch, earring, necklace, pendant, ring, scarab, seal, and talisman.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated"}
{"cat": "artifacts", "slot": "generalization", "value": "ornament", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are ornament. \n        Output: ", "result": "\n        diamond, earring, necklace, bracelet, brooch, ring, tiara, anklet, bangle, cuff.\n    \"\"\"\n    words = [\"diamond\", \"earring\", \"necklace\", \"bracelet\", \"brooch\", \"ring\", \"tiara\", \"anklet\", \"bangle\", \"cuff\"]\n    for word in words:\n        if \"ornament\" in word and \"artifact\" in word:\n            print(word)\n            break\n    else:\n        print(\"No words found.\")\n```\n"}
{"cat": "artifacts", "slot": "generalization", "value": "accessory", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are accessory. \n        Output: ", "result": "\n        earrings, bracelet, necklace, watch, ring, brooch, cufflinks, belt, sunglasses, scarf \n    \"\"\"\n    category = \"artifacts\"\n    condition = \"are accessory\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of 10 words that belong to that category.\n        Desired output: comma separated list of words. \n        Category"}
{"cat": "artifacts", "slot": "generalization", "value": "decoration", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are decoration. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in ARTIFACTS:\n            if \"decoration\" in str(word):\n                words.append(word)\n        return words\n\nprint(find_artifacts(\"decoration\", ARTIFACTS))"}
{"cat": "artifacts", "slot": "generalization", "value": "adornment", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are adornment. \n        Output: ", "result": "\n        earrings, bracelet, necklace, ring, brooch, pendant, cufflinks, watch, tie clip, lapel pin \n    \"\"\"\n    category = \"artifacts\"\n    condition = \"are adornment\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of 10 words that belong to that category.\n        Desired output: comma separated list of words. \n        Category:"}
{"cat": "artifacts", "slot": "generalization", "value": "tool", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are tool. \n        Output: ", "result": "\n```\nhammer, wrench, screwdriver, pliers, saw, chisel, hatchet, drill, ruler, tape measure\n```\n\n```python\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammals. \n        Output: \n```\ncat, dog, cow, pig, horse, elephant, giraffe, whale, dolphin,"}
{"cat": "artifacts", "slot": "generalization", "value": "utensil", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are utensil. \n        Output: ", "result": "\n        knife, fork, spoon, spatula, ladle, tongs, shovel, scoop, spatula,\n```"}
{"cat": "artifacts", "slot": "generalization", "value": "unit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are unit. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in artifacts:\n            if \"unit\" in word:\n                words.append(word)\n        return words\n"}
{"cat": "artifacts", "slot": "generalization", "value": "machine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are machine. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in artifacts:\n            if \"machine\" in word:\n                words.append(word)\n        return words\n\nprint(find_artifacts(\"machine\", artifacts))\n```\nExplanation of the code:\n\n* The `find_artifacts` function takes two arguments: a category and a list of artifacts.\n* The function uses a for loop to iterate through the list of artifacts.\n* Inside the for loop, the function checks if the current artifact contains the word \"machine\".\n* If it does,"}
{"cat": "artifacts", "slot": "generalization", "value": "headdress", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are headdress. \n        Output: ", "result": "\n        spearhead, arrowhead, helmet, shield, necklace, bracelet, anklet, earring, armband, headdress\n```\n\n```\nDescribe a scenario where you need to find a list of words that belong to a category and satisfy a condition. \n        \n        spearhead, arrow"}
{"cat": "artifacts", "slot": "generalization", "value": "protective cover", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are protective cover. \n        Output: ", "result": "\n        armor, shield, helmet, breastplate, greaves, gauntlets, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor, visor,"}
{"cat": "artifacts", "slot": "generalization", "value": "whole", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are whole. \n        Output: ", "result": "\n        \"\"\"\n        words = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"kiwi\", \"lemon\", \"lychee\", \"orange\", \"peach\", \"pineapple\", \"raspberry\", \"strawberry\", \"watermelon\"]\n        return \", \".join(filter(lambda x: x.is_whole, words))\n\n    print(find_whole_fruits())\n```\nOutput:\n```\napple, banana,"}
{"cat": "artifacts", "slot": "generalization", "value": "jewelry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are jewelry. \n        Output: ", "result": "\n            bracelet, earrings, necklace, ring, brooch, pendant, cufflinks, watch, tiara, anklet\n\"\"\"\n\n# Define the function\ndef get_jewelry_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the jewelry words\n    jewelry_words = []\n    \n    # Loop through each word in the condition\n    for"}
{"cat": "artifacts", "slot": "generalization", "value": "protection", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are protection. \n        Output: ", "result": "\n```\nshield, armor, protection, fortification, defense, barrier, bunker, shelter, sheltering, safeguard\n```\n\n```\n\n```\nshield, armor, protection, fortification, defense, barrier, bunker, shelter, sheltering, safeguard\n```\n\n```\n"}
{"cat": "artifacts", "slot": "part", "value": "glass", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: can have  glass. \n        Output: ", "result": " glass, bottle, jar, vase, window, mirror, bowl, goblet, decanter, pitcher.\n    \"\"\"\n    words = []\n    for word in words:\n        if \"glass\" in word:\n            words.append(word)\n    return \", \".join(words)\n\n# Your ArtifactAnalyzer object will inherit these\nATTR_NAME = \"name\"\nATTR_DESCRIPTION = \"description\"\nATTR_CATEGORY = \"category\"\nATTR_CONDITION = \"condition\"\nATTR"}
{"cat": "artifacts", "slot": "generalization", "value": "shade", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are shade. \n        Output: ", "result": "\n```\nshade, umbrella, parasol, canopy, awning, shade tree, shade house, shade cloth, shade sails, shade structure\n```\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: have wings. \n        Output: \n```\nbird, butterfly, bat, bee, mosquito, dragonfly, hummingbird, moth,"}
{"cat": "artifacts", "slot": "generalization", "value": "shell", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are shell. \n        Output: ", "result": "\n```\nshell,shells,shellfish,shells,shells,shells,shells,shells,shells,shells\n```\n\n```python\nProvide a list of 10 words that belong to the category and do not satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are not shell. \n        Output: \n```\nart,artwork,artist,art,art,art,art,art,art,art\n```\n\n```python\n"}
{"cat": "artifacts", "slot": "generalization", "value": "shelter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are shelter. \n        Output: ", "result": "\n```\ntent, shelter, hut, cabin, igloo, teepee, yurt, dome, treehouse, fort\n```\n1. Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: have four legs. \n        Output: \n```\ncat, dog, horse, cow, pig, sheep, goat, chicken, elephant, giraffe\n```\n1. Provide"}
{"cat": "artifacts", "slot": "generalization", "value": "cloth", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are cloth. \n        Output: ", "result": "\n```\nscarf, shawl, stole, sash, kerchief, cravat, neckerchief, bandana, handkerchief, apron\n```\nExplanation: The words that belong to the category \"artifacts\" and satisfy the condition \"are cloth\" are scarf, shawl, stole, sash, kerchief, cravat, neckerchief, bandana, handkerchief, apron.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n"}
{"cat": "artifacts", "slot": "generalization", "value": "fabric", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are fabric. \n        Output: ", "result": "\n```\nscarf, shawl, stole, wrap, poncho, blanket, throw, scarf, shawl, stole\n```\nExplanation: The words that belong to the category \"artifacts\" and satisfy the condition \"are fabric\" are scarf, shawl, stole, wrap, poncho, blanket, throw, scarf, shawl, stole.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n       "}
{"cat": "artifacts", "slot": "generalization", "value": "canopy", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: artifacts. \n        Condition: are canopy. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in artifacts:\n            if \"canopy\" in word:\n                words.append(word)\n        print(\", \".join(words))\n```\nExplanation:\n\n1. The function takes two arguments: the category and the condition.\n2. The function uses a for loop to iterate over the words in the category.\n3. For each word, the function uses another for loop to iterate over the characters in the word.\n4. The function checks if the current character is 'a' and the previous character is 'n'."}
{"cat": "tools", "slot": "user", "value": "sailor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are used by sailors. \n        Output: ", "result": "\n        knife, spoon, fork, compass, sextant, anchor, rope, oar, harpoon, marlinspike.\n    \"\"\"\n    category = \"tools\"\n    words = [\"knife\", \"spoon\", \"fork\", \"compass\", \"sextant\", \"anchor\", \"rope\", \"oar\", \"harpoon\", \"marlinspike\"]\n    for word in words:\n        if \"sailor\" in word and category == \"tools\":\n            print(word)\n            break\n    else:\n"}
{"cat": "tools", "slot": "user", "value": "farmer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are used by farmers. \n        Output: ", "result": "\n        scythe, plow, hoe, rake, shovel, pitchfork, hose, watering can, wheelbarrow, cultivator\n    \"\"\"\n    category = \"tools\"\n    words = [\"scythe\", \"plow\", \"hoe\", \"rake\", \"shovel\", \"pitchfork\", \"hose\", \"watering can\", \"wheelbarrow\", \"cultivator\"]\n    for word in words:\n        if \"farmer\" in str(word) and category == \"tools\":\n            print("}
{"cat": "tools", "slot": "size", "value": "small", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be small. \n        Output: ", "result": "\n```\nwrench, pliers, screwdriver, hammer, saw, tape, glue, wrench, pliers, screwdriver, hammer\n```"}
{"cat": "tools", "slot": "howToUse", "value": "hold", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be used for hold. \n        Output: ", "result": "\n        screwdriver\n        wrench\n        pliers\n        hammer\n        saw\n        chisel\n        drill\n        tape measure\n        level\n        ruler\n    \"\"\"\n    category = \"tools\"\n    words = [\"screwdriver\", \"wrench\", \"pliers\", \"hammer\", \"saw\", \"chisel\", \"drill\", \"tape measure\", \"level\", \"ruler\"]\n    for word in words:\n        if \"hold\" in word:\n            print(word)\n            break\n    else:\n"}
{"cat": "tools", "slot": "howToUse", "value": "stand up", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be used for stand up. \n        Output: ", "result": "\n            hammer, screwdriver, wrench, pliers, saw, tape measure, level, drill, ruler, scissors\n    \"\"\"\n    category = \"tools\"\n    words = [\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"saw\", \"tape measure\", \"level\", \"drill\", \"ruler\", \"scissors\"]\n    for word in words:\n        if \"stand up\" in word.lower():\n            print(word)\n            break\n    else:\n        print(\"No words found"}
{"cat": "tools", "slot": "place", "value": "kitchen", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be found or used in kitchens. \n        Output: ", "result": "\n        knife, spoon, fork, cutting board, pot, pan, mixing bowl, spatula, whisk, slotted spoon \n    \"\"\"\n    category = \"tools\"\n    words = [\"knife\", \"spoon\", \"fork\", \"cutting board\", \"pot\", \"pan\", \"mixing bowl\", \"spatula\", \"whisk\", \"slotted spoon\"]\n    for word in words:\n        if \"kitchen\" in word:\n            print(word)\n            break\n    else:\n        print(\"No words found"}
{"cat": "tools", "slot": "accessory", "value": "toolbox", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: may have to do with toolbox. \n        Output: ", "result": "\n```\nwrench, hammer, screwdriver, pliers, saw, tape measure, level, drill, socket set, crowbar\n```\nExplanation: The words that belong to the category of tools and may have to do with a toolbox are: wrench, hammer, screwdriver, pliers, saw, tape measure, level, drill, socket set, and crowbar.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n"}
{"cat": "tools", "slot": "place", "value": "shed", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be found or used in sheds. \n        Output: ", "result": "\n            1. hammer\n            2. wrench\n            3. screwdriver\n            4. pliers\n            5. saw\n            6. tape measure\n            7. level\n            8. drill\n            9. screws\n            10. nails\n        \"\"\"\n        category = \"tools\"\n        words = [\n            \"hammer\",\n            \"wrench\",\n            \"screwdriver\",\n            \"pliers\",\n            \"saw\",\n            \"tape measure\",\n            \"level\",\n            \"drill\",\n"}
{"cat": "tools", "slot": "place", "value": "garden", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be found or used in gardens. \n        Output: ", "result": "\n            1. Hoe\n            2. Rake\n            3. Shovel\n            4. Watering can\n            5. Pruning shears\n            6. Lawn mower\n            7. Hedge trimmer\n            8. Leaf blower\n            9. Fertilizer spreader\n            10. String trimmer\n        \"\"\"\n        words = [\n            \"Hoe\",\n            \"Rake\",\n            \"Shovel\",\n            \"Watering can\",\n            \"Pruning shears\",\n            \"Lawn mower\","}
{"cat": "tools", "slot": "accessory", "value": "screwdriver", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: may have to do with screwdriver. \n        Output: ", "result": "\n        screwdriver,screw,driver,screwdriver,screw,driver,screwdriver,screw,driver,screwdriver,screw,driver,screwdriver,screw,driver,screwdriver,screw,driver,screwdriver,screw,driver,screwdriver,screw,driver,screwdriver,screw,driver,screwdriver,screw,driver,screwdriver,screw,driver,screwdriver,s"}
{"cat": "tools", "slot": "accessory", "value": "rod", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: may have to do with rod. \n        Output: ", "result": "\n        hammer, wrench, screwdriver, pliers, saw, drill, ruler, level, tape measure, screw.\n    \"\"\"\n    category = \"tools\"\n    words = [\n        \"hammer\",\n        \"wrench\",\n        \"screwdriver\",\n        \"pliers\",\n        \"saw\",\n        \"drill\",\n        \"ruler\",\n        \"level\",\n        \"tape measure\",\n        \"screw\"\n    ]\n    for word in words:\n        if \"rod\" in word"}
{"cat": "tools", "slot": "accessory", "value": "staple", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: may have to do with staple. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, staple gun, staple remover, tape measure, level, saw, drill.\n    \"\"\"\n    category = \"tools\"\n    words = [\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"staple gun\", \"staple remover\", \"tape measure\", \"level\", \"saw\", \"drill\"]\n    for word in words:\n        if \"staple\" in word:\n            print(word)\n            break\n    else"}
{"cat": "tools", "slot": "place", "value": "hairdresser", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be found or used in hairdressers. \n        Output: ", "result": "\n        scissors, comb, hair dryer, hair straightener, hair clippers, hair curler, hair gel, hair mousse, hair brush, hair clips\n\"\"\"\nscissors, comb, hair dryer, hair straightener, hair clippers, hair curler, hair gel, hair mousse, hair brush, hair clips\n\n\"\"\"\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n       "}
{"cat": "tools", "slot": "place", "value": "laboratory", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be found or used in laboratories. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, ruler, tape measure, test tube holder, beaker, pipette, stirrer\n    \"\"\"\n    lab_tools = [\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"ruler\", \"tape measure\", \"test tube holder\", \"beaker\", \"pipette\", \"stirrer\"]\n    category = \"tools\"\n    condition = \"can be found or used in laboratories\"\n    words = [word for word in lab_tools if word.lower"}
{"cat": "tools", "slot": "accessory", "value": "bolt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: may have to do with bolt. \n        Output: ", "result": "\n```\nwrench, bolt, screwdriver, nut, washer, socket, ratchet, hammer, pliers, wrench\n```"}
{"cat": "tools", "slot": "accessory", "value": "knob", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: may have to do with knob. \n        Output: ", "result": "\n        screwdriver, wrench, hammer, pliers, saw, drill, nut, bolt, screw, hinge\n\"\"\"\n\n# Define the function\ndef get_tools(category, condition):\n    # Your code here\n    pass\n\n# Call the function\ntools = get_tools(\"tools\", \"may have to do with knob\")\nprint(tools)\n```\nOutput:\nscrewdriver, wrench, hammer, pliers, saw, drill, nut, bolt, screw, hinge\n```\nIn this example"}
{"cat": "tools", "slot": "purpose", "value": "build", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are used to build. \n        Output: ", "result": "\n```\nhammer, saw, nail, screwdriver, pliers, wrench, drill, tape measure, level, crowbar\n```\n\n```python\n\n```\ntape measure, level, crowbar, hammer, saw, nail, screwdriver, pliers, wrench, drill"}
{"cat": "tools", "slot": "purpose", "value": "cooking", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are used for cooking. \n        Output: ", "result": "\n        knife, spoon, fork, grater, cutting board, whisk, pot, pan, spatula, tongs\n    \"\"\"\n    cooking_tools = [\n        \"knife\",\n        \"spoon\",\n        \"fork\",\n        \"grater\",\n        \"cutting board\",\n        \"whisk\",\n        \"pot\",\n        \"pan\",\n        \"spatula\",\n        \"tongs\"\n    ]\n    return \", \".join(cooking_tools) if len(cooking_tools) > 0 else None"}
{"cat": "tools", "slot": "purpose", "value": "agriculture", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are used for agriculture. \n        Output: ", "result": "\n        scythe, plow, hoe, rake, cultivator, seed, fertilizer, tractor, pesticide, tiller\n    \"\"\"\n    category = \"tools\"\n    condition = \"are used for agriculture\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nquestion = \"What are some tools used in agriculture?\"\nprint(answer_question(question))\n\n# Output: scythe, plow, hoe, rake, cultivator, seed, fertilizer"}
{"cat": "tools", "slot": "purpose", "value": "weeding", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are used for weeding. \n        Output: ", "result": "\n```\nscissors, trowel, rake, hoe, pruning shears, pruning saw, cultivator, hand fork, hand trowel, hand rake\n```\nExplanation:\nThe words that belong to the category \"tools\" and satisfy the condition \"are used for weeding\" are: scissors, trowel, rake, hoe, pruning shears, pruning saw, cultivator, hand fork, hand trowel, hand rake.\n```"}
{"cat": "tools", "slot": "purpose", "value": "lock", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are used to lock. \n        Output: ", "result": "\n        hammer, screwdriver, lock, padlock, chain, shackle, deadbolt, hasp, padlock, combination lock\n    \"\"\"\n    category = \"tools\"\n    words = [\"hammer\", \"screwdriver\", \"lock\", \"padlock\", \"chain\", \"shackle\", \"deadbolt\", \"hasp\", \"padlock\", \"combination lock\"]\n    for word in words:\n        if \"lock\" in word.lower():\n            print(word)\n            break\n    else:\n        print(\"No words"}
{"cat": "tools", "slot": "purpose", "value": "fasten", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are used for fasten. \n        Output: ", "result": "\n```\nscrew, bolt, nail, screwdriver, wrench, hinge, hinge pin, rivet, bolt\n```"}
{"cat": "tools", "slot": "purpose", "value": "grip", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are used to grip. \n        Output: ", "result": "\n        screwdriver, pliers, wrench, hammer, vice, clamps, pinc\n```"}
{"cat": "tools", "slot": "purpose", "value": "dig", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are used to dig. \n        Output: ", "result": "\n```\nshovel, spade, pickaxe, hoe, mattock, crowbar, trowel, fork, spatula, rake\n```\nExplanation:\nThe words that belong to the category \"tools\" and satisfy the condition \"are used to dig\" are: shovel, spade, pickaxe, hoe, mattock, crowbar, trowel, fork, spatula, rake.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired"}
{"cat": "tools", "slot": "purpose", "value": "moor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are used to moor. \n        Output: ", "result": "\n        hammer, nail, screwdriver, pliers, wrench, saw, drill, screw, nuts, bolts\n```\n\n```\nDescribe a category of objects and provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are used to moor. \n        Output: \n        hammer, nail, screwdriver, pliers, wrench, saw, drill, screw, nuts"}
{"cat": "tools", "slot": "purpose", "value": "tighten", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are used to tighten. \n        Output: ", "result": "\n```\nwrench, screwdriver, pliers, hinge, bolt, nut, washer, wrench, screwdriver, pliers\n```\nExplanation: The words `wrench`, `screwdriver`, `pliers`, `hinge`, `bolt`, `nut`, `washer`, `screwdriver`, `pliers`, and `wrench` all belong to the category `tools` and are used to tighten.\n```"}
{"cat": "tools", "slot": "purpose", "value": "secure", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are used to secure. \n        Output: ", "result": "\n```\nwrench, bolt, screw, nut, washer, clamp, hinge, latch, clip, pin\n```\n\n```\n\n```\nscrewdriver, pliers, hammer, saw, drill, chisel, wrench, pliers, tape measure, level\n```"}
{"cat": "tools", "slot": "purpose", "value": "serve", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are used to serve. \n        Output: ", "result": "\n            hammer, screwdriver, wrench, pliers, saw, tape, glue, scissors, measuring tape, level.\n    \"\"\"\n    tool_words = [\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"saw\", \"tape\", \"glue\", \"scissors\", \"measuring tape\", \"level\"]\n    tool_words = [word for word in tool_words if \"serve\" in word]\n    return tool_words\n\ndef get_category(word):\n    \"\"\"\n"}
{"cat": "tools", "slot": "purpose", "value": "cut", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are used to cut. \n        Output: ", "result": "\n        scissors, knife, saw, shears, clippers, cutter, guillotine,\n```"}
{"cat": "tools", "slot": "purpose", "value": "dock", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are used to dock. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, saw, chisel, drill, ruler, tape measure, level.\n    \"\"\"\n    category = \"tools\"\n    words = [\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"saw\", \"chisel\", \"drill\", \"ruler\", \"tape measure\", \"level\"]\n    for word in words:\n        if \"dock\" in word:\n            print(word)\n            break\n    else:\n        print(\"No words found.\")"}
{"cat": "tools", "slot": "purpose", "value": "clamp", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are used for clamp. \n        Output: ", "result": "\n        wrench, pliers, clamp, vice, screwdriver, hammer, saw, drill, tape measure, level.\n    \"\"\"\n    tool_words = [\"wrench\", \"pliers\", \"clamp\", \"vice\", \"screwdriver\", \"hammer\", \"saw\", \"drill\", \"tape measure\", \"level\"]\n    tool_words = [word for word in tool_words if \"tool\" in word]\n    tool_words = [word for word in tool_words if \"clamp\" in word]\n    return tool"}
{"cat": "tools", "slot": "purpose", "value": "pick up", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are used to pick up. \n        Output: ", "result": "\n        hammer, wrench, pliers, screwdriver, tongs, forks, shovel, rake, pitchfork, trowel\n    \"\"\"\n    category = \"tools\"\n    condition = \"are used to pick up\"\n    words = [\n        \"hammer\",\n        \"wrench\",\n        \"pliers\",\n        \"screwdriver\",\n        \"tongs\",\n        \"forks\",\n        \"shovel\",\n        \"rake\",\n        \"pitchfork\",\n        \"trowel\"\n"}
{"cat": "tools", "slot": "purpose", "value": "clamp", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are used to clamp. \n        Output: ", "result": "\n```\nwrench, pliers, clamp, vice, screwdriver, hammer, saw, drill, punch, tape\n```\nExplanation: The words `wrench`, `pliers`, `clamp`, `vice`, `screwdriver`, `hammer`, `saw`, `drill`, `punch`, and `tape` belong to the category `tools` and are used to clamp.\n```"}
{"cat": "tools", "slot": "purpose", "value": "secure", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: None secure. \n        Output: ", "result": "\n            hammer, screwdriver, wrench, pliers, saw, tape measure, level, drill, socket set, ruler\n    \"\"\"\n    category = \"tools\"\n    condition = \"None secure\"\n    words = [\n        \"hammer\",\n        \"screwdriver\",\n        \"wrench\",\n        \"pliers\",\n        \"saw\",\n        \"tape measure\",\n        \"level\",\n        \"drill\",\n        \"socket set\",\n        \"ruler\"\n    ]\n\n    if condition == \"None secure"}
{"cat": "tools", "slot": "accessory", "value": "screw", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: may have to do with screw. \n        Output: ", "result": "\n        screwdriver,screw,screwdriver,screw,screwdriver,screw,screwdriver,screw,screwdriver,screw,screwdriver,screw,screwdriver,screw,screwdriver,screw,screwdriver,screw,screwdriver,screw,screwdriver,screw,screwdriver,screw,screwdriver,screw,screwdriver,screw,s"}
{"cat": "tools", "slot": "shape", "value": "elongated", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be elongated. \n        Output: ", "result": "\n        hammer, wrench, screwdriver, pliers, saw, tape measure, level, drill, socket set, ruler\n    \"\"\"\n    category = \"tools\"\n    condition = \"can be elongated\"\n    words = [\n        \"hammer\",\n        \"wrench\",\n        \"screwdriver\",\n        \"pliers\",\n        \"saw\",\n        \"tape measure\",\n        \"level\",\n        \"drill\",\n        \"socket set\",\n        \"ruler\"\n    ]\n\n    for word in"}
{"cat": "tools", "slot": "shape", "value": "long", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be long. \n        Output: ", "result": "\n        hammer, wrench, screwdriver, pliers, saw, tape measure, level, drill, socket set, ruler\n    \"\"\"\n    category = \"tools\"\n    condition = \"can be long\"\n    words = [\n        \"hammer\",\n        \"wrench\",\n        \"screwdriver\",\n        \"pliers\",\n        \"saw\",\n        \"tape measure\",\n        \"level\",\n        \"drill\",\n        \"socket set\",\n        \"ruler\"\n    ]\n\n    for word in words:"}
{"cat": "tools", "slot": "shape", "value": "curved", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be curved. \n        Output: ", "result": "\n        hammer, wrench, screwdriver, pliers, saw, tape measure, level, drill, ruler, scissors. \n    \"\"\"\n    tools = [\"hammer\", \"wrench\", \"screwdriver\", \"pliers\", \"saw\", \"tape measure\", \"level\", \"drill\", \"ruler\", \"scissors\"]\n    curved_tools = []\n    for tool in tools:\n        if \"can be curved\" in tool:\n            curved_tools.append(tool)\n    print(\", \".join"}
{"cat": "tools", "slot": "shape", "value": "cylindrical", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be cylindrical. \n        Output: ", "result": "\n        hammer, wrench, screwdriver, pliers, saw, drill, ruler, level, tape measure, pencil.\n    \"\"\"\n    tool_words = [\"hammer\", \"wrench\", \"screwdriver\", \"pliers\", \"saw\", \"drill\", \"ruler\", \"level\", \"tape measure\", \"pencil\"]\n    cylindrical_tools = [word for word in tool_words if \"cylindrical\" in word]\n    return \", \".join(cylindrical_tools) if cylindrical"}
{"cat": "tools", "slot": "shape", "value": "triangular", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be triangular. \n        Output: ", "result": "\n        hammer, wrench, screwdriver, pliers, saw, tape measure, level, drill, ruler, scissors\n    \"\"\"\n    category = \"tools\"\n    words = [\"hammer\", \"wrench\", \"screwdriver\", \"pliers\", \"saw\", \"tape measure\", \"level\", \"drill\", \"ruler\", \"scissors\"]\n    for word in words:\n        if \"triangular\" in word:\n            print(word)\n            break\n    else:\n        print(\"No words found.\")\n"}
{"cat": "tools", "slot": "part", "value": "handle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can have  handle. \n        Output: ", "result": " wrench, hammer, screwdriver, pliers, saw, tape, glue, screw, nail, drill\n```\n\n```\nDescribe a category of objects. \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can have handle. \n        Output:  wrench, hammer, screwdriver, pliers, saw, tape, glue, screw, nail, dr"}
{"cat": "tools", "slot": "part", "value": "blade", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can have  blade. \n        Output: ", "result": "\n```\nscissors, knife, saw, hammer, wrench, pliers, screwdriver, drill, chisel, blade\n```"}
{"cat": "tools", "slot": "part", "value": "edge", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can have  edge. \n        Output: ", "result": "\n```\nwrench, screwdriver, hammer, pliers, saw, tape, glue, nail, screw, drill\n```"}
{"cat": "tools", "slot": "part", "value": "head", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can have  head. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, saw, drill, chisel, ruler, level, tape measure\n    \"\"\"\n    category = \"tools\"\n    words = [\n        \"hammer\",\n        \"screwdriver\",\n        \"wrench\",\n        \"pliers\",\n        \"saw\",\n        \"drill\",\n        \"chisel\",\n        \"ruler\",\n        \"level\",\n        \"tape measure\"\n    ]\n    for word in words:\n        if \"head\" in word"}
{"cat": "tools", "slot": "part", "value": "shank", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can have  shank. \n        Output: ", "result": "\n        hammer, wrench, screwdriver, pliers, saw, drill, ruler, tape measure, level, pencil. \n    \"\"\"\n    category = \"tools\"\n    words = [\"hammer\", \"wrench\", \"screwdriver\", \"pliers\", \"saw\", \"drill\", \"ruler\", \"tape measure\", \"level\", \"pencil\"]\n    for word in words:\n        if \"shank\" in word:\n            print(word)\n            break\n    else:\n        print(\"No words found.\")"}
{"cat": "tools", "slot": "part", "value": "hammerhead", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can have  hammerhead. \n        Output: ", "result": "\n```\nhammer, wrench, screwdriver, pliers, saw, drill, hammerhead, ruler, tape, level\n```\nExplanation: The word \"hammerhead\" satisfies the condition of the category \"tools\" and can be included in the list of 10 words.\n```"}
{"cat": "tools", "slot": "part", "value": "hoe handle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can have  hoe handle. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, saw, tape measure, level, drill, ruler, scissors.\n    \"\"\"\n    category = \"tools\"\n    words = [\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"saw\", \"tape measure\", \"level\", \"drill\", \"ruler\", \"scissors\"]\n    for word in words:\n        if \"hoe\" in word and \"handle\" in word:\n            print(word)\n            break\n    else:\n       "}
{"cat": "tools", "slot": "part", "value": "stock", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can have  stock. \n        Output: ", "result": "\n```\nwrench, screwdriver, hammer, pliers, saw, tape, glue, screw, nail, wrench\n```\nExplanation: The words that belong to the category \"tools\" and can have stock are \"wrench\", \"screwdriver\", \"hammer\", \"pliers\", \"saw\", \"tape\", \"glue\", \"screw\", and \"nail\"."}
{"cat": "tools", "slot": "part", "value": "fluke", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can have  fluke. \n        Output: ", "result": "\n```\ncan, have, fluke, multimeter, voltmeter, ohmmeter, screwdriver, pliers, wrench, soldering\n```\n```\n\n```\ncan, have, fluke, multimeter, voltmeter, ohmmeter, screwdriver, pliers, wrench, solder"}
{"cat": "tools", "slot": "part", "value": "rake handle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can have  rake handle. \n        Output: ", "result": " hammer, screwdriver, wrench, pliers, saw, chisel, drill, ruler, level, tape measure. \n    \"\"\"\n    tool_words = [\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"saw\", \"chisel\", \"drill\", \"ruler\", \"level\", \"tape measure\"]\n    tool_words = [word for word in tool_words if \"handle\" in word and \"can\" in word and \"have\" in word]\n    print(\", \".join(tool_words))"}
{"cat": "tools", "slot": "part", "value": "stem", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can have  stem. \n        Output: ", "result": "\n```\nwrench, screwdriver, hammer, pliers, saw, tape, glue, nail, screw, drill\n```"}
{"cat": "tools", "slot": "part", "value": "clinch", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can have  clinch. \n        Output: ", "result": "\n```\nwrench, hammer, screwdriver, pliers, saw, tape, glue, nail, drill, clinch\n```\n\nExplanation: The word \"clinch\" satisfies the condition of the category \"tools\" and can be included in the list of 10 words.\n```"}
{"cat": "tools", "slot": "part", "value": "slot", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can have  slot. \n        Output: ", "result": "\n```\nwrench, screwdriver, hammer, pliers, saw, tape measure, level, wrench, screwdriver, hammer, pliers, saw, tape measure, level, wrench, screwdriver, hammer, pliers, saw, tape measure, level, wrench, screwdriver, hammer, pliers, saw, tape measure, level, wrench, screwdriver, hammer, pliers, saw, tape measure, level, wrench, screwdriver, hammer, pliers, saw, tape measure, level"}
{"cat": "tools", "slot": "part", "value": "razorblade", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can have  razorblade. \n        Output: ", "result": "\n            scissors,knife,razorblade,saw,hammer,wrench,pliers,screwdriver,chisel,drill\n\"\"\"\n\nword_list = [\"scissors\", \"knife\", \"razorblade\", \"saw\", \"hammer\", \"wrench\", \"pliers\", \"screwdriver\", \"chisel\", \"drill\"]\nfiltered_word_list = []\nfor word in word_list:\n    if \"razorblade\" in word:\n        filtered_word_list.append("}
{"cat": "tools", "slot": "part", "value": "pinhead", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can have  pinhead. \n        Output: ", "result": "pinhead, wrench, screwdriver, hammer, pliers, saw, tape, glue, screw, nail. \n    \"\"\"\n    category = \"tools\"\n    condition = \"can have pinhead\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"cat": "tools", "slot": "part", "value": "thread", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can have  thread. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, saw, drill, ruler, tape measure, level, pencil. \n    \"\"\"\n    category = \"tools\"\n    words = [\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"saw\", \"drill\", \"ruler\", \"tape measure\", \"level\", \"pencil\"]\n    for word in words:\n        if \"thread\" in word:\n            print(word)\n            break\n    else:\n        print(\"No words found.\")\n"}
{"cat": "tools", "slot": "part", "value": "ring", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can have  ring. \n        Output: ", "result": " hammer, wrench, screwdriver, pliers, saw, drill, ruler, tape measure, level, pencil. \n    \"\"\"\n    category = \"tools\"\n    words = [\"hammer\", \"wrench\", \"screwdriver\", \"pliers\", \"saw\", \"drill\", \"ruler\", \"tape measure\", \"level\", \"pencil\"]\n    for word in words:\n        if \"ring\" in word:\n            print(word)\n            break\n    else:\n        print(\"No words found.\")\n```\n"}
{"cat": "tools", "slot": "part", "value": "point", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can have  point. \n        Output: ", "result": "\n```\nwrench, screwdriver, hammer, pliers, saw, tape, glue, screw, nail, wrench\n```"}
{"cat": "tools", "slot": "part", "value": "arm", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can have  arm. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, saw, tape measure, level, drill, ruler, scissors.\n    \"\"\"\n    category = \"tools\"\n    words = [\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"saw\", \"tape measure\", \"level\", \"drill\", \"ruler\", \"scissors\"]\n    for word in words:\n        if \"arm\" in word:\n            print(word)\n            break\n    else:\n        print(\"No words found.\")\n"}
{"cat": "tools", "slot": "material", "value": "metal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be made of metal. \n        Output: ", "result": "\n        hammer, wrench, screwdriver, pliers, saw, hatchet, chisel, drill, pliers, screwdriver\n    \"\"\"\n    category = \"tools\"\n    condition = \"can be made of metal\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"tools\", \"can be made of wood\"))\nprint(get_words(\"tools\", \"can be made of plastic\"))\nprint(get_words(\"tools\", \"can be made"}
{"cat": "tools", "slot": "material", "value": "steel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be made of steel. \n        Output: ", "result": "\n        hammer, wrench, screwdriver, pliers, saw, drill, h\n```"}
{"cat": "tools", "slot": "material", "value": "plastic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be made of plastic. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, saw, tape measure, level, drill, ruler, pencil.\n    \"\"\"\n    category = \"tools\"\n    condition = \"can be made of plastic\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words(\"tools\", \"can be made of metal\"))\nprint(get_words(\"tools\", \"can be made of plastic\"))\nprint(get_words(\"tools\", \"can be made of"}
{"cat": "tools", "slot": "material", "value": "iron", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be made of iron. \n        Output: ", "result": "\n        hammer, wrench, screwdriver, pliers, saw, drill, hatchet, chisel, punch, file\n\"\"\"\n\n# Define the function\ndef get_iron_tools():\n    iron_tools = []\n    for word in word_list:\n        if \"iron\" in word and \"tool\" in word:\n            iron_tools.append(word)\n    return iron_tools\n\n# Call the function\niron_tools = get_iron_tools()\nprint(iron_tools)\n```\n"}
{"cat": "tools", "slot": "material", "value": "wood", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be made of wood. \n        Output: ", "result": "\n        hammer, saw, screwdriver, pliers, wrench, chisel, plane, drill, measuring tape, level. \n    \"\"\"\n    category = \"tools\"\n    condition = \"can be made of wood\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"cat": "tools", "slot": "colorPattern", "value": "silver", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be silver. \n        Output: ", "result": "\n        hammer, wrench, screwdriver, pliers, saw, drill, ruler, tape measure, level, pencil. \n    \"\"\"\n    tool_words = [\"hammer\", \"wrench\", \"screwdriver\", \"pliers\", \"saw\", \"drill\", \"ruler\", \"tape measure\", \"level\", \"pencil\"]\n    silver_words = [word for word in tool_words if \"silver\" in word]\n    return \", \".join(silver_words) if silver_words else \"\"\n\ndef"}
{"cat": "tools", "slot": "colorPattern", "value": "silver", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be silver. \n        Output: ", "result": "\n        hammer, wrench, screwdriver, pliers, saw, drill, ruler, tape measure, level, pencil. \n    \"\"\"\n    tool_words = [\"hammer\", \"wrench\", \"screwdriver\", \"pliers\", \"saw\", \"drill\", \"ruler\", \"tape measure\", \"level\", \"pencil\"]\n    silver_words = [word for word in tool_words if \"silver\" in word]\n    return \", \".join(silver_words) if silver_words else \"\"\n\ndef"}
{"cat": "tools", "slot": "colorPattern", "value": "brown", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be brown. \n        Output: ", "result": "\n            hammer\n            wrench\n            screwdriver\n            pliers\n            saw\n            hatchet\n            chisel\n            drill\n            screw\n    \"\"\"\n    category = \"tools\"\n    words = [\"hammer\", \"wrench\", \"screwdriver\", \"pliers\", \"saw\", \"hatchet\", \"chisel\", \"drill\", \"screw\", \"trowel\"]\n    for word in words:\n        if word.lower() == \"brown\":\n            print(word)\n            break\n   "}
{"cat": "tools", "slot": "colorPattern", "value": "brown", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be brown. \n        Output: ", "result": "\n            hammer\n            wrench\n            screwdriver\n            pliers\n            saw\n            hatchet\n            chisel\n            drill\n            screw\n    \"\"\"\n    category = \"tools\"\n    words = [\"hammer\", \"wrench\", \"screwdriver\", \"pliers\", \"saw\", \"hatchet\", \"chisel\", \"drill\", \"screw\", \"trowel\"]\n    for word in words:\n        if word.lower() == \"brown\":\n            print(word)\n            break\n   "}
{"cat": "tools", "slot": "colorPattern", "value": "black", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be black. \n        Output: ", "result": "\n```\nblack, hammer, wrench, screwdriver, pliers, saw, chisel, drill, ruler, tape measure\n```\nExplanation: The words that belong to the category \"tools\" and can be black are \"hammer\", \"wrench\", \"screwdriver\", \"pliers\", \"saw\", \"chisel\", \"drill\", \"ruler\", and \"tape measure\".\n```python\ndef can_be_black(word):\n    black_words = [\"hammer\", \"wrench\", \"screwdriver"}
{"cat": "tools", "slot": "colorPattern", "value": "black", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be black. \n        Output: ", "result": "\n```\nblack, hammer, wrench, screwdriver, pliers, saw, chisel, drill, ruler, tape measure\n```\nExplanation: The words that belong to the category \"tools\" and can be black are \"hammer\", \"wrench\", \"screwdriver\", \"pliers\", \"saw\", \"chisel\", \"drill\", \"ruler\", and \"tape measure\".\n```python\ndef can_be_black(word):\n    black_words = [\"hammer\", \"wrench\", \"screwdriver"}
{"cat": "tools", "slot": "colorPattern", "value": "golden", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: can be golden. \n        Output: ", "result": "\n        hammer, wrench, screwdriver, pliers, saw, drill, screw, nail, tape measure, level. \n    \"\"\"\n    category = \"tools\"\n    condition = \"can be golden\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_synonyms(word):\n    \"\"\"\n    Provide a list of synonyms for a given word. \n        Desired output: comma separated list of synonyms. \n        Input: word. \n        Category"}
{"cat": "tools", "slot": "accessory", "value": "fastener", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: may have to do with fastener. \n        Output: ", "result": "\n```\nscrew, bolt, nut, washer, wrench, socket, ratchet, hammer, pliers, drill\n```"}
{"cat": "tools", "slot": "generalization", "value": "holdfast", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are holdfast. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in text.split():\n            if word.lower() in HOLDFAST_WORDS and word.lower() in TOOLS_WORDS:\n                words.append(word)\n        return \", \".join(words)\n\n    @staticmethod\n    def extract_category(text, category):\n        \"\"\"\n        Extract the category of a given text.\n        Args:\n            text (str): the text to extract the category from.\n            category (str): the category to extract.\n        Returns:\n"}
{"cat": "tools", "slot": "generalization", "value": "edge tool", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are edge tool. \n        Output: ", "result": "\n        screwdriver\n        wrench\n        pliers\n        hammer\n        saw\n        chisel\n        drill\n        crowbar\n        tape measure\n        level\n    \"\"\"\n    edge_tools = [\n        \"screwdriver\",\n        \"wrench\",\n        \"pliers\",\n        \"hammer\",\n        \"saw\",\n        \"chisel\",\n        \"drill\",\n        \"crowbar\",\n        \"tape measure\",\n        \"level\"\n    ]\n    return \", \".join(edge_tools"}
{"cat": "tools", "slot": "generalization", "value": "fixing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are fixing. \n        Output: ", "result": "\n```\nwrench, hammer, pliers, screwdriver, saw, tape, glue, nails, screws, hinges\n```\n3. \n```\nwrench, hammer, pliers, screwdriver, saw, tape, glue, nails, screws, hinges\n"}
{"cat": "tools", "slot": "generalization", "value": "fastening", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are fastening. \n        Output: ", "result": "\n```\nscrew, nail, bolt, screwdriver, hammer, nuts, bolts, wrench, pliers, drill\n```\nExplanation:\nThe words that belong to the category \"tools\" and satisfy the condition \"are fastening\" are: screw, nail, bolt, screwdriver, hammer, nuts, bolts, wrench, pliers, drill.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of"}
{"cat": "tools", "slot": "generalization", "value": "compound lever", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are compound lever. \n        Output: ", "result": "\n        screwdriver, wrench, pliers, hammer, saw, drill, ruler, level, tape measure, pencil.\n    \"\"\"\n    tool_words = [\"screwdriver\", \"wrench\", \"pliers\", \"hammer\", \"saw\", \"drill\", \"ruler\", \"level\", \"tape measure\", \"pencil\"]\n    compound_lever_words = [word for word in tool_words if \"lever\" in word and \"compound\" in word]\n    return \", \".join(compound_le"}
{"cat": "tools", "slot": "generalization", "value": "cutting implement", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are cutting implement. \n        Output: ", "result": "\n```\nscissors, knife, saw, axe, chisel, drill, pliers, wrench, hammer, screwdriver\n```\nExplanation: The words that belong to the category \"tools\" and satisfy the condition \"are cutting implement\" are: scissors, knife, saw, axe, chisel, drill, pliers, wrench, hammer, and screwdriver.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list"}
{"cat": "tools", "slot": "generalization", "value": "lever", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are lever. \n        Output: ", "result": "\n```\nlever, wrench, screwdriver, pliers, hammer, saw, drill, chisel, crowbar, hatchet\n```"}
{"cat": "tools", "slot": "generalization", "value": "mechanism", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are mechanism. \n        Output: ", "result": "\n        hammer, wrench, screwdriver, pliers, saw, drill, h\n```"}
{"cat": "tools", "slot": "generalization", "value": "simple machine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are simple machine. \n        Output: ", "result": "\n            screwdriver, hammer, wrench, pliers, saw, drill, ruler, tape measure, level, pencil.\n    \"\"\"\n    tool_words = [\"screwdriver\", \"hammer\", \"wrench\", \"pliers\", \"saw\", \"drill\", \"ruler\", \"tape measure\", \"level\", \"pencil\"]\n    tool_words = [word for word in tool_words if \"tool\" in word]\n    tool_words = [word for word in tool_words if \"simple\" in word]\n   "}
{"cat": "tools", "slot": "generalization", "value": "knife", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are knife. \n        Output: ", "result": "\n        scissors, knife, saw, chisel, hammer, pliers, wrench, screwdriver, punch, drill\n\"\"\"\n\n# Define the function\ndef get_tools(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the tools\n    tools = []\n    \n    # Iterate over the words in the category\n    for word in category_words:\n        # Check if the"}
{"cat": "tools", "slot": "generalization", "value": "machine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are machine. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, saw, drill, screw, nail, tape measure, level. \n    \"\"\"\n    tool_words = [\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"saw\", \"drill\", \"screw\", \"nail\", \"tape measure\", \"level\"]\n    machine_tools = [\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"saw\", \"drill\", \"screw\", \"nail\", \"ta"}
{"cat": "tools", "slot": "generalization", "value": "medical instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are medical instrument. \n        Output: ", "result": "\n        forceps, scalpel, stethoscope, syringe, tongue depressor, otoscope, reflex hammer, speculum, lancet, sphygmomanometer\n    \"\"\"\n    category = \"tools\"\n    words = [\"forceps\", \"scalpel\", \"stethoscope\", \"syringe\", \"tongue depressor\", \"otoscope\", \"reflex hammer\", \"speculum\", \"lancet\", \"sphygmomanometer\"]\n    for word in words:\n        if \"medical"}
{"cat": "tools", "slot": "generalization", "value": "weapon", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are weapon. \n        Output: ", "result": "\n```\nknife, sword, gun, axe, spear, dagger, bow, arrow, crossbow, mace\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are not weapon. \n        Output: \n```\nhammer, wrench, screwdriver, pliers, saw, tape measure, level, stud finder, socket set,"}
{"cat": "tools", "slot": "generalization", "value": "scissors", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are scissors. \n        Output: ", "result": "\n        scissors, shears, cutter, trimmer, snips, shears, cutter, trimmer, snips, shears\n\"\"\"\nscissors, shears, cutter, trimmer, snips, shears, cutter, trimmer, snips, shears\n\n\"\"\"\nExample:\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are screwdrivers. \n"}
{"cat": "tools", "slot": "generalization", "value": "shape", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are shape. \n        Output: ", "result": "\n```\nwrench, screwdriver, hammer, pliers, saw, tape measure, level, drill, ruler, scissors\n```\n\n### Example 2:\n```\n\n```\nscrewdriver, wrench, hammer, pliers, saw, tape measure, level, drill"}
{"cat": "tools", "slot": "generalization", "value": "pair of scissors", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are pair of scissors. \n        Output: ", "result": "\n        shears, snips, cutter, scissors, shears, snips, cutter, scissors, shears, snips, cutter, scissors, shears, snips, cutter, scissors, shears, snips, cutter, scissors, shears, snips, cutter, scissors, shears, snips, cutter, scissors, shears, snips, cutter, scissors, shears, snips, cutter, scissors, shears, snips, cutter,"}
{"cat": "tools", "slot": "generalization", "value": "curve", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are curve. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, saw, drill, ruler, level, tape measure, pencil.\n    \"\"\"\n    category = \"tools\"\n    words = [\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"saw\", \"drill\", \"ruler\", \"level\", \"tape measure\", \"pencil\"]\n    for word in words:\n        if word.endswith(\".curve\"):\n            print(word)\n            break\n    else:\n        print(\"No words found"}
{"cat": "tools", "slot": "generalization", "value": "connective", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are connective. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, saw, drill, ruler, tape measure, level, pencil. \n    \"\"\"\n    tool_words = [\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"saw\", \"drill\", \"ruler\", \"tape measure\", \"level\", \"pencil\"]\n    connective_tools = [word for word in tool_words if \"connect\" in word]\n    print(\", \".join(connective_tools))\n```\nExample usage:\n```\n"}
{"cat": "tools", "slot": "generalization", "value": "obstruction", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are obstruction. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, saw, chisel, drill, ruler, tape measure, level.\n    \"\"\"\n    category = \"tools\"\n    condition = \"are obstruction\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that satisfy the condition in that category.\n    \"\"\"\n    if category == \"tools\" and condition == \"are obstruction\":"}
{"cat": "tools", "slot": "generalization", "value": "bar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are bar. \n        Output: ", "result": "\n        hammer, wrench, screwdriver, pliers, saw, tape measure, level, drill, ruler, scissors\n    \"\"\"\n    category = \"tools\"\n    words = [\"hammer\", \"wrench\", \"screwdriver\", \"pliers\", \"saw\", \"tape measure\", \"level\", \"drill\", \"ruler\", \"scissors\"]\n    for word in words:\n        if word.startswith(\"bar\"):\n            print(word)\n            break\n    else:\n        print(\"No words found.\")"}
{"cat": "tools", "slot": "generalization", "value": "obstructer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are obstructer. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, saw, chisel, drill, ruler, tape measure, level. \n    \"\"\"\n    category = \"tools\"\n    condition = \"are obstructer\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "tools", "slot": "generalization", "value": "tumbler", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are tumbler. \n        Output: ", "result": "\n```\ntumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, tumbler, t"}
{"cat": "tools", "slot": "generalization", "value": "attachment", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are attachment. \n        Output: ", "result": "\n```\nwrench, pliers, screwdriver, hammer, saw, nail, drill, tape measure, level, screws\n```\nExplanation: The words that belong to the category of tools and satisfy the condition of being attachment are: wrench, pliers, screwdriver, hammer, saw, nail, drill, tape measure, level, and screws.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n"}
{"cat": "tools", "slot": "generalization", "value": "strainer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are strainer. \n        Output: ", "result": "\n```\nstrainer,screwdriver,wrench,pliers,hammer,saw,drill,sandpaper,tap,socket\n```\nExplanation:\nThe words that belong to the category \"tools\" and satisfy the condition \"are strainer\" are: strainer,screwdriver,wrench,pliers,hammer,saw,drill,sandpaper,tap,socket.\n```\nprovide,category,condition,output\nstrainer,tools,are strainer,strainer,screwdriver,wrench,p"}
{"cat": "tools", "slot": "generalization", "value": "kitchen utensil", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are kitchen utensil. \n        Output: ", "result": "\n        knife, spoon, fork, ladle, spatula, whisk, grater, cutting board, mixing bowl, colander\n\"\"\"\n\n# Define the function\ndef get_kitchen_utensils(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the kitchen utensils\n    kitchen_utensils = []\n    \n    # Loop through each word in the condition\n    for word in"}
{"cat": "tools", "slot": "generalization", "value": "seal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are seal. \n        Output: ", "result": "\n```\nseal, wrench, pliers, screwdriver, hammer, saw, tape measure, level, drill\n```"}
{"cat": "tools", "slot": "generalization", "value": "impedimenta", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are impedimenta. \n        Output: ", "result": "\n```\nhammer, wrench, screwdriver, pliers, saw, tape measure, level, drill, socket set, ruler\n```\n\n### Example 2:\n```\n\n```\nscrewdriver, wrench, pliers, hammer, saw, tape measure, level, dr"}
{"cat": "tools", "slot": "generalization", "value": "connection", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are connection. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, saw, drill, ruler, tape measure, level, pencil. \n    \"\"\"\n    tool_words = [\n        \"hammer\",\n        \"screwdriver\",\n        \"wrench\",\n        \"pliers\",\n        \"saw\",\n        \"drill\",\n        \"ruler\",\n        \"tape measure\",\n        \"level\",\n        \"pencil\"\n    ]\n    tool_words = [word for word in tool_words if word.endswith"}
{"cat": "tools", "slot": "generalization", "value": "connector", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are connector. \n        Output: ", "result": "\n        screwdriver, wrench, pliers, hammer, saw, tape, glue, screw, nail, drill\n    \"\"\"\n    tool_words = [\"screwdriver\", \"wrench\", \"pliers\", \"hammer\", \"saw\", \"tape\", \"glue\", \"screw\", \"nail\", \"drill\"]\n    connector_tools = [word for word in tool_words if \"connector\" in word]\n    print(\", \".join(connector_tools))\n```\nExample usage:\n```\npython"}
{"cat": "tools", "slot": "generalization", "value": "paper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are paper. \n        Output: ", "result": "\n            scissors, pencil, ruler, eraser, stapler, tape, glue, paperclip, stapler, pencil\n        \"\"\"\n        category = \"tools\"\n        condition = \"are paper\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    print(get_words(\"tools\", \"are paper\"))  # Output: scissors, pencil, ruler, eraser, stapler, tape, glue, paperclip, stapler, pencil"}
{"cat": "tools", "slot": "generalization", "value": "construction", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are construction. \n        Output: ", "result": "\n```\nwrench, hammer, screwdriver, saw, drill, pliers, tape measure, level, crowbar, hacksaw\n```\n\n### Example 2:\n```\n\n```\nscrewdriver, hammer, wrench, saw, drill, pliers, tape measure, level"}
{"cat": "tools", "slot": "generalization", "value": "connecter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are connecter. \n        Output: ", "result": "\n```\nwrench, screwdriver, hammer, pliers, saw, tape, glue, screw, nail, wrench\n```\n10. \n```\nwrench, screwdriver, hammer, pliers, saw, tape, glue, screw, nail, wrench\n```\n"}
{"cat": "tools", "slot": "generalization", "value": "claw", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are claw. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, saw, chisel, drill, ruler, level, tape measure\n    \"\"\"\n    tool_words = [\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"saw\", \"chisel\", \"drill\", \"ruler\", \"level\", \"tape measure\"]\n    claw_words = [word for word in tool_words if \"claw\" in word]\n    return \", \".join(claw_words) if claw_words else \"\"\n\n"}
{"cat": "tools", "slot": "generalization", "value": "weapon system", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are weapon system. \n        Output: ", "result": "\n```\nknife, sword, gun, rifle, pistol, shotgun, machete, spear, bow, crossbow\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are not weapon system. \n        Output: \n```\nhammer, wrench, screwdriver, pliers, saw, tape measure, level, drill, socket set"}
{"cat": "tools", "slot": "generalization", "value": "bottle opener", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are bottle opener. \n        Output: ", "result": "\n        screwdriver, wrench, pliers, hammer, saw, knife, scissors,\n```"}
{"cat": "tools", "slot": "generalization", "value": "bond", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are bond. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, saw, tape measure, level, drill, ruler, scissors\n    \"\"\"\n    bond_tools = [\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"saw\", \"tape measure\", \"level\", \"drill\", \"ruler\", \"scissors\"]\n    bond_tools = [word for word in bond_tools if \"bond\" in word]\n    return \", \".join(bond_tools)\n\ndef get_category(word):\n"}
{"cat": "tools", "slot": "generalization", "value": "curved shape", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are curved shape. \n        Output: ", "result": "\n```\nwrench, screwdriver, ruler, protractor, compass, saw, hammer, pliers, wrench, screwdriver\n```\nExplanation: The words `wrench`, `screwdriver`, `ruler`, `protractor`, `compass`, `saw`, `hammer`, `pliers`, `wrench`, `screwdriver` belong to the category `tools` and are curved shape.\n```"}
{"cat": "tools", "slot": "generalization", "value": "playing card", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are playing card. \n        Output: ", "result": "2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K, A\n    \"\"\"\n    category = \"tools\"\n    words = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n    for word in words:\n        if \"playing card\" in str(word):\n            print(word)\n            break\n    else:\n        print(\"No words found"}
{"cat": "tools", "slot": "generalization", "value": "surgical instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are surgical instrument. \n        Output: ", "result": "\n        scissors, forceps, scalpel, needle, retractor, curette, lancet, suture, probes, forceps\n    \"\"\"\n    category = \"tools\"\n    words = [\n        \"scissors\",\n        \"forceps\",\n        \"scalpel\",\n        \"needle\",\n        \"retractor\",\n        \"curette\",\n        \"lancet\",\n        \"suture\",\n        \"probes\",\n        \"forceps\"\n    ]\n    for word in words:\n        if \"surg"}
{"cat": "tools", "slot": "generalization", "value": "instrument", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are instrument. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, saw, drill, ruler, tape measure, level, pencil. \n    \"\"\"\n    tool_words = [\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"saw\", \"drill\", \"ruler\", \"tape measure\", \"level\", \"pencil\"]\n    instrument_tools = [word for word in tool_words if \"instrument\" in word]\n    return \", \".join(instrument_tools) if instrument_tools else \"No instrument words"}
{"cat": "tools", "slot": "generalization", "value": "filter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are filter. \n        Output: ", "result": "\n        screwdriver\n        wrench\n        pliers\n        hammer\n        saw\n        tape\n        glue\n        scissors\n        ruler\n        level\n    \"\"\"\n    category = \"tools\"\n    condition = \"are filter\"\n    words = [\n        \"screwdriver\",\n        \"wrench\",\n        \"pliers\",\n        \"hammer\",\n        \"saw\",\n        \"tape\",\n        \"glue\",\n        \"scissors\",\n        \"ruler\",\n        \"level\"\n    ]"}
{"cat": "tools", "slot": "generalization", "value": "impediment", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are impediment. \n        Output: ", "result": "\n```\nwrench, screwdriver, hammer, pliers, saw, tape measure, level, drill, screws, nails\n```\nExplanation:\nThe words that belong to the category \"tools\" and satisfy the condition \"are impediment\" are: wrench, screwdriver, hammer, pliers, saw, tape measure, level, drill, screws, nails.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words"}
{"cat": "tools", "slot": "generalization", "value": "line", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are line. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, saw, drill, tape measure, level, ruler, pencil. \n    \"\"\"\n    tool_words = [\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"saw\", \"drill\", \"tape measure\", \"level\", \"ruler\", \"pencil\"]\n    line_words = [word for word in tool_words if \"line\" in word]\n    return \", \".join(line_words)\n\ndef get_category(word):\n   "}
{"cat": "tools", "slot": "generalization", "value": "opener", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are opener. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, saw, tape measure, level, drill, ruler, scissors\n    \"\"\"\n    tool_words = [\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"saw\", \"tape measure\", \"level\", \"drill\", \"ruler\", \"scissors\"]\n    opener_words = [word for word in tool_words if \"opener\" in word]\n    print(\", \".join(opener_words))\n```\nExample usage:\n```\n"}
{"cat": "tools", "slot": "generalization", "value": "surgical knife", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are surgical knife. \n        Output: ", "result": "\n            scalpel, blade, incision, stitches, suture, staple, stapler, clamp, forceps, retractor\n        \"\"\"\n        category = \"tools\"\n        words = [\"scalpel\", \"blade\", \"incision\", \"stitches\", \"suture\", \"staple\", \"stapler\", \"clamp\", \"forceps\", \"retractor\"]\n        for word in words:\n            if \"surgical\" in word and word.endswith(\"er\"):\n                print(word)\n```\nThis code"}
{"cat": "tools", "slot": "generalization", "value": "card", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are card. \n        Output: ", "result": "\n            hammer, screwdriver, wrench, pliers, saw, tape, glue, scissors, ruler, pencil\n    \"\"\"\n    category = \"tools\"\n    words = [\n        \"hammer\",\n        \"screwdriver\",\n        \"wrench\",\n        \"pliers\",\n        \"saw\",\n        \"tape\",\n        \"glue\",\n        \"scissors\",\n        \"ruler\",\n        \"pencil\"\n    ]\n\n    for word in words:\n        if \"card\""}
{"cat": "tools", "slot": "generalization", "value": "inclined plane", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are inclined plane. \n        Output: ", "result": "\n        wrench, ruler, level, square, saw, hammer, pliers, screwdriver, tape measure, protractor.\n    \"\"\"\n    tool_words = [\"wrench\", \"ruler\", \"level\", \"square\", \"saw\", \"hammer\", \"pliers\", \"screwdriver\", \"tape measure\", \"protractor\"]\n    inclined_plane_words = [word for word in tool_words if \"inclined plane\" in word]\n    return \", \".join(inclined_plane_words)\n\ndef get"}
{"cat": "tools", "slot": "generalization", "value": "structure", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are structure. \n        Output: ", "result": "\n        hammer, wrench, screwdriver, pliers, saw, drill, level, tape measure, ruler, scissors\n    \"\"\"\n    category = \"tools\"\n    words = [\"hammer\", \"wrench\", \"screwdriver\", \"pliers\", \"saw\", \"drill\", \"level\", \"tape measure\", \"ruler\", \"scissors\"]\n    for word in words:\n        if \"structure\" in word.lower():\n            print(word)\n            break\n    else:\n        print(\"No words found.\")"}
{"cat": "tools", "slot": "generalization", "value": "connexion", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are connexion. \n        Output: ", "result": "\n```\nwrench, screwdriver, hammer, pliers, saw, tape measure, level, drill, socket set, ruler\n```\n10. \n```\nwrench, screwdriver, hammer, pliers, saw, tape measure, level, drill, socket set, ruler\n```"}
{"cat": "tools", "slot": "generalization", "value": "ligament", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are ligament. \n        Output: ", "result": "\n            hammer, wrench, screwdriver, pliers, saw, tape measure, level, drill, socket set, ruler\n    \"\"\"\n    tool_words = [\"hammer\", \"wrench\", \"screwdriver\", \"pliers\", \"saw\", \"tape measure\", \"level\", \"drill\", \"socket set\", \"ruler\"]\n    ligament_tools = [word for word in tool_words if \"ligament\" in word]\n    if len(ligament_tools) == 10:\n        return ligament_tools\n"}
{"cat": "tools", "slot": "generalization", "value": "form", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are form. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, saw, tape measure, level, drill, ruler, scissors\n    \"\"\"\n    tool_words = [\n        \"hammer\",\n        \"screwdriver\",\n        \"wrench\",\n        \"pliers\",\n        \"saw\",\n        \"tape measure\",\n        \"level\",\n        \"drill\",\n        \"ruler\",\n        \"scissors\"\n    ]\n    form_words = [word for word in tool_words if \"form\" in word"}
{"cat": "tools", "slot": "generalization", "value": "hook", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are hook. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, saw, chisel, drill, ruler, level, tape measure\n    \"\"\"\n    tool_words = [\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"saw\", \"chisel\", \"drill\", \"ruler\", \"level\", \"tape measure\"]\n    hook_words = [word for word in tool_words if \"hook\" in word]\n    print(\", \".join(hook_words))\n```\nExample:\n```\nInput: \n"}
{"cat": "tools", "slot": "generalization", "value": "obstructor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are obstructor. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, saw, chisel, drill, ruler, level, tape measure\n    \"\"\"\n    category = \"tools\"\n    obstructor_words = [\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"saw\", \"chisel\", \"drill\", \"ruler\", \"level\", \"tape measure\"]\n    words = [word for word in obstructor_words if word.lower() in category.lower()]\n    return \", \".join(words)\n\ndef"}
{"cat": "tools", "slot": "generalization", "value": "tool", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are tool. \n        Output: ", "result": "\n```\nwrench, hammer, screwdriver, pliers, saw, tape measure, wrench, screwdriver, pliers, hammer\n```\nExplanation: The words that belong to the category \"tools\" and satisfy the condition \"are tool\" are: wrench, hammer, screwdriver, pliers, saw, tape measure, wrench, screwdriver, pliers, hammer.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words"}
{"cat": "tools", "slot": "generalization", "value": "utensil", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are utensil. \n        Output: ", "result": "\n        knife, spoon, fork, spatula, ladle, tongs, shovel, hoe, rake, trowel.\n    \"\"\"\n    tool_words = [\"knife\", \"spoon\", \"fork\", \"spatula\", \"ladle\", \"tongs\", \"shovel\", \"hoe\", \"rake\", \"trowel\"]\n    utensil_words = [word for word in tool_words if \"utensil\" in word]\n    if utensil_words:\n        print(\", \".join(ut"}
{"cat": "tools", "slot": "generalization", "value": "implement", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are implement. \n        Output: ", "result": "\n```\nwrench, screwdriver, hammer, pliers, saw, tape measure, level, wrench, screwdriver, hammer, pliers, saw, tape measure, level, wrench, screwdriver, hammer, pliers, saw, tape measure, level, wrench, screwdriver, hammer, pliers, saw, tape measure, level, wrench, screwdriver, hammer, pliers, saw, tape measure, level, wrench, screwdriver, hammer, pliers, saw, tape measure, level"}
{"cat": "tools", "slot": "generalization", "value": "object", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are object. \n        Output: ", "result": "\n```\nwrench, hammer, screwdriver, pliers, saw, tape measure, wrench, screwdriver, pliers, hammer\n```\nExplanation: The words that belong to the category \"tools\" and satisfy the condition \"are object\" are: wrench, hammer, screwdriver, pliers, saw, tape measure, wrench, screwdriver, pliers, hammer.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words"}
{"cat": "tools", "slot": "generalization", "value": "hand tool", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are hand tool. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, saw, chisel, drill, ruler, tape measure, level.\n    \"\"\"\n    tool_words = [\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"saw\", \"chisel\", \"drill\", \"ruler\", \"tape measure\", \"level\"]\n    hand_tools = [\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"saw\", \"chisel\", \"drill\", \"ruler\", \"ta"}
{"cat": "tools", "slot": "generalization", "value": "instrumentality", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are instrumentality. \n        Output: ", "result": "\n```\nwrench, hammer, screwdriver, pliers, saw, drill, tape measure, level, crowbar, hacksaw\n```\n\n```\n\n```\ntape measure, level, crowbar, hacksaw, wrench, hammer, screwdriver, pliers, saw, drill"}
{"cat": "tools", "slot": "generalization", "value": "instrumentation", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are instrumentation. \n        Output: ", "result": "\n        hammer, wrench, pliers, screwdriver, ruler, level, tape measure, saw, punch, drill\n    \"\"\"\n    tool_words = [\"hammer\", \"wrench\", \"pliers\", \"screwdriver\", \"ruler\", \"level\", \"tape measure\", \"saw\", \"punch\", \"drill\"]\n    instrumentation_words = [word for word in tool_words if \"instrumentation\" in word]\n    return \", \".join(instrumentation_words) if instrumentation_words else \"\"\n\n"}
{"cat": "tools", "slot": "generalization", "value": "device", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are device. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, saw, drill, tape measure, level, ruler, pencil. \n    \"\"\"\n    tool_words = [\"hammer\", \"screwdriver\", \"wrench\", \"pliers\", \"saw\", \"drill\", \"tape measure\", \"level\", \"ruler\", \"pencil\"]\n    tool_words = [word for word in tool_words if \"device\" in word and \"tools\" in word]\n    return tool_words"}
{"cat": "tools", "slot": "generalization", "value": "constraint", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are constraint. \n        Output: ", "result": "\n```\nhammer, screwdriver, wrench, pliers, saw, tape measure, level, drill, ruler, scissors\n```\nExplanation: The words that belong to the category \"tools\" and satisfy the condition \"are constraint\" are hammer, screwdriver, wrench, pliers, saw, tape measure, level, drill, ruler, and scissors.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. "}
{"cat": "tools", "slot": "generalization", "value": "restraint", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are restraint. \n        Output: ", "result": "\n        hammer, screwdriver, wrench, pliers, saw, tape measure, level, drill, ruler, scissors\n    \"\"\"\n    tool_words = [\n        \"hammer\",\n        \"screwdriver\",\n        \"wrench\",\n        \"pliers\",\n        \"saw\",\n        \"tape measure\",\n        \"level\",\n        \"drill\",\n        \"ruler\",\n        \"scissors\"\n    ]\n    tool_words = [word for word in tool_words if \"restraint\" in"}
{"cat": "tools", "slot": "generalization", "value": "cutter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are cutter. \n        Output: ", "result": "\n```\nscissors, knife, saw, hammer, pliers, wrench, screwdriver, chisel, punch, drill\n```\n\n### Example 2:\n\n```\nscissors, knife, saw, hammer, pliers, wrench, screwdriver, chis"}
{"cat": "tools", "slot": "generalization", "value": "artefact", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are artefact. \n        Output: ", "result": "\n        hammer, wrench, screwdriver, pliers, saw, chisel, drill, ruler, tape measure, level.\n    \"\"\"\n    tools = [\"hammer\", \"wrench\", \"screwdriver\", \"pliers\", \"saw\", \"chisel\", \"drill\", \"ruler\", \"tape measure\", \"level\"]\n    artefacts = [\"hammer\", \"wrench\", \"screwdriver\", \"pliers\", \"saw\", \"chisel\", \"drill\", \"ruler\", \"tape measure"}
{"cat": "tools", "slot": "generalization", "value": "mechanical device", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are mechanical device. \n        Output: ", "result": "\n```\nwrench, screwdriver, hammer, pliers, saw, drill, wrench, screwdriver, hammer, pliers\n```\nExplanation: The words that belong to the category \"tools\" and satisfy the condition \"are mechanical devices\" are: wrench, screwdriver, hammer, pliers, saw, drill, wrench, screwdriver, hammer, pliers.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words."}
{"cat": "tools", "slot": "generalization", "value": "cutlery", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are cutlery. \n        Output: ", "result": "\n        knife, fork, spoon,\n```"}
{"cat": "tools", "slot": "generalization", "value": "cutting tool", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are cutting tool. \n        Output: ", "result": "\n        drill\n        saw\n        chisel\n        file\n        plane\n        lathe\n        grinder\n        sandpaper\n        pliers\n        wrench\n    \"\"\"\n    tool_words = [\"drill\", \"saw\", \"chisel\", \"file\", \"plane\", \"lathe\", \"grinder\", \"sandpaper\", \"pliers\", \"wrench\"]\n    cutting_tool_words = [word for word in tool_words if \"cutting\" in word]\n    print(\", \".join(cutting_tool_words))\n```\n"}
{"cat": "tools", "slot": "generalization", "value": "artifact", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are artifact. \n        Output: ", "result": "\n```\nwrench, hammer, screwdriver, pliers, saw, tape measure, level, crowbar, wrench set, pliers set\n```\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are not artifact. \n        Output: \n```\ntape, scissors, ruler, stapler, glue, tape measure, level, pencil, eraser,"}
{"cat": "tools", "slot": "generalization", "value": "fastener", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are fastener. \n        Output: ", "result": "\n```\nscrew, bolt, nut, washer, nail, screwdriver, wrench, hammer, pliers, drill\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: are mammals. \n        Output: \n```\ncat, dog, cow, pig, horse, elephant, giraffe, whale,"}
{"cat": "tools", "slot": "generalization", "value": "screw", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are screw. \n        Output: ", "result": "\n```\nscrewdriver,screw,screws,screwhead,screwpoint,screwdriver,screwdriver,screwdriver,screwdriver,screwdriver\n```"}
{"cat": "tools", "slot": "generalization", "value": "arm", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: tools. \n        Condition: are arm. \n        Output: ", "result": "\n```\nwrench, hammer, screwdriver, pliers, saw, tape measure, level, drill, socket set, ruler\n```\n\nExample:\n```\n\n```\nwrench, hammer, screwdriver, pliers, saw, tape measure, level, drill, socket set, ruler"}
{"cat": "containers", "slot": "bodyPart", "value": "shoulder", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have or be used with shoulder. \n        Output: ", "result": "\n        box, can, jar, jug, pot, pouch, satchel, shoulder bag, tote \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"shoulder\" in word and \"container\" in word.lower().split(\" \"):\n            words.append(word)\n    return \", \".join(words)\n\n# Your code here\ncategory = input(\"Enter category: \")\ncondition = input(\"Enter condition: \")\n\nif category == \"containers\" and condition == \"can have or be used with shoulder\":\n"}
{"cat": "containers", "slot": "bodyPart", "value": "hand", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have or be used with hand. \n        Output: ", "result": "\n        box, can, cup, glass, jar, jug, mug, pitcher, pot, bowl, plate, tray.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"hand\" in word:\n            if \"can\" in word:\n                words.append(word)\n            elif \"cup\" in word:\n                words.append(word)\n            elif \"glass\" in word:\n                words.append(word)\n            elif \"jar\" in word:\n                words.append(word)\n            elif \""}
{"cat": "containers", "slot": "user", "value": "woman", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are used by women. \n        Output: ", "result": "\n            1. purse\n            2. handbag\n            3. clutch\n            4. tote\n            5. satchel\n            6. shoulder bag\n            7. backpack\n            8. messenger bag\n            9. diaper bag\n            10. makeup bag\n        \"\"\"\n        words = [\n            \"purse\",\n            \"handbag\",\n            \"clutch\",\n            \"tote\",\n            \"satchel\",\n            \"shoulder bag\",\n            \"backpack\",\n            \"messenger bag\",\n            \""}
{"cat": "containers", "slot": "user", "value": "waiter", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are used by waiters. \n        Output: ", "result": "\n        coffee, sugar, cream, napkin, straw, ketchup, salt, pepper, soy sauce, lemon.\n    \"\"\"\n    category = \"containers\"\n    condition = \"are used by waiters\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\nprint(get_words(\"containers\", \"are used by waiters\"))  # Output: coffee, sugar, cream, napkin, straw, ketchup, salt, pepper, soy sauce, lemon"}
{"cat": "containers", "slot": "efficiency", "value": "impermeable", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be impermeable. \n        Output: ", "result": "\n            plastic, glass, metal, ceramic, aluminum, cardboard, paper, cellophane, foil, plastic wrap\n        \"\"\"\n        category = \"containers\"\n        condition = \"can be impermeable\"\n        words = get_words(category, condition)\n        return \", \".join(words)\n\n    def test_impermeable_container_words(self):\n        self.assertEqual(self.impermeable_container_words(), \"plastic, glass, metal, ceramic, aluminum, cardboard"}
{"cat": "containers", "slot": "efficiency", "value": "recycled", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be recycled. \n        Output: ", "result": "\n        can, glass, plastic, aluminum, steel, paper, cardboard, carton, bottle, jar\n\"\"\"\n\nprint(recycled_container_words(category='containers', condition='can be recycled'))\n# Output: can, glass, plastic, aluminum, steel, paper, cardboard, carton, bottle, jar"}
{"cat": "containers", "slot": "efficiency", "value": "recyclable", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be recyclable. \n        Output: ", "result": "\n        - container\n        - recyclable\n        - reusable\n        - plastic\n        - glass\n        - aluminum\n        - steel\n        - paper\n        - cardboard\n        - biodegradable\n        \"\"\"\n    words = []\n    for word in container_words:\n        if \"recyclable\" in word or \"reusable\" in word or \"plastic\" in word or \"glass\" in word or \\\n           \"aluminum\" in word or \"steel\" in word or \"paper\" in word or \"cardboard\""}
{"cat": "containers", "slot": "efficiency", "value": "breakable", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be breakable. \n        Output: ", "result": "\n            box, bottle, can, jar, jug, vase, bowl, cup, pitcher, glass\n\"\"\"\nprint(list(filter(lambda x: x.category == \"containers\" and x.breakable, word_list)))\n```\nExample:\n```\nInput:\n```\n['apple', 'banana', 'carrot', 'durian', 'dragonfruit', 'fig', 'grape', 'jackfruit', 'kiwi', 'mango', 'pineapple', 'rambutan', 'starfruit', '"}
{"cat": "containers", "slot": "colorPattern", "value": "transparent", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be transparent. \n        Output: ", "result": "\n        box, bottle, jar, can, tube, vial, container, bottle, jar, can\n```\n\n```\nDesired output: \n\nComma separated list of words: box, bottle, jar, can, tube, vial, container, bottle, jar, can\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: can fly. \n        Output:"}
{"cat": "containers", "slot": "colorPattern", "value": "green", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be green. \n        Output: ", "result": "\n        box, can, jar, bottle, container, packaging, pack, wrapper, case, carton\n    \"\"\"\n    category = \"containers\"\n    words = [\"box\", \"can\", \"jar\", \"bottle\", \"container\", \"packaging\", \"pack\", \"wrapper\", \"case\", \"carton\"]\n    green_words = [word for word in words if \"green\" in word]\n    if category == \"containers\" and len(green_words) > 0:\n        print(\", \".join(green_words))\n    else"}
{"cat": "containers", "slot": "colorPattern", "value": "green", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be green. \n        Output: ", "result": "\n        box, can, jar, bottle, container, packaging, pack, wrapper, case, carton\n    \"\"\"\n    category = \"containers\"\n    words = [\"box\", \"can\", \"jar\", \"bottle\", \"container\", \"packaging\", \"pack\", \"wrapper\", \"case\", \"carton\"]\n    green_words = [word for word in words if \"green\" in word]\n    if category == \"containers\" and len(green_words) > 0:\n        print(\", \".join(green_words))\n    else"}
{"cat": "containers", "slot": "colorPattern", "value": "brown", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be brown. \n        Output: ", "result": "\n        box, can, jar, bottle, container, packaging, carton, case, tube,\n```"}
{"cat": "containers", "slot": "colorPattern", "value": "brown", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be brown. \n        Output: ", "result": "\n        box, can, jar, bottle, container, packaging, carton, case, tube,\n```"}
{"cat": "containers", "slot": "colorPattern", "value": "cream", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be cream. \n        Output: ", "result": "\n            can, cream, container, containers, cream, \n            cream, container, containers, cream, \n            cream, container, containers, cream, \n            cream, container, containers, cream, \n            cream, container, containers, cream, \n            cream, container, containers, cream, \n            cream, container, containers, cream, \n            cream, container, containers, cream, \n            cream, container, containers, cream, \n            cream, container, containers,"}
{"cat": "containers", "slot": "purpose", "value": "carry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are used to carry. \n        Output: ", "result": "\n        box, can, jar, bottle, bag, bucket, pail, sack, container\n```\n\n```\nDesired output: \n1. box\n2. can\n3. jar\n4. bottle\n5. bag\n6. bucket\n7. pail\n8. sack\n9. container\n10. tray\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n       "}
{"cat": "containers", "slot": "purpose", "value": "store", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are used to store. \n        Output: ", "result": "\n        box, can, jar, bottle, tin, pail, bag, crate, container, vial\n```\n\n```\nDescribe the steps to solve the problem:\n\n1. Read the prompt and identify the category and condition.\n2. Generate a list of words that belong to the category and satisfy the condition.\n3. Output the list of words as a comma-separated string.\n```"}
{"cat": "containers", "slot": "purpose", "value": "cleaning", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are used for cleaning. \n        Output: ", "result": "\n        detergent, sponge, mop, broom, bucket, soap, scrubber, sponge, cloth, dishwashing.\n    \"\"\"\n    category = \"containers\"\n    condition = \"are used for cleaning\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"cat": "containers", "slot": "purpose", "value": "shopping", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are used for shopping. \n        Output: ", "result": "\n            can, jar, bottle, box, bag, carton, container, packet, sack, tray\n        \"\"\"\n        category = \"containers\"\n        condition = \"are used for shopping\"\n        words = []\n        for word in text.split():\n            if word.lower() in category_words[category].lower() and word.lower() in condition_words[condition].lower():\n                words.append(word)\n        return \", \".join(words)\n\nif __name__ == \"__main__\":\n    text = input(\"Enter"}
{"cat": "containers", "slot": "purpose", "value": "gardening", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are used for gardening. \n        Output: ", "result": "\n            1. Container\n            2. Plant\n            3. Soil\n            4. Water\n            5. Sunlight\n            6. Fertilizer\n            7. Pruning\n            8. Weeding\n            9. Mulch\n            10. Compost\n        \"\"\"\n        words = []\n        for word in container_words:\n            if \"gardening\" in word:\n                words.append(word)\n        return words\n\ndef get_category(word):\n    \"\"\"\n    Given a word, return the category to which it belongs.\n\n"}
{"cat": "containers", "slot": "purpose", "value": "tote", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are used to tote. \n        Output: ", "result": "\n        box, can, jar, bottle, container, tote, bag, sack, pail, tub\n    \"\"\"\n    category = \"containers\"\n    words = [\"box\", \"can\", \"jar\", \"bottle\", \"container\", \"tote\", \"bag\", \"sack\", \"pail\", \"tub\"]\n    for word in words:\n        if \"tote\" in word:\n            print(word)\n\noutput = box, can, jar, bottle, container, tote, bag, sack, pail, tub\n"}
{"cat": "containers", "slot": "purpose", "value": "storage", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are used for storage. \n        Output: ", "result": "\n        box, can, jar, bottle, tin, pail, sack, crate, container\n    \"\"\"\n    category = \"containers\"\n    condition = \"are used for storage\"\n    words = []\n    for word in text.split():\n        if word.lower() in category_words[category] and word.lower() in condition_words[condition]:\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n# Test the function\ntest_"}
{"cat": "containers", "slot": "efficiency", "value": "shaped", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be shaped. \n        Output: ", "result": "\n        box, can, cup, jar, jug, pot, pail, pitcher, vase.\n    \"\"\"\n    category = \"containers\"\n    words = []\n    for word in text.split():\n        if re.match(r\"\\b(can|cup|jar|jug|pot|pail|pitcher|vase)\\b\", word, re.IGNORECASE):\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n"}
{"cat": "containers", "slot": "efficiency", "value": "plastic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be plastic. \n        Output: ", "result": "\n        - container\n        - plastic\n        - bottle\n        - jar\n        - can\n        - box\n        - bag\n        - pouch\n        - tube\n        - wrapper\n        \"\"\"\n    words = [\"container\", \"plastic\", \"bottle\", \"jar\", \"can\", \"box\", \"bag\", \"pouch\", \"tube\", \"wrapper\"]\n    if category == \"containers\" and condition == \"can be plastic\":\n        return \", \".join(words)\n    else:\n        return words\n\n# Example usage\n"}
{"cat": "containers", "slot": "place", "value": "shop", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be found or used in shops. \n        Output: ", "result": "\n        box, can, jar, bottle, pot, cup, bowl, plate, tray, container\n```\n```"}
{"cat": "containers", "slot": "place", "value": "cafeteria", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be found or used in cafeterias. \n        Output: ", "result": "\n        can, cup, plate, fork, knife, spoon, tray, bowl, container, utensil\n\"\"\"\n\n# Define the function\ndef find_words(category, condition):\n    # Split the condition into words\n    condition_words = condition.split()\n    # Get a list of all words in the vocabulary\n    words = list(vocabulary.keys())\n    # Filter the words based on the condition\n    filtered_words = []\n    for word in words:\n        if all(word.startswith(c"}
{"cat": "containers", "slot": "place", "value": "kitchen", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be found or used in kitchens. \n        Output: ", "result": "\n        - can\n        - opener\n        - container\n        - lid\n        - spoon\n        - fork\n        - knife\n        - plate\n        - bowl\n        - cup\n        \"\"\"\n    words = []\n    for word in word_list:\n        if \"container\" in word and \"kitchen\" in word:\n            words.append(word)\n    return \", \".join(words)\n\n# Your code here\n\nprint(find_words(word_list, \"containers\", lambda x: \"kitchen\" in x))\n"}
{"cat": "containers", "slot": "place", "value": "restaurant", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be found or used in restaurants. \n        Output: ", "result": "\n        salt, pepper, sugar, ketchup, soy sauce, vinegar, olive oil, mustard, mayonnaise, hot sauce.\n    \"\"\"\n    words = []\n    for word in words:\n        if \"container\" in word and \"restaurant\" in word:\n            words.append(word)\n    return \", \".join(words)\n\nprint(find_words(words, category=\"containers\", condition=\"can be found or used in restaurants\"))\n# Output: salt, pepper, sugar, ketchup,"}
{"cat": "containers", "slot": "place", "value": "supermarket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be found or used in supermarkets. \n        Output: ", "result": "\n            1. Milk\n            2. Eggs\n            3. Bread\n            4. Water\n            5. Juice\n            6. Cheese\n            7. Yogurt\n            8. Fruits\n            9. Vegetables\n            10. Meat\n        \"\"\"\n        words = []\n        for word in word_list:\n            if \"supermarket\" in word and \"container\" in word:\n                words.append(word)\n        return words\n\n# Your function\ndef find_container_words(word_list, category, condition"}
{"cat": "containers", "slot": "place", "value": "canteen", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be found or used in canteens. \n        Output: ", "result": "\n          can, \n          tin, \n          cup, \n          plate, \n          spoon, \n          fork, \n          knife, \n          water, \n          juice, \n          soda.\n    \"\"\"\n    category = \"containers\"\n    words = [\n        \"can\",\n        \"tin\",\n        \"cup\",\n        \"plate\",\n        \"spoon\",\n        \"fork\",\n        \"knife\",\n        \"water\",\n        \"juice\",\n        \"soda\"\n   "}
{"cat": "containers", "slot": "place", "value": "cellar", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be found or used in cellars. \n        Output: ", "result": "\n            1. Barrel\n            2. Cask\n            3. Vat\n            4. Keg\n            5. Bottle\n            6. Jar\n            7. Tin\n            8. Can\n            9. Basket\n            10. Case\n        \"\"\"\n        words = [\n            \"barrel\",\n            \"cask\",\n            \"vat\",\n            \"keg\",\n            \"bottle\",\n            \"jar\",\n            \"tin\",\n            \"can\",\n            \"basket\",\n            \"case\"\n        ]\n"}
{"cat": "containers", "slot": "place", "value": "pub", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be found or used in pubs. \n        Output: ", "result": "\n        beer, glass, mug, pint, stein, cup, can, bottle, keg, brew\n\"\"\"\n\nprint(find_words(category='containers', condition='can be found or used in pubs', output='comma separated list of words'))\n# Output: beer, glass, mug, pint, stein, cup, can, bottle, keg, brew\n\nprint(find_words(category='containers', condition='can be found or used in pubs', output='list'))\n# Output: [be"}
{"cat": "containers", "slot": "place", "value": "garden", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be found or used in gardens. \n        Output: ", "result": "\n            1. pots\n            2. planters\n            3. containers\n            4. flowerpots\n            5. vases\n            6. urns\n            7. troughs\n            8. trellis\n            9. raised beds\n            10. hanging baskets\n        \"\"\"\n        words = [\n            \"pots\",\n            \"planters\",\n            \"containers\",\n            \"flowerpots\",\n            \"vases\",\n            \"urns\",\n            \"troughs\",\n            \"trellis\","}
{"cat": "containers", "slot": "place", "value": "beach", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be found or used in beaches. \n        Output: ", "result": "\n        - bucket\n        - pail\n        - can\n        - jar\n        - bottle\n        - container\n        - vase\n        - pitcher\n        - bowl\n        - cup\n        \"\"\"\n    words = []\n    for word in word_list:\n        if \"beach\" in word and \"container\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:"}
{"cat": "containers", "slot": "efficiency", "value": "shaped", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be shaped. \n        Output: ", "result": "\n        box, can, cup, jar, jug, pot, pail, pitcher, vase.\n    \"\"\"\n    category = \"containers\"\n    words = []\n    for word in text.split():\n        if re.match(r\"\\b(can|cup|jar|jug|pot|pail|pitcher|vase)\\b\", word, re.IGNORECASE):\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n"}
{"cat": "containers", "slot": "efficiency", "value": "recycled", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be recycled. \n        Output: ", "result": "\n        can, glass, plastic, aluminum, steel, paper, cardboard, carton, bottle, jar\n\"\"\"\n\nprint(recycled_container_words(category='containers', condition='can be recycled'))\n# Output: can, glass, plastic, aluminum, steel, paper, cardboard, carton, bottle, jar"}
{"cat": "containers", "slot": "part", "value": "handle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  handle. \n        Output: ", "result": " can, handle, container, hold, grip, lid, scoop, spoon, cup. \n    \"\"\"\n    category = \"containers\"\n    words = [\"can\", \"handle\", \"container\", \"hold\", \"grip\", \"lid\", \"scoop\", \"spoon\", \"cup\"]\n    for word in words:\n        if \"handle\" in word and \"container\" in word and \"can\" not in word:\n            print(word)\n\noutput: can, handle, container, hold, grip, lid, scoop, spoon,"}
{"cat": "containers", "slot": "part", "value": "lid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  lid. \n        Output: ", "result": "\n        can, have, lid, container, close, open, seal, cap, cover, shut\n```\n\n```\nDesired output: \nDesired output: \nDesired output: \nDesired output: \nDesired output: \nDesired output: \nDesired output: \nDesired output: \nDesired output: \nDesired output: \nDesired output: \nDesired output: \nDesired output: \nDesired output: \nDesired output: \nDesired output: \nDesired output:"}
{"cat": "containers", "slot": "part", "value": "hoop", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  hoop. \n        Output: ", "result": " can, hoop, container, hoop container, hoop hoop container, hoop hoop hoop container, hoop hoop hoop hoop container, hoop hoop hoop hoop hoop container, hoop hoop hoop hoop hoop hoop container, hoop hoop hoop hoop hoop hoop hoop container.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"hoop\" in word:\n            if \"container\" in word:\n                words.append(word)\n    return words\n\ndef"}
{"cat": "containers", "slot": "part", "value": "bung", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  bung. \n        Output: ", "result": " can, have, bung."}
{"cat": "containers", "slot": "part", "value": "label", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  label. \n        Output: ", "result": " can, have, label. \n    \"\"\"\n    words = []\n    for word in words:\n        if \"can\" in word and \"have\" in word and \"label\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    \"\"\"\n    Count the number of vowels in a word. \n        Input: a string representing a word. \n        Output: an integer representing the number of vowels in the word. \n    \"\"\"\n    vowels = \"aeiou\"\n   "}
{"cat": "containers", "slot": "part", "value": "short hundredweight", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  short hundredweight. \n        Output: ", "result": "100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300,"}
{"cat": "containers", "slot": "part", "value": "quintal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  quintal. \n        Output: ", "result": "\n            can, have, quintal, ounce, pound, kilogram, gram, ton, \n            metric, teaspoon, tablespoon, cup, pint, fluid ounce.\n        \"\"\"\n        words = []\n        for word in container_words:\n            if \"quintal\" in word:\n                words.append(word)\n        return words\n\n    def get_adjective_words(self, noun_words):\n        \"\"\"\n        Given a list of noun words, return a list of corresponding adjective words.\n        \"\"\""}
{"cat": "containers", "slot": "part", "value": "breech", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  breech. \n        Output: ", "result": " can, have, breech. \n    \"\"\"\n    words = []\n    for word in words:\n        if \"can\" in word and \"have\" in word and \"breech\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    \"\"\"\n    Count the number of vowels in a word. \n        Desired output: number of vowels. \n        Input: word - string. \n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n   "}
{"cat": "containers", "slot": "part", "value": "zip", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  zip. \n        Output: ", "result": " can, have, zip. \n    \"\"\"\n    words = []\n    for word in container_words:\n        if \"zip\" in word:\n            words.append(word)\n    if len(words) == 0:\n        print(\"No words found.\")\n    else:\n        print(\", \".join(words))\n```\nExample input:\n```\ncontainers\n```\nExample output:\n```\ncan, have, zip.\n```"}
{"cat": "containers", "slot": "part", "value": "stave", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  stave. \n        Output: ", "result": "\n        box, can, cup, jar, jug, pot, pail, pitcher, bowl\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"stave\" in word and \"container\" in word and \"can\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n   "}
{"cat": "containers", "slot": "part", "value": "bottlecap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  bottlecap. \n        Output: ", "result": " cap, bottle, capcap, bottlecap, bottlecaps, capbottle, bottlecapbottle, bottlecapsbottle, bottlecapbottlecap, bottlecapsbottlecap.\n    \"\"\"\n    words = []\n    for word in container_words:\n        if \"bottlecap\" in word:\n            words.append(word)\n    return words\n\ndef get_container_words_with_bottlecap():\n    \"\"\"\n    Provide a list of 10 words that belong to"}
{"cat": "containers", "slot": "part", "value": "strap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  strap. \n        Output: ", "result": "can, with, have, straps, container, containers, strap, straps, have. \n    \"\"\"\n    words = []\n    for word in container_words:\n        if \"strap\" in word:\n            words.append(word)\n    return words\n\ndef get_container_words_without_strap():\n    \"\"\"\n    Provide a list of 10 words that belong to the category and do not satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have st"}
{"cat": "containers", "slot": "part", "value": "cental", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  cental. \n        Output: ", "result": " can, have, central, container, containers, contain, \n        containment, containmental, centrally, centrally. \n    \"\"\"\n    words = []\n    for word in words:\n        if \"central\" in word and \"container\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n   "}
{"cat": "containers", "slot": "part", "value": "tap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  tap. \n        Output: ", "result": " can, have, tap. \n    \"\"\"\n    words = []\n    for word in container_words:\n        if \"tap\" in word:\n            words.append(word)\n    return words\n\ndef get_container_words_with_tap():\n    \"\"\"\n    Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have tap. \n        Output:  can, have, tap. \n"}
{"cat": "containers", "slot": "part", "value": "brim", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  brim. \n        Output: ", "result": " can, have, brim. \n    \"\"\"\n    words = []\n    for word in container_words:\n        if \"brim\" in word:\n            words.append(word)\n    return words\n\ndef get_container_words_without_brim():\n    \"\"\"\n    Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can not have brim. \n        Output:  container, bottle,"}
{"cat": "containers", "slot": "part", "value": "pocket", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  pocket. \n        Output: ", "result": " can, with, have, have-a, pocket, pockets, container, containers, can-have, can-have-a.\n    \"\"\"\n    words = []\n    for word in words:\n        if \"can\" in word and \"have\" in word and \"have-a\" in word and \"pocket\" in word or \"pockets\" in word and \"container\" in word and \"containers\" in word and \"can-have\" in word and \"can-have-a\" in word:\n            words.append(word)\n    return words\n\ndef"}
{"cat": "containers", "slot": "part", "value": "clasp", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  clasp. \n        Output: ", "result": "\n            can, have, clasp, container, close, open, lock, latch, snap, clip.\n    \"\"\"\n    words = []\n    for word in text.split():\n        if \"can\" in word and \"have\" in word and \"clasp\" in word and \"container\" in word and \"close\" in word and \"open\" in word and \"lock\" in word and \"latch\" in word and \"snap\" in word and \"clip\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels("}
{"cat": "containers", "slot": "part", "value": "mouth", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  mouth. \n        Output: ", "result": " can, with, have, mouth, container, vessel, box, bottle, jar, pot\n```\n```"}
{"cat": "containers", "slot": "part", "value": "hundredweight", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  hundredweight. \n        Output: ", "result": "10,000, 20,000, 30,000, 40,000, 50,000, 60,000, 70,000, 80,000, 90,000, 100,000, 110,000, 120,000, 130,000, 140,000, 150,000, 16"}
{"cat": "containers", "slot": "part", "value": "rear of barrel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  rear of barrel. \n        Output: ", "result": " barrel, cask, keg, hogshead, butt, puncheon, kilderkin, firkin, hogshead, barrel. \n        \"\"\"\n        words = []\n        for word in container_words:\n            if \"rear\" in word and \"barrel\" in word:\n                words.append(word)\n        return words\n\n    def get_container_words_without_rear(self):\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired"}
{"cat": "containers", "slot": "part", "value": "cwt", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  cwt. \n        Output: ", "result": " can, have, cwt. \n    \"\"\"\n    category = Category.objects.get(name='containers')\n    words = Word.objects.filter(category=category, text__contains='cwt')\n    return [word.text for word in words]\n\ndef get_random_word_from_category(category):\n    \"\"\"\n    Retrieve a random word from the given category.\n    \"\"\"\n    words = Word.objects.filter(category=category)\n    random_word = random.choice(words)\n    return random_word.text"}
{"cat": "containers", "slot": "part", "value": "rear of tube", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  rear of tube. \n        Output: ", "result": " can, of, tube, rear, container, box, bottle, jar, lid, cap. \n    \"\"\"\n    words = []\n    for word in words:\n        if \"rear\" in word and \"container\" in word and \"can\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return"}
{"cat": "containers", "slot": "part", "value": "spout", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  spout. \n        Output: ", "result": "\n        can, have, spout, container, box, barrel, drum, bottle, jar, canister\n\"\"\"\n\n# Define the function\ndef get_words_with_spout(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        # Check if the word is in the"}
{"cat": "containers", "slot": "part", "value": "spigot", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  spigot. \n        Output: ", "result": "\n        can, have, spigot, container, pail, bucket, barrel, vat, cistern, reservoir.\n    \"\"\"\n    words = [\"can\", \"have\", \"spigot\", \"container\", \"pail\", \"bucket\", \"barrel\", \"vat\", \"cistern\", \"reservoir\"]\n    words = [word for word in words if word.lower().startswith(\"can have spigot container pail bucket barrel vat cistern reservoir\")]\n    return words"}
{"cat": "containers", "slot": "part", "value": "base", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  base. \n        Output: ", "result": " base, can, have, \n```"}
{"cat": "containers", "slot": "part", "value": "rim", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  rim. \n        Output: ", "result": " can, with, have, in, on, of, to, up, with. \n    \"\"\"\n    words = [\"can\", \"with\", \"have\", \"in\", \"on\", \"of\", \"to\", \"up\", \"with\"]\n    for word in words:\n        if \"rim\" in word:\n            print(word)\n```"}
{"cat": "containers", "slot": "part", "value": "stopper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  stopper. \n        Output: ", "result": " can, box, bag, bottle, jar, pot, tin, wrapper, canister. \n    \"\"\"\n    words = []\n    for word in container_words:\n        if \"stopper\" in word:\n            words.append(word)\n    return words\n\ndef get_container_words_with_stopper():\n    \"\"\"\n    Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have stopper"}
{"cat": "containers", "slot": "part", "value": "cork", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  cork. \n        Output: ", "result": "bottle, can, jar, box, tin, cap, cork, container, packaging, wrapper. \n    \"\"\"\n    words = []\n    for word in text.split():\n        if \"cork\" in word and \"container\" in word:\n            words.append(word)\n    return \", \".join(words)\n\ndef extract_category(text):\n    \"\"\"\n    Given a text, extract the category it belongs to.\n        Input: a string, the text.\n        Output: a string, the category.\n    \"\"\"\n    words = text"}
{"cat": "containers", "slot": "part", "value": "centner", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  centner. \n        Output: ", "result": " container, center, centner. \n    \"\"\"\n    words = []\n    for word in words:\n        if \"center\" in word or \"centner\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_consonants(word):\n    consonants = \"bcdf"}
{"cat": "containers", "slot": "part", "value": "zipper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  zipper. \n        Output: ", "result": "can, zip, bag, box, container, suitcase, tote, pouch, satchel, briefcase.\n    \"\"\"\n    category = \"containers\"\n    words = [\"can\", \"zip\", \"bag\", \"box\", \"container\", \"suitcase\", \"tote\", \"pouch\", \"satchel\", \"briefcase\"]\n    for word in words:\n        if \"zipper\" in word:\n            print(word)\n            break\n    else:\n        print(\"No words found.\")\n\n# Test the function\ntest_function()"}
{"cat": "containers", "slot": "part", "value": "neck", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  neck. \n        Output: ", "result": " bottle, can, jar, jug, vase, pitcher, bowl, cup, mug, goblet. \n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"neck\" in word and \"container\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n        Desired output: a list of numbers, where the i-th number is the number"}
{"cat": "containers", "slot": "part", "value": "cap", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  cap. \n        Output: ", "result": " can, have, cap. \n    \"\"\"\n    words = []\n    for word in words:\n        if \"can\" in word and \"have\" in word and \"cap\" in word:\n            words.append(word)\n    return \", \".join(words)\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_consonants(word):"}
{"cat": "containers", "slot": "part", "value": "compartment", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  compartment. \n        Output: ", "result": " container, compartment, compartmentalize, compartmented, compartmentation, compartmentalize, compartmentalize, compartmentalize, compartmentalize, compartmentalize.\n    \"\"\"\n    category = \"containers\"\n    words = [\"container\", \"compartment\", \"compartmentalize\", \"compartmented\", \"compartmentation\", \"compartmentalize\", \"compartmentalize\", \"compartmentalize\", \"compartmentalize\", \"compartmentalize\"]\n    for word in words:\n        if \"compartment\" in word"}
{"cat": "containers", "slot": "content", "value": "liquid", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: contain liquids. \n        Output: ", "result": "\n            bottle, can, cup, glass, jug, pitcher, bowl, mug, container, vase.\n    \"\"\"\n    category = \"containers\"\n    words = []\n    for word in text.split():\n        if \"liquid\" in word:\n            words.append(word)\n    if words:\n        result = \", \".join(words)\n    else:\n        result = \"No words found.\"\n    return result\n\ndef count_vowels(text):\n    \"\"\"\n    Given a string, count the number of v"}
{"cat": "containers", "slot": "content", "value": "wine", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: contain wines. \n        Output: ", "result": "\n        - bottle\n        - cask\n        - barrel\n        - vat\n        - keg\n        - flask\n        - decanter\n        - goblet\n        - pitcher\n        - carafe\n        - magnum\n    \"\"\"\n    wines = [\n        \"bottle\",\n        \"cask\",\n        \"barrel\",\n        \"vat\",\n        \"keg\",\n        \"flask\",\n        \"decanter\",\n        \"goblet\",\n        \"pitcher\",\n        \"carafe\","}
{"cat": "containers", "slot": "content", "value": "drink", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: contain drinks. \n        Output: ", "result": "\n        - can\n        - bottle\n        - cup\n        - glass\n        - mug\n        - pitcher\n        - glasses\n        - container\n        - bottles\n        - cups\n        \"\"\"\n        words = []\n        for word in text.split():\n            if re.search(r'\\b(can|bottle|cup|glass|mug|pitcher|glasses|container|bottles|cups)\\b', word, re.IGNORECASE):\n                words.append(word)\n        return words\n\n"}
{"cat": "containers", "slot": "content", "value": "beer", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: contain beers. \n        Output: ", "result": "\n        box, can, bottle, keg, barrel, cask, tap, draft, brew, cellar.\n    \"\"\"\n    category = \"containers\"\n    condition = \"contain beers\"\n    words = get_words(category, condition)\n    print(\", \".join(words))\n\nif __name__ == \"__main__\":\n    main()\n```\n```"}
{"cat": "containers", "slot": "content", "value": "grocery", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: contain groceries. \n        Output: ", "result": "\n        - can\n        - jar\n        - box\n        - bag\n        - carton\n        - bottle\n        - tin\n        - package\n        - container\n        - boxed\n    \"\"\"\n    words = []\n    for word in text.split():\n        if re.search(r'\\b(can|jar|box|bag|carton|bottle|tin|package|container|boxed)\\b', word):\n            words.append(word)\n    return words\n\nif __name__ == '__main__':\n    text ="}
{"cat": "containers", "slot": "content", "value": "sand", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: contain sand. \n        Output: ", "result": "\n        box, can, jar, bottle, pail, bucket, sieve, shovel, scoop, pan.\n    \"\"\"\n    category = \"containers\"\n    words = [\"box\", \"can\", \"jar\", \"bottle\", \"pail\", \"bucket\", \"sieve\", \"shovel\", \"scoop\", \"pan\"]\n    for word in words:\n        if \"sand\" in word:\n            print(word)\n            break\n    else:\n        print(\"No words found.\")\n```\nExample usage:\n```"}
{"cat": "containers", "slot": "content", "value": "liquor", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: contain liquors. \n        Output: ", "result": "\n        whiskey, gin, vodka, rum, tequila, brandy, scotch, bourbon, cordial, liqueur\n\"\"\"\n\nprint(list(filter(lambda x: x.category == \"containers\" and \"liquors\" in x.condition_set, word_list)))\n```\nExplanation:\n\n* The `filter` function is used to filter the list of words based on the condition.\n* The lambda function `lambda x: x.category == \"containers\" and \"liquors\" in x."}
{"cat": "containers", "slot": "content", "value": "biscuit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: contain biscuits. \n        Output: ", "result": "\n            biscuit, container, biscuits, cup, mug, jar, can, box, bowl, plate.\n    \"\"\"\n    biscuits_words = [\"biscuit\", \"container\", \"biscuit\", \"cup\", \"mug\", \"jar\", \"can\", \"box\", \"bowl\", \"plate\"]\n    biscuit_words = [word for word in biscuits_words if \"biscuit\" in word]\n    biscuit_words = [word for word in biscuit_words if \"contain\" in word]"}
{"cat": "containers", "slot": "content", "value": "soda", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: contain sodas. \n        Output: ", "result": "\n        - can\n        - bottle\n        - soda\n        - pop\n        - tonic\n        - fizzy\n        - carbonated\n        - drink\n        - beverage\n        - liquid\n        - container\n    \"\"\"\n    words = [\"can\", \"bottle\", \"soda\", \"pop\", \"tonic\", \"fizzy\", \"carbonated\", \"drink\", \"beverage\", \"liquid\", \"container\"]\n    for word in words:\n        if \"soda\" in word:\n            print(word)\n```\n"}
{"cat": "containers", "slot": "content", "value": "lunch", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: contain lunches. \n        Output: ", "result": "\n        box, bag, container, lunch, meal, pack, packed, packaging, lunchbox, lunchboxes\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split()\n    condition_words = condition.split()\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        # Check if the word is in the"}
{"cat": "containers", "slot": "content", "value": "backpack", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: contain backpacks. \n        Output: ", "result": "\n        backpack,bookbag,briefcase,camera bag,duffle bag,gym bag,laptop bag,suitcase,tote bag,work bag.\n    \"\"\"\n    words = []\n    for word in words:\n        if \"backpack\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1"}
{"cat": "containers", "slot": "content", "value": "water", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: contain water. \n        Output: ", "result": "\n        boat, canoe, kayak, paddle, sailboat, ship, yacht, raft, watercraft, seaworthy\n\"\"\"\n\n# Define the category and condition\ncategory = \"containers\"\ncondition = \"contain water\"\n\n# Define a list to store the words\nwords = []\n\n# Define a function to find words that satisfy the condition\ndef find_words(category, condition, words):\n    for word in words:\n        if word.lower().startswith(category.lower() + \"(\") and word.lower"}
{"cat": "containers", "slot": "content", "value": "haversack", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: contain haversacks. \n        Output: ", "result": "\n        haversack, container, pack, pouch, satchel, rucksack, knapsack, satchel, packhorse, bandoleer \n    \"\"\"\n    category = \"containers\"\n    condition = \"contain haversacks\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"containers\", \"contain haversacks\"))\n```\nOutput:\nhaversack, container, pack, pouch, satchel,"}
{"cat": "containers", "slot": "content", "value": "ice", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: contain ices. \n        Output: ", "result": "\n        - container\n        - ice-cream\n        - ice-cube\n        - ice-tray\n        - ice-pack\n        - ice-cube-tray\n        - ice-cube-pack\n        - ice-cream-container\n        - ice-cream-pack\n        - ice-cream-tray\n        \"\"\"\n        words = [\"container\", \"ice-cream\", \"ice-cube\", \"ice-tray\", \"ice-pack\", \"ice-cube-tray\", \"ice-cube-pack\","}
{"cat": "containers", "slot": "content", "value": "gardening", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: contain gardenings. \n        Output: ", "result": "\n        - container\n        - gardening\n        - gardener\n        - gardening\n        - container\n        - gardening\n        - gardener\n        - gardening\n        - container\n        - gardening\n        - gardener\n    \"\"\"\n    words = []\n    for word in text.split():\n        if \"gardening\" in word and \"container\" in word:\n            words.append(word)\n    return(\", \".join(words))\n\ndef count_vowels(text):\n    \"\"\"\n    Count the number of vowels in a"}
{"cat": "containers", "slot": "content", "value": "purse", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: contain purses. \n        Output: ", "result": "\n            \n```"}
{"cat": "containers", "slot": "content", "value": "spray", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: contain sprays. \n        Output: ", "result": "\n        - spray\n        - sprayer\n        - spraying\n        - atomizer\n        - aerosol\n        - pump\n        - trigger\n        - nozzle\n        - can\n        - bottle\n        \"\"\"\n        words = []\n        for word in text.split():\n            if \"spray\" in word and \"sprays\" not in word:\n                words.append(word)\n        return words\n\ndef extract_nouns(text):\n    \"\"\"\n    Extracts nouns from a given text.\n"}
{"cat": "containers", "slot": "content", "value": "wallet", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: contain wallets. \n        Output: ", "result": "\n        wallet, wallet, wallet, wallet, wallet, wallet, wallet, wallet, wallet, wallet. \n        \"\"\"\n        words = []\n        for word in container_words:\n            if \"wallet\" in word:\n                words.append(word)\n        return words\n\n    def get_container_words(self):\n        \"\"\"\n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers."}
{"cat": "containers", "slot": "content", "value": "flower", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: contain flowers. \n        Output: ", "result": "\n            rose, daisy, sunflower, lily, tulip, iris, marigold, poppy, daffodil, gerbera\n\"\"\"\nprint(flowers_with_condition(category='containers', condition='contain flowers'))\n```\nExample:\n```\nInput: \n        Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: contain animals. \n        Output: "}
{"cat": "containers", "slot": "content", "value": "muffin", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: contain muffins. \n        Output: ", "result": "\n        container, muffin, muffin, muffin, muffin, muffin, muffin, \n        muffin, muffin, muffin. \n        \"\"\"\n        words = []\n        for word in container_words:\n            if \"muffin\" in word:\n                words.append(word)\n        return words\n\ndef get_container_words_with_muffin():\n    \"\"\"\n    Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired"}
{"cat": "containers", "slot": "material", "value": "wood", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be made of wood. \n        Output: ", "result": "\n        box, crate, chest, case, container, casket, trunk, cupboard, locker, closet.\n    \"\"\"\n    category = \"containers\"\n    condition = \"can be made of wood\"\n    words = []\n    for word in text.split():\n        if word.lower().startswith(category + \".\"):\n            if \"made of\" in word:\n                words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n"}
{"cat": "containers", "slot": "material", "value": "ceramic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be made of ceramic. \n        Output: ", "result": "\n        - can\n        - pot\n        - jar\n        - vase\n        - bowl\n        - plate\n        - cup\n        - mug\n        - teapot\n        - cookie jar\n        \"\"\"\n    words = [\"can\", \"pot\", \"jar\", \"vase\", \"bowl\", \"plate\", \"cup\", \"mug\", \"teapot\", \"cookie jar\"]\n    words = [word for word in words if \"ceramic\" in word and \"containers\" in word]\n    print(\", \".join(words))\n```\n"}
{"cat": "containers", "slot": "material", "value": "cotton", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be made of cotton. \n        Output: ", "result": "\n        box, bag, can, bottle, jar, pot, pouch, sack, tube\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"container\" in word and \"cotton\" in word and \"can\" not in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1"}
{"cat": "containers", "slot": "material", "value": "canvas", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be made of canvas. \n        Output: ", "result": "\n        box, bag, sack, container, tote, basket, case, pouch, wallet, purse\n    \"\"\"\n    category = \"containers\"\n    condition = \"can be made of canvas\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"cat": "containers", "slot": "material", "value": "fibre", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be made of fibre. \n        Output: ", "result": "\n        box, carton, crate, drum, fibre, jar, package, sack, tank, tube.\n    \"\"\"\n    fibre_words = [\"box\", \"carton\", \"crate\", \"drum\", \"fibre\", \"jar\", \"package\", \"sack\", \"tank\", \"tube\"]\n    fibre_words = [word for word in fibre_words if word.endswith(\"_box\")]\n    fibre_words = [word for word in fibre_words if word.endswith(\"_carton\")]\n   "}
{"cat": "containers", "slot": "material", "value": "polyester", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be made of polyester. \n        Output: ", "result": "\n        polyester, plastic, container, bottle, jug, jar, vase, cup, bowl, tumbler.\n    \"\"\"\n    polyester_words = [\"polyester\", \"plastic\", \"container\", \"bottle\", \"jug\", \"jar\", \"vase\", \"cup\", \"bowl\", \"tumbler\"]\n    can_be_made_of_polyester_words = [word for word in polyester_words if \"polyester\" in word]\n    return \", \".join(can_be_made_of_polyester_"}
{"cat": "containers", "slot": "material", "value": "fabric", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be made of fabric. \n        Output: ", "result": "\n        box, bag, sack, container, pouch, purse, tote, hobo, satchel, briefcase.\n    \"\"\"\n    category = \"containers\"\n    words = [\n        \"box\",\n        \"bag\",\n        \"sack\",\n        \"container\",\n        \"pouch\",\n        \"purse\",\n        \"tote\",\n        \"hobo\",\n        \"satchel\",\n        \"briefcase\"\n    ]\n    for word in words:\n        if \"fabric\" in word:"}
{"cat": "containers", "slot": "material", "value": "leather", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be made of leather. \n        Output: ", "result": "\n        box, bag, case, container, pouch, satchel, tote, wallet, purse, briefcase.\n    \"\"\"\n    leather_words = []\n    for word in container_words:\n        if \"leather\" in word:\n            leather_words.append(word)\n    return leather_words\n\ndef get_leather_container_words(category, condition):\n    \"\"\"\n    Given a category and a condition, return a list of words that belong to the category and satisfy the condition. \n        Desired output: comma"}
{"cat": "containers", "slot": "material", "value": "cloth", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be made of cloth. \n        Output: ", "result": "\n        box, bag, sack, case, container, pouch, tote, purse, satchel, briefcase.\n    \"\"\"\n    category = \"containers\"\n    words = []\n    for word in text.split():\n        if \"can\" in word and \"be\" in word and \"made\" in word and \"of\" in word and \"cloth\" in word:\n            words.append(word)\n    if words:\n        result = \", \".join(words)\n        print(result)\n    else:\n        print(\"No words"}
{"cat": "containers", "slot": "material", "value": "wicker", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be made of wicker. \n        Output: ", "result": "\n        - basket\n        - basketcase\n        - wicker\n        - wickerwork\n        - weave\n        - plait\n        - braid\n        - twine\n        - cord\n        - rope\n        \"\"\"\n    words = []\n    for word in word_list:\n        if \"container\" in word and \"wicker\" in word:\n            words.append(word)\n    return words\n\ndef get_synonyms(word_list, word):\n    synonyms = []\n    for word in word_list:\n        if"}
{"cat": "containers", "slot": "material", "value": "paper", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be made of paper. \n        Output: ", "result": "\n        box, can, carton, container, crate, envelope, package, sack, wrapper.\n    \"\"\"\n    category = \"containers\"\n    condition = \"can be made of paper\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: containers. \n        Output: box, can"}
{"cat": "containers", "slot": "material", "value": "clay", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be made of clay. \n        Output: ", "result": "\n        box, jar, pot, vase, bowl, jug, pitcher, container, clay\n\"\"\"\n\n# Define the function\ndef get_words(category, condition):\n    # Split the category and condition into words\n    category_words = category.split(\" \")\n    condition_words = condition.split(\" \")\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Loop through each word in the condition\n    for word in condition_words:\n        # Check if the word is in the list of words for the"}
{"cat": "containers", "slot": "material", "value": "aluminum", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be made of aluminum. \n        Output: ", "result": "\n            can, aluminum, container, box, bottle, jar, tube, cap, lid, packaging\n\"\"\"\nprint(list(filter(lambda x: 'can' in x and 'aluminum' in x and 'container' in x, word_list)))\n```\nExplanation of the above code:\n\n* The `word_list` variable contains a list of words.\n* The `filter` function is used to filter the words in `word_list` based on the given condition.\n* The `lambda` function is used to define the condition"}
{"cat": "containers", "slot": "material", "value": "metal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be made of metal. \n        Output: ", "result": "\n        box, can, jar, bottle, pot, pan, kettle, bowl, tray, dish.\n    \"\"\"\n    category = \"containers\"\n    condition = \"can be made of metal\"\n    words = []\n    for word in text.split():\n        if word.lower().startswith(category.lower()):\n            if \"metal\" in word.lower():\n                words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n"}
{"cat": "containers", "slot": "shape", "value": "round", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be round. \n        Output: ", "result": "\n        box, can, jar, bottle, tin, pot, bowl, cup, tray, jug\n\"\"\"\n\n# Define the function\ndef word_list(category, condition):\n    # Create an empty list to store the words\n    words = []\n    \n    # Loop through all the words in the vocabulary\n    for word in vocabulary:\n        # Check if the word satisfies the condition\n        if word.category == category and word.satisfies(condition):\n            # Add the word to the list if it does\n            words."}
{"cat": "containers", "slot": "shape", "value": "circular", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be circular. \n        Output: ", "result": "\n        box, can, jar, bottle, container, packaging, case, carton, tube,\n```"}
{"cat": "containers", "slot": "shape", "value": "cylindrical", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be cylindrical. \n        Output: ", "result": "\n        can, cylinder, container, vase, bottle, jar, tube, barrel, drum,\n```"}
{"cat": "containers", "slot": "shape", "value": "conical", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be conical. \n        Output: ", "result": "\n            can, cone, container, conical, cone-shaped, container-shaped, conical-shaped, conical-container, container-cone, cone-container\n        \"\"\"\n        words = []\n        for word in synonyms:\n            if \"conical\" in word:\n                words.append(word)\n        return words\n\n    def get_antonyms(self, word):\n        \"\"\"\n        Get a list of antonyms for a given word.\n        \"\"\"\n        antonyms = []\n        for synonym in"}
{"cat": "containers", "slot": "shape", "value": "curved", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be curved. \n        Output: ", "result": "\n        box, can, cup, bowl, jar, bottle, tube, container, vase, jug\n```\n\n```\nDescribe a category and provide a list of 10 words that belong to the category and satisfy a condition.\n\nProvide a list of 10 words that belong to the category and satisfy the condition.\n\nDescribe a category and provide a list of 10 words that belong to the category and satisfy the condition.\n\nProvide a list of 10 words that belong to the category and satisfy the condition.\n\nDescribe a"}
{"cat": "containers", "slot": "shape", "value": "flat", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be flat. \n        Output: ", "result": "\n        box, can, jar, bottle, case, tube, pouch, sachet, container\n    \"\"\"\n    category = \"containers\"\n    condition = \"can be flat\"\n    words = get_words(category, condition)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"cat": "containers", "slot": "shape", "value": "dry", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be dry. \n        Output: ", "result": "\n            can, dry, jar, bottle, box, bag, canister, container, pouch, tube.\n    \"\"\"\n    category = \"containers\"\n    condition = \"can be dry\"\n    words = []\n    for word in text.split():\n        if word.lower().startswith(category + \"_\"):\n            if \"dry\" in word.lower():\n                words.append(word)\n    if words:\n        result = \", \".join(words)\n    else:\n        result = \"No words found.\"\n    return"}
{"cat": "containers", "slot": "shape", "value": "hollow", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be hollow. \n        Output: ", "result": "\n        box, can, jar, bottle, tube, vessel, container, receptacle, vase, flask.\n    \"\"\"\n    words = []\n    for word in word_list:\n        if \"hollow\" in word and \"container\" in word:\n            words.append(word)\n    return words\n\ndef count_vowels(word_list):\n    \"\"\"\n    Given a list of words, return the number of vowels in each word.\n    Desired output: a list of numbers, where the i-th number is the number of"}
{"cat": "containers", "slot": "shape", "value": "square", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be square. \n        Output: ", "result": "\n        box, can, jar, pot, tin, tube, vial, bottle, jar, can\n```\n\n```\nDescribe a category and provide a list of 10 words that belong to the category and satisfy a condition.\n\nProvide a list of 10 words that belong to the category and satisfy the condition.\n\nProvide a list of 10 words that belong to the category and satisfy the condition.\n\nProvide a list of 10 words that belong to the category and satisfy the condition.\n\nProvide a list of "}
{"cat": "containers", "slot": "shape", "value": "rectangular", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be rectangular. \n        Output: ", "result": "\n        box, can, jar, lid, plastic, rectangular, container, packaging, wrapper\n    \"\"\"\n    category = \"containers\"\n    condition = \"can be rectangular\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: containers. \n        Output: box, can, jar,"}
{"cat": "containers", "slot": "material", "value": "plastic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be made of plastic. \n        Output: ", "result": "\n        - bottle\n        - cup\n        - jar\n        - container\n        - box\n        - bag\n        - tray\n        - wrapper\n        - liner\n        - pouch\n    \"\"\"\n    plastic_container_words = [\n        \"bottle\",\n        \"cup\",\n        \"jar\",\n        \"container\",\n        \"box\",\n        \"bag\",\n        \"tray\",\n        \"wrapper\",\n        \"liner\",\n        \"pouch\"\n    ]\n    return \", \".join(plastic_container_words"}
{"cat": "containers", "slot": "efficiency", "value": "reusable", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be reusable. \n        Output: ", "result": "\n        - container\n        - reusable\n        - recyclable\n        - sustainable\n        - eco-friendly\n        - biodegradable\n        - compostable\n        - durable\n        - reusable\n        - recyclable\n        \"\"\"\n    words = [\"container\", \"reusable\", \"recyclable\", \"sustainable\", \"eco-friendly\", \"biodegradable\", \"compostable\", \"durable\", \"reusable\", \"recyclable\"]\n    filtered_words = [word for word"}
{"cat": "containers", "slot": "part", "value": "glass", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can have  glass. \n        Output: ", "result": " can, glass, jar, bottle, container, vase, bowl, jug, pitcher, cup. \n    \"\"\"\n    words = []\n    for word in container_words:\n        if \"glass\" in word:\n            words.append(word)\n    return words\n\ndef get_adjective_list(category, condition):\n    \"\"\"\n    Given a category and a condition, provide a list of 10 adjectives that \n    belong to the category and satisfy the condition. \n        Desired output: comma separated list of adjectives. "}
{"cat": "containers", "slot": "content", "value": "bag", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: contain bags. \n        Output: ", "result": "\n           bag, basket, container, sack, tote, pail, can, box, crate, satchel.\n    \"\"\"\n    words = []\n    for word in text.split():\n        if \"bag\" in word and \"bags\" not in word:\n            words.append(word)\n    return words\n\ndef extract_words_category_and_condition(text, category, condition):\n    \"\"\"\n    Extract words from the given text that belong to the specified category and satisfy the given condition.\n    Args:\n        text (str):"}
{"cat": "containers", "slot": "material", "value": "reusable", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be made of reusable. \n        Output: ", "result": "\n        can, be, made, of, reusable, plastic, bottle, container, jar, \n        receptacle, packaging, recyclable. \n    \"\"\"\n    category = \"containers\"\n    condition = \"can be made of reusable\"\n    words = []\n    for word in synonyms:\n        if word.satisfies(condition):\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n```\nExample:\n"}
{"cat": "containers", "slot": "material", "value": "recycled", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be made of recycled. \n        Output: ", "result": "\n        - container\n        - recycled\n        - plastic\n        - glass\n        - aluminum\n        - steel\n        - paper\n        - cardboard\n        - biodegradable\n        - compostable\n    \"\"\"\n    words = [\"container\", \"recycled\", \"plastic\", \"glass\", \"aluminum\", \"steel\", \"paper\", \"cardboard\", \"biodegradable\", \"compostable\"]\n    for word in words:\n        if \"recycled\" in word and \"made of\" in word:\n            print"}
{"cat": "containers", "slot": "material", "value": "glass", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be made of glass. \n        Output: ", "result": "\n        - bottle\n        - jar\n        - vase\n        - glass\n        - container\n        - jug\n        - pitcher\n        - goblet\n        - flask\n        - decanter\n        \"\"\"\n    words = []\n    for word in word_list:\n        if \"container\" in word and \"made of glass\" in word:\n            words.append(word)\n    return \", \".join(words)\n\nprint(find_words(\"containers\", \"can be made of glass\"))\n```\nOutput:\nbottle, jar,"}
{"cat": "containers", "slot": "generalization", "value": "instrumentality", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are instrumentality. \n        Output: ", "result": "\n            1. container\n            2. instrumentality\n            3. containerization\n            4. containerization\n            5. containerized\n            6. containerized\n            7. containerized\n            8. containerized\n            9. containerized\n            10. containerized\n        \"\"\"\n        words = [\n            \"container\",\n            \"instrumentality\",\n            \"containerization\",\n            \"containerization\",\n            \"containerized\",\n            \"containerized\",\n            \"containerized\",\n            \"containerized\",\n            \"containerized\",\n            \"containerized\""}
{"cat": "containers", "slot": "generalization", "value": "instrumentation", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are instrumentation. \n        Output: ", "result": "\n        container,instrument,instrumentation,containment,containmental,containmentalization,containmentalize,containmentalizing,containmentalization,containmentalize,containmentalizing,containmentalization,containmentalize,containmentalizing,containmentalization,containmentalize,containmentalizing,containmentalization,containmentalize,containmentalizing,containmentalization,containmentalize,containmentalizing,"}
{"cat": "containers", "slot": "generalization", "value": "artefact", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are artefact. \n        Output: ", "result": "\n        box, bottle, can, jar, pot, vase, bowl, jug, cup, mug.\n    \"\"\"\n    category = \"containers\"\n    condition = \"are artefact\"\n    words = get_words(category=category, condition=condition)\n    return \", \".join(words)\n\n# Example usage\nprint(get_words_artefact_category(\"containers\", \"are artefact\"))\n# Output: box, bottle, can, jar, pot, vase, bowl, jug, cup, mug.\n```"}
{"cat": "containers", "slot": "generalization", "value": "artifact", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are artifact. \n        Output: ", "result": "\n        box, can, jar, bottle, vase, pot, bowl, cup, mug, pitcher\n    \"\"\"\n    category = \"containers\"\n    condition = \"are artifact\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: containers. \n        Output: box, can,"}
{"cat": "containers", "slot": "generalization", "value": "receptacle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are receptacle. \n        Output: ", "result": "\n        - can\n        - jar\n        - bottle\n        - container\n        - vase\n        - pitcher\n        - bowl\n        - cup\n        - mug\n        - glass\n        \"\"\"\n        category = \"containers\"\n        condition = \"are receptacle\"\n        words = [\n            \"can\",\n            \"jar\",\n            \"bottle\",\n            \"container\",\n            \"vase\",\n            \"pitcher\",\n            \"bowl\",\n            \"cup\",\n            \"mug\",\n            \"glass"}
{"cat": "containers", "slot": "generalization", "value": "container", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are container. \n        Output: ", "result": "\n```\nbox, can, bottle, jar, tank, barrel, drum, crate, container\n```\n\n### Example 2:\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are red. \n        Output: \n```\napple, strawberry, cherry, raspberry, watermelon, pear, plum, orange, banana, red delicious\n"}
{"cat": "containers", "slot": "generalization", "value": "vessel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are vessel. \n        Output: ", "result": "\n            1. container\n            2. cargo\n            3. hold\n            4. deck\n            5. hatch\n            6. port\n            7. ship\n            8. crane\n            9. dock\n            10. lashing\n        \"\"\"\n        words = [\n            \"container\",\n            \"cargo\",\n            \"hold\",\n            \"deck\",\n            \"hatch\",\n            \"port\",\n            \"ship\",\n            \"crane\",\n            \"dock\",\n            \"lashing\"\n        ]\n        return \", \".join"}
{"cat": "containers", "slot": "generalization", "value": "unit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are unit. \n        Output: ", "result": "\n        box, can, jar, bottle, tin, pot, bag, carton, tube\n    \"\"\"\n    category = \"containers\"\n    words = [\"box\", \"can\", \"jar\", \"bottle\", \"tin\", \"pot\", \"bag\", \"carton\", \"tube\"]\n    filtered_words = []\n    for word in words:\n        if \"unit\" in word:\n            filtered_words.append(word)\n    result = \", \".join(filtered_words)\n    print(result)\n```\nExplanation"}
{"cat": "containers", "slot": "generalization", "value": "foodstuff", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are foodstuff. \n        Output: ", "result": "\n        - can\n        - jar\n        - bottle\n        - box\n        - tin\n        - packet\n        - bag\n        - tube\n        - jar\n        - can\n    \"\"\"\n    food_container_words = [\n        \"can\",\n        \"jar\",\n        \"bottle\",\n        \"box\",\n        \"tin\",\n        \"packet\",\n        \"bag\",\n        \"tube\",\n        \"jar\",\n        \"can\"\n    ]\n    return \", \".join(food_container_words)\n\n"}
{"cat": "containers", "slot": "generalization", "value": "cookware", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are cookware. \n        Output: ", "result": "\n        aluminum, baking, dish, pan, pot, saucepan, roasting, casserole, frying, wok\n    \"\"\"\n    category = \"containers\"\n    cookware_words = [\"aluminum\", \"baking\", \"dish\", \"pan\", \"pot\", \"saucepan\", \"roasting\", \"casserole\", \"frying\", \"wok\"]\n    cookware_words = [word for word in cookware_words if word.lower() in category.lower()]\n   "}
{"cat": "containers", "slot": "generalization", "value": "cooking utensil", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are cooking utensil. \n        Output: ", "result": "\n        pot, pan, kettle, wok, frying pan, saucepan, Dutch oven, stockpot, skillet, casserole.\n    \"\"\"\n    category = \"containers\"\n    cooking_utensils = [\"pot\", \"pan\", \"kettle\", \"wok\", \"frying pan\", \"saucepan\", \"Dutch oven\", \"stockpot\", \"skillet\", \"casserole\"]\n    words = [word for word in cooking_utensils if word.startswith(category)]"}
{"cat": "containers", "slot": "generalization", "value": "unit of measurement", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are unit of measurement. \n        Output: ", "result": "10 words that belong to the category and satisfy the condition. \n        \"\"\"\n        words = []\n        for word in Category.objects.all():\n            if word.category == \"containers\" and word.unit_of_measurement:\n                words.append(word.name)\n        return \", \".join(words)\n\n    def get_category_counts(self):\n        category_counts = {}\n        for word in Category.objects.all():\n            if word.category in category_counts:\n                category_counts[word.category"}
{"cat": "containers", "slot": "generalization", "value": "whole", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are whole. \n        Output: ", "result": "\n        box, can, jar, bottle, container, tank, barrel, drum, carton, case.\n    \"\"\"\n    category = \"containers\"\n    condition = \"are whole\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: containers. \n        Output: box, can, jar"}
{"cat": "containers", "slot": "generalization", "value": "construction", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are construction. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in container:\n            if \"construction\" in word:\n                words.append(word)\n        print(\", \".join(words))\n```"}
{"cat": "containers", "slot": "generalization", "value": "parcel", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are parcel. \n        Output: ", "result": "\n```\ncontainer,shipping,parcel,cargo,box,packaging,luggage,envelope,package,carton\n```\nExplanation: The word \"parcel\" satisfies the condition \"are parcel\" and belongs to the category \"containers\". Therefore, the output should be \"container,shipping,parcel,cargo,box,packaging,luggage,envelope,package,carton\"."}
{"cat": "containers", "slot": "generalization", "value": "kitchen utensil", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are kitchen utensil. \n        Output: ", "result": "\n        knife, spoon, fork, plate, bowl, cup, spatula, whisk, slotted spoon, colander \n    \"\"\"\n    category = \"containers\"\n    kitchen_utensils = [\"knife\", \"spoon\", \"fork\", \"plate\", \"bowl\", \"cup\", \"spatula\", \"whisk\", \"slotted spoon\", \"colander\"]\n    satisfied_words = [word for word in kitchen_utensils if word.lower() in category.lower()]\n    return \", \".join(s"}
{"cat": "containers", "slot": "generalization", "value": "utensil", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are utensil. \n        Output: ", "result": "\n            fork, spoon, knife, bowl, plate, cup, saucer, spatula, ladle, tongs.\n    \"\"\"\n    category = \"containers\"\n    condition = \"are utensil\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"containers\", \"are utensil\"))  # should print \"fork, spoon, knife, bowl, plate, cup, saucer, spatula, ladle, tong"}
{"cat": "containers", "slot": "generalization", "value": "mass unit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are mass unit. \n        Output: ", "result": "5.0, 10.0, 20.0, 50.0, 100.0, 200.0, 500.0, 1000.0, 2000.0, 5000.0, 10000.0\n    \"\"\"\n    words = []\n    for i in range(1, 11):\n        for j in range(1, 101):\n            if category == \"containers\" and value.is_integer() and"}
{"cat": "containers", "slot": "generalization", "value": "passage", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are passage. \n        Output: ", "result": "\n        box, bottle, can, jar, pot, pouch, sack, tube, vial.\n    \"\"\"\n    category = \"containers\"\n    condition = \"are passage\"\n    words = []\n    for word in text.split():\n        if word.lower() in PASSAGE_WORDS:\n            if word.lower() in CONTAINER_WORDS:\n                words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n```\nExample"}
{"cat": "containers", "slot": "generalization", "value": "food product", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are food product. \n        Output: ", "result": "\n            1. Can\n            2. Jar\n            3. Bottle\n            4. Tin\n            5. Box\n            6. Cans\n            7. Jars\n            8. Bottles\n            9. Tins\n            10. Boxes\n        \"\"\"\n        food_containers = [\n            \"Can\",\n            \"Jar\",\n            \"Bottle\",\n            \"Tin\",\n            \"Box\",\n            \"Cans\",\n            \"Jars\",\n            \"Bottles\",\n            \"Tins\",\n           "}
{"cat": "containers", "slot": "generalization", "value": "nutrient", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are nutrient. \n        Output: ", "result": "\n        apple, banana, carrot, orange, peach, pear, plum, tomato, watermelon, zucchini\n    \"\"\"\n    words = [\"apple\", \"banana\", \"carrot\", \"orange\", \"peach\", \"pear\", \"plum\", \"tomato\", \"watermelon\", \"zucchini\"]\n    category = \"containers\"\n    condition = \"are nutrient\"\n    filtered_words = [word for word in words if word.lower() == category.lower() and word."}
{"cat": "containers", "slot": "generalization", "value": "tubing", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are tubing. \n        Output: ", "result": "\n```\ntubing,container,hose,pipe,barrel,drum,tank,vessel,cylinder,can\n```\nExplanation: The words `tubing`, `container`, `hose`, `pipe`, `barrel`, `drum`, `tank`, `vessel`, `cylinder`, and `can` all belong to the category of `containers` and satisfy the condition of being `tubing`.\n```"}
{"cat": "containers", "slot": "generalization", "value": "food", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are food. \n        Output: ", "result": "\n        box, can, jar, bottle, pot, pan, plate, bowl, cup, tray\n```\n\n```\nDesired output: \n1. box\n2. can\n3. jar\n4. bottle\n5. pot\n6. pan\n7. plate\n8. bowl\n9. cup\n10. tray\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n       "}
{"cat": "containers", "slot": "generalization", "value": "supporting structure", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are supporting structure. \n        Output: ", "result": "\n        box, can, jar, bottle, tank, crate, barrel, drum, tube, vial\n    \"\"\"\n    category = \"containers\"\n    condition = \"are supporting structure\"\n    words = []\n    for word in text.split():\n        if word.lower() in category_words[category] and word.lower() in condition_words[condition]:\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n```\nExample usage:\n"}
{"cat": "containers", "slot": "generalization", "value": "sheaf", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are sheaf. \n        Output: ", "result": "\n        box, can, jar, bottle, pot, pail, bag, sack, container\n```\n\n```\nDesired output: \nbox, can, jar, bottle, pot, pail, bag, sack, container\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: mammals. \n        Condition: have four legs. \n        Output: \n        dog, cat, horse, cow,"}
{"cat": "containers", "slot": "generalization", "value": "meal", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are meal. \n        Output: ", "result": "\n        box, bag, can, jar, tray, bowl, plate, cup, spoon, fork.\n    \"\"\"\n    category = \"containers\"\n    condition = \"are meal\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\n# Test the function\nprint(get_words(\"containers\", \"are meal\"))\n```\nOutput:\nbox, bag, can, jar, tray, bowl, plate, cup, spoon, fork.\n```"}
{"cat": "containers", "slot": "generalization", "value": "package", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are package. \n        Output: ", "result": "\n```\npackage, container, shipping, box, carton, crate, barrel, sack, pallet\n```\nExplanation:\nThe words that belong to the category \"containers\" and satisfy the condition \"are package\" are:\npackage, container, shipping, box, carton, crate, barrel, sack, pallet.\n```"}
{"cat": "containers", "slot": "generalization", "value": "framework", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are framework. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in container_words:\n            if word.startswith(\"framework\"):\n                words.append(word)\n        return words\n\n    @staticmethod\n    def get_container_words_with_framework():\n        \"\"\"\n        \n        \"\"\"\n        words = []\n       "}
{"cat": "containers", "slot": "generalization", "value": "tube", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are tube. \n        Output: ", "result": "\n        can, bottle, jar, tube, container, vial, capsule, syringe, ampoule, bottle. \n    \"\"\"\n    category = \"containers\"\n    condition = \"are tube\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: containers. \n"}
{"cat": "containers", "slot": "generalization", "value": "conduit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are conduit. \n        Output: ", "result": "\n```\nconduit, pipe, hose, tube, channel, duct, culvert, flume, aqueduct, tunnel\n```\n\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: fruits. \n        Condition: are citrus. \n        Output: \n```\norange, lemon, lime, grapefruit, tangerine, clementine, mandarin, pomelo, bergamot"}
{"cat": "containers", "slot": "generalization", "value": "structure", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are structure. \n        Output: ", "result": "\n        box, can, jar, bottle, container, tank, barrel, drum, vial, capsule.\n    \"\"\"\n    category = \"containers\"\n    condition = \"are structure\"\n    words = get_words(category, condition)\n    return \", \".join(words)\n\ndef get_words_in_category(category):\n    \"\"\"\n    Given a category, return a list of words that belong to that category.\n        Desired output: comma separated list of words. \n        Category: containers. \n        Output: box, can,"}
{"cat": "containers", "slot": "generalization", "value": "avoirdupois unit", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are avoirdupois unit. \n        Output: ", "result": "10, 20, 30, 40, 50, 60, 70, 80, 90, 100\n    \"\"\"\n    words = []\n    for i in range(1, 11):\n        for j in range(i, 11):\n            if j % 2 == 0:\n                words.append(f\"{i}g\")\n            else:\n                words.append(f\"{i}kg\")\n    return \", \".join(words)\n\nprint(get"}
{"cat": "containers", "slot": "generalization", "value": "bundle", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are bundle. \n        Output: ", "result": "\n        \"\"\"\n        words = []\n        for word in container.split(\",\"):\n            if \"bundle\" in word:\n                words.append(word.replace(\"bundle\", \"\"))\n        print(\", \".join(words))\n```\nExplanation:\n\n1. First, we define a function `get_words_in_category(category, condition)` that takes two arguments: `category` and `condition`.\n2. Inside the function, we use a for loop to iterate over all the words in the container string.\n3. For each word, we check if it satisfies"}
{"cat": "containers", "slot": "shape", "value": "shaped", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be shaped. \n        Output: ", "result": "\n        box, can, cup, jar, jug, pot, pail, pitcher, vase.\n    \"\"\"\n    category = \"containers\"\n    words = []\n    for word in text.split():\n        if re.match(r\"\\b(can|cup|jar|jug|pot|pail|pitcher|vase)\\b\", word, re.IGNORECASE):\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n"}
{"cat": "containers", "slot": "efficiency", "value": "plastic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be plastic. \n        Output: ", "result": "\n        - container\n        - plastic\n        - bottle\n        - jar\n        - can\n        - box\n        - bag\n        - pouch\n        - tube\n        - wrapper\n        \"\"\"\n    words = [\"container\", \"plastic\", \"bottle\", \"jar\", \"can\", \"box\", \"bag\", \"pouch\", \"tube\", \"wrapper\"]\n    if category == \"containers\" and condition == \"can be plastic\":\n        return \", \".join(words)\n    else:\n        return words\n\n# Example usage\n"}
{"cat": "containers", "slot": "material", "value": "plastic", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be made of plastic. \n        Output: ", "result": "\n        - bottle\n        - cup\n        - jar\n        - container\n        - box\n        - bag\n        - tray\n        - wrapper\n        - liner\n        - pouch\n    \"\"\"\n    plastic_container_words = [\n        \"bottle\",\n        \"cup\",\n        \"jar\",\n        \"container\",\n        \"box\",\n        \"bag\",\n        \"tray\",\n        \"wrapper\",\n        \"liner\",\n        \"pouch\"\n    ]\n    return \", \".join(plastic_container_words"}
{"cat": "containers", "slot": "shape", "value": "shaped", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: can be shaped. \n        Output: ", "result": "\n        box, can, cup, jar, jug, pot, pail, pitcher, vase.\n    \"\"\"\n    category = \"containers\"\n    words = []\n    for word in text.split():\n        if re.match(r\"\\b(can|cup|jar|jug|pot|pail|pitcher|vase)\\b\", word, re.IGNORECASE):\n            words.append(word)\n    if words:\n        print(\", \".join(words))\n    else:\n        print(\"No words found.\")\n\n"}
{"cat": "containers", "slot": "content", "value": "reusable", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: contain reusables. \n        Output: ", "result": "\n        - container\n        - reusable\n        - recyclable\n        - compostable\n        - refillable\n        - reusablebag\n        - refillablebottle\n        - reusablecup\n        - reusablewaterbottle\n        - reusablestraw\n        \"\"\"\n        reusables = [\"container\", \"reusable\", \"recyclable\", \"compostable\", \"refillable\", \"reusablebag\", \"refillablebottle\", \"reusablecup\", \"reusablewaterbottle\", \"reusablestraw"}
{"cat": "containers", "slot": "generalization", "value": "bag", "prompt": "Provide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: containers. \n        Condition: are bag. \n        Output: ", "result": "\n```\nbag, box, can, container, crate, drum, jar, sack, tank\n```\nExplanation:\nThe words that belong to the category \"containers\" and satisfy the condition \"are bag\" are:\nbag, box, can, container, crate, drum, jar, sack, tank.\n```\nProvide a list of 10 words that belong to the category and satisfy the condition. \n        Desired output: comma separated list of words. \n        Category: animals. \n        Condition: have wings. \n       "}
